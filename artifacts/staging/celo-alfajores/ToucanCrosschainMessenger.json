{
  "address": "0xf9a49993DF24366AB8EDf617C080ca36a4ADb86e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "abacusConnectionManager",
          "type": "address"
        }
      ],
      "name": "AbacusConnectionManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "originDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "toDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requesthash",
          "type": "bytes32"
        }
      ],
      "name": "BridgeRequestReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "originDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "toDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requesthash",
          "type": "bytes32"
        }
      ],
      "name": "BridgeRequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "interchainGasPaymaster",
          "type": "address"
        }
      ],
      "name": "InterchainGasPaymasterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "router",
          "type": "bytes32"
        }
      ],
      "name": "RemoteRouterEnrolled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "homeTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "remoteTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domainId",
          "type": "uint32"
        }
      ],
      "name": "TokenPairAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712DomainHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIMER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_RELEASE_CANDIDATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "abacusConnectionManager",
      "outputs": [
        {
          "internalType": "contract IAbacusConnectionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_homeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_remoteToken",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "addTokenPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_homeTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_remoteTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "batchAddTokenPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_router",
          "type": "bytes32"
        }
      ],
      "name": "enrollRemoteRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_abacusConnectionManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interchainGasPaymaster",
      "outputs": [
        {
          "internalType": "contract IInterchainGasPaymaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "remoteTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timer",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isReverted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum ToucanCrosschainMessengerStorageV1.BridgeRequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "internalType": "enum ToucanCrosschainMessengerStorageV1.MessageTypes",
          "name": "messageType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "routers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "sendMessageWithRecipient",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_abacusConnectionManager",
          "type": "address"
        }
      ],
      "name": "setAbacusConnectionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_interchainGasPaymaster",
          "type": "address"
        }
      ],
      "name": "setInterchainGasPaymaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "4517f6d89dc2a9e0cd051cafae9b6226",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"abacusConnectionManager\",\"type\":\"address\"}],\"name\":\"AbacusConnectionManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"toDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requesthash\",\"type\":\"bytes32\"}],\"name\":\"BridgeRequestReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"toDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requesthash\",\"type\":\"bytes32\"}],\"name\":\"BridgeRequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"interchainGasPaymaster\",\"type\":\"address\"}],\"name\":\"InterchainGasPaymasterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"router\",\"type\":\"bytes32\"}],\"name\":\"RemoteRouterEnrolled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"homeTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remoteTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domainId\",\"type\":\"uint32\"}],\"name\":\"TokenPairAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712DomainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_RELEASE_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"abacusConnectionManager\",\"outputs\":[{\"internalType\":\"contract IAbacusConnectionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_homeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"addTokenPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_homeTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_remoteTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"batchAddTokenPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_router\",\"type\":\"bytes32\"}],\"name\":\"enrollRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_abacusConnectionManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interchainGasPaymaster\",\"outputs\":[{\"internalType\":\"contract IInterchainGasPaymaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"remoteTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isReverted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum ToucanCrosschainMessengerStorageV1.BridgeRequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"internalType\":\"enum ToucanCrosschainMessengerStorageV1.MessageTypes\",\"name\":\"messageType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"routers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"sendMessageWithRecipient\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_abacusConnectionManager\",\"type\":\"address\"}],\"name\":\"setAbacusConnectionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_interchainGasPaymaster\",\"type\":\"address\"}],\"name\":\"setInterchainGasPaymaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTokenPair(address,address,uint32)\":{\"details\":\"Called by owner to add or map home token address to remote token address. Changing the remote token address can only be done within a 7 day period, after first setting it.\",\"params\":{\"_domain\":\"domain ID of the remote chain whose token is being mapped\",\"_homeToken\":\"token address on home chain\",\"_remoteToken\":\"token address on remote chain\"}},\"batchAddTokenPair(address[],address[],uint32)\":{\"details\":\"Called by owner to add or map home token addresses to remote token addresses.\",\"params\":{\"_domain\":\"domain ID of the remote chain whose tokens are being mapped\",\"_homeTokens\":\"token addresses on home chain\",\"_remoteTokens\":\"token addresses on remote chain\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"enrollRemoteRouter(uint32,bytes32)\":{\"params\":{\"_domain\":\"The domain of the remote Application Router\",\"_router\":\"The address of the remote Application Router\"}},\"handle(uint32,bytes32,bytes)\":{\"params\":{\"_message\":\"The message\",\"_origin\":\"The origin domain\",\"_sender\":\"The sender address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"when invoked by owner it Pauses the cross chain bridging logic to interact with abacus\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendMessage(uint32,address,uint256)\":{\"params\":{\"_amount\":\"the amount of tokens to be bridged\",\"_destinationDomain\":\"The domain to send the message to\",\"_token\":\"address of token to be bridged\"}},\"sendMessageWithRecipient(uint32,address,uint256,address)\":{\"params\":{\"_amount\":\"the amount of tokens to be bridged\",\"_destinationDomain\":\"The domain to send the message to\",\"_recipient\":\"the recipient of tokens in the destination domain\",\"_token\":\"address of token to be bridged\"}},\"setAbacusConnectionManager(address)\":{\"params\":{\"_abacusConnectionManager\":\"The address of the AbacusConnectionManager contract.\"}},\"setInterchainGasPaymaster(address)\":{\"params\":{\"_interchainGasPaymaster\":\"The address of the InterchainGasPaymaster contract.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"when invoked by owner it unpauses the cross chain bridging logic to interact with abacus\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AbacusConnectionManagerSet(address)\":{\"notice\":\"Emitted when a new abacusConnectionManager is set.\"},\"InterchainGasPaymasterSet(address)\":{\"notice\":\"Emitted when a new Interchain Gas Paymaster is set.\"},\"RemoteRouterEnrolled(uint32,bytes32)\":{\"notice\":\"Emitted when a router is set.\"}},\"kind\":\"user\",\"methods\":{\"addTokenPair(address,address,uint32)\":{\"notice\":\"Adds new token pair than can be bridged\"},\"batchAddTokenPair(address[],address[],uint32)\":{\"notice\":\"Adds a new set of token pairs than can be bridged\"},\"enrollRemoteRouter(uint32,bytes32)\":{\"notice\":\"Register the address of a Router contract for the same Application on a remote chain\"},\"handle(uint32,bytes32,bytes)\":{\"notice\":\"Handles an incoming message\"},\"pause()\":{\"notice\":\"Pauses the cross chain bridge\"},\"remoteTokens(address,uint32)\":{\"notice\":\"remoteTokens maps a token (address) in the source chain to the domain id of the remote chain (uint32) to info about the token in the remote chain (RemoteTokenInformation)\"},\"sendMessage(uint32,address,uint256)\":{\"notice\":\"Send a message of \\\"Type A\\\" to a remote xApp Router via Abacus; this message is called to take some action in the cross-chain context. The recipient of the tokens in the destination domain is the same as msg.sender here.\"},\"sendMessageWithRecipient(uint32,address,uint256,address)\":{\"notice\":\"Send a message of \\\"Type A\\\" to a remote xApp Router via Abacus; this message is called to take some action in the cross-chain context\"},\"setAbacusConnectionManager(address)\":{\"notice\":\"Sets the address of the application's AbacusConnectionManager.\"},\"setInterchainGasPaymaster(address)\":{\"notice\":\"Sets the address of the application's InterchainGasPaymaster.\"},\"unpause()\":{\"notice\":\"Unpauses the cross chain bridge\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/cross-chain/ToucanCrosschainMessenger.sol\":\"ToucanCrosschainMessenger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@abacus-network/app/contracts/AbacusConnectionClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {IInterchainGasPaymaster} from \\\"@abacus-network/core/interfaces/IInterchainGasPaymaster.sol\\\";\\nimport {IOutbox} from \\\"@abacus-network/core/interfaces/IOutbox.sol\\\";\\nimport {IAbacusConnectionManager} from \\\"@abacus-network/core/interfaces/IAbacusConnectionManager.sol\\\";\\n\\n// ============ External Imports ============\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract AbacusConnectionClient is OwnableUpgradeable {\\n    // ============ Mutable Storage ============\\n\\n    IAbacusConnectionManager public abacusConnectionManager;\\n    // Interchain Gas Paymaster contract. The relayer associated with this contract\\n    // must be willing to relay messages dispatched from the current Outbox contract,\\n    // otherwise payments made to the paymaster will not result in relayed messages.\\n    IInterchainGasPaymaster public interchainGasPaymaster;\\n\\n    uint256[48] private __GAP; // gap for upgrade safety\\n\\n    // ============ Events ============\\n\\n    /**\\n     * @notice Emitted when a new abacusConnectionManager is set.\\n     * @param abacusConnectionManager The address of the abacusConnectionManager contract\\n     */\\n    event AbacusConnectionManagerSet(address indexed abacusConnectionManager);\\n\\n    /**\\n     * @notice Emitted when a new Interchain Gas Paymaster is set.\\n     * @param interchainGasPaymaster The address of the Interchain Gas Paymaster.\\n     */\\n    event InterchainGasPaymasterSet(address indexed interchainGasPaymaster);\\n\\n    // ============ Modifiers ============\\n\\n    /**\\n     * @notice Only accept messages from an Abacus Inbox contract\\n     */\\n    modifier onlyInbox() {\\n        require(_isInbox(msg.sender), \\\"!inbox\\\");\\n        _;\\n    }\\n\\n    // ======== Initializer =========\\n\\n    function __AbacusConnectionClient_initialize(\\n        address _abacusConnectionManager\\n    ) internal onlyInitializing {\\n        _setAbacusConnectionManager(_abacusConnectionManager);\\n        __Ownable_init();\\n    }\\n\\n    function __AbacusConnectionClient_initialize(\\n        address _abacusConnectionManager,\\n        address _interchainGasPaymaster\\n    ) internal onlyInitializing {\\n        _setInterchainGasPaymaster(_interchainGasPaymaster);\\n        __AbacusConnectionClient_initialize(_abacusConnectionManager);\\n    }\\n\\n    // ============ External functions ============\\n\\n    /**\\n     * @notice Sets the address of the application's AbacusConnectionManager.\\n     * @param _abacusConnectionManager The address of the AbacusConnectionManager contract.\\n     */\\n    function setAbacusConnectionManager(address _abacusConnectionManager)\\n        external\\n        virtual\\n        onlyOwner\\n    {\\n        _setAbacusConnectionManager(_abacusConnectionManager);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the application's InterchainGasPaymaster.\\n     * @param _interchainGasPaymaster The address of the InterchainGasPaymaster contract.\\n     */\\n    function setInterchainGasPaymaster(address _interchainGasPaymaster)\\n        external\\n        virtual\\n        onlyOwner\\n    {\\n        _setInterchainGasPaymaster(_interchainGasPaymaster);\\n    }\\n\\n    // ============ Internal functions ============\\n\\n    /**\\n     * @notice Sets the address of the application's InterchainGasPaymaster.\\n     * @param _interchainGasPaymaster The address of the InterchainGasPaymaster contract.\\n     */\\n    function _setInterchainGasPaymaster(address _interchainGasPaymaster)\\n        internal\\n    {\\n        interchainGasPaymaster = IInterchainGasPaymaster(\\n            _interchainGasPaymaster\\n        );\\n        emit InterchainGasPaymasterSet(_interchainGasPaymaster);\\n    }\\n\\n    /**\\n     * @notice Modify the contract the Application uses to validate Inbox contracts\\n     * @param _abacusConnectionManager The address of the abacusConnectionManager contract\\n     */\\n    function _setAbacusConnectionManager(address _abacusConnectionManager)\\n        internal\\n    {\\n        abacusConnectionManager = IAbacusConnectionManager(\\n            _abacusConnectionManager\\n        );\\n        emit AbacusConnectionManagerSet(_abacusConnectionManager);\\n    }\\n\\n    /**\\n     * @notice Get the local Outbox contract from the abacusConnectionManager\\n     * @return The local Outbox contract\\n     */\\n    function _outbox() internal view returns (IOutbox) {\\n        return abacusConnectionManager.outbox();\\n    }\\n\\n    /**\\n     * @notice Determine whether _potentialInbox is an enrolled Inbox from the abacusConnectionManager\\n     * @return True if _potentialInbox is an enrolled Inbox\\n     */\\n    function _isInbox(address _potentialInbox) internal view returns (bool) {\\n        return abacusConnectionManager.isInbox(_potentialInbox);\\n    }\\n\\n    /**\\n     * @notice Get the local domain from the abacusConnectionManager\\n     * @return The local domain\\n     */\\n    function _localDomain() internal view virtual returns (uint32) {\\n        return abacusConnectionManager.localDomain();\\n    }\\n}\\n\",\"keccak256\":\"0xcc0054361eca67deb0aec47a982fc6084f47ff8096cdd9056041190e6fc52aa8\",\"license\":\"MIT OR Apache-2.0\"},\"@abacus-network/app/contracts/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {AbacusConnectionClient} from \\\"./AbacusConnectionClient.sol\\\";\\nimport {IAbacusConnectionManager} from \\\"@abacus-network/core/interfaces/IAbacusConnectionManager.sol\\\";\\nimport {IInterchainGasPaymaster} from \\\"@abacus-network/core/interfaces/IInterchainGasPaymaster.sol\\\";\\nimport {IMessageRecipient} from \\\"@abacus-network/core/interfaces/IMessageRecipient.sol\\\";\\nimport {IOutbox} from \\\"@abacus-network/core/interfaces/IOutbox.sol\\\";\\n\\nabstract contract Router is AbacusConnectionClient, IMessageRecipient {\\n    // ============ Mutable Storage ============\\n\\n    mapping(uint32 => bytes32) public routers;\\n    uint256[49] private __GAP; // gap for upgrade safety\\n\\n    // ============ Events ============\\n\\n    /**\\n     * @notice Emitted when a router is set.\\n     * @param domain The domain of the new router\\n     * @param router The address of the new router\\n     */\\n    event RemoteRouterEnrolled(uint32 indexed domain, bytes32 indexed router);\\n\\n    // ============ Modifiers ============\\n    /**\\n     * @notice Only accept messages from a remote Router contract\\n     * @param _origin The domain the message is coming from\\n     * @param _router The address the message is coming from\\n     */\\n    modifier onlyRemoteRouter(uint32 _origin, bytes32 _router) {\\n        require(_isRemoteRouter(_origin, _router), \\\"!router\\\");\\n        _;\\n    }\\n\\n    // ======== Initializer =========\\n    function __Router_initialize(address _abacusConnectionManager)\\n        internal\\n        onlyInitializing\\n    {\\n        __AbacusConnectionClient_initialize(_abacusConnectionManager);\\n    }\\n\\n    function __Router_initialize(\\n        address _abacusConnectionManager,\\n        address _interchainGasPaymaster\\n    ) internal onlyInitializing {\\n        __AbacusConnectionClient_initialize(\\n            _abacusConnectionManager,\\n            _interchainGasPaymaster\\n        );\\n    }\\n\\n    // ============ External functions ============\\n\\n    /**\\n     * @notice Register the address of a Router contract for the same Application on a remote chain\\n     * @param _domain The domain of the remote Application Router\\n     * @param _router The address of the remote Application Router\\n     */\\n    function enrollRemoteRouter(uint32 _domain, bytes32 _router)\\n        external\\n        virtual\\n        onlyOwner\\n    {\\n        _enrollRemoteRouter(_domain, _router);\\n    }\\n\\n    /**\\n     * @notice Handles an incoming message\\n     * @param _origin The origin domain\\n     * @param _sender The sender address\\n     * @param _message The message\\n     */\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes memory _message\\n    ) external virtual override onlyInbox onlyRemoteRouter(_origin, _sender) {\\n        // TODO: callbacks on success/failure\\n        _handle(_origin, _sender, _message);\\n    }\\n\\n    // ============ Virtual functions ============\\n    function _handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes memory _message\\n    ) internal virtual;\\n\\n    // ============ Internal functions ============\\n\\n    /**\\n     * @notice Set the router for a given domain\\n     * @param _domain The domain\\n     * @param _router The new router\\n     */\\n    function _enrollRemoteRouter(uint32 _domain, bytes32 _router) internal {\\n        routers[_domain] = _router;\\n        emit RemoteRouterEnrolled(_domain, _router);\\n    }\\n\\n    /**\\n     * @notice Return true if the given domain / router is the address of a remote Application Router\\n     * @param _domain The domain of the potential remote Application Router\\n     * @param _router The address of the potential remote Application Router\\n     */\\n    function _isRemoteRouter(uint32 _domain, bytes32 _router)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return routers[_domain] == _router;\\n    }\\n\\n    /**\\n     * @notice Assert that the given domain has a Application Router registered and return its address\\n     * @param _domain The domain of the chain for which to get the Application Router\\n     * @return _router The address of the remote Application Router on _domain\\n     */\\n    function _mustHaveRemoteRouter(uint32 _domain)\\n        internal\\n        view\\n        returns (bytes32 _router)\\n    {\\n        _router = routers[_domain];\\n        require(_router != bytes32(0), \\\"!router\\\");\\n    }\\n\\n    /**\\n     * @notice Dispatches a message to an enrolled router via the local router's Outbox.\\n     * @notice Does not pay interchain gas.\\n     * @dev Reverts if there is no enrolled router for _destinationDomain.\\n     * @param _destinationDomain The domain of the chain to which to send the message.\\n     * @param _msg The message to dispatch.\\n     */\\n    function _dispatch(uint32 _destinationDomain, bytes memory _msg)\\n        internal\\n        returns (uint256)\\n    {\\n        return _dispatch(_outbox(), _destinationDomain, _msg);\\n    }\\n\\n    /**\\n     * @notice Dispatches a message to an enrolled router via the local router's Outbox\\n     * and pays for it to be relayed to the destination.\\n     * @dev Reverts if there is no enrolled router for _destinationDomain.\\n     * @param _destinationDomain The domain of the chain to which to send the message.\\n     * @param _msg The message to dispatch.\\n     * @param _gasPayment The amount of native tokens to pay for the message to be relayed.\\n     */\\n    function _dispatchWithGas(\\n        uint32 _destinationDomain,\\n        bytes memory _msg,\\n        uint256 _gasPayment\\n    ) internal {\\n        IOutbox _outbox = _outbox();\\n        uint256 _leafIndex = _dispatch(_outbox, _destinationDomain, _msg);\\n        if (_gasPayment > 0) {\\n            interchainGasPaymaster.payGasFor{value: _gasPayment}(\\n                address(_outbox),\\n                _leafIndex,\\n                _destinationDomain\\n            );\\n        }\\n    }\\n\\n    // ============ Private functions ============\\n\\n    /**\\n     * @notice Dispatches a message to an enrolled router via the provided Outbox.\\n     * @dev Does not pay interchain gas.\\n     * @dev Reverts if there is no enrolled router for _destinationDomain.\\n     * @param _outbox The outbox contract to dispatch the message through.\\n     * @param _destinationDomain The domain of the chain to which to send the message.\\n     * @param _msg The message to dispatch.\\n     */\\n    function _dispatch(\\n        IOutbox _outbox,\\n        uint32 _destinationDomain,\\n        bytes memory _msg\\n    ) private returns (uint256) {\\n        // Ensure that destination chain has an enrolled router.\\n        bytes32 _router = _mustHaveRemoteRouter(_destinationDomain);\\n        return _outbox.dispatch(_destinationDomain, _router, _msg);\\n    }\\n}\\n\",\"keccak256\":\"0x8adc5ec9dfb3a51aeb715d7077085afafe439c706ba7ccd13d7ed0aa033ab47d\",\"license\":\"MIT OR Apache-2.0\"},\"@abacus-network/core/interfaces/IAbacusConnectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\nimport {IOutbox} from \\\"./IOutbox.sol\\\";\\n\\ninterface IAbacusConnectionManager {\\n    function outbox() external view returns (IOutbox);\\n\\n    function isInbox(address _inbox) external view returns (bool);\\n\\n    function localDomain() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0xa4db171637a95cc36bf8630fb9985e4dbbf9ee9c1cfe33f23e2cc95fac79b5b2\",\"license\":\"MIT OR Apache-2.0\"},\"@abacus-network/core/interfaces/IInterchainGasPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n/**\\n * @title IInterchainGasPaymaster\\n * @notice Manages payments on a source chain to cover gas costs of relaying\\n * messages to destination chains.\\n */\\ninterface IInterchainGasPaymaster {\\n    function payGasFor(\\n        address _outbox,\\n        uint256 _leafIndex,\\n        uint32 _destinationDomain\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x55a64141b9399b3dfee1a7267138c35b6cfd80400811af0da64277571421f979\",\"license\":\"MIT OR Apache-2.0\"},\"@abacus-network/core/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IMailbox {\\n    function localDomain() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x9ffd4a8c9fbd87e05b4df3c614c5cc0d8f6d282d9695da67a710fcc999f0b28c\",\"license\":\"MIT OR Apache-2.0\"},\"@abacus-network/core/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IMessageRecipient {\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) external;\\n}\\n\",\"keccak256\":\"0x250fabee11ab22fc3cb14ba0ff86410f681e621c43590c24ecbcf48fea8c7e70\",\"license\":\"MIT OR Apache-2.0\"},\"@abacus-network/core/interfaces/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\nimport {IMailbox} from \\\"./IMailbox.sol\\\";\\n\\ninterface IOutbox is IMailbox {\\n    function dispatch(\\n        uint32 _destinationDomain,\\n        bytes32 _recipientAddress,\\n        bytes calldata _messageBody\\n    ) external returns (uint256);\\n\\n    function cacheCheckpoint() external;\\n\\n    function latestCheckpoint() external view returns (bytes32, uint256);\\n\\n    function count() external returns (uint256);\\n\\n    function fail() external;\\n\\n    function cachedCheckpoints(bytes32) external view returns (uint256);\\n\\n    function latestCachedCheckpoint()\\n        external\\n        view\\n        returns (bytes32 root, uint256 index);\\n}\\n\",\"keccak256\":\"0x65ebdb385cc14f4a3c0571131a3a43a8f26e90c92b70d6f00a2e2dbf6a9d2380\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"contracts/cross-chain/ToucanCrosschainMessenger.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {Router} from '@abacus-network/app/contracts/Router.sol';\\nimport {PausableUpgradeable} from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport {UUPSUpgradeable} from '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\n\\nimport './ToucanCrosschainMessengerStorage.sol';\\nimport './interfaces/IBridgeableToken.sol';\\n\\ncontract ToucanCrosschainMessenger is\\n    PausableUpgradeable,\\n    Router,\\n    UUPSUpgradeable,\\n    ToucanCrosschainMessengerStorage\\n{\\n    // ----------------------------------------\\n    //      Constants\\n    // ----------------------------------------\\n\\n    string public constant VERSION = '1.1.0';\\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\\n    uint256 public constant TIMER = 1209600; // 14 Days\\n    bytes32 public constant EIP712DomainHash =\\n        keccak256('EIP712Domain(string name,string version,uint256 chainId)');\\n\\n    // ----------------------------------------\\n    //      Events\\n    // ----------------------------------------\\n\\n    event BridgeRequestReceived(\\n        uint32 indexed originDomain,\\n        uint32 toDomain,\\n        address indexed bridger,\\n        address recipient,\\n        address indexed token,\\n        uint256 amount,\\n        bytes32 requesthash\\n    );\\n    event BridgeRequestSent(\\n        uint32 originDomain,\\n        uint32 indexed toDomain,\\n        address indexed bridger,\\n        address recipient,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 nonce,\\n        bytes32 requesthash\\n    );\\n\\n    event TokenPairAdded(\\n        address indexed homeTokenAddress,\\n        address indexed remoteTokenAddress,\\n        uint32 domainId\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ----------------------------------------\\n    //      Upgradable related functions\\n    // ----------------------------------------\\n\\n    function initialize(address _abacusConnectionManager)\\n        external\\n        virtual\\n        initializer\\n    {\\n        __Router_initialize(_abacusConnectionManager);\\n        __Pausable_init();\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712DomainHash,\\n                    'ToucanCrosschainMessenger',\\n                    VERSION,\\n                    block.chainid\\n                )\\n            );\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        virtual\\n        override\\n        onlyOwner\\n    {}\\n\\n    // ----------------------------------------\\n    //      Admin functions\\n    // ----------------------------------------\\n\\n    /// @notice Adds a new set of token pairs than can be bridged\\n    /// @dev Called by owner to add or map home token addresses to remote token addresses.\\n    /// @param _homeTokens token addresses on home chain\\n    /// @param _remoteTokens token addresses on remote chain\\n    /// @param _domain domain ID of the remote chain whose tokens are being mapped\\n    function batchAddTokenPair(\\n        address[] calldata _homeTokens,\\n        address[] calldata _remoteTokens,\\n        uint32 _domain\\n    ) external onlyOwner {\\n        uint256 homeTokensLen = _homeTokens.length;\\n        require(homeTokensLen == _remoteTokens.length, 'Array length mismatch');\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < homeTokensLen; ++i) {\\n            _addTokenPair(_homeTokens[i], _remoteTokens[i], _domain);\\n        }\\n    }\\n\\n    /// @notice Adds new token pair than can be bridged\\n    /// @dev Called by owner to add or map home token address to remote token address.\\n    /// Changing the remote token address can only be done within a 7 day period, after first\\n    /// setting it.\\n    /// @param _homeToken token address on home chain\\n    /// @param _remoteToken token address on remote chain\\n    /// @param _domain domain ID of the remote chain whose token is being mapped\\n    function addTokenPair(\\n        address _homeToken,\\n        address _remoteToken,\\n        uint32 _domain\\n    ) external onlyOwner {\\n        _addTokenPair(_homeToken, _remoteToken, _domain);\\n    }\\n\\n    function _addTokenPair(\\n        address _homeToken,\\n        address _remoteToken,\\n        uint32 _domain\\n    ) private {\\n        require(\\n            _homeToken != address(0) && _remoteToken != address(0),\\n            '!_homeToken || !_remoteTokens'\\n        );\\n        if (remoteTokens[_homeToken][_domain].timer != 0) {\\n            require(\\n                (block.timestamp - remoteTokens[_homeToken][_domain].timer) <\\n                    TIMER,\\n                'timer expired'\\n            );\\n        }\\n        remoteTokens[_homeToken][_domain] = RemoteTokenInformation(\\n            _remoteToken,\\n            block.timestamp\\n        );\\n        emit TokenPairAdded(_homeToken, _remoteToken, _domain);\\n    }\\n\\n    /// @notice Pauses the cross chain bridge\\n    /// @dev when invoked by owner it Pauses the cross chain bridging logic to interact with abacus\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the cross chain bridge\\n    /// @dev when invoked by owner it unpauses the cross chain bridging logic to interact with abacus\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    // ----------------------------------------\\n    //      Message-handling functions\\n    // ----------------------------------------\\n\\n    /// @notice Receive messages sent via Abacus from other remote Routers;\\n    /// parse the contents of the message and enact the message's effects on the local chain\\n    /// @dev it is internally invoked via handle() which is invoked by Abacus's inbox\\n    /// @param _origin The domain the message is coming from\\n    /// @param _message The message in the form of raw bytes\\n    function _handle(\\n        uint32 _origin,\\n        bytes32, // _sender, // commented out because parameter not used\\n        bytes memory _message\\n    ) internal virtual override whenNotPaused {\\n        // currently only one message type supported, i.e. mint type\\n        (\\n            uint8 messageType,\\n            address bridger,\\n            address recipient,\\n            address token,\\n            uint256 amount,\\n            uint32 toDomain,\\n            bytes32 requestHash\\n        ) = abi.decode(\\n                _message,\\n                (uint8, address, address, address, uint256, uint32, bytes32)\\n            );\\n        require(\\n            requests[requestHash].requestType ==\\n                BridgeRequestType.NOT_REGISTERED,\\n            'Bridge Request Executed'\\n        );\\n        requests[requestHash] = BridgeRequest(\\n            false,\\n            block.timestamp, // timestamp when the bridge request was received\\n            BridgeRequestType.RECEIVED,\\n            MessageTypes(messageType)\\n        );\\n        if (MessageTypes(messageType) == MessageTypes.MINT) {\\n            IBridgeableToken(token).bridgeMint(recipient, amount);\\n            emit BridgeRequestReceived(\\n                _origin,\\n                toDomain,\\n                bridger,\\n                recipient,\\n                token,\\n                amount,\\n                requestHash\\n            );\\n        } else {\\n            revert('Unsupported Operation');\\n        }\\n    }\\n\\n    // ----------------------------------------\\n    //      Message-dispatching functions\\n    // ----------------------------------------\\n\\n    /// @notice Send a message of \\\"Type A\\\" to a remote xApp Router via Abacus;\\n    /// this message is called to take some action in the cross-chain context\\n    /// @param _destinationDomain The domain to send the message to\\n    /// @param _token address of token to be bridged\\n    /// @param _amount the amount of tokens to be bridged\\n    /// @param _recipient the recipient of tokens in the destination domain\\n    function sendMessageWithRecipient(\\n        uint32 _destinationDomain,\\n        address _token,\\n        uint256 _amount,\\n        address _recipient\\n    ) public payable whenNotPaused {\\n        require(\\n            remoteTokens[_token][_destinationDomain].tokenAddress != address(0),\\n            'remote token not mapped'\\n        );\\n        uint256 currentNonce = nonce;\\n        unchecked {\\n            ++currentNonce;\\n        }\\n        nonce = currentNonce;\\n        bytes32 requestHash = _generateRequestHash(\\n            _recipient,\\n            _token,\\n            _amount,\\n            _destinationDomain,\\n            currentNonce\\n        );\\n        // encode a message to send to the remote xApp Router\\n        address remoteToken = remoteTokens[_token][_destinationDomain]\\n            .tokenAddress;\\n        requests[requestHash] = BridgeRequest(\\n            false,\\n            block.timestamp, // timestamp when the bridge request was sent\\n            BridgeRequestType.SENT,\\n            MessageTypes.MINT\\n        );\\n        bytes memory _outboundMessage = abi.encode(\\n            MessageTypes.MINT,\\n            msg.sender,\\n            _recipient,\\n            remoteToken,\\n            _amount,\\n            _destinationDomain,\\n            requestHash\\n        );\\n        // Dispatch Message\\n        // Pay Gas for processing message\\n        // And create a checkpoint so message can be processed\\n        _dispatchWithGas(_destinationDomain, _outboundMessage, msg.value);\\n        IBridgeableToken(_token).bridgeBurn(msg.sender, _amount);\\n        emit BridgeRequestSent(\\n            _localDomain(),\\n            _destinationDomain,\\n            msg.sender,\\n            _recipient,\\n            _token,\\n            _amount,\\n            currentNonce,\\n            requestHash\\n        );\\n    }\\n\\n    /// @notice Send a message of \\\"Type A\\\" to a remote xApp Router via Abacus;\\n    /// this message is called to take some action in the cross-chain context.\\n    /// The recipient of the tokens in the destination domain is the same as\\n    /// msg.sender here.\\n    /// @param _destinationDomain The domain to send the message to\\n    /// @param _token address of token to be bridged\\n    /// @param _amount the amount of tokens to be bridged\\n    function sendMessage(\\n        uint32 _destinationDomain,\\n        address _token,\\n        uint256 _amount\\n    ) external payable {\\n        sendMessageWithRecipient(\\n            _destinationDomain,\\n            _token,\\n            _amount,\\n            msg.sender\\n        );\\n    }\\n\\n    function _generateRequestHash(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint32 _destinationDomain,\\n        uint256 _nonce\\n    ) internal view returns (bytes32 _requestHash) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    DOMAIN_SEPARATOR(),\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _destinationDomain,\\n                    _nonce\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x6380b104077e289c6f9504a4dda5e76ec642a344af102032c40f9ab115578015\",\"license\":\"UNLICENSED\"},\"contracts/cross-chain/ToucanCrosschainMessengerStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earthz\\npragma solidity 0.8.14;\\n\\nstruct RemoteTokenInformation {\\n    /// @notice address of the token in the remote chain\\n    address tokenAddress;\\n    /// @notice timer keeps track of when the token pair\\n    /// was created in order to disallow updates to the\\n    /// pair after a specific amount of time elapses\\n    uint256 timer;\\n}\\n\\n/// @dev Separate storage contract to improve upgrade safety\\nabstract contract ToucanCrosschainMessengerStorageV1 {\\n    enum BridgeRequestType {\\n        NOT_REGISTERED, // 0\\n        SENT, // 1\\n        RECEIVED // 2\\n    }\\n\\n    enum MessageTypes {\\n        MINT\\n    }\\n\\n    struct BridgeRequest {\\n        bool isReverted; // this state is added for future addition of revert functionality\\n        uint256 timestamp;\\n        BridgeRequestType requestType;\\n        MessageTypes messageType;\\n    }\\n\\n    /// @dev nonce is used to serialize requests executed\\n    /// by the source chain in order to avoid duplicates\\n    /// from being processed in the remote chain\\n    uint256 public nonce;\\n    //slither-disable-next-line constable-states\\n    bytes32 private DEPRECATED_DOMAIN_SEPARATOR;\\n    /// @dev requests keeps track of a hash of the request\\n    /// to the request info in order to avoid duplicates\\n    /// from being processed in the remote chain\\n    mapping(bytes32 => BridgeRequest) public requests;\\n    /// @notice remoteTokens maps a token (address) in the source\\n    /// chain to the domain id of the remote chain (uint32)\\n    /// to info about the token in the remote chain (RemoteTokenInformation)\\n    mapping(address => mapping(uint32 => RemoteTokenInformation))\\n        public remoteTokens;\\n}\\n\\nabstract contract ToucanCrosschainMessengerStorage is\\n    ToucanCrosschainMessengerStorageV1\\n{}\\n\",\"keccak256\":\"0x65f6c9408778a5154e6e221efa0ccb167f6b93e32f666e06bd6758fd6bc62d36\",\"license\":\"UNLICENSED\"},\"contracts/cross-chain/interfaces/IBridgeableToken.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IBridgeableToken {\\n    function bridgeMint(address _account, uint256 _amount) external;\\n\\n    function bridgeBurn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x10a316c60790779eb8af38825668f48436981d69f37e18e7f4823131891efa41\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b62000156565b6200003260ff62000035565b50565b60008054610100900460ff1615620000ce578160ff1660011480156200006e57506200006c306200014760201b62000feb1760201c565b155b620000c65760405162461bcd60e51b815260206004820152602e6024820152600080516020620029d183398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106200012d5760405162461bcd60e51b815260206004820152602e6024820152600080516020620029d183398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000bd565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b6080516128436200018e6000396000818161093e0152818161097e01528181610a9701528181610ad70152610b6a01526128436000f3fe6080604052600436106101c25760003560e01c8063715018a6116100f7578063b49c53a711610095578063e32a66cc11610064578063e32a66cc1461054e578063f1bd6f0a14610561578063f2fde38b14610581578063ffa1ad74146105a157600080fd5b8063b49c53a714610483578063bdaca27a146104a3578063c0d5f4471461050e578063c4d66de81461052e57600080fd5b806394eda280116100d157806394eda280146103d15780639a35c359146103f15780639d86698514610411578063affed0e01461046c57600080fd5b8063715018a6146103895780638456cb591461039e5780638da5cb5b146103b357600080fd5b80634f1ef286116101645780635c975abb1161013e5780635c975abb1461030657806367e8e783146103295780636ca0b0d71461034057806370722ced1461035557600080fd5b80634f1ef286146102be57806352d1902d146102d157806356d5d475146102e657600080fd5b80633644e515116101a05780633644e5151461023c5780633659cfe61461025157806339bb4ad9146102715780633f4ba83a146102a957600080fd5b806312b1d780146101c7578063255e0ae4146101e95780632ead72f6146101fc575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611f5e565b6105df565b005b6101e76101f7366004611f8d565b61061e565b34801561020857600080fd5b50610229610217366004611fe0565b60c96020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561024857600080fd5b506102296108c5565b34801561025d57600080fd5b506101e761026c366004611f5e565b610934565b34801561027d57600080fd5b50609854610291906001600160a01b031681565b6040516001600160a01b039091168152602001610233565b3480156102b557600080fd5b506101e7610a10565b6101e76102cc3660046120a0565b610a8d565b3480156102dd57600080fd5b50610229610b5d565b3480156102f257600080fd5b506101e76103013660046120f0565b610c10565b34801561031257600080fd5b5060335460ff166040519015158152602001610233565b34801561033557600080fd5b506102296212750081565b34801561034c57600080fd5b50610229600181565b34801561036157600080fd5b506102297fc2f8787176b8ac6bf7215b4adcc1e069bf4ab82d9ab1df05a57a91d425935b6e81565b34801561039557600080fd5b506101e7610cb2565b3480156103aa57600080fd5b506101e7610ce6565b3480156103bf57600080fd5b506065546001600160a01b0316610291565b3480156103dd57600080fd5b506101e76103ec366004612195565b610d3b565b3480156103fd57600080fd5b50609754610291906001600160a01b031681565b34801561041d57600080fd5b5061045c61042c366004612219565b6101616020526000908152604090208054600182015460029092015460ff91821692918181169161010090041684565b604051610233949392919061225c565b34801561047857600080fd5b5061022961015f5481565b34801561048f57600080fd5b506101e761049e36600461228f565b610e28565b3480156104af57600080fd5b506104ef6104be3660046122bb565b610162602090815260009283526040808420909152908252902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610233565b34801561051a57600080fd5b506101e76105293660046122f4565b610e5c565b34801561053a57600080fd5b506101e7610549366004611f5e565b610e96565b6101e761055c36600461233f565b610f14565b34801561056d57600080fd5b506101e761057c366004611f5e565b610f20565b34801561058d57600080fd5b506101e761059c366004611f5e565b610f53565b3480156105ad57600080fd5b506105d2604051806040016040528060058152602001640312e312e360dc1b81525081565b60405161023391906123d8565b6065546001600160a01b031633146106125760405162461bcd60e51b8152600401610609906123eb565b60405180910390fd5b61061b81610ffa565b50565b60335460ff16156106415760405162461bcd60e51b815260040161060990612420565b6001600160a01b0383811660009081526101626020908152604080832063ffffffff89168452909152902054166106ba5760405162461bcd60e51b815260206004820152601760248201527f72656d6f746520746f6b656e206e6f74206d61707065640000000000000000006044820152606401610609565b61015f80546001019081905560006106d58386868986611044565b6001600160a01b0386811660009081526101626020908152604080832063ffffffff8c168452825280832054815160808101835284815242818501908152600182850181815260608401889052898852610161909652939095208151815490151560ff19918216178255955181850155935160028086018054999a5093909716979196949590949293911691849081111561077257610772612232565b0217905550606082015160028201805461ff00191661010083801561079957610799612232565b0217905550905050600080338684898c886040516020016107c0979695949392919061244a565b60405160208183030381529060405290506107dc8882346110c7565b6040516374f4f54760e01b8152336004820152602481018790526001600160a01b038816906374f4f54790604401600060405180830381600087803b15801561082457600080fd5b505af1158015610838573d6000803e3d6000fd5b50505050866001600160a01b0316336001600160a01b03168963ffffffff167fb967a159106e693bcb8298f42c743d6a70b66535ae64bdaf9710db69156984c6610880611163565b6040805163ffffffff90921682526001600160a01b038b16602083015281018b9052606081018990526080810188905260a00160405180910390a45050505050505050565b60007fc2f8787176b8ac6bf7215b4adcc1e069bf4ab82d9ab1df05a57a91d425935b6e604051806040016040528060058152602001640312e312e360dc1b8152504660405160200161091993929190612498565b60405160208183030381529060405280519060200120905090565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361097c5760405162461bcd60e51b8152600401610609906124f5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109c56000805160206127c7833981519152546001600160a01b031690565b6001600160a01b0316146109eb5760405162461bcd60e51b815260040161060990612541565b6109f4816111d6565b6040805160008082526020820190925261061b91839190611200565b6065546001600160a01b03163314610a3a5760405162461bcd60e51b8152600401610609906123eb565b60335460ff16610a835760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610609565b610a8b61136b565b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ad55760405162461bcd60e51b8152600401610609906124f5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b1e6000805160206127c7833981519152546001600160a01b031690565b6001600160a01b031614610b445760405162461bcd60e51b815260040161060990612541565b610b4d826111d6565b610b5982826001611200565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bfd5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610609565b506000805160206127c783398151915290565b610c19336113fe565b610c4e5760405162461bcd60e51b8152602060048201526006602482015265042d2dcc4def60d31b6044820152606401610609565b63ffffffff8316600090815260c96020526040902054839083908114610ca05760405162461bcd60e51b815260206004820152600760248201526610b937baba32b960c91b6044820152606401610609565b610cab858585611473565b5050505050565b6065546001600160a01b03163314610cdc5760405162461bcd60e51b8152600401610609906123eb565b610a8b6000611736565b6065546001600160a01b03163314610d105760405162461bcd60e51b8152600401610609906123eb565b60335460ff1615610d335760405162461bcd60e51b815260040161060990612420565b610a8b611788565b6065546001600160a01b03163314610d655760405162461bcd60e51b8152600401610609906123eb565b83828114610dad5760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606401610609565b60005b81811015610e1f57610e0f878783818110610dcd57610dcd61258d565b9050602002016020810190610de29190611f5e565b868684818110610df457610df461258d565b9050602002016020810190610e099190611f5e565b856117e0565b610e18816125b9565b9050610db0565b50505050505050565b6065546001600160a01b03163314610e525760405162461bcd60e51b8152600401610609906123eb565b610b598282611992565b6065546001600160a01b03163314610e865760405162461bcd60e51b8152600401610609906123eb565b610e918383836117e0565b505050565b6000610ea260016119d6565b90508015610eba576000805461ff0019166101001790555b610ec382611a63565b610ecb611a93565b8015610b59576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b610e918383833361061e565b6065546001600160a01b03163314610f4a5760405162461bcd60e51b8152600401610609906123eb565b61061b81611ac2565b6065546001600160a01b03163314610f7d5760405162461bcd60e51b8152600401610609906123eb565b6001600160a01b038116610fe25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610609565b61061b81611736565b6001600160a01b03163b151590565b609780546001600160a01b0319166001600160a01b0383169081179091556040517f7c10de8878ed89478ff01b9cd8c11a5271ea8ac91d46f662e6aea7e3adf5b11f90600090a250565b600061104e6108c5565b6040805160208101929092526bffffffffffffffffffffffff19606089811b8216928401929092529087901b166054820152606881018590526001600160e01b031960e085901b166088820152608c810183905260ac016040516020818303038152906040528051906020012090505b95945050505050565b60006110d1611b0c565b905060006110e0828686611b7a565b90508215610cab576098546040516352b81e4760e11b81526001600160a01b0384811660048301526024820184905263ffffffff881660448301529091169063a5703c8e9085906064016000604051808303818588803b15801561114357600080fd5b505af1158015611157573d6000803e3d6000fd5b50505050505050505050565b6097546040805163234d8e3d60e21b815290516000926001600160a01b031691638d3638f49160048083019260209291908290030181865afa1580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d191906125d2565b905090565b6065546001600160a01b0316331461061b5760405162461bcd60e51b8152600401610609906123eb565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561123357610e9183611c07565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561128d575060408051601f3d908101601f1916820190925261128a918101906125ef565b60015b6112f05760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610609565b6000805160206127c7833981519152811461135f5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610609565b50610e91838383611ca3565b60335460ff166113b45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610609565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60975460405163282f51eb60e01b81526001600160a01b038381166004830152600092169063282f51eb90602401602060405180830381865afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190612608565b92915050565b60335460ff16156114965760405162461bcd60e51b815260040161060990612420565b6000806000806000806000878060200190518101906114b5919061262a565b959c50939a5091985096509450925090506000808281526101616020526040902060029081015460ff16908111156114ef576114ef612232565b1461153c5760405162461bcd60e51b815260206004820152601760248201527f42726964676520526571756573742045786563757465640000000000000000006044820152606401610609565b60408051608081018252600081524260208201529081016002815260200160ff8916801561156c5761156c612232565b801561157a5761157a612232565b9052600082815261016160209081526040918290208351815490151560ff1991821617825591840151600180830191909155928401516002808301805493959294909316919084908111156115d1576115d1612232565b0217905550606082015160028201805461ff0019166101008380156115f8576115f8612232565b0217905550600091506116089050565b60ff8816801561161a5761161a612232565b801561162857611628612232565b036116f6576040516346154c9f60e11b81526001600160a01b03868116600483015260248201859052851690638c2a993e90604401600060405180830381600087803b15801561167757600080fd5b505af115801561168b573d6000803e3d6000fd5b50506040805163ffffffff86811682526001600160a01b038a811660208401528284018990526060830187905292518984169550928b1693508e16917ff475ec3ebd0a821ced53bf4d9fb1b6e5110cdf24015f2a590842816d2aced35d9181900360800190a4611157565b60405162461bcd60e51b81526020600482015260156024820152742ab739bab83837b93a32b21027b832b930ba34b7b760591b6044820152606401610609565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60335460ff16156117ab5760405162461bcd60e51b815260040161060990612420565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113e13390565b6001600160a01b0383161580159061180057506001600160a01b03821615155b61184c5760405162461bcd60e51b815260206004820152601d60248201527f215f686f6d65546f6b656e207c7c20215f72656d6f7465546f6b656e730000006044820152606401610609565b6001600160a01b03831660009081526101626020908152604080832063ffffffff85168452909152902060010154156118f9576001600160a01b03831660009081526101626020908152604080832063ffffffff8516845290915290206001015462127500906118bc90426126b8565b106118f95760405162461bcd60e51b815260206004820152600d60248201526c1d1a5b595c88195e1c1a5c9959609a1b6044820152606401610609565b6040805180820182526001600160a01b038481168083524260208085019182528884166000818152610162835287812063ffffffff8a1680835290845290889020965187546001600160a01b03191696169590951786559151600190950194909455935191825292917f1a954a85d933c5418c8c7edb1605fff69c5d182538b3a5299682a97f788311b4910160405180910390a3505050565b63ffffffff8216600081815260c96020526040808220849055518392917f97fd51fef1f80c854cbd0150c248e8b2ac4ecdc97cc05e742b5f61c9f4dc645891a35050565b60008054610100900460ff1615611a1d578160ff1660011480156119f95750303b155b611a155760405162461bcd60e51b8152600401610609906126cf565b506000919050565b60005460ff808416911610611a445760405162461bcd60e51b8152600401610609906126cf565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611a8a5760405162461bcd60e51b81526004016106099061271d565b61061b81611cce565b600054610100900460ff16611aba5760405162461bcd60e51b81526004016106099061271d565b610a8b611d06565b609880546001600160a01b0319166001600160a01b0383169081179091556040517fb87f5a0bface22cde699143559fb99f990ae54eea236995fc54178af91af859f90600090a250565b6097546040805163ce11e6ab60e01b815290516000926001600160a01b03169163ce11e6ab9160048083019260209291908290030181865afa158015611b56573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d19190612768565b600080611b8684611d39565b60405163fa31de0160e01b81529091506001600160a01b0386169063fa31de0190611bb990879085908890600401612785565b6020604051808303816000875af1158015611bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfc91906125ef565b9150505b9392505050565b6001600160a01b0381163b611c745760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610609565b6000805160206127c783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611cac83611d86565b600082511180611cb95750805b15610e9157611cc88383611dc6565b50505050565b600054610100900460ff16611cf55760405162461bcd60e51b81526004016106099061271d565b611cfe81610ffa565b61061b611eb1565b600054610100900460ff16611d2d5760405162461bcd60e51b81526004016106099061271d565b6033805460ff19169055565b63ffffffff8116600090815260c9602052604090205480611a5e5760405162461bcd60e51b815260206004820152600760248201526610b937baba32b960c91b6044820152606401610609565b611d8f81611c07565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611e2e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610609565b600080846001600160a01b031684604051611e4991906127aa565b600060405180830381855af49150503d8060008114611e84576040519150601f19603f3d011682016040523d82523d6000602084013e611e89565b606091505b50915091506110be82826040518060600160405280602781526020016127e760279139611ee0565b600054610100900460ff16611ed85760405162461bcd60e51b81526004016106099061271d565b610a8b611f19565b60608315611eef575081611c00565b825115611eff5782518084602001fd5b8160405162461bcd60e51b815260040161060991906123d8565b600054610100900460ff16611f405760405162461bcd60e51b81526004016106099061271d565b610a8b33611736565b6001600160a01b038116811461061b57600080fd5b600060208284031215611f7057600080fd5b8135611c0081611f49565b63ffffffff8116811461061b57600080fd5b60008060008060808587031215611fa357600080fd5b8435611fae81611f7b565b93506020850135611fbe81611f49565b9250604085013591506060850135611fd581611f49565b939692955090935050565b600060208284031215611ff257600080fd5b8135611c0081611f7b565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261202457600080fd5b813567ffffffffffffffff8082111561203f5761203f611ffd565b604051601f8301601f19908116603f0116810190828211818310171561206757612067611ffd565b8160405283815286602085880101111561208057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156120b357600080fd5b82356120be81611f49565b9150602083013567ffffffffffffffff8111156120da57600080fd5b6120e685828601612013565b9150509250929050565b60008060006060848603121561210557600080fd5b833561211081611f7b565b925060208401359150604084013567ffffffffffffffff81111561213357600080fd5b61213f86828701612013565b9150509250925092565b60008083601f84011261215b57600080fd5b50813567ffffffffffffffff81111561217357600080fd5b6020830191508360208260051b850101111561218e57600080fd5b9250929050565b6000806000806000606086880312156121ad57600080fd5b853567ffffffffffffffff808211156121c557600080fd5b6121d189838a01612149565b909750955060208801359150808211156121ea57600080fd5b506121f788828901612149565b909450925050604086013561220b81611f7b565b809150509295509295909350565b60006020828403121561222b57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6001811061225857612258612232565b9052565b841515815260208101849052608081016003841061227c5761227c612232565b8360408301526110be6060830184612248565b600080604083850312156122a257600080fd5b82356122ad81611f7b565b946020939093013593505050565b600080604083850312156122ce57600080fd5b82356122d981611f49565b915060208301356122e981611f7b565b809150509250929050565b60008060006060848603121561230957600080fd5b833561231481611f49565b9250602084013561232481611f49565b9150604084013561233481611f7b565b809150509250925092565b60008060006060848603121561235457600080fd5b833561235f81611f7b565b9250602084013561236f81611f49565b929592945050506040919091013590565b60005b8381101561239b578181015183820152602001612383565b83811115611cc85750506000910152565b600081518084526123c4816020860160208601612380565b601f01601f19169290920160200192915050565b602081526000611c0060208301846123ac565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60e08101612458828a612248565b6001600160a01b0397881660208301529587166040820152939095166060840152608083019190915263ffffffff1660a082015260c00191909152919050565b83815260806020820152601960808201527f546f7563616e43726f7373636861696e4d657373656e6765720000000000000060a082015260c0604082015260006124e560c08301856123ac565b9050826060830152949350505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016125cb576125cb6125a3565b5060010190565b6000602082840312156125e457600080fd5b8151611c0081611f7b565b60006020828403121561260157600080fd5b5051919050565b60006020828403121561261a57600080fd5b81518015158114611c0057600080fd5b600080600080600080600060e0888a03121561264557600080fd5b875160ff8116811461265657600080fd5b602089015190975061266781611f49565b604089015190965061267881611f49565b606089015190955061268981611f49565b608089015160a08a015191955093506126a181611f7b565b8092505060c0880151905092959891949750929550565b6000828210156126ca576126ca6125a3565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561277a57600080fd5b8151611c0081611f49565b63ffffffff841681528260208201526060604082015260006110be60608301846123ac565b600082516127bc818460208701612380565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205d4703a00b71f53e68b81a334a2ed1695c8276b5a986ae8071f237d029de5edc64736f6c634300080e0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c8063715018a6116100f7578063b49c53a711610095578063e32a66cc11610064578063e32a66cc1461054e578063f1bd6f0a14610561578063f2fde38b14610581578063ffa1ad74146105a157600080fd5b8063b49c53a714610483578063bdaca27a146104a3578063c0d5f4471461050e578063c4d66de81461052e57600080fd5b806394eda280116100d157806394eda280146103d15780639a35c359146103f15780639d86698514610411578063affed0e01461046c57600080fd5b8063715018a6146103895780638456cb591461039e5780638da5cb5b146103b357600080fd5b80634f1ef286116101645780635c975abb1161013e5780635c975abb1461030657806367e8e783146103295780636ca0b0d71461034057806370722ced1461035557600080fd5b80634f1ef286146102be57806352d1902d146102d157806356d5d475146102e657600080fd5b80633644e515116101a05780633644e5151461023c5780633659cfe61461025157806339bb4ad9146102715780633f4ba83a146102a957600080fd5b806312b1d780146101c7578063255e0ae4146101e95780632ead72f6146101fc575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611f5e565b6105df565b005b6101e76101f7366004611f8d565b61061e565b34801561020857600080fd5b50610229610217366004611fe0565b60c96020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561024857600080fd5b506102296108c5565b34801561025d57600080fd5b506101e761026c366004611f5e565b610934565b34801561027d57600080fd5b50609854610291906001600160a01b031681565b6040516001600160a01b039091168152602001610233565b3480156102b557600080fd5b506101e7610a10565b6101e76102cc3660046120a0565b610a8d565b3480156102dd57600080fd5b50610229610b5d565b3480156102f257600080fd5b506101e76103013660046120f0565b610c10565b34801561031257600080fd5b5060335460ff166040519015158152602001610233565b34801561033557600080fd5b506102296212750081565b34801561034c57600080fd5b50610229600181565b34801561036157600080fd5b506102297fc2f8787176b8ac6bf7215b4adcc1e069bf4ab82d9ab1df05a57a91d425935b6e81565b34801561039557600080fd5b506101e7610cb2565b3480156103aa57600080fd5b506101e7610ce6565b3480156103bf57600080fd5b506065546001600160a01b0316610291565b3480156103dd57600080fd5b506101e76103ec366004612195565b610d3b565b3480156103fd57600080fd5b50609754610291906001600160a01b031681565b34801561041d57600080fd5b5061045c61042c366004612219565b6101616020526000908152604090208054600182015460029092015460ff91821692918181169161010090041684565b604051610233949392919061225c565b34801561047857600080fd5b5061022961015f5481565b34801561048f57600080fd5b506101e761049e36600461228f565b610e28565b3480156104af57600080fd5b506104ef6104be3660046122bb565b610162602090815260009283526040808420909152908252902080546001909101546001600160a01b039091169082565b604080516001600160a01b039093168352602083019190915201610233565b34801561051a57600080fd5b506101e76105293660046122f4565b610e5c565b34801561053a57600080fd5b506101e7610549366004611f5e565b610e96565b6101e761055c36600461233f565b610f14565b34801561056d57600080fd5b506101e761057c366004611f5e565b610f20565b34801561058d57600080fd5b506101e761059c366004611f5e565b610f53565b3480156105ad57600080fd5b506105d2604051806040016040528060058152602001640312e312e360dc1b81525081565b60405161023391906123d8565b6065546001600160a01b031633146106125760405162461bcd60e51b8152600401610609906123eb565b60405180910390fd5b61061b81610ffa565b50565b60335460ff16156106415760405162461bcd60e51b815260040161060990612420565b6001600160a01b0383811660009081526101626020908152604080832063ffffffff89168452909152902054166106ba5760405162461bcd60e51b815260206004820152601760248201527f72656d6f746520746f6b656e206e6f74206d61707065640000000000000000006044820152606401610609565b61015f80546001019081905560006106d58386868986611044565b6001600160a01b0386811660009081526101626020908152604080832063ffffffff8c168452825280832054815160808101835284815242818501908152600182850181815260608401889052898852610161909652939095208151815490151560ff19918216178255955181850155935160028086018054999a5093909716979196949590949293911691849081111561077257610772612232565b0217905550606082015160028201805461ff00191661010083801561079957610799612232565b0217905550905050600080338684898c886040516020016107c0979695949392919061244a565b60405160208183030381529060405290506107dc8882346110c7565b6040516374f4f54760e01b8152336004820152602481018790526001600160a01b038816906374f4f54790604401600060405180830381600087803b15801561082457600080fd5b505af1158015610838573d6000803e3d6000fd5b50505050866001600160a01b0316336001600160a01b03168963ffffffff167fb967a159106e693bcb8298f42c743d6a70b66535ae64bdaf9710db69156984c6610880611163565b6040805163ffffffff90921682526001600160a01b038b16602083015281018b9052606081018990526080810188905260a00160405180910390a45050505050505050565b60007fc2f8787176b8ac6bf7215b4adcc1e069bf4ab82d9ab1df05a57a91d425935b6e604051806040016040528060058152602001640312e312e360dc1b8152504660405160200161091993929190612498565b60405160208183030381529060405280519060200120905090565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361097c5760405162461bcd60e51b8152600401610609906124f5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109c56000805160206127c7833981519152546001600160a01b031690565b6001600160a01b0316146109eb5760405162461bcd60e51b815260040161060990612541565b6109f4816111d6565b6040805160008082526020820190925261061b91839190611200565b6065546001600160a01b03163314610a3a5760405162461bcd60e51b8152600401610609906123eb565b60335460ff16610a835760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610609565b610a8b61136b565b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ad55760405162461bcd60e51b8152600401610609906124f5565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b1e6000805160206127c7833981519152546001600160a01b031690565b6001600160a01b031614610b445760405162461bcd60e51b815260040161060990612541565b610b4d826111d6565b610b5982826001611200565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bfd5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610609565b506000805160206127c783398151915290565b610c19336113fe565b610c4e5760405162461bcd60e51b8152602060048201526006602482015265042d2dcc4def60d31b6044820152606401610609565b63ffffffff8316600090815260c96020526040902054839083908114610ca05760405162461bcd60e51b815260206004820152600760248201526610b937baba32b960c91b6044820152606401610609565b610cab858585611473565b5050505050565b6065546001600160a01b03163314610cdc5760405162461bcd60e51b8152600401610609906123eb565b610a8b6000611736565b6065546001600160a01b03163314610d105760405162461bcd60e51b8152600401610609906123eb565b60335460ff1615610d335760405162461bcd60e51b815260040161060990612420565b610a8b611788565b6065546001600160a01b03163314610d655760405162461bcd60e51b8152600401610609906123eb565b83828114610dad5760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606401610609565b60005b81811015610e1f57610e0f878783818110610dcd57610dcd61258d565b9050602002016020810190610de29190611f5e565b868684818110610df457610df461258d565b9050602002016020810190610e099190611f5e565b856117e0565b610e18816125b9565b9050610db0565b50505050505050565b6065546001600160a01b03163314610e525760405162461bcd60e51b8152600401610609906123eb565b610b598282611992565b6065546001600160a01b03163314610e865760405162461bcd60e51b8152600401610609906123eb565b610e918383836117e0565b505050565b6000610ea260016119d6565b90508015610eba576000805461ff0019166101001790555b610ec382611a63565b610ecb611a93565b8015610b59576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b610e918383833361061e565b6065546001600160a01b03163314610f4a5760405162461bcd60e51b8152600401610609906123eb565b61061b81611ac2565b6065546001600160a01b03163314610f7d5760405162461bcd60e51b8152600401610609906123eb565b6001600160a01b038116610fe25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610609565b61061b81611736565b6001600160a01b03163b151590565b609780546001600160a01b0319166001600160a01b0383169081179091556040517f7c10de8878ed89478ff01b9cd8c11a5271ea8ac91d46f662e6aea7e3adf5b11f90600090a250565b600061104e6108c5565b6040805160208101929092526bffffffffffffffffffffffff19606089811b8216928401929092529087901b166054820152606881018590526001600160e01b031960e085901b166088820152608c810183905260ac016040516020818303038152906040528051906020012090505b95945050505050565b60006110d1611b0c565b905060006110e0828686611b7a565b90508215610cab576098546040516352b81e4760e11b81526001600160a01b0384811660048301526024820184905263ffffffff881660448301529091169063a5703c8e9085906064016000604051808303818588803b15801561114357600080fd5b505af1158015611157573d6000803e3d6000fd5b50505050505050505050565b6097546040805163234d8e3d60e21b815290516000926001600160a01b031691638d3638f49160048083019260209291908290030181865afa1580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d191906125d2565b905090565b6065546001600160a01b0316331461061b5760405162461bcd60e51b8152600401610609906123eb565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561123357610e9183611c07565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561128d575060408051601f3d908101601f1916820190925261128a918101906125ef565b60015b6112f05760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610609565b6000805160206127c7833981519152811461135f5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610609565b50610e91838383611ca3565b60335460ff166113b45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610609565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60975460405163282f51eb60e01b81526001600160a01b038381166004830152600092169063282f51eb90602401602060405180830381865afa158015611449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146d9190612608565b92915050565b60335460ff16156114965760405162461bcd60e51b815260040161060990612420565b6000806000806000806000878060200190518101906114b5919061262a565b959c50939a5091985096509450925090506000808281526101616020526040902060029081015460ff16908111156114ef576114ef612232565b1461153c5760405162461bcd60e51b815260206004820152601760248201527f42726964676520526571756573742045786563757465640000000000000000006044820152606401610609565b60408051608081018252600081524260208201529081016002815260200160ff8916801561156c5761156c612232565b801561157a5761157a612232565b9052600082815261016160209081526040918290208351815490151560ff1991821617825591840151600180830191909155928401516002808301805493959294909316919084908111156115d1576115d1612232565b0217905550606082015160028201805461ff0019166101008380156115f8576115f8612232565b0217905550600091506116089050565b60ff8816801561161a5761161a612232565b801561162857611628612232565b036116f6576040516346154c9f60e11b81526001600160a01b03868116600483015260248201859052851690638c2a993e90604401600060405180830381600087803b15801561167757600080fd5b505af115801561168b573d6000803e3d6000fd5b50506040805163ffffffff86811682526001600160a01b038a811660208401528284018990526060830187905292518984169550928b1693508e16917ff475ec3ebd0a821ced53bf4d9fb1b6e5110cdf24015f2a590842816d2aced35d9181900360800190a4611157565b60405162461bcd60e51b81526020600482015260156024820152742ab739bab83837b93a32b21027b832b930ba34b7b760591b6044820152606401610609565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60335460ff16156117ab5760405162461bcd60e51b815260040161060990612420565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113e13390565b6001600160a01b0383161580159061180057506001600160a01b03821615155b61184c5760405162461bcd60e51b815260206004820152601d60248201527f215f686f6d65546f6b656e207c7c20215f72656d6f7465546f6b656e730000006044820152606401610609565b6001600160a01b03831660009081526101626020908152604080832063ffffffff85168452909152902060010154156118f9576001600160a01b03831660009081526101626020908152604080832063ffffffff8516845290915290206001015462127500906118bc90426126b8565b106118f95760405162461bcd60e51b815260206004820152600d60248201526c1d1a5b595c88195e1c1a5c9959609a1b6044820152606401610609565b6040805180820182526001600160a01b038481168083524260208085019182528884166000818152610162835287812063ffffffff8a1680835290845290889020965187546001600160a01b03191696169590951786559151600190950194909455935191825292917f1a954a85d933c5418c8c7edb1605fff69c5d182538b3a5299682a97f788311b4910160405180910390a3505050565b63ffffffff8216600081815260c96020526040808220849055518392917f97fd51fef1f80c854cbd0150c248e8b2ac4ecdc97cc05e742b5f61c9f4dc645891a35050565b60008054610100900460ff1615611a1d578160ff1660011480156119f95750303b155b611a155760405162461bcd60e51b8152600401610609906126cf565b506000919050565b60005460ff808416911610611a445760405162461bcd60e51b8152600401610609906126cf565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611a8a5760405162461bcd60e51b81526004016106099061271d565b61061b81611cce565b600054610100900460ff16611aba5760405162461bcd60e51b81526004016106099061271d565b610a8b611d06565b609880546001600160a01b0319166001600160a01b0383169081179091556040517fb87f5a0bface22cde699143559fb99f990ae54eea236995fc54178af91af859f90600090a250565b6097546040805163ce11e6ab60e01b815290516000926001600160a01b03169163ce11e6ab9160048083019260209291908290030181865afa158015611b56573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d19190612768565b600080611b8684611d39565b60405163fa31de0160e01b81529091506001600160a01b0386169063fa31de0190611bb990879085908890600401612785565b6020604051808303816000875af1158015611bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfc91906125ef565b9150505b9392505050565b6001600160a01b0381163b611c745760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610609565b6000805160206127c783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611cac83611d86565b600082511180611cb95750805b15610e9157611cc88383611dc6565b50505050565b600054610100900460ff16611cf55760405162461bcd60e51b81526004016106099061271d565b611cfe81610ffa565b61061b611eb1565b600054610100900460ff16611d2d5760405162461bcd60e51b81526004016106099061271d565b6033805460ff19169055565b63ffffffff8116600090815260c9602052604090205480611a5e5760405162461bcd60e51b815260206004820152600760248201526610b937baba32b960c91b6044820152606401610609565b611d8f81611c07565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611e2e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610609565b600080846001600160a01b031684604051611e4991906127aa565b600060405180830381855af49150503d8060008114611e84576040519150601f19603f3d011682016040523d82523d6000602084013e611e89565b606091505b50915091506110be82826040518060600160405280602781526020016127e760279139611ee0565b600054610100900460ff16611ed85760405162461bcd60e51b81526004016106099061271d565b610a8b611f19565b60608315611eef575081611c00565b825115611eff5782518084602001fd5b8160405162461bcd60e51b815260040161060991906123d8565b600054610100900460ff16611f405760405162461bcd60e51b81526004016106099061271d565b610a8b33611736565b6001600160a01b038116811461061b57600080fd5b600060208284031215611f7057600080fd5b8135611c0081611f49565b63ffffffff8116811461061b57600080fd5b60008060008060808587031215611fa357600080fd5b8435611fae81611f7b565b93506020850135611fbe81611f49565b9250604085013591506060850135611fd581611f49565b939692955090935050565b600060208284031215611ff257600080fd5b8135611c0081611f7b565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261202457600080fd5b813567ffffffffffffffff8082111561203f5761203f611ffd565b604051601f8301601f19908116603f0116810190828211818310171561206757612067611ffd565b8160405283815286602085880101111561208057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156120b357600080fd5b82356120be81611f49565b9150602083013567ffffffffffffffff8111156120da57600080fd5b6120e685828601612013565b9150509250929050565b60008060006060848603121561210557600080fd5b833561211081611f7b565b925060208401359150604084013567ffffffffffffffff81111561213357600080fd5b61213f86828701612013565b9150509250925092565b60008083601f84011261215b57600080fd5b50813567ffffffffffffffff81111561217357600080fd5b6020830191508360208260051b850101111561218e57600080fd5b9250929050565b6000806000806000606086880312156121ad57600080fd5b853567ffffffffffffffff808211156121c557600080fd5b6121d189838a01612149565b909750955060208801359150808211156121ea57600080fd5b506121f788828901612149565b909450925050604086013561220b81611f7b565b809150509295509295909350565b60006020828403121561222b57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6001811061225857612258612232565b9052565b841515815260208101849052608081016003841061227c5761227c612232565b8360408301526110be6060830184612248565b600080604083850312156122a257600080fd5b82356122ad81611f7b565b946020939093013593505050565b600080604083850312156122ce57600080fd5b82356122d981611f49565b915060208301356122e981611f7b565b809150509250929050565b60008060006060848603121561230957600080fd5b833561231481611f49565b9250602084013561232481611f49565b9150604084013561233481611f7b565b809150509250925092565b60008060006060848603121561235457600080fd5b833561235f81611f7b565b9250602084013561236f81611f49565b929592945050506040919091013590565b60005b8381101561239b578181015183820152602001612383565b83811115611cc85750506000910152565b600081518084526123c4816020860160208601612380565b601f01601f19169290920160200192915050565b602081526000611c0060208301846123ac565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60e08101612458828a612248565b6001600160a01b0397881660208301529587166040820152939095166060840152608083019190915263ffffffff1660a082015260c00191909152919050565b83815260806020820152601960808201527f546f7563616e43726f7373636861696e4d657373656e6765720000000000000060a082015260c0604082015260006124e560c08301856123ac565b9050826060830152949350505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016125cb576125cb6125a3565b5060010190565b6000602082840312156125e457600080fd5b8151611c0081611f7b565b60006020828403121561260157600080fd5b5051919050565b60006020828403121561261a57600080fd5b81518015158114611c0057600080fd5b600080600080600080600060e0888a03121561264557600080fd5b875160ff8116811461265657600080fd5b602089015190975061266781611f49565b604089015190965061267881611f49565b606089015190955061268981611f49565b608089015160a08a015191955093506126a181611f7b565b8092505060c0880151905092959891949750929550565b6000828210156126ca576126ca6125a3565b500390565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561277a57600080fd5b8151611c0081611f49565b63ffffffff841681528260208201526060604082015260006110be60608301846123ac565b600082516127bc818460208701612380565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205d4703a00b71f53e68b81a334a2ed1695c8276b5a986ae8071f237d029de5edc64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTokenPair(address,address,uint32)": {
        "details": "Called by owner to add or map home token address to remote token address. Changing the remote token address can only be done within a 7 day period, after first setting it.",
        "params": {
          "_domain": "domain ID of the remote chain whose token is being mapped",
          "_homeToken": "token address on home chain",
          "_remoteToken": "token address on remote chain"
        }
      },
      "batchAddTokenPair(address[],address[],uint32)": {
        "details": "Called by owner to add or map home token addresses to remote token addresses.",
        "params": {
          "_domain": "domain ID of the remote chain whose tokens are being mapped",
          "_homeTokens": "token addresses on home chain",
          "_remoteTokens": "token addresses on remote chain"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "params": {
          "_domain": "The domain of the remote Application Router",
          "_router": "The address of the remote Application Router"
        }
      },
      "handle(uint32,bytes32,bytes)": {
        "params": {
          "_message": "The message",
          "_origin": "The origin domain",
          "_sender": "The sender address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "when invoked by owner it Pauses the cross chain bridging logic to interact with abacus"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendMessage(uint32,address,uint256)": {
        "params": {
          "_amount": "the amount of tokens to be bridged",
          "_destinationDomain": "The domain to send the message to",
          "_token": "address of token to be bridged"
        }
      },
      "sendMessageWithRecipient(uint32,address,uint256,address)": {
        "params": {
          "_amount": "the amount of tokens to be bridged",
          "_destinationDomain": "The domain to send the message to",
          "_recipient": "the recipient of tokens in the destination domain",
          "_token": "address of token to be bridged"
        }
      },
      "setAbacusConnectionManager(address)": {
        "params": {
          "_abacusConnectionManager": "The address of the AbacusConnectionManager contract."
        }
      },
      "setInterchainGasPaymaster(address)": {
        "params": {
          "_interchainGasPaymaster": "The address of the InterchainGasPaymaster contract."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "when invoked by owner it unpauses the cross chain bridging logic to interact with abacus"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AbacusConnectionManagerSet(address)": {
        "notice": "Emitted when a new abacusConnectionManager is set."
      },
      "InterchainGasPaymasterSet(address)": {
        "notice": "Emitted when a new Interchain Gas Paymaster is set."
      },
      "RemoteRouterEnrolled(uint32,bytes32)": {
        "notice": "Emitted when a router is set."
      }
    },
    "kind": "user",
    "methods": {
      "addTokenPair(address,address,uint32)": {
        "notice": "Adds new token pair than can be bridged"
      },
      "batchAddTokenPair(address[],address[],uint32)": {
        "notice": "Adds a new set of token pairs than can be bridged"
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "notice": "Register the address of a Router contract for the same Application on a remote chain"
      },
      "handle(uint32,bytes32,bytes)": {
        "notice": "Handles an incoming message"
      },
      "pause()": {
        "notice": "Pauses the cross chain bridge"
      },
      "remoteTokens(address,uint32)": {
        "notice": "remoteTokens maps a token (address) in the source chain to the domain id of the remote chain (uint32) to info about the token in the remote chain (RemoteTokenInformation)"
      },
      "sendMessage(uint32,address,uint256)": {
        "notice": "Send a message of \"Type A\" to a remote xApp Router via Abacus; this message is called to take some action in the cross-chain context. The recipient of the tokens in the destination domain is the same as msg.sender here."
      },
      "sendMessageWithRecipient(uint32,address,uint256,address)": {
        "notice": "Send a message of \"Type A\" to a remote xApp Router via Abacus; this message is called to take some action in the cross-chain context"
      },
      "setAbacusConnectionManager(address)": {
        "notice": "Sets the address of the application's AbacusConnectionManager."
      },
      "setInterchainGasPaymaster(address)": {
        "notice": "Sets the address of the application's InterchainGasPaymaster."
      },
      "unpause()": {
        "notice": "Unpauses the cross chain bridge"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1489,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1492,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4593,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1781,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 1870,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 980,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 1092,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "abacusConnectionManager",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IAbacusConnectionManager)473"
      },
      {
        "astId": 17,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "interchainGasPaymaster",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IInterchainGasPaymaster)486"
      },
      {
        "astId": 21,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__GAP",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 195,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "routers",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 199,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__GAP",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1471,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1759,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12956,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "nonce",
        "offset": 0,
        "slot": "351",
        "type": "t_uint256"
      },
      {
        "astId": 12958,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "DEPRECATED_DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "352",
        "type": "t_bytes32"
      },
      {
        "astId": 12964,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "requests",
        "offset": 0,
        "slot": "353",
        "type": "t_mapping(t_bytes32,t_struct(BridgeRequest)12953_storage)"
      },
      {
        "astId": 12972,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "remoteTokens",
        "offset": 0,
        "slot": "354",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(RemoteTokenInformation)12935_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAbacusConnectionManager)473": {
        "encoding": "inplace",
        "label": "contract IAbacusConnectionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IInterchainGasPaymaster)486": {
        "encoding": "inplace",
        "label": "contract IInterchainGasPaymaster",
        "numberOfBytes": "20"
      },
      "t_enum(BridgeRequestType)12940": {
        "encoding": "inplace",
        "label": "enum ToucanCrosschainMessengerStorageV1.BridgeRequestType",
        "numberOfBytes": "1"
      },
      "t_enum(MessageTypes)12942": {
        "encoding": "inplace",
        "label": "enum ToucanCrosschainMessengerStorageV1.MessageTypes",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(RemoteTokenInformation)12935_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct RemoteTokenInformation))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(RemoteTokenInformation)12935_storage)"
      },
      "t_mapping(t_bytes32,t_struct(BridgeRequest)12953_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ToucanCrosschainMessengerStorageV1.BridgeRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(BridgeRequest)12953_storage"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint32,t_struct(RemoteTokenInformation)12935_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct RemoteTokenInformation)",
        "numberOfBytes": "32",
        "value": "t_struct(RemoteTokenInformation)12935_storage"
      },
      "t_struct(BridgeRequest)12953_storage": {
        "encoding": "inplace",
        "label": "struct ToucanCrosschainMessengerStorageV1.BridgeRequest",
        "members": [
          {
            "astId": 12944,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "isReverted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 12946,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12949,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "requestType",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(BridgeRequestType)12940"
          },
          {
            "astId": 12952,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "messageType",
            "offset": 1,
            "slot": "2",
            "type": "t_enum(MessageTypes)12942"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RemoteTokenInformation)12935_storage": {
        "encoding": "inplace",
        "label": "struct RemoteTokenInformation",
        "members": [
          {
            "astId": 12931,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12934,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "timer",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}