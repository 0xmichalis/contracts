{
  "address": "0xf2438A14f668b1bbA53408346288f3d7C71c10a1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tco2",
          "type": "address"
        }
      ],
      "name": "AddFeeExemptedTCO2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "methodology",
          "type": "string"
        }
      ],
      "name": "AttributeMethodologyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "methodology",
          "type": "string"
        }
      ],
      "name": "AttributeMethodologyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "region",
          "type": "string"
        }
      ],
      "name": "AttributeRegionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "region",
          "type": "string"
        }
      ],
      "name": "AttributeRegionRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "standard",
          "type": "string"
        }
      ],
      "name": "AttributeStandardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "standard",
          "type": "string"
        }
      ],
      "name": "AttributeStandardRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20Addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20addr",
          "type": "address"
        }
      ],
      "name": "ExternalAddressRemovedFromWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20addr",
          "type": "address"
        }
      ],
      "name": "ExternalAddressWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20addr",
          "type": "address"
        }
      ],
      "name": "InternalAddressBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20addr",
          "type": "address"
        }
      ],
      "name": "InternalAddressRemovedFromBlackList",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20addr",
          "type": "address"
        }
      ],
      "name": "InternalAddressRemovedFromWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20addr",
          "type": "address"
        }
      ],
      "name": "InternalAddressWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mappingName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        }
      ],
      "name": "MappingSwitched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumVintageStartTime",
          "type": "uint256"
        }
      ],
      "name": "MinimumVintageStartTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeBurnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tco2",
          "type": "address"
        }
      ],
      "name": "RemoveFeeExemptedTCO2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "RouterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "SupplyCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        }
      ],
      "name": "TCO2ScoringUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ContractRegistry",
          "type": "address"
        }
      ],
      "name": "ToucanRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_RELEASE_CANDIDATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "addToList",
          "type": "bool"
        },
        {
          "internalType": "string[]",
          "name": "_regions",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_standards",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_methodologies",
          "type": "string[]"
        }
      ],
      "name": "addAttributes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addRedeemFeeExemptedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tco2",
          "type": "address"
        }
      ],
      "name": "addRedeemFeeExemptedTCO2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc20Addr",
          "type": "address[]"
        }
      ],
      "name": "addToExternalWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc20Addr",
          "type": "address[]"
        }
      ],
      "name": "addToInternalBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc20Addr",
          "type": "address[]"
        }
      ],
      "name": "addToInternalWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "bridgeBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "bridgeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "bridgeTCO2s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "calculateRedeemFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Addr",
          "type": "address"
        }
      ],
      "name": "checkAttributeMatching",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Addr",
          "type": "address"
        }
      ],
      "name": "checkEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "externalWhiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRedeemBurnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRedeemBurnPercentageInBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRedeemDivider",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRedeemPercentageInBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRedeemReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getScoredTCO2s",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "internalBlackList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "internalWhiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "methodologies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "methodologiesIsAcceptedMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVintageStartTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tco2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemAndBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemAuto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemAuto2",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemFeeExemptedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemFeeExemptedTCO2s",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "redeemMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "regions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "regionsIsAcceptedMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc20Addr",
          "type": "address[]"
        }
      ],
      "name": "removeFromExternalWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc20Addr",
          "type": "address[]"
        }
      ],
      "name": "removeFromInternalBlackList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc20Addr",
          "type": "address[]"
        }
      ],
      "name": "removeFromInternalWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeRedeemFeeExemptedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tco2",
          "type": "address"
        }
      ],
      "name": "removeRedeemFeeExemptedTCO2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "scoredTCO2s",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRedeemBurnAddress",
          "type": "address"
        }
      ],
      "name": "setFeeRedeemBurnAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRedeemBurnPercentageInBase",
          "type": "uint256"
        }
      ],
      "name": "setFeeRedeemBurnPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRedeemPercentageInBase",
          "type": "uint256"
        }
      ],
      "name": "setFeeRedeemPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRedeemReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeRedeemReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_minimumVintageStartTime",
          "type": "uint64"
        }
      ],
      "name": "setMinimumVintageStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setSupplyCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        }
      ],
      "name": "setTCO2Scoring",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setToucanContractRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "standards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "standardsIsAcceptedMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_mappingName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        }
      ],
      "name": "switchMapping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tco2",
          "type": "address"
        }
      ],
      "name": "tokenBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 9,
  "solcInputHash": "87265e09931175e693d8016b4db075c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tco2\",\"type\":\"address\"}],\"name\":\"AddFeeExemptedTCO2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodology\",\"type\":\"string\"}],\"name\":\"AttributeMethodologyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodology\",\"type\":\"string\"}],\"name\":\"AttributeMethodologyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"AttributeRegionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"AttributeRegionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"standard\",\"type\":\"string\"}],\"name\":\"AttributeStandardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"standard\",\"type\":\"string\"}],\"name\":\"AttributeStandardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20addr\",\"type\":\"address\"}],\"name\":\"ExternalAddressRemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20addr\",\"type\":\"address\"}],\"name\":\"ExternalAddressWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20addr\",\"type\":\"address\"}],\"name\":\"InternalAddressBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20addr\",\"type\":\"address\"}],\"name\":\"InternalAddressRemovedFromBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20addr\",\"type\":\"address\"}],\"name\":\"InternalAddressRemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20addr\",\"type\":\"address\"}],\"name\":\"InternalAddressWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mappingName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"MappingSwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumVintageStartTime\",\"type\":\"uint256\"}],\"name\":\"MinimumVintageStartTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"RedeemFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tco2\",\"type\":\"address\"}],\"name\":\"RemoveFeeExemptedTCO2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"SupplyCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"}],\"name\":\"TCO2ScoringUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ContractRegistry\",\"type\":\"address\"}],\"name\":\"ToucanRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_RELEASE_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"addToList\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"_regions\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_standards\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_methodologies\",\"type\":\"string[]\"}],\"name\":\"addAttributes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addRedeemFeeExemptedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tco2\",\"type\":\"address\"}],\"name\":\"addRedeemFeeExemptedTCO2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addr\",\"type\":\"address[]\"}],\"name\":\"addToExternalWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addr\",\"type\":\"address[]\"}],\"name\":\"addToInternalBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addr\",\"type\":\"address[]\"}],\"name\":\"addToInternalWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bridgeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bridgeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bridgeTCO2s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"calculateRedeemFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"}],\"name\":\"checkAttributeMatching\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"}],\"name\":\"checkEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"externalWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRedeemBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRedeemBurnPercentageInBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRedeemDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRedeemPercentageInBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRedeemReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScoredTCO2s\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"internalBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"internalWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"methodologies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"methodologiesIsAcceptedMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVintageStartTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tco2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemAuto2\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemFeeExemptedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemFeeExemptedTCO2s\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"redeemMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"regions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regionsIsAcceptedMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addr\",\"type\":\"address[]\"}],\"name\":\"removeFromExternalWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addr\",\"type\":\"address[]\"}],\"name\":\"removeFromInternalBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addr\",\"type\":\"address[]\"}],\"name\":\"removeFromInternalWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeRedeemFeeExemptedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tco2\",\"type\":\"address\"}],\"name\":\"removeRedeemFeeExemptedTCO2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scoredTCO2s\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRedeemBurnAddress\",\"type\":\"address\"}],\"name\":\"setFeeRedeemBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRedeemBurnPercentageInBase\",\"type\":\"uint256\"}],\"name\":\"setFeeRedeemBurnPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRedeemPercentageInBase\",\"type\":\"uint256\"}],\"name\":\"setFeeRedeemPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRedeemReceiver\",\"type\":\"address\"}],\"name\":\"setFeeRedeemReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_minimumVintageStartTime\",\"type\":\"uint64\"}],\"name\":\"setMinimumVintageStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"}],\"name\":\"setTCO2Scoring\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setToucanContractRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"standards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardsIsAcceptedMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_mappingName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"switchMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tco2\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAttributes(bool,string[],string[],string[])\":{\"params\":{\"addToList\":\"determines whether attribute should be added or removed Other params are arrays of attributes to be added\"}},\"addRedeemFeeExemptedAddress(address)\":{\"params\":{\"_address\":\"address to be exempted on redeem fees\"}},\"addRedeemFeeExemptedTCO2(address)\":{\"params\":{\"_tco2\":\"TCO2 to be exempted on redeem fees\"}},\"addToExternalWhiteList(address[])\":{\"params\":{\"erc20Addr\":\"accepts an array of contract addresses\"}},\"addToInternalBlackList(address[])\":{\"params\":{\"erc20Addr\":\"accepts an array of contract addresses\"}},\"addToInternalWhiteList(address[])\":{\"params\":{\"erc20Addr\":\"accepts an array of contract addresses\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"bridgeBurn(address,uint256)\":{\"details\":\"invoked only by the ToucanCrosschainMessenger (Router)\",\"params\":{\"_account\":\"account that will be burned with corss-chain bridged tokens\",\"_amount\":\"amount of tokens that will be burned\"}},\"bridgeMint(address,uint256)\":{\"details\":\"invoked only by the ToucanCrosschainMessenger (Router)\",\"params\":{\"_account\":\"account that will be minted with corss-chain bridged tokens\",\"_amount\":\"amount of tokens that will be minted\"}},\"bridgeTCO2s(uint32,address[],uint256[])\":{\"params\":{\"amounts\":\"The amounts of TCO2s to bridge\",\"destinationDomain\":\"The domain to bridge TCO2s to\",\"tco2s\":\"The TCO2s to bridge\"}},\"calculateRedeemFees(address[],uint256[])\":{\"details\":\"User specifies in front-end the addresses and amounts they want\",\"params\":{\"amounts\":\"Array of amounts to redeem for each tco2s\",\"tco2s\":\"Array of TCO2 contract addresses\"},\"returns\":{\"_0\":\"Total fees amount\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(address,uint256)\":{\"details\":\"Eligibility is checked via `checkEligible`, balances are tracked for each TCO2 separately\",\"params\":{\"erc20Addr\":\"ERC20 contract address to be deposited, requires approve\"}},\"getRemaining()\":{\"details\":\"Returns the remaining space in pool before hitting the cap\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"wraps _pause(), only Admin\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeemAndBurn(address,uint256)\":{\"details\":\"User needs to approve the pool contract in the TCO2 contract for the amount to be burnt before executing this function.\",\"params\":{\"amount\":\"Amount to redeem and burn\",\"tco2\":\"TCO2 to redeem and burn\"}},\"redeemAuto(uint256)\":{\"details\":\"BCT Pool tokens in user's wallet get burned\",\"params\":{\"amount\":\"Total amount to be redeemed\"}},\"redeemAuto2(uint256)\":{\"params\":{\"amount\":\"Total amount to be redeemed\"},\"returns\":{\"tco2s\":\"amounts The addresses and amounts of the TCO2s that were automatically redeemed\"}},\"redeemMany(address[],uint256[])\":{\"details\":\"User specifies in front-end the addresses and amounts they want\",\"params\":{\"amounts\":\"Array of amounts to redeem for each tco2s BCT Pool token in user's wallet get burned\",\"tco2s\":\"Array of TCO2 contract addresses\"}},\"removeFromExternalWhiteList(address[])\":{\"params\":{\"erc20Addr\":\"accepts an array of contract addresses\"}},\"removeFromInternalBlackList(address[])\":{\"params\":{\"erc20Addr\":\"accepts an array of contract addresses\"}},\"removeFromInternalWhiteList(address[])\":{\"params\":{\"erc20Addr\":\"accepts an array of contract addressesc\"}},\"removeRedeemFeeExemptedAddress(address)\":{\"params\":{\"_address\":\"address to be removed from exemption\"}},\"removeRedeemFeeExemptedTCO2(address)\":{\"params\":{\"_tco2\":\"TCO2 to be removed from exemption\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setFeeRedeemBurnAddress(address)\":{\"params\":{\"_feeRedeemBurnAddress\":\"address to transfer the fees to burn\"}},\"setFeeRedeemBurnPercentage(uint256)\":{\"params\":{\"_feeRedeemBurnPercentageInBase\":\"percentage of fee in base\"}},\"setFeeRedeemPercentage(uint256)\":{\"params\":{\"_feeRedeemPercentageInBase\":\"percentage of fee in base\"}},\"setFeeRedeemReceiver(address)\":{\"params\":{\"_feeRedeemReceiver\":\"address to transfer the fees\"}},\"setMinimumVintageStartTime(uint64)\":{\"params\":{\"_minimumVintageStartTime\":\"unix time format\"}},\"setRouter(address)\":{\"details\":\"use this method to set router address\",\"params\":{\"_router\":\"address of ToucanCrosschainMessenger\"}},\"setSupplyCap(uint256)\":{\"details\":\"supplyCap is initially set to 0 and must be increased before deposits\"},\"setTCO2Scoring(address[])\":{\"params\":{\"tco2s\":\"array of ordered TCO2 addresses\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"switchMapping(string,bool)\":{\"params\":{\"_mappingName\":\"attribute mapping of project-vintage data\",\"accepted\":\"determines if mapping works as black or whitelist\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause the system, wraps _unpause(), only Admin\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"feeRedeemDivider\":{\"details\":\"fees redeem percentage with 2 fixed decimals precision\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAttributes(bool,string[],string[],string[])\":{\"notice\":\"Function to add attributes for filtering (does not support complex AttributeSets)\"},\"addRedeemFeeExemptedAddress(address)\":{\"notice\":\"Adds a new address for redeem fees exemption\"},\"addRedeemFeeExemptedTCO2(address)\":{\"notice\":\"Adds a new TCO2 for redeem fees exemption\"},\"addToExternalWhiteList(address[])\":{\"notice\":\"Function to whitelist selected external non-TCO2 contracts by their address\"},\"addToInternalBlackList(address[])\":{\"notice\":\"Function to blacklist certain TCO2 contracts by their address\"},\"addToInternalWhiteList(address[])\":{\"notice\":\"Function to whitelist certain TCO2 contracts by their address\"},\"bridgeBurn(address,uint256)\":{\"notice\":\"burn tokens from account to be cross-chain bridged\"},\"bridgeMint(address,uint256)\":{\"notice\":\"mint tokens to receiver account that were cross-chain bridged\"},\"bridgeTCO2s(uint32,address[],uint256[])\":{\"notice\":\"Allows MANAGER or the owner to bridge TCO2s into another domain.\"},\"calculateRedeemFees(address[],uint256[])\":{\"notice\":\"View function to calculate fees pre-execution\"},\"checkAttributeMatching(address)\":{\"notice\":\"checks whether incoming project-vintage-ERC20 token matches the accepted criteria/attributes\"},\"checkEligible(address)\":{\"notice\":\"Checks if token to be deposited is eligible for this pool\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit function for BCT pool that accepts TCO2s and mints BCT 1:1\"},\"pause()\":{\"notice\":\"Emergency function to disable contract's core functionality\"},\"redeemAndBurn(address,uint256)\":{\"notice\":\"Redeem a whitelisted TCO2 without paying any fees and burn the TCO2. Initially added to burn HFC-23 credits, can be used in the future to dispose of any other whitelisted credits.\"},\"redeemAuto(uint256)\":{\"notice\":\"Automatically redeems an amount of Pool tokens for underlying TCO2s from an array of ranked TCO2 contracts starting from contract at index 0 until amount is satisfied\"},\"redeemAuto2(uint256)\":{\"notice\":\"Automatically redeems an amount of Pool tokens for underlying TCO2s from an array of ranked TCO2 contracts starting from contract at index 0 until amount is satisfied.\"},\"redeemFeeExemptedAddresses(address)\":{\"notice\":\"End users exempted from redeem fees\"},\"redeemFeeExemptedTCO2s(address)\":{\"notice\":\"TCO2s exempted from redeem fees\"},\"redeemMany(address[],uint256[])\":{\"notice\":\"Redeems Pool tokens for multiple underlying TCO2s 1:1 minus fees\"},\"removeFromExternalWhiteList(address[])\":{\"notice\":\"Function to remove ERC20 addresses from external whitelist\"},\"removeFromInternalBlackList(address[])\":{\"notice\":\"Function to remove TCO2 addresses from internal blacklist\"},\"removeFromInternalWhiteList(address[])\":{\"notice\":\"Function to remove TCO2 addresses from internal whitelist\"},\"removeRedeemFeeExemptedAddress(address)\":{\"notice\":\"Removes an address from redeem fees exemption\"},\"removeRedeemFeeExemptedTCO2(address)\":{\"notice\":\"Removes a TCO2 from redeem fees exemption\"},\"router()\":{\"notice\":\"bridge router who has access to the bridgeMint & bridgeBurn functions which mint/burn pool tokens for cross chain messenges\"},\"scoredTCO2s(uint256)\":{\"notice\":\"array used to read from when redeeming TCO2s automatically\"},\"setFeeRedeemBurnAddress(address)\":{\"notice\":\"Update the fee redeem burn address\"},\"setFeeRedeemBurnPercentage(uint256)\":{\"notice\":\"Update the fee redeem burn percentage\"},\"setFeeRedeemPercentage(uint256)\":{\"notice\":\"Update the fee redeem percentage\"},\"setFeeRedeemReceiver(address)\":{\"notice\":\"Update the fee redeem receiver\"},\"setMinimumVintageStartTime(uint64)\":{\"notice\":\"Determines the minimum vintage start time acceptance criteria of TCO2s\"},\"setRouter(address)\":{\"notice\":\"method to set router address\"},\"setSupplyCap(uint256)\":{\"notice\":\"Function to limit the maximum BCT supply\"},\"setTCO2Scoring(address[])\":{\"notice\":\"Allows MANAGERs or the owner to pass an array to hold TCO2 contract addesses that are ordered by some form of scoring mechanism\"},\"supplyCap()\":{\"notice\":\"The supply cap is used as a measure to guard deposits in the pool. It is meant to minimize the impact a potential compromise in the source registry (eg. Verra) can have to the pool.\"},\"switchMapping(string,bool)\":{\"notice\":\"Generic function to switch attributes mappings into either acceptance or rejection criteria\"},\"tokenBalances(address)\":{\"notice\":\"Returns the balance of the TCO2 found in the pool\"}},\"notice\":\"Base Carbon Tonne for KlimaDAO Contract is an ERC20 compliant token that acts as a pool for TCO2 tokens It is possible to whitelist Toucan Protocol external tokenized carbon\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/BaseCarbonTonne.sol\":\"BaseCarbonTonne\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/CarbonOffsetBatchesTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nenum RetirementStatus {\\n    Pending, // 0\\n    Rejected, // 1\\n    Confirmed // 2\\n}\\n\",\"keccak256\":\"0x399ead69555c80163cebf2eb0d69c12691861b34a205113a900efbe9a6f13a6a\",\"license\":\"UNLICENSED\"},\"contracts/CarbonProjectTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\n/// @dev CarbonProject related data and attributes\\nstruct ProjectData {\\n    string projectId;\\n    string standard;\\n    string methodology;\\n    string region;\\n    string storageMethod;\\n    string method;\\n    string emissionType;\\n    string category;\\n    string uri;\\n    address beneficiary;\\n}\\n\",\"keccak256\":\"0x01ef59ad96e26a2ab791ba600413c5a4bde90c66535b30f322a1a01407be6879\",\"license\":\"UNLICENSED\"},\"contracts/CarbonProjectVintageTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct VintageData {\\n    /// @dev A human-readable string which differentiates this from other vintages in\\n    /// the same project, and helps build the corresponding TCO2 name and symbol.\\n    string name;\\n    uint64 startTime; // UNIX timestamp\\n    uint64 endTime; // UNIX timestamp\\n    uint256 projectTokenId;\\n    uint64 totalVintageQuantity;\\n    bool isCorsiaCompliant;\\n    bool isCCPcompliant;\\n    string coBenefits;\\n    string correspAdjustment;\\n    string additionalCertification;\\n    string uri;\\n}\\n\",\"keccak256\":\"0x10154c31406fe9cc8f28496d68eb8c8305ce41794e2bb4573506e87ca80555f7\",\"license\":\"UNLICENSED\"},\"contracts/cross-chain/ToucanCrosschainMessengerStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earthz\\npragma solidity 0.8.14;\\n\\nstruct RemoteTokenInformation {\\n    /// @notice address of the token in the remote chain\\n    address tokenAddress;\\n    /// @notice timer keeps track of when the token pair\\n    /// was created in order to disallow updates to the\\n    /// pair after a specific amount of time elapses\\n    uint256 timer;\\n}\\n\\n/// @dev Separate storage contract to improve upgrade safety\\nabstract contract ToucanCrosschainMessengerStorageV1 {\\n    enum BridgeRequestType {\\n        NOT_REGISTERED, // 0\\n        SENT, // 1\\n        RECEIVED // 2\\n    }\\n\\n    enum MessageTypes {\\n        MINT\\n    }\\n\\n    struct BridgeRequest {\\n        bool isReverted; // this state is added for future addition of revert functionality\\n        uint256 timestamp;\\n        BridgeRequestType requestType;\\n        MessageTypes messageType;\\n    }\\n\\n    /// @dev nonce is used to serialize requests executed\\n    /// by the source chain in order to avoid duplicates\\n    /// from being processed in the remote chain\\n    uint256 public nonce;\\n    //slither-disable-next-line constable-states\\n    bytes32 private DEPRECATED_DOMAIN_SEPARATOR;\\n    /// @dev requests keeps track of a hash of the request\\n    /// to the request info in order to avoid duplicates\\n    /// from being processed in the remote chain\\n    mapping(bytes32 => BridgeRequest) public requests;\\n    /// @notice remoteTokens maps a token (address) in the source\\n    /// chain to the domain id of the remote chain (uint32)\\n    /// to info about the token in the remote chain (RemoteTokenInformation)\\n    mapping(address => mapping(uint32 => RemoteTokenInformation))\\n        public remoteTokens;\\n}\\n\\nabstract contract ToucanCrosschainMessengerStorage is\\n    ToucanCrosschainMessengerStorageV1\\n{}\\n\",\"keccak256\":\"0x65f6c9408778a5154e6e221efa0ccb167f6b93e32f666e06bd6758fd6bc62d36\",\"license\":\"UNLICENSED\"},\"contracts/cross-chain/interfaces/IToucanCrosschainMessenger.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {RemoteTokenInformation} from '../ToucanCrosschainMessengerStorage.sol';\\n\\ninterface IToucanCrosschainMessenger {\\n    function sendMessage(\\n        uint32 destinationDomain,\\n        address token,\\n        uint256 amount\\n    ) external payable;\\n\\n    function sendMessageWithRecipient(\\n        uint32 destinationDomain,\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external payable;\\n\\n    function remoteTokens(address _token, uint32 _destinationDomain)\\n        external\\n        view\\n        returns (RemoteTokenInformation memory);\\n}\\n\",\"keccak256\":\"0x8128ee8a0dd9dae49a7940298359509a0aa25b72f3ee8716f210d7e7278fa49f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ICarbonOffsetBatches.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '../CarbonOffsetBatchesTypes.sol';\\n\\ninterface ICarbonOffsetBatches {\\n    function getConfirmationStatus(uint256 tokenId)\\n        external\\n        view\\n        returns (RetirementStatus);\\n\\n    function getBatchNFTData(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            RetirementStatus\\n        );\\n}\\n\",\"keccak256\":\"0xe9bcbdc3e6dac4e16854c16af38c49c0f248aa80260686a317b01a47f9497773\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanCarbonOffsets.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '../CarbonProjectVintageTypes.sol';\\nimport '../CarbonProjectTypes.sol';\\n\\ninterface IToucanCarbonOffsets {\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function getAttributes()\\n        external\\n        view\\n        returns (ProjectData memory, VintageData memory);\\n}\\n\",\"keccak256\":\"0xf5120a2c0572d6c07c7d1b4463f42d62808a419ac6fb64cb818cc729442b4fbb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanContractRegistry.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IToucanContractRegistry {\\n    function carbonOffsetBatchesAddress() external view returns (address);\\n\\n    function carbonProjectsAddress() external view returns (address);\\n\\n    function carbonProjectVintagesAddress() external view returns (address);\\n\\n    function toucanCarbonOffsetsFactoryAddress()\\n        external\\n        view\\n        returns (address);\\n\\n    function carbonOffsetBadgesAddress() external view returns (address);\\n\\n    function checkERC20(address _address) external view returns (bool);\\n\\n    function addERC20(address _address) external;\\n}\\n\",\"keccak256\":\"0x42ce24d4c848ad07623a457059f88ad801b57ff1fa3a151bee01bd04d66650b6\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts of the Toucan protocol\\n * @dev Inspired by the AAVE error library:\\n * https://github.com/aave/protocol-v2/blob/5df59ec74a0c635d877dc1c5ee4a165d41488352/contracts/protocol/libraries/helpers/Errors.sol\\n * Error messages prefix glossary:\\n *  - CP = CarbonPool\\n */\\nlibrary Errors {\\n    // User is not authorized\\n    string public constant CP_UNAUTHORIZED = '1';\\n    // Empty array provided as input\\n    string public constant CP_EMPTY_ARRAY = '2';\\n    // Pool is full of TCO2s\\n    string public constant CP_FULL_POOL = '3';\\n    // ERC20 is blacklisted in the pool. This error\\n    // is returned for TCO2s that have been blacklisted\\n    // like the HFC-23 project.\\n    string public constant CP_BLACKLISTED = '4';\\n    // ERC20 is not whitelisted in the pool\\n    // This error is returned in case the ERC20 is\\n    // not a TCO2 in which case it has to be manually\\n    // whitelisted in order to be allowed in the pool.\\n    string public constant CP_NOT_WHITELISTED = '5';\\n    // Vintage start time of a TCO2 is too old\\n    string public constant CP_START_TIME_TOO_OLD = '6';\\n    string public constant CP_REGION_NOT_ACCEPTED = '7';\\n    string public constant CP_STANDARD_NOT_ACCEPTED = '8';\\n    string public constant CP_METHODOLOGY_NOT_ACCEPTED = '9';\\n    // Provided fee is invalid, not in a basis points format: [0,10000)\\n    string public constant CP_INVALID_FEE = '10';\\n    // Provided address needs to be non-zero\\n    string public constant CP_EMPTY_ADDRESS = '11';\\n    // Validation check to ensure array lengths match\\n    string public constant CP_LENGTH_MISMATCH = '12';\\n    // TCO2 not exempted from redeem fees\\n    string public constant CP_NOT_EXEMPTED = '13';\\n    // A contract has been paused\\n    string public constant CP_PAUSED_CONTRACT = '14';\\n    // Redemption has leftover unredeemed value\\n    string public constant CP_NON_ZERO_REMAINING = '15';\\n    // Redemption exceeds deposited TCO2 supply\\n    string public constant CP_EXCEEDS_TCO2_SUPPLY = '16';\\n    // User must be a router\\n    string public constant CP_ONLY_ROUTER = '17';\\n    // User must be the owner\\n    string public constant CP_ONLY_OWNER = '18';\\n    // Zero destination address is invalid for pool token transfers\\n    string public constant CP_INVALID_DESTINATION_ZERO = '19';\\n    // Self destination address is invalid for pool token transfers\\n    string public constant CP_INVALID_DESTINATION_SELF = '20';\\n    // Zero amount provided as an input (eg., in redemptions) in invalid\\n    string public constant CP_ZERO_AMOUNT = '21';\\n}\\n\",\"keccak256\":\"0x726cde96ef3349f69872240505f98ce75e171ab94f16fd73b5a18993daaf7d33\",\"license\":\"UNLICENSED\"},\"contracts/pools/BaseCarbonTonne.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\nimport '../cross-chain/interfaces/IToucanCrosschainMessenger.sol';\\nimport '../interfaces/ICarbonOffsetBatches.sol';\\nimport '../interfaces/IToucanCarbonOffsets.sol';\\nimport '../interfaces/IToucanContractRegistry.sol';\\nimport '../libraries/Errors.sol';\\nimport './BaseCarbonTonneStorage.sol';\\n\\n/// @notice Base Carbon Tonne for KlimaDAO\\n/// Contract is an ERC20 compliant token that acts as a pool for TCO2 tokens\\n/// It is possible to whitelist Toucan Protocol external tokenized carbon\\ncontract BaseCarbonTonne is\\n    ContextUpgradeable,\\n    ERC20Upgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    UUPSUpgradeable,\\n    BaseCarbonTonneStorage\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // ----------------------------------------\\n    //      Constants\\n    // ----------------------------------------\\n\\n    string public constant VERSION = '1.5.0';\\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 2;\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\\n    /// @dev fees redeem percentage with 2 fixed decimals precision\\n    uint256 public constant feeRedeemDivider = 1e4;\\n\\n    // ----------------------------------------\\n    //      Events\\n    // ----------------------------------------\\n\\n    event Deposited(address erc20Addr, uint256 amount);\\n    event Redeemed(address account, address erc20, uint256 amount);\\n    event ExternalAddressWhitelisted(address erc20addr);\\n    event ExternalAddressRemovedFromWhitelist(address erc20addr);\\n    event InternalAddressWhitelisted(address erc20addr);\\n    event InternalAddressBlacklisted(address erc20addr);\\n    event InternalAddressRemovedFromBlackList(address erc20addr);\\n    event InternalAddressRemovedFromWhitelist(address erc20addr);\\n    event AttributeStandardAdded(string standard);\\n    event AttributeStandardRemoved(string standard);\\n    event AttributeMethodologyAdded(string methodology);\\n    event AttributeMethodologyRemoved(string methodology);\\n    event AttributeRegionAdded(string region);\\n    event AttributeRegionRemoved(string region);\\n    event RedeemFeePaid(address redeemer, uint256 fees);\\n    event RedeemFeeBurnt(address redeemer, uint256 fees);\\n    event ToucanRegistrySet(address ContractRegistry);\\n    event MappingSwitched(string mappingName, bool accepted);\\n    event SupplyCapUpdated(uint256 newCap);\\n    event MinimumVintageStartTimeUpdated(uint256 minimumVintageStartTime);\\n    event TCO2ScoringUpdated(address[] tco2s);\\n    event AddFeeExemptedTCO2(address tco2);\\n    event RemoveFeeExemptedTCO2(address tco2);\\n    event RouterUpdated(address router);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ----------------------------------------\\n    //      Upgradable related functions\\n    // ----------------------------------------\\n\\n    function initialize() external virtual initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20_init_unchained('Toucan Protocol: Base Carbon Tonne', 'BCT');\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address) internal virtual override {\\n        onlyPoolOwner();\\n    }\\n\\n    // ------------------------\\n    // Poor person's modifiers\\n    // ------------------------\\n\\n    /// @dev function that checks whether the caller is the\\n    /// contract owner\\n    function onlyPoolOwner() internal view virtual {\\n        require(owner() == msg.sender, Errors.CP_ONLY_OWNER);\\n    }\\n\\n    /// @dev function that only lets the contract's owner and granted role to execute\\n    function onlyWithRole(bytes32 role) internal view virtual {\\n        require(\\n            hasRole(role, msg.sender) || owner() == msg.sender,\\n            Errors.CP_UNAUTHORIZED\\n        );\\n    }\\n\\n    /// @dev function that checks whether the contract is paused\\n    function onlyUnpaused() internal view {\\n        require(!paused(), Errors.CP_PAUSED_CONTRACT);\\n    }\\n\\n    // ------------------------\\n    //      Admin functions\\n    // ------------------------\\n\\n    /// @notice Emergency function to disable contract's core functionality\\n    /// @dev wraps _pause(), only Admin\\n    function pause() external virtual {\\n        onlyWithRole(PAUSER_ROLE);\\n        _pause();\\n    }\\n\\n    /// @dev unpause the system, wraps _unpause(), only Admin\\n    function unpause() external virtual {\\n        onlyWithRole(PAUSER_ROLE);\\n        _unpause();\\n    }\\n\\n    function setToucanContractRegistry(address _address) external virtual {\\n        onlyPoolOwner();\\n        contractRegistry = _address;\\n        emit ToucanRegistrySet(_address);\\n    }\\n\\n    /// @notice Generic function to switch attributes mappings into either\\n    /// acceptance or rejection criteria\\n    /// @param _mappingName attribute mapping of project-vintage data\\n    /// @param accepted determines if mapping works as black or whitelist\\n    function switchMapping(string memory _mappingName, bool accepted)\\n        external\\n        virtual\\n    {\\n        onlyPoolOwner();\\n        if (strcmp(_mappingName, 'regions')) {\\n            accepted\\n                ? regionsIsAcceptedMapping = true\\n                : regionsIsAcceptedMapping = false;\\n        } else if (strcmp(_mappingName, 'standards')) {\\n            accepted\\n                ? standardsIsAcceptedMapping = true\\n                : standardsIsAcceptedMapping = false;\\n        } else if (strcmp(_mappingName, 'methodologies')) {\\n            accepted\\n                ? methodologiesIsAcceptedMapping = true\\n                : methodologiesIsAcceptedMapping = false;\\n        }\\n        emit MappingSwitched(_mappingName, accepted);\\n    }\\n\\n    /// @notice Function to add attributes for filtering (does not support complex AttributeSets)\\n    /// @param addToList determines whether attribute should be added or removed\\n    /// Other params are arrays of attributes to be added\\n    function addAttributes(\\n        bool addToList,\\n        string[] memory _regions,\\n        string[] memory _standards,\\n        string[] memory _methodologies\\n    ) external virtual {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < _standards.length; ++i) {\\n            if (addToList == true) {\\n                standards[_standards[i]] = true;\\n                emit AttributeStandardAdded(_standards[i]);\\n            } else {\\n                standards[_standards[i]] = false;\\n                emit AttributeStandardRemoved(_standards[i]);\\n            }\\n        }\\n\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < _methodologies.length; ++i) {\\n            if (addToList == true) {\\n                methodologies[_methodologies[i]] = true;\\n                emit AttributeMethodologyAdded(_methodologies[i]);\\n            } else {\\n                methodologies[_methodologies[i]] = false;\\n                emit AttributeMethodologyRemoved(_methodologies[i]);\\n            }\\n        }\\n\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < _regions.length; ++i) {\\n            if (addToList == true) {\\n                regions[_regions[i]] = true;\\n                emit AttributeRegionAdded(_regions[i]);\\n            } else {\\n                regions[_regions[i]] = false;\\n                emit AttributeRegionRemoved(_regions[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Function to whitelist selected external non-TCO2 contracts by their address\\n    /// @param erc20Addr accepts an array of contract addresses\\n    function addToExternalWhiteList(address[] memory erc20Addr) external {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < erc20Addr.length; ++i) {\\n            externalWhiteList[erc20Addr[i]] = true;\\n            emit ExternalAddressWhitelisted(erc20Addr[i]);\\n        }\\n    }\\n\\n    /// @notice Function to whitelist certain TCO2 contracts by their address\\n    /// @param erc20Addr accepts an array of contract addresses\\n    function addToInternalWhiteList(address[] memory erc20Addr) external {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < erc20Addr.length; ++i) {\\n            internalWhiteList[erc20Addr[i]] = true;\\n            emit InternalAddressWhitelisted(erc20Addr[i]);\\n        }\\n    }\\n\\n    /// @notice Function to blacklist certain TCO2 contracts by their address\\n    /// @param erc20Addr accepts an array of contract addresses\\n    function addToInternalBlackList(address[] memory erc20Addr) external {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < erc20Addr.length; ++i) {\\n            internalBlackList[erc20Addr[i]] = true;\\n            emit InternalAddressBlacklisted(erc20Addr[i]);\\n        }\\n    }\\n\\n    /// @notice Function to remove ERC20 addresses from external whitelist\\n    /// @param erc20Addr accepts an array of contract addresses\\n    function removeFromExternalWhiteList(address[] memory erc20Addr) external {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < erc20Addr.length; ++i) {\\n            externalWhiteList[erc20Addr[i]] = false;\\n            emit ExternalAddressRemovedFromWhitelist(erc20Addr[i]);\\n        }\\n    }\\n\\n    /// @notice Function to remove TCO2 addresses from internal blacklist\\n    /// @param erc20Addr accepts an array of contract addresses\\n    function removeFromInternalBlackList(address[] memory erc20Addr) external {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < erc20Addr.length; ++i) {\\n            internalBlackList[erc20Addr[i]] = false;\\n            emit InternalAddressRemovedFromBlackList(erc20Addr[i]);\\n        }\\n    }\\n\\n    /// @notice Function to remove TCO2 addresses from internal whitelist\\n    /// @param erc20Addr accepts an array of contract addressesc\\n    function removeFromInternalWhiteList(address[] memory erc20Addr) external {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < erc20Addr.length; ++i) {\\n            internalWhiteList[erc20Addr[i]] = false;\\n            emit InternalAddressRemovedFromWhitelist(erc20Addr[i]);\\n        }\\n    }\\n\\n    /// @notice Update the fee redeem percentage\\n    /// @param _feeRedeemPercentageInBase percentage of fee in base\\n    function setFeeRedeemPercentage(uint256 _feeRedeemPercentageInBase)\\n        external\\n        virtual\\n    {\\n        onlyPoolOwner();\\n        require(\\n            _feeRedeemPercentageInBase < feeRedeemDivider,\\n            Errors.CP_INVALID_FEE\\n        );\\n        feeRedeemPercentageInBase = _feeRedeemPercentageInBase;\\n    }\\n\\n    /// @notice Update the fee redeem receiver\\n    /// @param _feeRedeemReceiver address to transfer the fees\\n    function setFeeRedeemReceiver(address _feeRedeemReceiver) external virtual {\\n        onlyPoolOwner();\\n        require(_feeRedeemReceiver != address(0), Errors.CP_EMPTY_ADDRESS);\\n        feeRedeemReceiver = _feeRedeemReceiver;\\n    }\\n\\n    /// @notice Update the fee redeem burn percentage\\n    /// @param _feeRedeemBurnPercentageInBase percentage of fee in base\\n    function setFeeRedeemBurnPercentage(uint256 _feeRedeemBurnPercentageInBase)\\n        external\\n        virtual\\n    {\\n        onlyPoolOwner();\\n        require(\\n            _feeRedeemBurnPercentageInBase < feeRedeemDivider,\\n            Errors.CP_INVALID_FEE\\n        );\\n        feeRedeemBurnPercentageInBase = _feeRedeemBurnPercentageInBase;\\n    }\\n\\n    /// @notice Update the fee redeem burn address\\n    /// @param _feeRedeemBurnAddress address to transfer the fees to burn\\n    function setFeeRedeemBurnAddress(address _feeRedeemBurnAddress)\\n        external\\n        virtual\\n    {\\n        onlyPoolOwner();\\n        require(_feeRedeemBurnAddress != address(0), Errors.CP_EMPTY_ADDRESS);\\n        feeRedeemBurnAddress = _feeRedeemBurnAddress;\\n    }\\n\\n    /// @notice Adds a new address for redeem fees exemption\\n    /// @param _address address to be exempted on redeem fees\\n    function addRedeemFeeExemptedAddress(address _address) external virtual {\\n        onlyPoolOwner();\\n        redeemFeeExemptedAddresses[_address] = true;\\n    }\\n\\n    /// @notice Removes an address from redeem fees exemption\\n    /// @param _address address to be removed from exemption\\n    function removeRedeemFeeExemptedAddress(address _address) external virtual {\\n        onlyPoolOwner();\\n        redeemFeeExemptedAddresses[_address] = false;\\n    }\\n\\n    /// @notice Adds a new TCO2 for redeem fees exemption\\n    /// @param _tco2 TCO2 to be exempted on redeem fees\\n    function addRedeemFeeExemptedTCO2(address _tco2) external virtual {\\n        onlyPoolOwner();\\n        redeemFeeExemptedTCO2s[_tco2] = true;\\n        emit AddFeeExemptedTCO2(_tco2);\\n    }\\n\\n    /// @notice Removes a TCO2 from redeem fees exemption\\n    /// @param _tco2 TCO2 to be removed from exemption\\n    function removeRedeemFeeExemptedTCO2(address _tco2) external virtual {\\n        onlyPoolOwner();\\n        redeemFeeExemptedTCO2s[_tco2] = false;\\n        emit RemoveFeeExemptedTCO2(_tco2);\\n    }\\n\\n    /// @notice Function to limit the maximum BCT supply\\n    /// @dev supplyCap is initially set to 0 and must be increased before deposits\\n    function setSupplyCap(uint256 newCap) external virtual {\\n        onlyPoolOwner();\\n        supplyCap = newCap;\\n        emit SupplyCapUpdated(newCap);\\n    }\\n\\n    /// @notice Determines the minimum vintage start time acceptance criteria of TCO2s\\n    /// @param _minimumVintageStartTime unix time format\\n    function setMinimumVintageStartTime(uint64 _minimumVintageStartTime)\\n        external\\n        virtual\\n    {\\n        onlyPoolOwner();\\n        minimumVintageStartTime = _minimumVintageStartTime;\\n        emit MinimumVintageStartTimeUpdated(_minimumVintageStartTime);\\n    }\\n\\n    /// @notice Allows MANAGERs or the owner to pass an array to hold TCO2 contract addesses that are\\n    /// ordered by some form of scoring mechanism\\n    /// @param tco2s array of ordered TCO2 addresses\\n    function setTCO2Scoring(address[] calldata tco2s) external {\\n        onlyWithRole(MANAGER_ROLE);\\n        require(tco2s.length != 0, Errors.CP_EMPTY_ARRAY);\\n        scoredTCO2s = tco2s;\\n        emit TCO2ScoringUpdated(tco2s);\\n    }\\n\\n    // -------------------------------------\\n    //   ToucanCrosschainMessenger functions\\n    // -------------------------------------\\n\\n    function onlyRouter() internal view {\\n        require(msg.sender == router, Errors.CP_ONLY_ROUTER);\\n    }\\n\\n    /// @notice method to set router address\\n    /// @dev use this method to set router address\\n    /// @param _router address of ToucanCrosschainMessenger\\n    function setRouter(address _router) external {\\n        onlyPoolOwner();\\n        // router address can be set to zero to make bridgeMint and bridgeBurn unusable\\n        router = _router;\\n        emit RouterUpdated(_router);\\n    }\\n\\n    /// @notice mint tokens to receiver account that were cross-chain bridged\\n    /// @dev invoked only by the ToucanCrosschainMessenger (Router)\\n    /// @param _account account that will be minted with corss-chain bridged tokens\\n    /// @param _amount amount of tokens that will be minted\\n    function bridgeMint(address _account, uint256 _amount) external {\\n        onlyRouter();\\n        _mint(_account, _amount);\\n    }\\n\\n    /// @notice burn tokens from account to be cross-chain bridged\\n    /// @dev invoked only by the ToucanCrosschainMessenger (Router)\\n    /// @param _account account that will be burned with corss-chain bridged tokens\\n    /// @param _amount amount of tokens that will be burned\\n    function bridgeBurn(address _account, uint256 _amount) external {\\n        onlyRouter();\\n        _burn(_account, _amount);\\n    }\\n\\n    /// @notice Allows MANAGER or the owner to bridge TCO2s into\\n    /// another domain.\\n    /// @param destinationDomain The domain to bridge TCO2s to\\n    /// @param tco2s The TCO2s to bridge\\n    /// @param amounts The amounts of TCO2s to bridge\\n    function bridgeTCO2s(\\n        uint32 destinationDomain,\\n        address[] calldata tco2s,\\n        uint256[] calldata amounts\\n    ) external {\\n        onlyWithRole(MANAGER_ROLE);\\n        uint256 tco2Length = tco2s.length;\\n        require(tco2Length != 0, Errors.CP_EMPTY_ARRAY);\\n        require(tco2Length == amounts.length, Errors.CP_LENGTH_MISMATCH);\\n\\n        // TODO: Disallow bridging more TCO2s than an amount that\\n        // would bring the pool to imbalance, ie., end up with more\\n        // pool tokens than TCO2s in the pool in the source chain.\\n\\n        // Read the address of the remote pool from ToucanCrosschainMessenger\\n        // and set that as a recipient in our cross-chain messages.\\n        address tcm = router;\\n        RemoteTokenInformation memory remoteInfo = IToucanCrosschainMessenger(\\n            tcm\\n        ).remoteTokens(address(this), destinationDomain);\\n        address recipient = remoteInfo.tokenAddress;\\n        require(recipient != address(0), Errors.CP_EMPTY_ADDRESS);\\n\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < tco2Length; ++i) {\\n            IToucanCrosschainMessenger(tcm).sendMessageWithRecipient(\\n                destinationDomain,\\n                tco2s[i],\\n                amounts[i],\\n                recipient\\n            );\\n        }\\n    }\\n\\n    // ----------------------------\\n    //   Permissionless functions\\n    // ----------------------------\\n\\n    /// @notice Deposit function for BCT pool that accepts TCO2s and mints BCT 1:1\\n    /// @param erc20Addr ERC20 contract address to be deposited, requires approve\\n    /// @dev Eligibility is checked via `checkEligible`, balances are tracked\\n    /// for each TCO2 separately\\n    function deposit(address erc20Addr, uint256 amount) external virtual {\\n        onlyUnpaused();\\n        checkEligible(erc20Addr);\\n\\n        uint256 remainingSpace = getRemaining();\\n        require(remainingSpace != 0, Errors.CP_FULL_POOL);\\n\\n        if (amount > remainingSpace) amount = remainingSpace;\\n\\n        _mint(msg.sender, amount);\\n        emit Deposited(erc20Addr, amount);\\n\\n        IERC20Upgradeable(erc20Addr).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n    }\\n\\n    /// @notice Checks if token to be deposited is eligible for this pool\\n    function checkEligible(address erc20Addr)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        bool isToucanContract = IToucanContractRegistry(contractRegistry)\\n            .checkERC20(erc20Addr);\\n\\n        if (isToucanContract) {\\n            if (internalWhiteList[erc20Addr]) {\\n                return true;\\n            }\\n\\n            require(!internalBlackList[erc20Addr], Errors.CP_BLACKLISTED);\\n\\n            checkAttributeMatching(erc20Addr);\\n        } else {\\n            /// @dev If not Toucan native contract, check if address is whitelisted\\n            require(externalWhiteList[erc20Addr], Errors.CP_NOT_WHITELISTED);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice checks whether incoming project-vintage-ERC20 token matches the accepted criteria/attributes\\n    function checkAttributeMatching(address erc20Addr)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        ProjectData memory projectData;\\n        VintageData memory vintageData;\\n        (projectData, vintageData) = IToucanCarbonOffsets(erc20Addr)\\n            .getAttributes();\\n\\n        /// @dev checks if any one of the attributes are blacklisted.\\n        /// If mappings are set to \\\"whitelist\\\"-mode, require the opposite\\n        require(\\n            vintageData.startTime >= minimumVintageStartTime,\\n            Errors.CP_START_TIME_TOO_OLD\\n        );\\n        require(\\n            regions[projectData.region] == regionsIsAcceptedMapping,\\n            Errors.CP_REGION_NOT_ACCEPTED\\n        );\\n        require(\\n            standards[projectData.standard] == standardsIsAcceptedMapping,\\n            Errors.CP_STANDARD_NOT_ACCEPTED\\n        );\\n        require(\\n            methodologies[projectData.methodology] ==\\n                methodologiesIsAcceptedMapping,\\n            Errors.CP_METHODOLOGY_NOT_ACCEPTED\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice View function to calculate fees pre-execution\\n    /// @dev User specifies in front-end the addresses and amounts they want\\n    /// @param tco2s Array of TCO2 contract addresses\\n    /// @param amounts Array of amounts to redeem for each tco2s\\n    /// @return Total fees amount\\n    function calculateRedeemFees(\\n        address[] memory tco2s,\\n        uint256[] memory amounts\\n    ) external view virtual returns (uint256) {\\n        onlyUnpaused();\\n        if (redeemFeeExemptedAddresses[msg.sender]) {\\n            return 0;\\n        }\\n        uint256 tco2Length = tco2s.length;\\n        require(tco2Length == amounts.length, Errors.CP_LENGTH_MISMATCH);\\n\\n        //slither-disable-next-line uninitialized-local\\n        uint256 totalFee;\\n        uint256 _feeRedeemPercentageInBase = feeRedeemPercentageInBase;\\n\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < tco2Length; ++i) {\\n            uint256 feeAmount = (amounts[i] * _feeRedeemPercentageInBase) /\\n                feeRedeemDivider;\\n            totalFee += feeAmount;\\n        }\\n        return totalFee;\\n    }\\n\\n    /// @notice Redeem a whitelisted TCO2 without paying any fees and burn\\n    /// the TCO2. Initially added to burn HFC-23 credits, can be used in the\\n    /// future to dispose of any other whitelisted credits.\\n    /// @dev User needs to approve the pool contract in the TCO2 contract for\\n    /// the amount to be burnt before executing this function.\\n    /// @param tco2 TCO2 to redeem and burn\\n    /// @param amount Amount to redeem and burn\\n    function redeemAndBurn(address tco2, uint256 amount) external {\\n        onlyUnpaused();\\n        require(redeemFeeExemptedTCO2s[tco2], Errors.CP_NOT_EXEMPTED);\\n        redeemSingle(tco2, amount);\\n        // User has to approve the pool contract in the TCO2 contract\\n        // in order for this function to successfully burn the tokens\\n        IToucanCarbonOffsets(tco2).burnFrom(msg.sender, amount);\\n    }\\n\\n    /// @notice Redeems Pool tokens for multiple underlying TCO2s 1:1 minus fees\\n    /// @dev User specifies in front-end the addresses and amounts they want\\n    /// @param tco2s Array of TCO2 contract addresses\\n    /// @param amounts Array of amounts to redeem for each tco2s\\n    /// BCT Pool token in user's wallet get burned\\n    function redeemMany(address[] memory tco2s, uint256[] memory amounts)\\n        external\\n        virtual\\n    {\\n        onlyUnpaused();\\n        uint256 tco2Length = tco2s.length;\\n        require(tco2Length == amounts.length, Errors.CP_LENGTH_MISMATCH);\\n\\n        //slither-disable-next-line uninitialized-local\\n        uint256 totalFee;\\n        uint256 _feeRedeemPercentageInBase = feeRedeemPercentageInBase;\\n        bool isExempted = redeemFeeExemptedAddresses[msg.sender];\\n        //slither-disable-next-line uninitialized-local\\n        uint256 feeAmount;\\n\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < tco2Length; ++i) {\\n            if (!isExempted) {\\n                feeAmount =\\n                    (amounts[i] * _feeRedeemPercentageInBase) /\\n                    feeRedeemDivider;\\n                totalFee += feeAmount;\\n            } else {\\n                feeAmount = 0;\\n            }\\n            redeemSingle(tco2s[i], amounts[i] - feeAmount);\\n        }\\n        if (totalFee != 0) {\\n            uint256 burnAmount = (totalFee * feeRedeemBurnPercentageInBase) /\\n                feeRedeemDivider;\\n            totalFee -= burnAmount;\\n            transfer(feeRedeemReceiver, totalFee);\\n            emit RedeemFeePaid(msg.sender, totalFee);\\n            if (burnAmount > 0) {\\n                transfer(feeRedeemBurnAddress, burnAmount);\\n                emit RedeemFeeBurnt(msg.sender, burnAmount);\\n            }\\n        }\\n    }\\n\\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\\n    /// TCO2s from an array of ranked TCO2 contracts\\n    /// starting from contract at index 0 until amount is satisfied\\n    /// @param amount Total amount to be redeemed\\n    /// @dev BCT Pool tokens in user's wallet get burned\\n    function redeemAuto(uint256 amount) external virtual {\\n        redeemAuto2(amount);\\n    }\\n\\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\\n    /// TCO2s from an array of ranked TCO2 contracts starting from contract at\\n    /// index 0 until amount is satisfied.\\n    /// @param amount Total amount to be redeemed\\n    /// @return tco2s amounts The addresses and amounts of the TCO2s that were\\n    /// automatically redeemed\\n    function redeemAuto2(uint256 amount)\\n        public\\n        virtual\\n        returns (address[] memory tco2s, uint256[] memory amounts)\\n    {\\n        onlyUnpaused();\\n        require(amount != 0, Errors.CP_ZERO_AMOUNT);\\n        //slither-disable-next-line uninitialized-local\\n        uint256 i;\\n        // Non-zero count tracks TCO2s with a balance\\n        //slither-disable-next-line uninitialized-local\\n        uint256 nonZeroCount;\\n\\n        uint256 scoredTCO2Len = scoredTCO2s.length;\\n        while (amount > 0 && i < scoredTCO2Len) {\\n            address tco2 = scoredTCO2s[i];\\n            uint256 balance = tokenBalances(tco2);\\n            //slither-disable-next-line uninitialized-local\\n            uint256 amountToRedeem;\\n\\n            // Only TCO2s with a balance should be included for a redemption.\\n            if (balance != 0) {\\n                amountToRedeem = amount > balance ? balance : amount;\\n                amount -= amountToRedeem;\\n                unchecked {\\n                    ++nonZeroCount;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n\\n            // Create return arrays statically since Solidity does not\\n            // support dynamic arrays or mappings in-memory (EIP-1153).\\n            // Do it here to avoid having to fill out the last indexes\\n            // during the second iteration.\\n            //slither-disable-next-line incorrect-equality\\n            if (amount == 0) {\\n                tco2s = new address[](nonZeroCount);\\n                amounts = new uint256[](nonZeroCount);\\n\\n                tco2s[nonZeroCount - 1] = tco2;\\n                amounts[nonZeroCount - 1] = amountToRedeem;\\n                redeemSingle(tco2, amountToRedeem);\\n            }\\n        }\\n\\n        require(amount == 0, Errors.CP_NON_ZERO_REMAINING);\\n\\n        // Execute the second iteration by avoiding to run the last index\\n        // since we have already executed that in the first iteration.\\n        nonZeroCount = 0;\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 j; j < i - 1; ++j) {\\n            address tco2 = scoredTCO2s[j];\\n            // This second loop only gets called when the `amount` is larger\\n            // than the first tco2 balance in the array. Here, in every iteration the\\n            // tco2 balance is smaller than the remaining amount while the last bit of\\n            // the `amount` which is smaller than the tco2 balance, got redeemed\\n            // in the first loop.\\n            uint256 balance = tokenBalances(tco2);\\n\\n            // Ignore empty balances so we don't generate redundant transactions.\\n            //slither-disable-next-line incorrect-equality\\n            if (balance == 0) continue;\\n\\n            tco2s[nonZeroCount] = tco2;\\n            amounts[nonZeroCount] = balance;\\n            redeemSingle(tco2, balance);\\n            unchecked {\\n                ++nonZeroCount;\\n            }\\n        }\\n    }\\n\\n    /// @dev Internal function that redeems a single underlying token\\n    function redeemSingle(address erc20, uint256 amount) internal virtual {\\n        _burn(msg.sender, amount);\\n        IERC20Upgradeable(erc20).safeTransfer(msg.sender, amount);\\n        emit Redeemed(msg.sender, erc20, amount);\\n    }\\n\\n    /// @dev Implemented in order to disable transfers when paused\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        onlyUnpaused();\\n    }\\n\\n    /// @dev Returns the remaining space in pool before hitting the cap\\n    function getRemaining() public view returns (uint256) {\\n        return (supplyCap - totalSupply());\\n    }\\n\\n    /// @notice Returns the balance of the TCO2 found in the pool\\n    function tokenBalances(address tco2) public view returns (uint256) {\\n        return IERC20Upgradeable(tco2).balanceOf(address(this));\\n    }\\n\\n    // -----------------------------\\n    //      Locked ERC20 safety\\n    // -----------------------------\\n\\n    /// @dev Function to disallowing sending tokens to either the 0-address\\n    /// or this contract itself\\n    function validDestination(address to) internal view {\\n        require(to != address(0x0), Errors.CP_INVALID_DESTINATION_ZERO);\\n        require(to != address(this), Errors.CP_INVALID_DESTINATION_SELF);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        validDestination(recipient);\\n        super.transfer(recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        validDestination(recipient);\\n        super.transferFrom(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    // -----------------------------\\n    //      Helper Functions\\n    // -----------------------------\\n\\n    function memcmp(bytes memory a, bytes memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (a.length == b.length) && (keccak256(a) == keccak256(b));\\n    }\\n\\n    function strcmp(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return memcmp(bytes(a), bytes(b));\\n    }\\n\\n    function getScoredTCO2s() external view returns (address[] memory) {\\n        return scoredTCO2s;\\n    }\\n}\\n\",\"keccak256\":\"0x4fa9ced6020f454e946feed0c41fed393bbd66b6f17846d110c32a3ee0bdcf1e\",\"license\":\"UNLICENSED\"},\"contracts/pools/BaseCarbonTonneStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\n/// @dev Storage for UUPS Proxy upgradable BaseCarbonTonne\\nabstract contract BaseCarbonTonneStorageV1 {\\n    /// @notice The supply cap is used as a measure to guard deposits\\n    /// in the pool. It is meant to minimize the impact a potential\\n    /// compromise in the source registry (eg. Verra) can have to the pool.\\n    uint256 public supplyCap;\\n    mapping(address => uint256) private DEPRECATED_tokenBalances;\\n    address public contractRegistry;\\n\\n    uint64 public minimumVintageStartTime;\\n\\n    /// @dev Mappings for attributes that can be included or excluded\\n    /// if set to `false`, attribute-values are blacklisted/rejected\\n    /// if set to `true`, attribute-values are whitelisted/accepted\\n    bool public regionsIsAcceptedMapping;\\n    mapping(string => bool) public regions;\\n\\n    bool public standardsIsAcceptedMapping;\\n    mapping(string => bool) public standards;\\n\\n    bool public methodologiesIsAcceptedMapping;\\n    mapping(string => bool) public methodologies;\\n\\n    /// @dev mapping to whitelist external non-TCO2 contracts by address\\n    mapping(address => bool) public externalWhiteList;\\n\\n    /// @dev mapping to include certain TCO2 contracts by address,\\n    /// overriding attribute matching checks\\n    mapping(address => bool) public internalWhiteList;\\n\\n    /// @dev mapping to exclude certain TCO2 contracts by address,\\n    /// even if the attribute matching would pass\\n    mapping(address => bool) public internalBlackList;\\n}\\n\\nabstract contract BaseCarbonTonneStorageV1_1 {\\n    /// @dev fees redeem receiver address\\n    address public feeRedeemReceiver;\\n\\n    uint256 public feeRedeemPercentageInBase;\\n\\n    /// @dev fees redeem burn address\\n    address public feeRedeemBurnAddress;\\n\\n    /// @dev fees redeem burn percentage with 2 fixed decimals precision\\n    uint256 public feeRedeemBurnPercentageInBase;\\n}\\n\\nabstract contract BaseCarbonTonneStorageV1_2 {\\n    /// @notice End users exempted from redeem fees\\n    mapping(address => bool) public redeemFeeExemptedAddresses;\\n\\n    /// @notice array used to read from when redeeming TCO2s automatically\\n    address[] public scoredTCO2s;\\n}\\n\\nabstract contract BaseCarbonTonneStorageV1_3 {\\n    /// @notice TCO2s exempted from redeem fees\\n    mapping(address => bool) public redeemFeeExemptedTCO2s;\\n}\\n\\nabstract contract BaseCarbonTonneStorageV1_4 {\\n    /// @notice bridge router who has access to the bridgeMint & bridgeBurn functions which\\n    /// mint/burn pool tokens for cross chain messenges\\n    address public router;\\n}\\n\\nabstract contract BaseCarbonTonneStorage is\\n    BaseCarbonTonneStorageV1,\\n    BaseCarbonTonneStorageV1_1,\\n    BaseCarbonTonneStorageV1_2,\\n    BaseCarbonTonneStorageV1_3,\\n    BaseCarbonTonneStorageV1_4\\n{}\\n\",\"keccak256\":\"0xc88d4e0dd4bdc75d0be65bfc691abce2f19ff83f0c33acf55a31dba7949b5851\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b62000156565b6200003260ff62000035565b50565b60008054610100900460ff1615620000ce578160ff1660011480156200006e57506200006c306200014760201b620036c91760201c565b155b620000c65760405162461bcd60e51b815260206004820152602e602482015260008051602062005da683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106200012d5760405162461bcd60e51b815260206004820152602e602482015260008051602062005da683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000bd565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b608051615c186200018e600039600081816114eb0152818161152b01528181611f5001528181611f90015261208a0152615c186000f3fe6080604052600436106104cb5760003560e01c80638662522f11610276578063c36a25731161014f578063e882e37b116100c1578063f141b84f11610085578063f141b84f14610f85578063f2fde38b14610fa7578063f3edb9ec14610fc7578063f75991cd14611003578063f887ea401461103f578063ffa1ad741461106057600080fd5b8063e882e37b14610eaf578063e9d131ad14610ecf578063ec87621c14610eef578063f06f510314610f23578063f138ac1614610f5457600080fd5b8063dc5f560e11610113578063dc5f560e14610dee578063dd62ed3e14610e0e578063dff0f52314610e2e578063e07f744c14610e45578063e0d7cad914610e65578063e63ab1e914610e7b57600080fd5b8063c36a257314610d63578063d4e457ec14610d7e578063d547741f14610d99578063d6a022b814610db9578063d80e05aa14610dce57600080fd5b8063a217fddf116101e8578063abf410e5116101ac578063abf410e514610ca0578063b516f8cf14610cc1578063b6a3f59a14610ce1578063bbe669eb14610d01578063bf2f870f14610d21578063c0d7865514610d4357600080fd5b8063a217fddf14610c14578063a457c2d714610c29578063a7381a6414610c49578063a9059cbb14610c60578063a9a484c514610c8057600080fd5b80638dcb01ec1161023a5780638dcb01ec14610b485780638f770ad014610b6857806391d1485414610b7f57806395d89b4114610b9f578063963ff55e14610bb4578063a1631e4b14610bd457600080fd5b80638662522f14610a8e57806388c9cf6e14610aca57806389022e2e14610aea5780638c2a993e14610b0a5780638da5cb5b14610b2a57600080fd5b806341dbbb2a116103a85780636ca0b0d71161031a57806374f4f547116102de57806374f4f547146109e457806379255ddd14610a045780637966529d14610a245780638129fc1c14610a4457806381e48e9014610a595780638456cb5914610a7957600080fd5b80636ca0b0d7146109335780636dbb3102146109485780636fd2f1811461096857806370a0823114610999578063715018a6146109cf57600080fd5b80634f1ef2861161036c5780634f1ef28614610893578063523fba7f146108a657806352d1902d146108c657806354c9c970146108db5780635c975abb146108fb5780635db44cef1461091357600080fd5b806341dbbb2a146107e55780634642547b1461080557806346518b0a1461082557806347e7ef24146108455780634c02cad11461086557600080fd5b80632b540f19116104415780633659cfe6116104055780633659cfe61461072f578063395093511461074f57806339cd7a8a1461076f5780633a9a77ee1461078f5780633d2afced146107b05780633f4ba83a146107d057600080fd5b80632b540f19146106825780632b554142146106b35780632f2ff15d146106d3578063313ce567146106f357806336568abe1461070f57600080fd5b80630e2d15ab116104935780630e2d15ab1461058957806318160ddd146105ba57806320b167f9146105d957806323b872dd146105f9578063248a9ca31461061957806324adbf4d1461064957600080fd5b806301ffc9a7146104d057806306fdde0314610505578063095ea7b3146105275780630b7d28c7146105475780630c0efecc14610569575b600080fd5b3480156104dc57600080fd5b506104f06104eb366004614c1a565b611091565b60405190151581526020015b60405180910390f35b34801561051157600080fd5b5061051a6110c8565b6040516104fc9190614c9c565b34801561053357600080fd5b506104f0610542366004614cc4565b61115a565b34801561055357600080fd5b50610567610562366004614cf0565b611172565b005b34801561057557600080fd5b50610567610584366004614d22565b61119f565b34801561059557600080fd5b506104f06105a4366004614cf0565b6101a06020526000908152604090205460ff1681565b3480156105c657600080fd5b506035545b6040519081526020016104fc565b3480156105e557600080fd5b506105676105f4366004614d3f565b61120a565b34801561060557600080fd5b506104f0610614366004614d58565b611218565b34801561062557600080fd5b506105cb610634366004614d3f565b600090815260fb602052604090206001015490565b34801561065557600080fd5b5061019c5461066a906001600160a01b031681565b6040516001600160a01b0390911681526020016104fc565b34801561068e57600080fd5b506104f061069d366004614cf0565b6101a26020526000908152604090205460ff1681565b3480156106bf57600080fd5b506105676106ce366004614ec2565b61123b565b3480156106df57600080fd5b506105676106ee366004614f7c565b61143e565b3480156106ff57600080fd5b50604051601281526020016104fc565b34801561071b57600080fd5b5061056761072a366004614f7c565b611463565b34801561073b57600080fd5b5061056761074a366004614cf0565b6114e1565b34801561075b57600080fd5b506104f061076a366004614cc4565b6115c0565b34801561077b57600080fd5b5061056761078a36600461503a565b6115e2565b34801561079b57600080fd5b5061019e5461066a906001600160a01b031681565b3480156107bc57600080fd5b506105676107cb3660046150cb565b611745565b3480156107dc57600080fd5b50610567611992565b3480156107f157600080fd5b506105cb610800366004614ec2565b6119c5565b34801561081157600080fd5b50610567610820366004614cf0565b611a9e565b34801561083157600080fd5b50610567610840366004615156565b611ac8565b34801561085157600080fd5b50610567610860366004614cc4565b611ba3565b34801561087157600080fd5b50610885610880366004614d3f565b611c66565b6040516104fc9291906151ce565b6105676108a1366004615225565b611f46565b3480156108b257600080fd5b506105cb6108c1366004614cf0565b612012565b3480156108d257600080fd5b506105cb61207d565b3480156108e757600080fd5b506105676108f6366004615156565b612130565b34801561090757600080fd5b5060975460ff166104f0565b34801561091f57600080fd5b5061056761092e366004615156565b61220b565b34801561093f57600080fd5b506105cb600281565b34801561095457600080fd5b50610567610963366004614cf0565b6122e6565b34801561097457600080fd5b506104f0610983366004614cf0565b6101996020526000908152604090205460ff1681565b3480156109a557600080fd5b506105cb6109b4366004614cf0565b6001600160a01b031660009081526033602052604090205490565b3480156109db57600080fd5b50610567612343565b3480156109f057600080fd5b506105676109ff366004614cc4565b6123a7565b348015610a1057600080fd5b50610567610a1f366004614d3f565b6123b9565b348015610a3057600080fd5b50610567610a3f366004615156565b612403565b348015610a5057600080fd5b506105676124de565b348015610a6557600080fd5b50610567610a74366004615307565b6125a4565b348015610a8557600080fd5b506105676129ff565b348015610a9a57600080fd5b506104f0610aa93660046153a1565b80516020818301810180516101948252928201919093012091525460ff1681565b348015610ad657600080fd5b50610567610ae5366004615156565b612a30565b348015610af657600080fd5b50610567610b05366004614cc4565b612b0b565b348015610b1657600080fd5b50610567610b25366004614cc4565b612bd9565b348015610b3657600080fd5b506065546001600160a01b031661066a565b348015610b5457600080fd5b50610567610b63366004615156565b612beb565b348015610b7457600080fd5b506105cb6101915481565b348015610b8b57600080fd5b506104f0610b9a366004614f7c565b612cc6565b348015610bab57600080fd5b5061051a612cf1565b348015610bc057600080fd5b5061066a610bcf366004614d3f565b612d00565b348015610be057600080fd5b5061019354610bfc90600160a01b90046001600160401b031681565b6040516001600160401b0390911681526020016104fc565b348015610c2057600080fd5b506105cb600081565b348015610c3557600080fd5b506104f0610c44366004614cc4565b612d2b565b348015610c5557600080fd5b506105cb61019f5481565b348015610c6c57600080fd5b506104f0610c7b366004614cc4565b612db1565b348015610c8c57600080fd5b506104f0610c9b366004614cf0565b612dc6565b348015610cac57600080fd5b506101935461066a906001600160a01b031681565b348015610ccd57600080fd5b50610567610cdc366004614cf0565b6130bc565b348015610ced57600080fd5b50610567610cfc366004614d3f565b613128565b348015610d0d57600080fd5b50610567610d1c3660046153d5565b613166565b348015610d2d57600080fd5b50610d36613205565b6040516104fc9190615416565b348015610d4f57600080fd5b50610567610d5e366004614cf0565b613267565b348015610d6f57600080fd5b50610195546104f09060ff1681565b348015610d8a57600080fd5b50610197546104f09060ff1681565b348015610da557600080fd5b50610567610db4366004614f7c565b6132be565b348015610dc557600080fd5b506105cb6132e3565b348015610dda57600080fd5b50610567610de9366004614cf0565b613301565b348015610dfa57600080fd5b506104f0610e09366004614cf0565b61335b565b348015610e1a57600080fd5b506105cb610e29366004615429565b6134c9565b348015610e3a57600080fd5b506105cb61019d5481565b348015610e5157600080fd5b50610567610e60366004614cf0565b6134f4565b348015610e7157600080fd5b506105cb61271081565b348015610e8757600080fd5b506105cb7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610ebb57600080fd5b50610567610eca366004614cf0565b613560565b348015610edb57600080fd5b50610567610eea366004614d3f565b6135b7565b348015610efb57600080fd5b506105cb7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b348015610f2f57600080fd5b506104f0610f3e366004614cf0565b61019b6020526000908152604090205460ff1681565b348015610f6057600080fd5b506104f0610f6f366004614cf0565b61019a6020526000908152604090205460ff1681565b348015610f9157600080fd5b50610193546104f090600160e01b900460ff1681565b348015610fb357600080fd5b50610567610fc2366004614cf0565b613601565b348015610fd357600080fd5b506104f0610fe23660046153a1565b80516020818301810180516101968252928201919093012091525460ff1681565b34801561100f57600080fd5b506104f061101e3660046153a1565b80516020818301810180516101988252928201919093012091525460ff1681565b34801561104b57600080fd5b506101a35461066a906001600160a01b031681565b34801561106c57600080fd5b5061051a604051806040016040528060058152602001640312e352e360dc1b81525081565b60006001600160e01b03198216637965db0b60e01b14806110c257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060603680546110d790615457565b80601f016020809104026020016040519081016040528092919081815260200182805461110390615457565b80156111505780601f1061112557610100808354040283529160200191611150565b820191906000526020600020905b81548152906001019060200180831161113357829003601f168201915b5050505050905090565b6000336111688185856136d8565b5060019392505050565b61117a6137fc565b6001600160a01b031660009081526101a060205260409020805460ff19166001179055565b6111a76137fc565b610193805467ffffffffffffffff60a01b1916600160a01b6001600160401b038416908102919091179091556040519081527f87f670402a6c72fff3b60ba5223165f062b58d671871fc2c49ea96101fdd19a0906020015b60405180910390a150565b61121381611c66565b505050565b600061122383613852565b61122e8484846138d5565b50600190505b9392505050565b6112436138ee565b81518151604080518082019091526002815261189960f11b60208201529082146112895760405162461bcd60e51b81526004016112809190614c9c565b60405180910390fd5b5061019d543360009081526101a0602052604081205490919060ff1682805b8581101561135657826112fa57612710848883815181106112cb576112cb615491565b60200260200101516112dd91906154bd565b6112e791906154dc565b91506112f382866154fe565b94506112ff565b600091505b61134688828151811061131457611314615491565b60200260200101518389848151811061132f5761132f615491565b60200260200101516113419190615516565b61392e565b61134f8161552d565b90506112a8565b50831561143557600061271061019f548661137191906154bd565b61137b91906154dc565b90506113878186615516565b61019c549095506113a1906001600160a01b031686612db1565b5060408051338152602081018790527f3f89e1d936a29a8de9ae9040436992721a00bc63bbe3ca55692b95f0311640b2910160405180910390a180156114335761019e546113f8906001600160a01b031682612db1565b5060408051338152602081018390527f932bd968974f0b6fa1cb59bf961f81d2e57b39332d311b413dceae17966387db910160405180910390a15b505b50505050505050565b600082815260fb602052604090206001015461145981613992565b611213838361399c565b6001600160a01b03811633146114d35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401611280565b6114dd8282613a22565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036115295760405162461bcd60e51b815260040161128090615546565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611572600080516020615b9c833981519152546001600160a01b031690565b6001600160a01b0316146115985760405162461bcd60e51b815260040161128090615592565b6115a181613a89565b604080516000808252602082019092526115bd91839190613a91565b50565b6000336111688185856115d383836134c9565b6115dd91906154fe565b6136d8565b6115ea6137fc565b6116138260405180604001604052806007815260200166726567696f6e7360c81b815250613bfc565b1561164f578061163257610193805460ff60e01b191690556000611649565b610193805460ff60e01b1916600160e01b17905560015b50611708565b61167a82604051806040016040528060098152602001687374616e646172647360b81b815250613bfc565b156116a9578061169657610195805460ff191690556000611649565b610195805460ff19166001179055611708565b6116d8826040518060400160405280600d81526020016c6d6574686f646f6c6f6769657360981b815250613bfc565b1561170857806116f457610197805460ff191690556000611706565b610197805460ff191660019081179091555b505b7fcdc35455a1217219a4240bb18a7d2978eb98208f22f7ec36d6a1381c28f9d0f582826040516117399291906155de565b60405180910390a15050565b61176e7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08613c08565b6040805180820190915260018152601960f91b60208201528390816117a65760405162461bcd60e51b81526004016112809190614c9c565b50604080518082019091526002815261189960f11b60208201528183146117e05760405162461bcd60e51b81526004016112809190614c9c565b506101a354604051635ed6513d60e11b815230600482015263ffffffff881660248201526001600160a01b0390911690600090829063bdaca27a906044016040805180830381865afa15801561183a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185e919061560d565b8051604080518082019091526002815261313160f01b6020820152919250906001600160a01b0382166118a45760405162461bcd60e51b81526004016112809190614c9c565b5060005b8481101561198657836001600160a01b031663255e0ae48b8b8b858181106118d2576118d2615491565b90506020020160208101906118e79190614cf0565b8a8a868181106118f9576118f9615491565b6040516001600160e01b031960e088901b16815263ffffffff9590951660048601526001600160a01b039384166024860152602002919091013560448401525085166064820152608401600060405180830381600087803b15801561195d57600080fd5b505af1158015611971573d6000803e3d6000fd5b505050508061197f9061552d565b90506118a8565b50505050505050505050565b6119bb7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a613c08565b6119c3613c6e565b565b60006119cf6138ee565b3360009081526101a0602052604090205460ff16156119f0575060006110c2565b82518251604080518082019091526002815261189960f11b6020820152908214611a2d5760405162461bcd60e51b81526004016112809190614c9c565b5061019d54600090815b83811015611a9357600061271083888481518110611a5757611a57615491565b6020026020010151611a6991906154bd565b611a7391906154dc565b9050611a7f81856154fe565b93505080611a8c9061552d565b9050611a37565b509095945050505050565b611aa66137fc565b6001600160a01b031660009081526101a060205260409020805460ff19169055565b611ad06137fc565b60005b81518110156114dd5760016101996000848481518110611af557611af5615491565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f29b8b184f4394a88477750516a3701dd0c9409451be78c24428bf5f827f527a5828281518110611b6757611b67615491565b6020026020010151604051611b8b91906001600160a01b0391909116815260200190565b60405180910390a1611b9c8161552d565b9050611ad3565b611bab6138ee565b611bb48261335b565b506000611bbf6132e3565b6040805180820190915260018152603360f81b602082015290915081611bf85760405162461bcd60e51b81526004016112809190614c9c565b5080821115611c05578091505b611c0f3383613d01565b604080516001600160a01b0385168152602081018490527f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4910160405180910390a16112136001600160a01b038416333085613dec565b606080611c716138ee565b604080518082019091526002815261323160f01b602082015283611ca85760405162461bcd60e51b81526004016112809190614c9c565b506101a15460009081905b600086118015611cc257508083105b15611e305760006101a18481548110611cdd57611cdd615491565b60009182526020822001546001600160a01b03169150611cfc82612012565b905060008115611d2a57818911611d135788611d15565b815b9050611d21818a615516565b98508460010194505b85600101955088600003611e2857846001600160401b03811115611d5057611d50614d99565b604051908082528060200260200182016040528015611d79578160200160208202803683370190505b509750846001600160401b03811115611d9457611d94614d99565b604051908082528060200260200182016040528015611dbd578160200160208202803683370190505b5096508288611dcd600188615516565b81518110611ddd57611ddd615491565b6001600160a01b03909216602092830291909101909101528087611e02600188615516565b81518110611e1257611e12615491565b602002602001018181525050611e28838261392e565b505050611cb3565b604080518082019091526002815261313560f01b60208201528615611e685760405162461bcd60e51b81526004016112809190614c9c565b506000915060005b611e7b600185615516565b811015611f3d5760006101a18281548110611e9857611e98615491565b60009182526020822001546001600160a01b03169150611eb782612012565b905080600003611ec8575050611f2d565b81888681518110611edb57611edb615491565b60200260200101906001600160a01b031690816001600160a01b03168152505080878681518110611f0e57611f0e615491565b602002602001018181525050611f24828261392e565b84600101945050505b611f368161552d565b9050611e70565b50505050915091565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611f8e5760405162461bcd60e51b815260040161128090615546565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611fd7600080516020615b9c833981519152546001600160a01b031690565b6001600160a01b031614611ffd5760405162461bcd60e51b815260040161128090615592565b61200682613a89565b6114dd82826001613a91565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612059573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c29190615664565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461211d5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401611280565b50600080516020615b9c83398151915290565b6121386137fc565b60005b81518110156114dd57600161019b600084848151811061215d5761215d615491565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f43388d274033333ceb567d699874be067ce7411c2bfc989f8e623694c9b3284f8282815181106121cf576121cf615491565b60200260200101516040516121f391906001600160a01b0391909116815260200190565b60405180910390a16122048161552d565b905061213b565b6122136137fc565b60005b81518110156114dd57600061019b600084848151811061223857612238615491565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507fa7f25a7a7bea0a3fabbe5dc8b6176bd9a603925da390010a10998148c192b6708282815181106122aa576122aa615491565b60200260200101516040516122ce91906001600160a01b0391909116815260200190565b60405180910390a16122df8161552d565b9050612216565b6122ee6137fc565b6001600160a01b03811660008181526101a26020908152604091829020805460ff1916600117905590519182527fbfe78aa03afab7296923112293cb902a2fe6df5a6d3d81e1933c652c4cf860f491016111ff565b6065546001600160a01b0316331461239d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611280565b6119c36000613e5d565b6123af613eaf565b6114dd8282613ef5565b6123c16137fc565b604080518082019091526002815261031360f41b602082015261271082106123fc5760405162461bcd60e51b81526004016112809190614c9c565b5061019f55565b61240b6137fc565b60005b81518110156114dd576000610199600084848151811061243057612430615491565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f3c36656d3e8c3db21a1c7d0a7208d73387e15535964c44c30b20c45ab51b3c388282815181106124a2576124a2615491565b60200260200101516040516124c691906001600160a01b0391909116815260200190565b60405180910390a16124d78161552d565b905061240e565b60006124ea600161404f565b90508015612502576000805461ff0019166101001790555b61250a6140dc565b612512614103565b61251a614133565b612557604051806060016040528060228152602001615b7a60229139604051806040016040528060038152602001621090d560ea1b815250614166565b61256260003361399c565b80156115bd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016111ff565b6125ac6137fc565b60005b825181101561271a578415156001036126685760016101968483815181106125d9576125d9615491565b60200260200101516040516125ee919061567d565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507fa27e97999993c298fae0b7088ff732fe078cc1585665ee1554220b3cbe6317a983828151811061264657612646615491565b602002602001015160405161265b9190614c9c565b60405180910390a161270a565b600061019684838151811061267f5761267f615491565b6020026020010151604051612694919061567d565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f0127ddc00426c693b5becb26ba43a260c781ebc323b61d3b24b61e4dc5c93c718382815181106126ec576126ec615491565b60200260200101516040516127019190614c9c565b60405180910390a15b6127138161552d565b90506125af565b5060005b8151811015612889578415156001036127d757600161019883838151811061274857612748615491565b602002602001015160405161275d919061567d565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f156643e9a7f860e95993739893595e6ee1d04d9ff1b98567dbe9d5681cd152b28282815181106127b5576127b5615491565b60200260200101516040516127ca9190614c9c565b60405180910390a1612879565b60006101988383815181106127ee576127ee615491565b6020026020010151604051612803919061567d565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f21a77ac4edf49633047cc4e32b10dfe633811216214400e0e1f507c3f7287b6182828151811061285b5761285b615491565b60200260200101516040516128709190614c9c565b60405180910390a15b6128828161552d565b905061271e565b5060005b83518110156129f8578415156001036129465760016101948583815181106128b7576128b7615491565b60200260200101516040516128cc919061567d565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f3df7a1330febee3646ae4a0f0e46c94c046f0ee810b2b7f1fa10fa8f34d7b7ef84828151811061292457612924615491565b60200260200101516040516129399190614c9c565b60405180910390a16129e8565b600061019485838151811061295d5761295d615491565b6020026020010151604051612972919061567d565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507fc84badb33408cce6e89b30a735d8f06e094fa4a19c01c2da66718f490c672f658482815181106129ca576129ca615491565b60200260200101516040516129df9190614c9c565b60405180910390a15b6129f18161552d565b905061288d565b5050505050565b612a287f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a613c08565b6119c36141b4565b612a386137fc565b60005b81518110156114dd57600161019a6000848481518110612a5d57612a5d615491565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f2e333bce7bf5a0097fbb4fef2a950809960b5a4aa1a63cbcffc24ac62dc4fd07828281518110612acf57612acf615491565b6020026020010151604051612af391906001600160a01b0391909116815260200190565b60405180910390a1612b048161552d565b9050612a3b565b612b136138ee565b6001600160a01b03821660009081526101a260209081526040918290205482518084019093526002835261313360f01b9183019190915260ff16612b6a5760405162461bcd60e51b81526004016112809190614c9c565b50612b75828261392e565b60405163079cc67960e41b8152336004820152602481018290526001600160a01b038316906379cc679090604401600060405180830381600087803b158015612bbd57600080fd5b505af1158015612bd1573d6000803e3d6000fd5b505050505050565b612be1613eaf565b6114dd8282613d01565b612bf36137fc565b60005b81518110156114dd57600061019a6000848481518110612c1857612c18615491565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f9cee5064afac40e291311ecb6a670ef3ef652131fb1ed15c1266fb22cffd6bdd828281518110612c8a57612c8a615491565b6020026020010151604051612cae91906001600160a01b0391909116815260200190565b60405180910390a1612cbf8161552d565b9050612bf6565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060603780546110d790615457565b6101a18181548110612d1157600080fd5b6000918252602090912001546001600160a01b0316905081565b60003381612d3982866134c9565b905083811015612d995760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401611280565b612da682868684036136d8565b506001949350505050565b6000612dbc83613852565b611168838361422f565b6000612e2760405180610140016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160006001600160a01b031681525090565b612ea36040518061016001604052806060815260200160006001600160401b0316815260200160006001600160401b031681526020016000815260200160006001600160401b03168152602001600015158152602001600015158152602001606081526020016060815260200160608152602001606081525090565b836001600160a01b031663152583de6040518163ffffffff1660e01b8152600401600060405180830381865afa158015612ee1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612f099190810190615837565b610193546020808301516040805180820190915260018152601b60f91b9281019290925293955091935090916001600160401b03600160a01b909204821691161015612f685760405162461bcd60e51b81526004016112809190614c9c565b50610193601c9054906101000a900460ff1615156101948360600151604051612f91919061567d565b9081526040805191829003602090810183205483830190925260018352603760f81b90830152909160ff909116151514612fde5760405162461bcd60e51b81526004016112809190614c9c565b5061019554602083015160405160ff909216151591610196916130009161567d565b9081526040805191829003602090810183205483830190925260018352600760fb1b90830152909160ff90911615151461304d5760405162461bcd60e51b81526004016112809190614c9c565b5061019754604080840151905160ff9092161515916101989161306f9161567d565b9081526040805191829003602090810183205483830190925260018352603960f81b90830152909160ff909116151514612da65760405162461bcd60e51b81526004016112809190614c9c565b6130c46137fc565b604080518082019091526002815261313160f01b60208201526001600160a01b0382166131045760405162461bcd60e51b81526004016112809190614c9c565b5061019c80546001600160a01b0319166001600160a01b0392909216919091179055565b6131306137fc565b6101918190556040518181527f4e44c8be34d12f1b7f56b13b4bbe97e64ca37a91916f86c73412da80c21748e2906020016111ff565b61318f7f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08613c08565b6040805180820190915260018152601960f91b6020820152816131c55760405162461bcd60e51b81526004016112809190614c9c565b506131d36101a18383614b2e565b507f9204d457ace303c5dbbeaa6966e5ec65661a390007a367c6645e52b4ef4b528e82826040516117399291906159f4565b60606101a180548060200260200160405190810160405280929190818152602001828054801561115057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613240575050505050905090565b61326f6137fc565b6101a380546001600160a01b0319166001600160a01b0383169081179091556040519081527f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80906020016111ff565b600082815260fb60205260409020600101546132d981613992565b6112138383613a22565b60006132ee60355490565b610191546132fc9190615516565b905090565b6133096137fc565b6001600160a01b03811660008181526101a26020908152604091829020805460ff1916905590519182527fd1fc9d8986829d0ba9df2bc201a2c76327e0f71567b5a2fb82ba464bf4a03f4491016111ff565b6101935460405163787d871360e01b81526001600160a01b038381166004830152600092839291169063787d871390602401602060405180830381865afa1580156133aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ce9190615a37565b90508015613468576001600160a01b038316600090815261019a602052604090205460ff16156134015750600192915050565b6001600160a01b038316600090815261019b602090815260409182902054825180840190935260018352600d60fa1b9183019190915260ff16156134585760405162461bcd60e51b81526004016112809190614c9c565b5061346283612dc6565b506134c0565b6001600160a01b0383166000908152610199602090815260409182902054825180840190935260018352603560f81b9183019190915260ff166134be5760405162461bcd60e51b81526004016112809190614c9c565b505b50600192915050565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6134fc6137fc565b604080518082019091526002815261313160f01b60208201526001600160a01b03821661353c5760405162461bcd60e51b81526004016112809190614c9c565b5061019e80546001600160a01b0319166001600160a01b0392909216919091179055565b6135686137fc565b61019380546001600160a01b0319166001600160a01b0383169081179091556040519081527f86907b53cf2024579968511876daf0b4620d65803b550e33101baf70aeb6f5eb906020016111ff565b6135bf6137fc565b604080518082019091526002815261031360f41b602082015261271082106135fa5760405162461bcd60e51b81526004016112809190614c9c565b5061019d55565b6065546001600160a01b0316331461365b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401611280565b6001600160a01b0381166136c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611280565b6115bd81613e5d565b6001600160a01b03163b151590565b6001600160a01b03831661373a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401611280565b6001600160a01b03821661379b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401611280565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b3361380f6065546001600160a01b031690565b6001600160a01b03161460405180604001604052806002815260200161062760f31b815250906115bd5760405162461bcd60e51b81526004016112809190614c9c565b604080518082019091526002815261313960f01b60208201526001600160a01b0382166138925760405162461bcd60e51b81526004016112809190614c9c565b50604080518082019091526002815261032360f41b60208201526001600160a01b03821630036114dd5760405162461bcd60e51b81526004016112809190614c9c565b6000336138e385828561423d565b612da68585856142b1565b60975460ff1615604051806040016040528060028152602001610c4d60f21b815250906115bd5760405162461bcd60e51b81526004016112809190614c9c565b6139383382613ef5565b61394c6001600160a01b038316338361448a565b604080513381526001600160a01b03841660208201529081018290527f27d4634c833b7622a0acddbf7f746183625f105945e95c723ad1d5a9f2a0b6fc90606001611739565b6115bd81336144ba565b6139a68282612cc6565b6114dd57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556139de3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b613a2c8282612cc6565b156114dd57600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6115bd6137fc565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615613ac4576112138361451e565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613b1e575060408051601f3d908101601f19168201909252613b1b91810190615664565b60015b613b815760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401611280565b600080516020615b9c8339815191528114613bf05760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401611280565b506112138383836145ba565b600061123483836145df565b613c128133612cc6565b80613c36575033613c2b6065546001600160a01b031690565b6001600160a01b0316145b604051806040016040528060018152602001603160f81b815250906114dd5760405162461bcd60e51b81526004016112809190614c9c565b60975460ff16613cb75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401611280565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216613d575760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401611280565b613d6360008383614604565b8060356000828254613d7591906154fe565b90915550506001600160a01b03821660009081526033602052604081208054839290613da29084906154fe565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052613e579085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261460c565b50505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6101a354604080518082019091526002815261313760f01b6020820152906001600160a01b031633146115bd5760405162461bcd60e51b81526004016112809190614c9c565b6001600160a01b038216613f555760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401611280565b613f6182600083614604565b6001600160a01b03821660009081526033602052604090205481811015613fd55760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401611280565b6001600160a01b0383166000908152603360205260408120838303905560358054849290614004908490615516565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b60008054610100900460ff1615614096578160ff1660011480156140725750303b155b61408e5760405162461bcd60e51b815260040161128090615a54565b506000919050565b60005460ff8084169116106140bd5760405162461bcd60e51b815260040161128090615a54565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166119c35760405162461bcd60e51b815260040161128090615aa2565b600054610100900460ff1661412a5760405162461bcd60e51b815260040161128090615aa2565b6119c333613e5d565b600054610100900460ff1661415a5760405162461bcd60e51b815260040161128090615aa2565b6097805460ff19169055565b600054610100900460ff1661418d5760405162461bcd60e51b815260040161128090615aa2565b81516141a0906036906020850190614b91565b508051611213906037906020840190614b91565b60975460ff16156141fa5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401611280565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613ce43390565b6000336111688185856142b1565b600061424984846134c9565b90506000198114613e5757818110156142a45760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401611280565b613e5784848484036136d8565b6001600160a01b0383166143155760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401611280565b6001600160a01b0382166143775760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401611280565b614382838383614604565b6001600160a01b038316600090815260336020526040902054818110156143fa5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401611280565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906144319084906154fe565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161447d91815260200190565b60405180910390a3613e57565b6040516001600160a01b03831660248201526044810182905261121390849063a9059cbb60e01b90606401613e20565b6144c48282612cc6565b6114dd576144dc816001600160a01b031660146146de565b6144e78360206146de565b6040516020016144f8929190615aed565b60408051601f198184030181529082905262461bcd60e51b825261128091600401614c9c565b6001600160a01b0381163b61458b5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401611280565b600080516020615b9c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6145c383614879565b6000825111806145d05750805b1561121357613e5783836148b9565b6000815183511480156112345750508051602091820120825192909101919091201490565b6112136138ee565b6000614661826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166149ad9092919063ffffffff16565b805190915015611213578080602001905181019061467f9190615a37565b6112135760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611280565b606060006146ed8360026154bd565b6146f89060026154fe565b6001600160401b0381111561470f5761470f614d99565b6040519080825280601f01601f191660200182016040528015614739576020820181803683370190505b509050600360fc1b8160008151811061475457614754615491565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061478357614783615491565b60200101906001600160f81b031916908160001a90535060006147a78460026154bd565b6147b29060016154fe565b90505b600181111561482a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106147e6576147e6615491565b1a60f81b8282815181106147fc576147fc615491565b60200101906001600160f81b031916908160001a90535060049490941c9361482381615b62565b90506147b5565b5083156112345760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401611280565b6148828161451e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6149215760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401611280565b600080846001600160a01b03168460405161493c919061567d565b600060405180830381855af49150503d8060008114614977576040519150601f19603f3d011682016040523d82523d6000602084013e61497c565b606091505b50915091506149a48282604051806060016040528060278152602001615bbc602791396149c4565b95945050505050565b60606149bc84846000856149fd565b949350505050565b606083156149d3575081611234565b8251156149e35782518084602001fd5b8160405162461bcd60e51b81526004016112809190614c9c565b606082471015614a5e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611280565b6001600160a01b0385163b614ab55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611280565b600080866001600160a01b03168587604051614ad1919061567d565b60006040518083038185875af1925050503d8060008114614b0e576040519150601f19603f3d011682016040523d82523d6000602084013e614b13565b606091505b5091509150614b238282866149c4565b979650505050505050565b828054828255906000526020600020908101928215614b81579160200282015b82811115614b815781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190614b4e565b50614b8d929150614c05565b5090565b828054614b9d90615457565b90600052602060002090601f016020900481019282614bbf5760008555614b81565b82601f10614bd857805160ff1916838001178555614b81565b82800160010185558215614b81579182015b82811115614b81578251825591602001919060010190614bea565b5b80821115614b8d5760008155600101614c06565b600060208284031215614c2c57600080fd5b81356001600160e01b03198116811461123457600080fd5b60005b83811015614c5f578181015183820152602001614c47565b83811115613e575750506000910152565b60008151808452614c88816020860160208601614c44565b601f01601f19169290920160200192915050565b6020815260006112346020830184614c70565b6001600160a01b03811681146115bd57600080fd5b60008060408385031215614cd757600080fd5b8235614ce281614caf565b946020939093013593505050565b600060208284031215614d0257600080fd5b813561123481614caf565b6001600160401b03811681146115bd57600080fd5b600060208284031215614d3457600080fd5b813561123481614d0d565b600060208284031215614d5157600080fd5b5035919050565b600080600060608486031215614d6d57600080fd5b8335614d7881614caf565b92506020840135614d8881614caf565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715614dd257614dd2614d99565b60405290565b60405161014081016001600160401b0381118282101715614dd257614dd2614d99565b604051601f8201601f191681016001600160401b0381118282101715614e2357614e23614d99565b604052919050565b60006001600160401b03821115614e4457614e44614d99565b5060051b60200190565b600082601f830112614e5f57600080fd5b81356020614e74614e6f83614e2b565b614dfb565b82815260059290921b84018101918181019086841115614e9357600080fd5b8286015b84811015614eb7578035614eaa81614caf565b8352918301918301614e97565b509695505050505050565b60008060408385031215614ed557600080fd5b82356001600160401b0380821115614eec57600080fd5b614ef886838701614e4e565b9350602091508185013581811115614f0f57600080fd5b85019050601f81018613614f2257600080fd5b8035614f30614e6f82614e2b565b81815260059190911b82018301908381019088831115614f4f57600080fd5b928401925b82841015614f6d57833582529284019290840190614f54565b80955050505050509250929050565b60008060408385031215614f8f57600080fd5b823591506020830135614fa181614caf565b809150509250929050565b60006001600160401b03821115614fc557614fc5614d99565b50601f01601f191660200190565b6000614fe1614e6f84614fac565b9050828152838383011115614ff557600080fd5b828260208301376000602084830101529392505050565b600082601f83011261501d57600080fd5b61123483833560208501614fd3565b80151581146115bd57600080fd5b6000806040838503121561504d57600080fd5b82356001600160401b0381111561506357600080fd5b61506f8582860161500c565b9250506020830135614fa18161502c565b60008083601f84011261509257600080fd5b5081356001600160401b038111156150a957600080fd5b6020830191508360208260051b85010111156150c457600080fd5b9250929050565b6000806000806000606086880312156150e357600080fd5b853563ffffffff811681146150f757600080fd5b945060208601356001600160401b038082111561511357600080fd5b61511f89838a01615080565b9096509450604088013591508082111561513857600080fd5b5061514588828901615080565b969995985093965092949392505050565b60006020828403121561516857600080fd5b81356001600160401b0381111561517e57600080fd5b6149bc84828501614e4e565b600081518084526020808501945080840160005b838110156151c35781516001600160a01b03168752958201959082019060010161519e565b509495945050505050565b6040815260006151e1604083018561518a565b82810360208481019190915284518083528582019282019060005b81811015615218578451835293830193918301916001016151fc565b5090979650505050505050565b6000806040838503121561523857600080fd5b823561524381614caf565b915060208301356001600160401b0381111561525e57600080fd5b8301601f8101851361526f57600080fd5b61527e85823560208401614fd3565b9150509250929050565b600082601f83011261529957600080fd5b813560206152a9614e6f83614e2b565b82815260059290921b840181019181810190868411156152c857600080fd5b8286015b84811015614eb75780356001600160401b038111156152eb5760008081fd5b6152f98986838b010161500c565b8452509183019183016152cc565b6000806000806080858703121561531d57600080fd5b84356153288161502c565b935060208501356001600160401b038082111561534457600080fd5b61535088838901615288565b9450604087013591508082111561536657600080fd5b61537288838901615288565b9350606087013591508082111561538857600080fd5b5061539587828801615288565b91505092959194509250565b6000602082840312156153b357600080fd5b81356001600160401b038111156153c957600080fd5b6149bc8482850161500c565b600080602083850312156153e857600080fd5b82356001600160401b038111156153fe57600080fd5b61540a85828601615080565b90969095509350505050565b602081526000611234602083018461518a565b6000806040838503121561543c57600080fd5b823561544781614caf565b91506020830135614fa181614caf565b600181811c9082168061546b57607f821691505b60208210810361548b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156154d7576154d76154a7565b500290565b6000826154f957634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115615511576155116154a7565b500190565b600082821015615528576155286154a7565b500390565b60006001820161553f5761553f6154a7565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6040815260006155f16040830185614c70565b905082151560208301529392505050565b80516140d781614caf565b60006040828403121561561f57600080fd5b604051604081018181106001600160401b038211171561564157615641614d99565b604052825161564f81614caf565b81526020928301519281019290925250919050565b60006020828403121561567657600080fd5b5051919050565b6000825161568f818460208701614c44565b9190910192915050565b600082601f8301126156aa57600080fd5b81516156b8614e6f82614fac565b8181528460208386010111156156cd57600080fd5b6149bc826020830160208701614c44565b80516140d781614d0d565b80516140d78161502c565b6000610160828403121561570757600080fd5b61570f614daf565b905081516001600160401b038082111561572857600080fd5b61573485838601615699565b8352615742602085016156de565b6020840152615753604085016156de565b60408401526060840151606084015261576e608085016156de565b608084015261577f60a085016156e9565b60a084015261579060c085016156e9565b60c084015260e08401519150808211156157a957600080fd5b6157b585838601615699565b60e0840152610100915081840151818111156157d057600080fd5b6157dc86828701615699565b8385015250610120915081840151818111156157f757600080fd5b61580386828701615699565b83850152506101409150818401518181111561581e57600080fd5b61582a86828701615699565b8385015250505092915050565b6000806040838503121561584a57600080fd5b82516001600160401b038082111561586157600080fd5b90840190610140828703121561587657600080fd5b61587e614dd8565b82518281111561588d57600080fd5b61589988828601615699565b8252506020830151828111156158ae57600080fd5b6158ba88828601615699565b6020830152506040830151828111156158d257600080fd5b6158de88828601615699565b6040830152506060830151828111156158f657600080fd5b61590288828601615699565b60608301525060808301518281111561591a57600080fd5b61592688828601615699565b60808301525060a08301518281111561593e57600080fd5b61594a88828601615699565b60a08301525060c08301518281111561596257600080fd5b61596e88828601615699565b60c08301525060e08301518281111561598657600080fd5b61599288828601615699565b60e08301525061010080840151838111156159ac57600080fd5b6159b889828701615699565b8284015250506101206159cc818501615602565b9082015260208601519094509150808211156159e757600080fd5b5061527e858286016156f4565b60208082528181018390526000908460408401835b86811015614eb7578235615a1c81614caf565b6001600160a01b031682529183019190830190600101615a09565b600060208284031215615a4957600080fd5b81516112348161502c565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615b25816017850160208801614c44565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615b56816028840160208801614c44565b01602801949350505050565b600081615b7157615b716154a7565b50600019019056fe546f7563616e2050726f746f636f6c3a204261736520436172626f6e20546f6e6e65360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d19c9efa8ecc9f776e51e7d2435b8d4b535da920538268eef0ded63a3d5c5c0864736f6c634300080e0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAttributes(bool,string[],string[],string[])": {
        "params": {
          "addToList": "determines whether attribute should be added or removed Other params are arrays of attributes to be added"
        }
      },
      "addRedeemFeeExemptedAddress(address)": {
        "params": {
          "_address": "address to be exempted on redeem fees"
        }
      },
      "addRedeemFeeExemptedTCO2(address)": {
        "params": {
          "_tco2": "TCO2 to be exempted on redeem fees"
        }
      },
      "addToExternalWhiteList(address[])": {
        "params": {
          "erc20Addr": "accepts an array of contract addresses"
        }
      },
      "addToInternalBlackList(address[])": {
        "params": {
          "erc20Addr": "accepts an array of contract addresses"
        }
      },
      "addToInternalWhiteList(address[])": {
        "params": {
          "erc20Addr": "accepts an array of contract addresses"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "bridgeBurn(address,uint256)": {
        "details": "invoked only by the ToucanCrosschainMessenger (Router)",
        "params": {
          "_account": "account that will be burned with corss-chain bridged tokens",
          "_amount": "amount of tokens that will be burned"
        }
      },
      "bridgeMint(address,uint256)": {
        "details": "invoked only by the ToucanCrosschainMessenger (Router)",
        "params": {
          "_account": "account that will be minted with corss-chain bridged tokens",
          "_amount": "amount of tokens that will be minted"
        }
      },
      "bridgeTCO2s(uint32,address[],uint256[])": {
        "params": {
          "amounts": "The amounts of TCO2s to bridge",
          "destinationDomain": "The domain to bridge TCO2s to",
          "tco2s": "The TCO2s to bridge"
        }
      },
      "calculateRedeemFees(address[],uint256[])": {
        "details": "User specifies in front-end the addresses and amounts they want",
        "params": {
          "amounts": "Array of amounts to redeem for each tco2s",
          "tco2s": "Array of TCO2 contract addresses"
        },
        "returns": {
          "_0": "Total fees amount"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(address,uint256)": {
        "details": "Eligibility is checked via `checkEligible`, balances are tracked for each TCO2 separately",
        "params": {
          "erc20Addr": "ERC20 contract address to be deposited, requires approve"
        }
      },
      "getRemaining()": {
        "details": "Returns the remaining space in pool before hitting the cap"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "wraps _pause(), only Admin"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeemAndBurn(address,uint256)": {
        "details": "User needs to approve the pool contract in the TCO2 contract for the amount to be burnt before executing this function.",
        "params": {
          "amount": "Amount to redeem and burn",
          "tco2": "TCO2 to redeem and burn"
        }
      },
      "redeemAuto(uint256)": {
        "details": "BCT Pool tokens in user's wallet get burned",
        "params": {
          "amount": "Total amount to be redeemed"
        }
      },
      "redeemAuto2(uint256)": {
        "params": {
          "amount": "Total amount to be redeemed"
        },
        "returns": {
          "tco2s": "amounts The addresses and amounts of the TCO2s that were automatically redeemed"
        }
      },
      "redeemMany(address[],uint256[])": {
        "details": "User specifies in front-end the addresses and amounts they want",
        "params": {
          "amounts": "Array of amounts to redeem for each tco2s BCT Pool token in user's wallet get burned",
          "tco2s": "Array of TCO2 contract addresses"
        }
      },
      "removeFromExternalWhiteList(address[])": {
        "params": {
          "erc20Addr": "accepts an array of contract addresses"
        }
      },
      "removeFromInternalBlackList(address[])": {
        "params": {
          "erc20Addr": "accepts an array of contract addresses"
        }
      },
      "removeFromInternalWhiteList(address[])": {
        "params": {
          "erc20Addr": "accepts an array of contract addressesc"
        }
      },
      "removeRedeemFeeExemptedAddress(address)": {
        "params": {
          "_address": "address to be removed from exemption"
        }
      },
      "removeRedeemFeeExemptedTCO2(address)": {
        "params": {
          "_tco2": "TCO2 to be removed from exemption"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setFeeRedeemBurnAddress(address)": {
        "params": {
          "_feeRedeemBurnAddress": "address to transfer the fees to burn"
        }
      },
      "setFeeRedeemBurnPercentage(uint256)": {
        "params": {
          "_feeRedeemBurnPercentageInBase": "percentage of fee in base"
        }
      },
      "setFeeRedeemPercentage(uint256)": {
        "params": {
          "_feeRedeemPercentageInBase": "percentage of fee in base"
        }
      },
      "setFeeRedeemReceiver(address)": {
        "params": {
          "_feeRedeemReceiver": "address to transfer the fees"
        }
      },
      "setMinimumVintageStartTime(uint64)": {
        "params": {
          "_minimumVintageStartTime": "unix time format"
        }
      },
      "setRouter(address)": {
        "details": "use this method to set router address",
        "params": {
          "_router": "address of ToucanCrosschainMessenger"
        }
      },
      "setSupplyCap(uint256)": {
        "details": "supplyCap is initially set to 0 and must be increased before deposits"
      },
      "setTCO2Scoring(address[])": {
        "params": {
          "tco2s": "array of ordered TCO2 addresses"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "switchMapping(string,bool)": {
        "params": {
          "_mappingName": "attribute mapping of project-vintage data",
          "accepted": "determines if mapping works as black or whitelist"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause the system, wraps _unpause(), only Admin"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "feeRedeemDivider": {
        "details": "fees redeem percentage with 2 fixed decimals precision"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAttributes(bool,string[],string[],string[])": {
        "notice": "Function to add attributes for filtering (does not support complex AttributeSets)"
      },
      "addRedeemFeeExemptedAddress(address)": {
        "notice": "Adds a new address for redeem fees exemption"
      },
      "addRedeemFeeExemptedTCO2(address)": {
        "notice": "Adds a new TCO2 for redeem fees exemption"
      },
      "addToExternalWhiteList(address[])": {
        "notice": "Function to whitelist selected external non-TCO2 contracts by their address"
      },
      "addToInternalBlackList(address[])": {
        "notice": "Function to blacklist certain TCO2 contracts by their address"
      },
      "addToInternalWhiteList(address[])": {
        "notice": "Function to whitelist certain TCO2 contracts by their address"
      },
      "bridgeBurn(address,uint256)": {
        "notice": "burn tokens from account to be cross-chain bridged"
      },
      "bridgeMint(address,uint256)": {
        "notice": "mint tokens to receiver account that were cross-chain bridged"
      },
      "bridgeTCO2s(uint32,address[],uint256[])": {
        "notice": "Allows MANAGER or the owner to bridge TCO2s into another domain."
      },
      "calculateRedeemFees(address[],uint256[])": {
        "notice": "View function to calculate fees pre-execution"
      },
      "checkAttributeMatching(address)": {
        "notice": "checks whether incoming project-vintage-ERC20 token matches the accepted criteria/attributes"
      },
      "checkEligible(address)": {
        "notice": "Checks if token to be deposited is eligible for this pool"
      },
      "deposit(address,uint256)": {
        "notice": "Deposit function for BCT pool that accepts TCO2s and mints BCT 1:1"
      },
      "pause()": {
        "notice": "Emergency function to disable contract's core functionality"
      },
      "redeemAndBurn(address,uint256)": {
        "notice": "Redeem a whitelisted TCO2 without paying any fees and burn the TCO2. Initially added to burn HFC-23 credits, can be used in the future to dispose of any other whitelisted credits."
      },
      "redeemAuto(uint256)": {
        "notice": "Automatically redeems an amount of Pool tokens for underlying TCO2s from an array of ranked TCO2 contracts starting from contract at index 0 until amount is satisfied"
      },
      "redeemAuto2(uint256)": {
        "notice": "Automatically redeems an amount of Pool tokens for underlying TCO2s from an array of ranked TCO2 contracts starting from contract at index 0 until amount is satisfied."
      },
      "redeemFeeExemptedAddresses(address)": {
        "notice": "End users exempted from redeem fees"
      },
      "redeemFeeExemptedTCO2s(address)": {
        "notice": "TCO2s exempted from redeem fees"
      },
      "redeemMany(address[],uint256[])": {
        "notice": "Redeems Pool tokens for multiple underlying TCO2s 1:1 minus fees"
      },
      "removeFromExternalWhiteList(address[])": {
        "notice": "Function to remove ERC20 addresses from external whitelist"
      },
      "removeFromInternalBlackList(address[])": {
        "notice": "Function to remove TCO2 addresses from internal blacklist"
      },
      "removeFromInternalWhiteList(address[])": {
        "notice": "Function to remove TCO2 addresses from internal whitelist"
      },
      "removeRedeemFeeExemptedAddress(address)": {
        "notice": "Removes an address from redeem fees exemption"
      },
      "removeRedeemFeeExemptedTCO2(address)": {
        "notice": "Removes a TCO2 from redeem fees exemption"
      },
      "router()": {
        "notice": "bridge router who has access to the bridgeMint & bridgeBurn functions which mint/burn pool tokens for cross chain messenges"
      },
      "scoredTCO2s(uint256)": {
        "notice": "array used to read from when redeeming TCO2s automatically"
      },
      "setFeeRedeemBurnAddress(address)": {
        "notice": "Update the fee redeem burn address"
      },
      "setFeeRedeemBurnPercentage(uint256)": {
        "notice": "Update the fee redeem burn percentage"
      },
      "setFeeRedeemPercentage(uint256)": {
        "notice": "Update the fee redeem percentage"
      },
      "setFeeRedeemReceiver(address)": {
        "notice": "Update the fee redeem receiver"
      },
      "setMinimumVintageStartTime(uint64)": {
        "notice": "Determines the minimum vintage start time acceptance criteria of TCO2s"
      },
      "setRouter(address)": {
        "notice": "method to set router address"
      },
      "setSupplyCap(uint256)": {
        "notice": "Function to limit the maximum BCT supply"
      },
      "setTCO2Scoring(address[])": {
        "notice": "Allows MANAGERs or the owner to pass an array to hold TCO2 contract addesses that are ordered by some form of scoring mechanism"
      },
      "supplyCap()": {
        "notice": "The supply cap is used as a measure to guard deposits in the pool. It is meant to minimize the impact a potential compromise in the source registry (eg. Verra) can have to the pool."
      },
      "switchMapping(string,bool)": {
        "notice": "Generic function to switch attributes mappings into either acceptance or rejection criteria"
      },
      "tokenBalances(address)": {
        "notice": "Returns the balance of the TCO2 found in the pool"
      }
    },
    "notice": "Base Carbon Tonne for KlimaDAO Contract is an ERC20 compliant token that acts as a pool for TCO2 tokens It is possible to whitelist Toucan Protocol external tokenized carbon",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1489,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1492,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4534,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1890,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1896,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1898,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 1900,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 1902,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 2481,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 980,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 1092,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1781,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 1870,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4841,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 596,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)591_storage)"
      },
      {
        "astId": 895,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1471,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1759,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 15215,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "supplyCap",
        "offset": 0,
        "slot": "401",
        "type": "t_uint256"
      },
      {
        "astId": 15219,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "DEPRECATED_tokenBalances",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15221,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "contractRegistry",
        "offset": 0,
        "slot": "403",
        "type": "t_address"
      },
      {
        "astId": 15223,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "minimumVintageStartTime",
        "offset": 20,
        "slot": "403",
        "type": "t_uint64"
      },
      {
        "astId": 15226,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "regionsIsAcceptedMapping",
        "offset": 28,
        "slot": "403",
        "type": "t_bool"
      },
      {
        "astId": 15230,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "regions",
        "offset": 0,
        "slot": "404",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 15232,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "standardsIsAcceptedMapping",
        "offset": 0,
        "slot": "405",
        "type": "t_bool"
      },
      {
        "astId": 15236,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "standards",
        "offset": 0,
        "slot": "406",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 15238,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "methodologiesIsAcceptedMapping",
        "offset": 0,
        "slot": "407",
        "type": "t_bool"
      },
      {
        "astId": 15242,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "methodologies",
        "offset": 0,
        "slot": "408",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 15247,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "externalWhiteList",
        "offset": 0,
        "slot": "409",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15252,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "internalWhiteList",
        "offset": 0,
        "slot": "410",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15257,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "internalBlackList",
        "offset": 0,
        "slot": "411",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15261,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "feeRedeemReceiver",
        "offset": 0,
        "slot": "412",
        "type": "t_address"
      },
      {
        "astId": 15263,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "feeRedeemPercentageInBase",
        "offset": 0,
        "slot": "413",
        "type": "t_uint256"
      },
      {
        "astId": 15266,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "feeRedeemBurnAddress",
        "offset": 0,
        "slot": "414",
        "type": "t_address"
      },
      {
        "astId": 15269,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "feeRedeemBurnPercentageInBase",
        "offset": 0,
        "slot": "415",
        "type": "t_uint256"
      },
      {
        "astId": 15275,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "redeemFeeExemptedAddresses",
        "offset": 0,
        "slot": "416",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15279,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "scoredTCO2s",
        "offset": 0,
        "slot": "417",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 15285,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "redeemFeeExemptedTCO2s",
        "offset": 0,
        "slot": "418",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15289,
        "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
        "label": "router",
        "offset": 0,
        "slot": "419",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)591_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)591_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)591_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 588,
            "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 590,
            "contract": "contracts/pools/BaseCarbonTonne.sol:BaseCarbonTonne",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}