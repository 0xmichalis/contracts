{
  "address": "0x1A481A4fC4e6CFBf650f8e7B5ed5927aef3619e9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractRegistry",
          "type": "address"
        }
      ],
      "name": "ContractRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_RELEASE_CANDIDATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "batchTokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "createDetokenizationRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "retiringEntityString",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "beneficiaryString",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "retirementMessage",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "beneficiaryLocation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumptionCountryCode",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodEnd",
              "type": "uint256"
            }
          ],
          "internalType": "struct CreateRetirementRequestParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createRetirementRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "detokenizationRequestIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "detokenizationRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "enum RequestStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "batchTokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "projectVintageTokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct DetokenizationRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "finalizeDetokenizationRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "finalizeRetirementRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractRegistry",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_roles",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retirementRequestIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "retirementRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "enum RequestStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "batchTokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "retiringEntityString",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "beneficiaryString",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "retirementMessage",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "beneficiaryLocation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumptionCountryCode",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectVintageTokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct RetirementRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "revertDetokenizationRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "revertRetirementRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setToucanContractRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "serialNumber",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitSerialNumber",
      "outputs": [
        {
          "internalType": "string",
          "name": "balancingSerialNumber",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "remainingSerialNumber",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "db59f6786687067a0d1a67c2b75792f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractRegistry\",\"type\":\"address\"}],\"name\":\"ContractRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_RELEASE_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"batchTokenIds\",\"type\":\"uint256[]\"}],\"name\":\"createDetokenizationRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"retiringEntityString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"retirementMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumptionCountryCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateRetirementRequestParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createRetirementRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"detokenizationRequestIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"detokenizationRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"batchTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"projectVintageTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct DetokenizationRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"finalizeDetokenizationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"finalizeRetirementRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_roles\",\"type\":\"bytes32[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retirementRequestIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"retirementRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"batchTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"retiringEntityString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"retirementMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumptionCountryCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectVintageTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct RetirementRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"revertDetokenizationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"revertRetirementRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setToucanContractRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"serialNumber\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitSerialNumber\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"balancingSerialNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"remainingSerialNumber\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createDetokenizationRequest(address,uint256,uint256[])\":{\"details\":\"Only a TCO2 contract can call this function. Additionally, the escrow contract must have been approved to transfer the amount of TCO2 to detokenize.\",\"params\":{\"amount\":\"The amount of TCO2 to detokenize.\",\"batchTokenIds\":\"The ids of the batches to detokenize.\",\"user\":\"The user that is requesting the detokenization.\"}},\"createRetirementRequest(address,(uint256[],uint256,string,address,string,string,string,string,uint256,uint256))\":{\"details\":\"Only a TCO2 contract can call this function. Additionally, the escrow contract must have been approved to transfer the amount of TCO2 to retire.\",\"params\":{\"params\":\"Retirement request params.\",\"user\":\"The user that is requesting the retirement.\"}},\"finalizeDetokenizationRequest(uint256)\":{\"details\":\"Only the TCO2 contract can call this function.\",\"params\":{\"requestId\":\"The id of the request to finalize.\"}},\"finalizeRetirementRequest(uint256)\":{\"details\":\"Only the TCO2 contract can call this function.\",\"params\":{\"requestId\":\"The id of the request to finalize.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revertDetokenizationRequest(uint256)\":{\"details\":\"Only the TCO2 contract can call this function.\",\"params\":{\"requestId\":\"The id of the request to revert.\"}},\"revertRetirementRequest(uint256)\":{\"details\":\"Only the TCO2 contract can call this function.\",\"params\":{\"requestId\":\"The id of the request to revert.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"splitSerialNumber(string,uint256)\":{\"params\":{\"amount\":\"The amount to split by.\",\"serialNumber\":\"The serial number to split.\"},\"returns\":{\"balancingSerialNumber\":\"remainingSerialNumber The serial numbers split from the original serial number.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"PAUSER_ROLE\":{\"details\":\"All roles related to accessing this contract\"},\"VERSION\":{\"details\":\"Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDetokenizationRequest(address,uint256,uint256[])\":{\"notice\":\"Create a new detokenization request.\"},\"createRetirementRequest(address,(uint256[],uint256,string,address,string,string,string,string,uint256,uint256))\":{\"notice\":\"Create a new retirement request.\"},\"finalizeDetokenizationRequest(uint256)\":{\"notice\":\"Finalize a detokenization request by burning its amount of TCO2.\"},\"finalizeRetirementRequest(uint256)\":{\"notice\":\"Finalize a retirement request by calling the retire and mint certificate function in respective TCO2 Batch, which can only be invoked by the escrow After retiring the amount of TCO2 is burned.\"},\"revertDetokenizationRequest(uint256)\":{\"notice\":\"Revert a detokenization request by transfering amount of TCO2 back to the user.\"},\"revertRetirementRequest(uint256)\":{\"notice\":\"Revert a retirement request by transfering amount of TCO2 back to the user.\"},\"splitSerialNumber(string,uint256)\":{\"notice\":\"Split a serial number range into two parts based on the given amount.\"}},\"notice\":\"Contract for escrowing TCO2s during detokenization or retirement until the off-chain registry confirms the detokenization or retirement request.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ToucanCarbonOffsetsEscrow.sol\":\"ToucanCarbonOffsetsEscrow\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/CarbonOffsetBatchesTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nenum BatchStatus {\\n    Pending, // 0\\n    Rejected, // 1\\n    Confirmed, // 2\\n    DetokenizationRequested, // 3\\n    DetokenizationFinalized, // 4\\n    RetirementRequested, // 5\\n    RetirementFinalized // 6\\n}\\n\",\"keccak256\":\"0x7f4b7befeec038eb14e3bf1c13bb80be32c5a653a363b0244ba2d420ff72a94d\",\"license\":\"UNLICENSED\"},\"contracts/CarbonProjectTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\n/// @dev CarbonProject related data and attributes\\nstruct ProjectData {\\n    string projectId;\\n    string standard;\\n    string methodology;\\n    string region;\\n    string storageMethod;\\n    string method;\\n    string emissionType;\\n    string category;\\n    string uri;\\n    address beneficiary;\\n}\\n\",\"keccak256\":\"0x01ef59ad96e26a2ab791ba600413c5a4bde90c66535b30f322a1a01407be6879\",\"license\":\"UNLICENSED\"},\"contracts/CarbonProjectVintageTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct VintageData {\\n    /// @dev A human-readable string which differentiates this from other vintages in\\n    /// the same project, and helps build the corresponding TCO2 name and symbol.\\n    string name;\\n    uint64 startTime; // UNIX timestamp\\n    uint64 endTime; // UNIX timestamp\\n    uint256 projectTokenId;\\n    uint64 totalVintageQuantity;\\n    bool isCorsiaCompliant;\\n    bool isCCPcompliant;\\n    string coBenefits;\\n    string correspAdjustment;\\n    string additionalCertification;\\n    string uri;\\n    string registry;\\n}\\n\",\"keccak256\":\"0x5be4a7578aa12ae4d9e06e53672c46198c5c0c524065cec87fbc8cb1826619f6\",\"license\":\"UNLICENSED\"},\"contracts/ToucanCarbonOffsetsEscrow.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nimport './bases/RoleInitializer.sol';\\nimport {CreateRetirementRequestParams} from './bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol';\\nimport {Errors} from './libraries/Errors.sol';\\nimport {SerialNumber, PuroSerialNumbers} from './libraries/PuroSerialNumbers.sol';\\nimport {ICarbonOffsetBatches} from './interfaces/ICarbonOffsetBatches.sol';\\nimport './interfaces/IToucanCarbonOffsets.sol';\\nimport './interfaces/IToucanCarbonOffsetsEscrow.sol';\\nimport './interfaces/IToucanContractRegistry.sol';\\nimport {BatchStatus} from './CarbonOffsetBatchesTypes.sol';\\nimport './ToucanCarbonOffsetsEscrowStorage.sol';\\n\\n/// @notice Contract for escrowing TCO2s during detokenization\\n/// or retirement until the off-chain registry confirms the\\n/// detokenization or retirement request.\\ncontract ToucanCarbonOffsetsEscrow is\\n    IToucanCarbonOffsetsEscrow,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    UUPSUpgradeable,\\n    RoleInitializer,\\n    ToucanCarbonOffsetsEscrowStorage\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using PuroSerialNumbers for *;\\n\\n    // ----------------------------------------\\n    //      Constants\\n    // ----------------------------------------\\n\\n    /// @dev Version-related parameters. VERSION keeps track of production\\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\\n    /// of a VERSION in our staging environment.\\n    string public constant VERSION = '1.3.0';\\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\\n\\n    /// @dev All roles related to accessing this contract\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\n\\n    // ----------------------------------------\\n    //              Events\\n    // ----------------------------------------\\n\\n    event ContractRegistryUpdated(address contractRegistry);\\n\\n    // ----------------------------------------\\n    //              Modifiers\\n    // ----------------------------------------\\n\\n    modifier onlyTCO2() {\\n        require(\\n            IToucanContractRegistry(contractRegistry).isValidERC20(msg.sender),\\n            'Not TCO2'\\n        );\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ----------------------------------------\\n    //       Upgradable related functions\\n    // ----------------------------------------\\n\\n    function initialize(\\n        address _contractRegistry,\\n        address[] calldata _accounts,\\n        bytes32[] calldata _roles\\n    ) external virtual initializer {\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n        __RoleInitializer_init_unchained(_accounts, _roles);\\n\\n        contractRegistry = _contractRegistry;\\n        emit ContractRegistryUpdated(_contractRegistry);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        virtual\\n        override\\n        onlyOwner\\n    {}\\n\\n    // ----------------------------------------\\n    //           Admin functions\\n    // ----------------------------------------\\n\\n    function pause() external onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function setToucanContractRegistry(address _address) external onlyOwner {\\n        contractRegistry = _address;\\n        emit ContractRegistryUpdated(_address);\\n    }\\n\\n    // ----------------------------------------\\n    //           Internal functions\\n    // ----------------------------------------\\n\\n    /// @dev Check conditions for a detokenization or retirement request and update\\n    /// batch statuses.\\n    ///\\n    /// The following conditions are checked:\\n    /// - amount requested is greater than zero\\n    /// - amount requested is equal to or less than the total amount of the batches\\n    /// - if amount requested is strictly less than total amount, it must be smaller\\n    ///   than the total amount of all the  batches except the last one\\n    function _validateAndUpdateBatches(\\n        uint256 amount,\\n        uint256[] calldata tokenIds,\\n        BatchStatus status\\n    ) internal {\\n        require(amount != 0, Errors.TCO2_BATCH_AMT_INVALID);\\n        (\\n            uint256 totalBatchAmount,\\n            uint256 lastBatchAmount\\n        ) = _updateBatchStatuses(tokenIds, status);\\n\\n        // Check that amount requested is equal to or less than the total amount of\\n        // the batches.\\n        if (amount > totalBatchAmount) revert(Errors.TCO2_BATCH_AMT_INVALID);\\n        // If amount requested is less than total amount, it means we will split the\\n        // last batch, and so we need the amount of the rest of the batches to be less\\n        // than the amount requested. This should help mitigate grieving attacks where\\n        // any user with a fraction of TCO2 can request to lock all batches for a TCO2.\\n        // In case the amount requested is equal to the total amount, this check will\\n        // always pass.\\n        // NOTE: no-op in case there's only 1 batch in the request\\n        if (totalBatchAmount - lastBatchAmount >= amount)\\n            revert(Errors.TCO2_BATCH_AMT_INVALID);\\n    }\\n\\n    function _updateBatchStatuses(\\n        uint256[] memory tokenIds,\\n        BatchStatus newStatus\\n    ) internal returns (uint256 totalAmount, uint256 lastBatchAmount) {\\n        address batchNFT = IToucanContractRegistry(contractRegistry)\\n            .carbonOffsetBatchesAddress();\\n        // Loop through batches in the request and set them to the batch status provided\\n        // while keeping track of the total amount to transfer from the user\\n        uint256 batchIdLength = tokenIds.length;\\n        for (uint256 i = 0; i < batchIdLength; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            (, uint256 batchAmount, ) = _getNormalizedDataFromBatch(\\n                batchNFT,\\n                tokenId\\n            );\\n\\n            // Update amounts to be returned\\n            totalAmount += batchAmount;\\n            lastBatchAmount = batchAmount;\\n\\n            // Transition batch status to updated status\\n            ICarbonOffsetBatches(batchNFT)\\n                .setStatusForDetokenizationOrRetirement(tokenId, newStatus);\\n        }\\n    }\\n\\n    // TODO: Move in the COB contract\\n    function _getNormalizedDataFromBatch(address cob, uint256 tokenId)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            BatchStatus\\n        )\\n    {\\n        (\\n            uint256 vintageTokenId,\\n            uint256 quantity,\\n            BatchStatus status\\n        ) = ICarbonOffsetBatches(cob).getBatchNFTData(tokenId);\\n        return (vintageTokenId, quantity * 1e18, status);\\n    }\\n\\n    /// @dev Check if splitting is required and split the last batch if so\\n    function _splitIfNeeded(uint256 amount, uint256[] memory batchTokenIds)\\n        internal\\n        returns (uint256[] memory)\\n    {\\n        ICarbonOffsetBatches carbonOffsetBatches = ICarbonOffsetBatches(\\n            IToucanContractRegistry(contractRegistry)\\n                .carbonOffsetBatchesAddress()\\n        );\\n        (\\n            uint256 totalBatchesAmount,\\n            uint256 lastBatchAmount\\n        ) = _getTotalBatchesAmount(carbonOffsetBatches, batchTokenIds);\\n        uint256 normalizedAmount = amount / 1e18;\\n        // if the amount requested is not equal to the total amount of TCO2 in the batches, we need to split the last\\n        // batch\\n        // NOTE: the batches are split according to normalized amounts, so if the amount requested is not a multiple of\\n        // the TCO2 decimals, the batches retired will not match the amount of TCO2 burnt\\n        if (totalBatchesAmount > normalizedAmount) {\\n            uint256 surplus = totalBatchesAmount - normalizedAmount;\\n            uint256 newTokenId = _executeSplit(\\n                carbonOffsetBatches,\\n                batchTokenIds[batchTokenIds.length - 1],\\n                lastBatchAmount - surplus\\n            );\\n            batchTokenIds[batchTokenIds.length - 1] = newTokenId;\\n        }\\n\\n        return batchTokenIds;\\n    }\\n\\n    function _getTotalBatchesAmount(\\n        ICarbonOffsetBatches carbonOffsetBatches,\\n        uint256[] memory batchTokenIds\\n    )\\n        internal\\n        view\\n        returns (uint256 totalBatchesAmount, uint256 lastBatchAmount)\\n    {\\n        for (uint256 i = 0; i < batchTokenIds.length; ++i) {\\n            //slither-disable-next-line unused-return\\n            (, uint256 batchAmount, ) = carbonOffsetBatches.getBatchNFTData(\\n                batchTokenIds[i]\\n            );\\n            totalBatchesAmount += batchAmount;\\n            lastBatchAmount = batchAmount;\\n        }\\n    }\\n\\n    function _executeSplit(\\n        ICarbonOffsetBatches carbonOffsetBatches,\\n        uint256 tokenId,\\n        uint256 balancingAmount\\n    ) internal returns (uint256 newTokenId) {\\n        string memory serialNumber = carbonOffsetBatches.getSerialNumber(\\n            tokenId\\n        );\\n\\n        // Determine the new serial numbers on the fly\\n        (\\n            string memory balancingSerialNumber,\\n            string memory remainingSerialNumber\\n        ) = splitSerialNumber(serialNumber, balancingAmount);\\n\\n        // Execute the split\\n        newTokenId = carbonOffsetBatches.split(\\n            tokenId,\\n            remainingSerialNumber,\\n            balancingSerialNumber,\\n            balancingAmount\\n        );\\n\\n        // Change the status of the existing batch with the remaining amount\\n        // to Confirmed so it can be used by other requests in parallel that\\n        // can be still serviced by the batch.\\n        //\\n        // Imagine the following scenario:\\n        // 1. Frontend A selects a batch to use in its request\\n        // 2. Client B selects the same batch to use in its request\\n        // 3. Frontend A submits its request onchain\\n        // 4. Client B submits its request onchain\\n        //\\n        // The scenario above will work because we set the batch that both\\n        // clients selected back to Confirmed here and as long as the\\n        // remaining amount in the batch is still big enough.\\n        //\\n        // Obviously, clients can still have race conditions if they can select\\n        // multiple overlapping batches for which no batch splitting needs to\\n        // be performed, eg., in a scenario where a TCO2 owns many small batches.\\n        // We could mitigate race conditions in that case by defragmenting the\\n        // batches.\\n        carbonOffsetBatches.setStatusForDetokenizationOrRetirement(\\n            tokenId,\\n            BatchStatus.Confirmed\\n        );\\n    }\\n\\n    // ----------------------------------------\\n    //           TCO2 functions\\n    // ----------------------------------------\\n\\n    /// @notice Create a new detokenization request.\\n    /// @dev Only a TCO2 contract can call this function.\\n    /// Additionally, the escrow contract must have been\\n    /// approved to transfer the amount of TCO2 to detokenize.\\n    /// @param user The user that is requesting the detokenization.\\n    /// @param amount The amount of TCO2 to detokenize.\\n    /// @param batchTokenIds The ids of the batches to detokenize.\\n    function createDetokenizationRequest(\\n        address user,\\n        uint256 amount,\\n        uint256[] calldata batchTokenIds\\n    ) external virtual override onlyTCO2 returns (uint256) {\\n        // Bump request id\\n        uint256 requestId = detokenizationRequestIdCounter;\\n        unchecked {\\n            ++requestId;\\n        }\\n        detokenizationRequestIdCounter = requestId;\\n\\n        // Validate the amount matches the batch quantities and update the batch statuses\\n        _validateAndUpdateBatches(\\n            amount,\\n            batchTokenIds,\\n            BatchStatus.DetokenizationRequested\\n        );\\n\\n        // Split the last batch if needed\\n        uint256[] memory updatedBatchTokenIds = _splitIfNeeded(\\n            amount,\\n            batchTokenIds\\n        );\\n\\n        // Keep track of the project vintage token id\\n        uint256 projectVintageTokenId = getProjectVintageTokenId(msg.sender);\\n\\n        // Store detokenization request data\\n        _detokenizationRequests[requestId] = DetokenizationRequest(\\n            user,\\n            amount,\\n            RequestStatus.Pending,\\n            updatedBatchTokenIds,\\n            projectVintageTokenId\\n        );\\n\\n        // Transfer TCO2 from user to escrow contract\\n        //slither-disable-next-line arbitrary-send-erc20\\n        IERC20Upgradeable(msg.sender).safeTransferFrom(\\n            user,\\n            address(this),\\n            amount\\n        );\\n\\n        return requestId;\\n    }\\n\\n    /// @notice Create a new retirement request.\\n    /// @dev Only a TCO2 contract can call this function.\\n    /// Additionally, the escrow contract must have been\\n    /// approved to transfer the amount of TCO2 to retire.\\n    /// @param user The user that is requesting the retirement.\\n    /// @param params Retirement request params.\\n    function createRetirementRequest(\\n        address user,\\n        CreateRetirementRequestParams calldata params\\n    ) external virtual override onlyTCO2 returns (uint256 requestId) {\\n        // Bump request id\\n        requestId = retirementRequestIdCounter;\\n        unchecked {\\n            ++requestId;\\n        }\\n        retirementRequestIdCounter = requestId;\\n\\n        // Validate the amount matches the batch quantities and update the batch statuses\\n        _validateAndUpdateBatches(\\n            params.amount,\\n            params.tokenIds,\\n            BatchStatus.RetirementRequested\\n        );\\n\\n        // Split the last batch if needed\\n        uint256[] memory updatedBatchTokenIds = _splitIfNeeded(\\n            params.amount,\\n            params.tokenIds\\n        );\\n\\n        // Keep track of the project vintage token id\\n        uint256 projectVintageTokenId = getProjectVintageTokenId(msg.sender);\\n\\n        // Store retirement request data\\n        _retirementRequests[requestId] = RetirementRequest(\\n            user,\\n            params.amount,\\n            RequestStatus.Pending,\\n            updatedBatchTokenIds,\\n            params.retiringEntityString,\\n            params.beneficiary,\\n            params.beneficiaryString,\\n            params.retirementMessage,\\n            params.beneficiaryLocation,\\n            params.consumptionCountryCode,\\n            params.consumptionPeriodStart,\\n            params.consumptionPeriodEnd,\\n            projectVintageTokenId\\n        );\\n\\n        // Transfer TCO2 from user to escrow contract\\n        //slither-disable-next-line arbitrary-send-erc20\\n        IERC20Upgradeable(msg.sender).safeTransferFrom(\\n            user,\\n            address(this),\\n            params.amount\\n        );\\n\\n        return requestId;\\n    }\\n\\n    /// @notice Finalize a retirement request by calling\\n    /// the retire and mint certificate function in respective\\n    /// TCO2 Batch, which can only be invoked by the escrow\\n    /// After retiring the amount of TCO2 is burned.\\n    /// @dev Only the TCO2 contract can call this function.\\n    /// @param requestId The id of the request to finalize.\\n    function finalizeRetirementRequest(uint256 requestId)\\n        external\\n        virtual\\n        override\\n        onlyTCO2\\n    {\\n        RetirementRequest storage request = _retirementRequests[requestId];\\n        require(request.status == RequestStatus.Pending, 'Not pending request');\\n\\n        request.status = RequestStatus.Finalized;\\n\\n        _updateBatchStatuses(\\n            request.batchTokenIds,\\n            BatchStatus.RetirementFinalized\\n        );\\n\\n        CreateRetirementRequestParams\\n            memory params = CreateRetirementRequestParams({\\n                tokenIds: request.batchTokenIds,\\n                amount: request.amount,\\n                retiringEntityString: request.retiringEntityString,\\n                beneficiary: request.beneficiary,\\n                beneficiaryString: request.beneficiaryString,\\n                retirementMessage: request.retirementMessage,\\n                beneficiaryLocation: request.beneficiaryLocation,\\n                consumptionCountryCode: request.consumptionCountryCode,\\n                consumptionPeriodStart: request.consumptionPeriodStart,\\n                consumptionPeriodEnd: request.consumptionPeriodEnd\\n            });\\n        IToucanCarbonOffsets(msg.sender).retireAndMintCertificateForEntity(\\n            request.user,\\n            params\\n        );\\n    }\\n\\n    /// @notice Finalize a detokenization request by burning\\n    /// its amount of TCO2.\\n    /// @dev Only the TCO2 contract can call this function.\\n    /// @param requestId The id of the request to finalize.\\n    function finalizeDetokenizationRequest(uint256 requestId)\\n        external\\n        virtual\\n        override\\n        onlyTCO2\\n    {\\n        DetokenizationRequest storage request = _detokenizationRequests[\\n            requestId\\n        ];\\n        require(request.status == RequestStatus.Pending, 'Not pending request');\\n\\n        request.status = RequestStatus.Finalized;\\n\\n        _updateBatchStatuses(\\n            request.batchTokenIds,\\n            BatchStatus.DetokenizationFinalized\\n        );\\n\\n        uint256 amount = request.amount;\\n        IERC20Upgradeable(msg.sender).safeApprove(address(this), amount);\\n        IToucanCarbonOffsets(msg.sender).burnFrom(address(this), amount);\\n    }\\n\\n    /// @notice Revert a retirement request by transfering amount of TCO2\\n    /// back to the user.\\n    /// @dev Only the TCO2 contract can call this function.\\n    /// @param requestId The id of the request to revert.\\n    function revertRetirementRequest(uint256 requestId)\\n        external\\n        virtual\\n        override\\n        onlyTCO2\\n    {\\n        RetirementRequest storage request = _retirementRequests[requestId];\\n        require(request.status == RequestStatus.Pending, 'Not pending request');\\n\\n        request.status = RequestStatus.Reverted;\\n\\n        _updateBatchStatuses(request.batchTokenIds, BatchStatus.Confirmed);\\n\\n        IERC20Upgradeable(msg.sender).safeTransfer(\\n            request.user,\\n            request.amount\\n        );\\n    }\\n\\n    /// @notice Revert a detokenization request by transfering amount of TCO2\\n    /// back to the user.\\n    /// @dev Only the TCO2 contract can call this function.\\n    /// @param requestId The id of the request to revert.\\n    function revertDetokenizationRequest(uint256 requestId)\\n        external\\n        virtual\\n        override\\n        onlyTCO2\\n    {\\n        DetokenizationRequest storage request = _detokenizationRequests[\\n            requestId\\n        ];\\n        require(request.status == RequestStatus.Pending, 'Not pending request');\\n\\n        request.status = RequestStatus.Reverted;\\n\\n        _updateBatchStatuses(request.batchTokenIds, BatchStatus.Confirmed);\\n\\n        IERC20Upgradeable(msg.sender).safeTransfer(\\n            request.user,\\n            request.amount\\n        );\\n    }\\n\\n    // ----------------------------------------\\n    //           Read-only functions\\n    // ----------------------------------------\\n\\n    /// @notice Split a serial number range into two parts based on\\n    /// the given amount.\\n    /// @param serialNumber The serial number to split.\\n    /// @param amount The amount to split by.\\n    /// @return balancingSerialNumber remainingSerialNumber The serial\\n    /// numbers split from the original serial number.\\n    function splitSerialNumber(string memory serialNumber, uint256 amount)\\n        public\\n        pure\\n        returns (\\n            string memory balancingSerialNumber,\\n            string memory remainingSerialNumber\\n        )\\n    {\\n        SerialNumber memory typedSerialNumber = serialNumber\\n            .parseSerialNumber();\\n        (balancingSerialNumber, remainingSerialNumber) = typedSerialNumber\\n            .splitSerialNumber(amount);\\n    }\\n\\n    function getProjectVintageTokenId(address tco2)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return IToucanCarbonOffsets(tco2).projectVintageTokenId();\\n    }\\n\\n    function detokenizationRequests(uint256 requestId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (DetokenizationRequest memory)\\n    {\\n        return _detokenizationRequests[requestId];\\n    }\\n\\n    function retirementRequests(uint256 requestId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (RetirementRequest memory)\\n    {\\n        return _retirementRequests[requestId];\\n    }\\n}\\n\",\"keccak256\":\"0xa399356c89612b54a6c6f0a568d41fdbb9d0d4ce4757182eca2a234be956a7b5\",\"license\":\"UNLICENSED\"},\"contracts/ToucanCarbonOffsetsEscrowStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {DetokenizationRequest, RetirementRequest} from './ToucanCarbonOffsetsEscrowTypes.sol';\\n\\nabstract contract ToucanCarbonOffsetsEscrowStorageV1 {\\n    address public contractRegistry;\\n    // Monotonically increasing request id counter\\n    uint256 public detokenizationRequestIdCounter;\\n    // Request id to request data\\n    mapping(uint256 => DetokenizationRequest) internal _detokenizationRequests;\\n    // Retirement request id counter\\n    uint256 public retirementRequestIdCounter;\\n    // Request id to request data\\n    mapping(uint256 => RetirementRequest) internal _retirementRequests;\\n}\\n\\nabstract contract ToucanCarbonOffsetsEscrowStorage is\\n    ToucanCarbonOffsetsEscrowStorageV1\\n{}\\n\",\"keccak256\":\"0xfb4fcca4638cd21412231ae686b6f4d8188a5b3be08813f765031e8d9d12ab2d\",\"license\":\"UNLICENSED\"},\"contracts/ToucanCarbonOffsetsEscrowTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nstruct DetokenizationRequest {\\n    address user;\\n    uint256 amount;\\n    RequestStatus status;\\n    // The request may optionally be associated with one or more batches.\\n    uint256[] batchTokenIds;\\n    uint256 projectVintageTokenId;\\n}\\n\\nstruct RetirementRequest {\\n    address user;\\n    uint256 amount;\\n    RequestStatus status;\\n    // The request may optionally be associated with one or more batches.\\n    // This may need to be limited to one batch for registries which don't\\n    // support atomic retirement of multiple batches in one go, since\\n    // retiring one batch at a time might create a situation where our\\n    // RetirementRequest is only partially fulfilled, and then we would be\\n    // stuck with no way forwards and no way to roll back.\\n    uint256[] batchTokenIds;\\n    // Optional\\n    string retiringEntityString;\\n    // Optional\\n    address beneficiary;\\n    // Optional\\n    string beneficiaryString;\\n    // Optional\\n    string retirementMessage;\\n    // Optional\\n    string beneficiaryLocation;\\n    // Optional\\n    string consumptionCountryCode;\\n    // Optional\\n    uint256 consumptionPeriodStart;\\n    // Optional\\n    uint256 consumptionPeriodEnd;\\n    uint256 projectVintageTokenId;\\n}\\n\\nenum RequestStatus {\\n    Pending,\\n    Finalized,\\n    Reverted\\n}\\n\",\"keccak256\":\"0x1f770f81cc66acad45c48c56036e8055d3b0c4579a16be46546c15e39c9e8c81\",\"license\":\"UNLICENSED\"},\"contracts/bases/RoleInitializer.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\nabstract contract RoleInitializer is AccessControlUpgradeable {\\n    function __RoleInitializer_init_unchained(\\n        address[] calldata accounts,\\n        bytes32[] calldata roles\\n    ) internal {\\n        require(accounts.length == roles.length, 'Array length mismatch');\\n\\n        __AccessControl_init_unchained();\\n\\n        bool hasDefaultAdmin = false;\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            _grantRole(roles[i], accounts[i]);\\n            if (roles[i] == DEFAULT_ADMIN_ROLE) hasDefaultAdmin = true;\\n        }\\n        require(hasDefaultAdmin, 'No admin specified');\\n    }\\n}\\n\",\"keccak256\":\"0x72276b98471db1c8cfe18d4a1244c3986514c8b8d72e578517daae4973fd8b06\",\"license\":\"UNLICENSED\"},\"contracts/bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct CreateRetirementRequestParams {\\n    uint256[] tokenIds;\\n    uint256 amount;\\n    string retiringEntityString;\\n    address beneficiary;\\n    string beneficiaryString;\\n    string retirementMessage;\\n    string beneficiaryLocation;\\n    string consumptionCountryCode;\\n    uint256 consumptionPeriodStart;\\n    uint256 consumptionPeriodEnd;\\n}\\n\",\"keccak256\":\"0xc7702b775ffda42d217c4671b846d93f691f8271cae9537dbd2b15930dbe582e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ICarbonOffsetBatches.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {BatchStatus} from '../CarbonOffsetBatchesTypes.sol';\\n\\ninterface ICarbonOffsetBatches {\\n    function getConfirmationStatus(uint256 tokenId)\\n        external\\n        view\\n        returns (BatchStatus);\\n\\n    function getBatchNFTData(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            BatchStatus\\n        );\\n\\n    function getSerialNumber(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function setStatusForDetokenizationOrRetirement(\\n        uint256 tokenId,\\n        BatchStatus newStatus\\n    ) external;\\n\\n    function split(\\n        uint256 tokenId,\\n        string calldata tokenIdNewSerialNumber,\\n        string calldata newTokenIdSerialNumber,\\n        uint256 newTokenIdQuantity\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x194d2b91e3f0c730876cf247dbc126ecf0a414edf3ecb503150714bb5aeab4ff\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanCarbonOffsets.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {VintageData} from '../CarbonProjectVintageTypes.sol';\\nimport {ProjectData} from '../CarbonProjectTypes.sol';\\nimport {CreateRetirementRequestParams} from '../bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol';\\n\\ninterface IToucanCarbonOffsets {\\n    function retireFrom(address account, uint256 amount)\\n        external\\n        returns (uint256 retirementEventId);\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function getAttributes()\\n        external\\n        view\\n        returns (ProjectData memory, VintageData memory);\\n\\n    /// @notice Get the vintage data of the TCO2\\n    function getVintageData()\\n        external\\n        view\\n        returns (VintageData memory vintageData);\\n\\n    function standardRegistry() external view returns (string memory);\\n\\n    function retireAndMintCertificate(\\n        string calldata retiringEntityString,\\n        address beneficiary,\\n        string calldata beneficiaryString,\\n        string calldata retirementMessage,\\n        uint256 amount\\n    ) external;\\n\\n    function retireAndMintCertificateForEntity(\\n        address retiringEntity,\\n        CreateRetirementRequestParams calldata params\\n    ) external;\\n\\n    function projectVintageTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2aa8807a01eefdff9a79985ffad737b324f6fc59e4c416b3124a315d055a3b6e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanCarbonOffsetsEscrow.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {DetokenizationRequest, RetirementRequest, RequestStatus} from '../ToucanCarbonOffsetsEscrowTypes.sol';\\nimport {CreateRetirementRequestParams} from '../bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol';\\n\\ninterface IToucanCarbonOffsetsEscrow {\\n    function createDetokenizationRequest(\\n        address user,\\n        uint256 amount,\\n        uint256[] calldata batchTokenIds\\n    ) external returns (uint256);\\n\\n    function createRetirementRequest(\\n        address user,\\n        CreateRetirementRequestParams calldata params\\n    ) external returns (uint256);\\n\\n    function finalizeDetokenizationRequest(uint256 requestId) external;\\n\\n    function finalizeRetirementRequest(uint256 requestId) external;\\n\\n    function revertDetokenizationRequest(uint256 requestId) external;\\n\\n    function revertRetirementRequest(uint256 requestId) external;\\n\\n    function detokenizationRequests(uint256 requestId)\\n        external\\n        view\\n        returns (DetokenizationRequest memory);\\n\\n    function retirementRequests(uint256 requestId)\\n        external\\n        view\\n        returns (RetirementRequest memory);\\n}\\n\",\"keccak256\":\"0x87eed188fdcf84aca841c3493eebaa61e41157ba0640fa00bbb87e7545c404fc\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanContractRegistry.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IToucanContractRegistry {\\n    function carbonOffsetBatchesAddress() external view returns (address);\\n\\n    function carbonProjectsAddress() external view returns (address);\\n\\n    function carbonProjectVintagesAddress() external view returns (address);\\n\\n    function toucanCarbonOffsetsFactoryAddress(string memory standardRegistry)\\n        external\\n        view\\n        returns (address);\\n\\n    function retirementCertificatesAddress() external view returns (address);\\n\\n    function toucanCarbonOffsetsEscrowAddress() external view returns (address);\\n\\n    function isValidERC20(address erc20) external view returns (bool);\\n\\n    function addERC20(address erc20, string memory standardRegistry) external;\\n}\\n\",\"keccak256\":\"0xccb58bbb200ab282120834e8eb9b7c41c776669dc4e6ac8440927ad2587d0d89\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts of the Toucan protocol\\n * @dev Inspired by the AAVE error library:\\n * https://github.com/aave/protocol-v2/blob/5df59ec74a0c635d877dc1c5ee4a165d41488352/contracts/protocol/libraries/helpers/Errors.sol\\n * Error messages prefix glossary:\\n *  - CP = CarbonPool\\n *  - COB = CarbonOffsetBatches\\n *  - TCO2 = TCO2\\n */\\nlibrary Errors {\\n    // User is not authorized\\n    string public constant CP_UNAUTHORIZED = '1';\\n    // Empty array provided as input\\n    string public constant CP_EMPTY_ARRAY = '2';\\n    // Pool is full of TCO2s\\n    string public constant CP_FULL_POOL = '3';\\n    // ERC20 is blocklisted in the pool. This error\\n    // is returned for TCO2s that have been blocklisted\\n    // like the HFC-23 project.\\n    string public constant CP_BLOCKLISTED = '4';\\n    // ERC20 is not allowlisted in the pool\\n    // This error is returned in case the ERC20 is\\n    // not a TCO2 in which case it has to be manually\\n    // allowlisted in order to be allowed in the pool.\\n    string public constant CP_NOT_ALLOWLISTED = '5';\\n    // Vintage start time of a TCO2 is too old\\n    string public constant CP_START_TIME_TOO_OLD = '6';\\n    string public constant CP_REGION_NOT_ACCEPTED = '7';\\n    string public constant CP_STANDARD_NOT_ACCEPTED = '8';\\n    string public constant CP_METHODOLOGY_NOT_ACCEPTED = '9';\\n    // Provided fee is invalid, not in a basis points format: [0,10000)\\n    string public constant CP_INVALID_FEE = '10';\\n    // Provided address needs to be non-zero\\n    string public constant CP_EMPTY_ADDRESS = '11';\\n    // Validation check to ensure array lengths match\\n    string public constant CP_LENGTH_MISMATCH = '12';\\n    // TCO2 not exempted from redeem fees\\n    string public constant CP_NOT_EXEMPTED = '13';\\n    // A contract has been paused\\n    string public constant CP_PAUSED_CONTRACT = '14';\\n    // Redemption has leftover unredeemed value\\n    string public constant CP_NON_ZERO_REMAINING = '15';\\n    // Redemption exceeds deposited TCO2 supply\\n    string public constant CP_EXCEEDS_TCO2_SUPPLY = '16';\\n    // User must be a router\\n    string public constant CP_ONLY_ROUTER = '17';\\n    // User must be the owner\\n    string public constant CP_ONLY_OWNER = '18';\\n    // Zero destination address is invalid for pool token transfers\\n    string public constant CP_INVALID_DESTINATION_ZERO = '19';\\n    // Self destination address is invalid for pool token transfers\\n    string public constant CP_INVALID_DESTINATION_SELF = '20';\\n    // Zero amount provided as an input (eg., in redemptions) in invalid\\n    string public constant CP_ZERO_AMOUNT = '21';\\n    // ERC20 is not eligible to be pooled\\n    string public constant CP_NOT_ELIGIBLE = '22';\\n    // Carbon registry is already supported in COB\\n    string public constant COB_ALREADY_SUPPORTED = '23';\\n    // The caller is not granted the VERIFIER_ROLE in COB\\n    string public constant COB_NOT_VERIFIER_OR_BATCH_OWNER = '24';\\n    // The caller does not own the provided batch\\n    string public constant COB_NOT_BATCH_OWNER = '25';\\n    // The owner of the batch is invalid (not a TCO2 contract)\\n    string public constant COB_INVALID_BATCH_OWNER = '26';\\n    // The batch is not in Confirmed status\\n    string public constant COB_NOT_CONFIRMED = '27';\\n    // The batch is not in a requested status (DetokenizationRequested or RetirementRequested)\\n    string public constant COB_NOT_REQUESTED_STATUS = '28';\\n    // The batch does not exist\\n    string public constant COB_NOT_EXISTS = '29';\\n    // The batch has an invalid status based on the action requested\\n    string public constant COB_INVALID_STATUS = '30';\\n    // The batch is missing an associated project vintage\\n    string public constant COB_MISSING_VINTAGE = '31';\\n    // The serial number in the batch is already approved\\n    string public constant COB_ALREADY_APPROVED = '32';\\n    // The batch is not in Pending status\\n    string public constant COB_NOT_PENDING = '33';\\n    // The batch is already fractionalized\\n    string public constant COB_ALREADY_FRACTIONALIZED = '34';\\n    // The batch is not in Rejected status\\n    string public constant COB_NOT_REJECTED = '35';\\n    // The project vintage is already set in the batch\\n    string public constant COB_VINTAGE_ALREADY_SET = '36';\\n    // The transfer is not approved\\n    string public constant COB_TRANSFER_NOT_APPROVED = '37';\\n    // The COB contract is paused\\n    string public constant COB_PAUSED_CONTRACT = '38';\\n    // The caller is invalid\\n    string public constant COB_INVALID_CALLER = '39';\\n    // The TCO2 for the batch is not found\\n    string public constant COB_TCO2_NOT_FOUND = '40';\\n    // The registry for the provided vintage is not supported\\n    string public constant COB_REGISTRY_NOT_SUPPORTED = '41';\\n    // No TCO2 was minted as part of tokenization\\n    string public constant COB_NO_TCO2_MINTED = '42';\\n    // Only mints are supported for the batch contract to receive an NFT\\n    string public constant COB_ONLY_MINTS = '43';\\n    // New batch status is invalid\\n    string public constant COB_INVALID_NEW_STATUS = '44';\\n    // The TCO2 batch amount is invalid\\n    string public constant TCO2_BATCH_AMT_INVALID = '45';\\n    // The TCO2 batch amount approval has failed\\n    string public constant TCO2_APPROVAL_AMT_FAILED = '46';\\n    // The TCO2 batch not confirmed\\n    string public constant TCO2_BATCH_NOT_CONFIRMED = '47';\\n    // The TCO2 batch not whitelisted\\n    string public constant TCO2_BATCH_NOT_WHITELISTED = '48';\\n    // The TCO2 is non matching NFT\\n    string public constant TCO2_NON_MATCHING_NFT = '49';\\n    // The TCO2 Quantity in batch is higher than total vintages\\n    string public constant TCO2_QTY_HIGHER = '50';\\n    // The fee to be charged is too high\\n    string public constant CP_FEE_TOO_HIGH = '51';\\n    // The max fee to be paid is invalid\\n    string public constant CP_INVALID_MAX_FEE = '52';\\n    // The pool feature is not supported\\n    string public constant CP_NOT_SUPPORTED = '53';\\n    // Used for instance to check for sub-tonnage retirement requests\\n    string public constant TCO2_INVALID_DECIMALS = '54';\\n    // The TCO2 Quantity in the batch is invalid\\n    string public constant COB_INVALID_QUANTITY = '55';\\n    // Splitting is required on detokenization/retirement finalization, but 2 new serial numbers\\n    // were not provided\\n    string public constant TCO2_MISSING_SERIALS = '56';\\n    // The score set for the ERC-1155 token in the pool is invalid\\n    string public constant INVALID_ERC1155_SCORE = '57';\\n    // The score of the ERC-1155 token in the pool is not set\\n    string public constant EMPTY_ERC155_SCORE = '58';\\n}\\n\",\"keccak256\":\"0x7a4f788f2fc3fe77b3d8820cb8c01af6a4e7ce5aacf9540857b27c15c2cfc680\",\"license\":\"UNLICENSED\"},\"contracts/libraries/PuroSerialNumbers.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2024 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {Strings} from './Strings.sol';\\n\\nstruct SerialNumber {\\n    // Fields relevant to serial numbers prior to the\\n    // Puro API migration.\\n    string startSerial;\\n    string endSerial;\\n    string serialType;\\n    // Fields relevant to serial numbers after the\\n    // Puro API migration.\\n    string issuanceId;\\n    // Fields relevant to serial numbers both before and\\n    // after the Puro API migration.\\n    uint256 rangeStart;\\n    uint256 rangeEnd;\\n}\\n\\nlibrary PuroSerialNumbers {\\n    using Strings for string;\\n    using Strings for uint256;\\n\\n    // The size info of the serials before the migration to the new Puro API.\\n    // Example: 643002406555908610000000140219-643002406555908610000000140220\\n    // We need to maintain the serial numbers that were added on-chain\\n    // before the migration until we can update serials directly on-chain (LILA-7025).\\n    uint256 internal constant TYPE_SIZE = 18;\\n    uint256 internal constant NUMBER_SIZE = 12;\\n    uint256 internal constant SERIAL_SIZE = TYPE_SIZE * 2 + NUMBER_SIZE * 2 + 1;\\n    // The info of the serials that are submitted on-chain after the Puro API migration.\\n    // Example: 40980b1a-cff7-4c78-9cc5-a3a2f18c7e0d_1000-1001\\n    uint256 internal constant ISSUANCE_ID_SIZE = 36;\\n\\n    /// @notice Parse a serial number range\\n    /// @param serialNumber The serial number string to parse\\n    /// @return The parsed serial number\\n    function parseSerialNumber(string memory serialNumber)\\n        internal\\n        pure\\n        returns (SerialNumber memory)\\n    {\\n        if (bytes(serialNumber).length == SERIAL_SIZE) {\\n            return parseSerialNumberV1(serialNumber);\\n        }\\n        return parseSerialNumberV2(serialNumber);\\n    }\\n\\n    /// @notice Parse a serial number range that was created on-chain before the\\n    /// Puro API migration.\\n    /// @param serialNumber The serial number string to parse\\n    /// @return The parsed serial number\\n    function parseSerialNumberV1(string memory serialNumber)\\n        internal\\n        pure\\n        returns (SerialNumber memory)\\n    {\\n        if (serialNumber.count('-') != 1) {\\n            revert('v1: incorrect delimiter count');\\n        }\\n\\n        // Split the serial number range into start and end.\\n        (string memory startSerial, string memory endSerial) = serialNumber\\n            .split('-');\\n\\n        // Get the part of the serial that is related to the type\\n        // of the batch and validate that it is the same for both\\n        // serials.\\n        string memory startType = startSerial.slice(0, TYPE_SIZE);\\n        string memory endType = endSerial.slice(0, TYPE_SIZE);\\n        if (!startType.equals(endType)) {\\n            revert('Type mismatch');\\n        }\\n\\n        // Get the part of the serial that is related to the amount,\\n        // convert to integer, and ensure start is less than end.\\n        uint256 rangeStart = startSerial\\n            .slice(TYPE_SIZE + 1, TYPE_SIZE + NUMBER_SIZE)\\n            .toInteger();\\n        uint256 rangeEnd = endSerial\\n            .slice(TYPE_SIZE + 1, TYPE_SIZE + NUMBER_SIZE)\\n            .toInteger();\\n        if (rangeStart > rangeEnd) {\\n            revert('Invalid range');\\n        }\\n\\n        return\\n            SerialNumber({\\n                issuanceId: '',\\n                startSerial: startSerial,\\n                endSerial: endSerial,\\n                serialType: startType,\\n                rangeStart: rangeStart,\\n                rangeEnd: rangeEnd\\n            });\\n    }\\n\\n    /// @notice Parse a serial number range that was created on-chain after the\\n    /// Puro API migration.\\n    /// @param serialNumber The serial number string to parse\\n    /// @return The parsed serial number\\n    function parseSerialNumberV2(string memory serialNumber)\\n        internal\\n        pure\\n        returns (SerialNumber memory)\\n    {\\n        if (serialNumber.count('_') != 1) {\\n            revert('v2: incorrect delimiter count');\\n        }\\n\\n        // Split the serial number range into issuance id and the\\n        // actual range.\\n        (string memory issuanceId, string memory range) = serialNumber.split(\\n            '_'\\n        );\\n\\n        // Validate the issuance id.\\n        if (!isValidIssuanceId(issuanceId)) {\\n            revert('Invalid issuance id');\\n        }\\n\\n        // Validate the range.\\n        if (range.count('-') != 1) {\\n            revert('Incorrect delimiter count in range');\\n        }\\n        (string memory startString, string memory endString) = range.split('-');\\n        uint256 rangeStart = startString.toInteger();\\n        uint256 rangeEnd = endString.toInteger();\\n        if (rangeStart > rangeEnd) {\\n            revert('Invalid range');\\n        }\\n\\n        return\\n            SerialNumber({\\n                startSerial: '',\\n                endSerial: '',\\n                serialType: '',\\n                issuanceId: issuanceId,\\n                rangeStart: rangeStart,\\n                rangeEnd: rangeEnd\\n            });\\n    }\\n\\n    function isValidIssuanceId(string memory issuanceId)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        // Basic UUID validation, far from complete.\\n        // Probably not worth it to have more than this\\n        // on-chain but we could definitely extend in the\\n        // future as long as we don't deploy on L1.\\n        return\\n            bytes(issuanceId).length == ISSUANCE_ID_SIZE &&\\n            issuanceId.count('-') == 4;\\n    }\\n\\n    /// @notice Split a serial number range into two parts based on\\n    /// the given amount.\\n    /// @param serialNumber The serial number to split\\n    /// @param amount The amount to split by\\n    /// @return balancingSerialNumber remainingSerialNumber The serial\\n    /// numbers split from the original serial number.\\n    function splitSerialNumber(SerialNumber memory serialNumber, uint256 amount)\\n        internal\\n        pure\\n        returns (\\n            string memory balancingSerialNumber,\\n            string memory remainingSerialNumber\\n        )\\n    {\\n        if (bytes(serialNumber.issuanceId).length != 0) {\\n            return splitSerialNumberV2(serialNumber, amount);\\n        }\\n        return splitSerialNumberV1(serialNumber, amount);\\n    }\\n\\n    /// @notice Split a serial number range into two parts based on\\n    /// the given amount. This is valid for splitting serial numbers\\n    /// that were created on-chain before the Puro API migration.\\n    /// @param serialNumber The serial number to split\\n    /// @param amount The amount to split by\\n    /// @return balancingSerialNumber remainingSerialNumber The serial\\n    /// numbers split from the original serial number.\\n    function splitSerialNumberV1(\\n        SerialNumber memory serialNumber,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory balancingSerialNumber,\\n            string memory remainingSerialNumber\\n        )\\n    {\\n        if (amount == 0) {\\n            revert('Empty amount');\\n        }\\n        if (amount >= serialNumber.rangeEnd - serialNumber.rangeStart + 1) {\\n            revert('Cannot split');\\n        }\\n\\n        // Determine intermediate serial numbers\\n        uint256 balancingEndNum = serialNumber.rangeStart + amount - 1;\\n        uint256 remainingStartNum = balancingEndNum + 1;\\n\\n        // Pad amounts\\n        string memory paddedBalancingEnd = balancingEndNum.toString().pad(\\n            NUMBER_SIZE,\\n            '0'\\n        );\\n        string memory paddedRemainingStart = remainingStartNum.toString().pad(\\n            NUMBER_SIZE,\\n            '0'\\n        );\\n        string memory balancingEnd = string.concat(\\n            serialNumber.serialType,\\n            paddedBalancingEnd\\n        );\\n        string memory remainingStart = string.concat(\\n            serialNumber.serialType,\\n            paddedRemainingStart\\n        );\\n\\n        // Create new serials\\n        return (\\n            string.concat(\\n                string.concat(serialNumber.startSerial, '-'),\\n                balancingEnd\\n            ),\\n            string.concat(\\n                string.concat(remainingStart, '-'),\\n                serialNumber.endSerial\\n            )\\n        );\\n    }\\n\\n    /// @notice Split a serial number range into two parts based on\\n    /// the given amount. This is valid for splitting serial numbers\\n    /// that were created on-chain after the Puro API migration.\\n    /// @param serialNumber The serial number to split\\n    /// @param amount The amount to split by\\n    /// @return balancingSerialNumber remainingSerialNumber The serial\\n    /// numbers split from the original serial number.\\n    function splitSerialNumberV2(\\n        SerialNumber memory serialNumber,\\n        uint256 amount\\n    )\\n        internal\\n        pure\\n        returns (\\n            string memory balancingSerialNumber,\\n            string memory remainingSerialNumber\\n        )\\n    {\\n        if (amount == 0) {\\n            revert('Empty amount');\\n        }\\n        if (amount >= serialNumber.rangeEnd - serialNumber.rangeStart + 1) {\\n            revert('Cannot split');\\n        }\\n\\n        // Determine intermediate serial numbers\\n        uint256 balancingEndNum = serialNumber.rangeStart + amount - 1;\\n        uint256 remainingStartNum = balancingEndNum + 1;\\n\\n        // Create new serials\\n        return (\\n            string.concat(\\n                serialNumber.issuanceId,\\n                '_',\\n                serialNumber.rangeStart.toString(),\\n                '-',\\n                balancingEndNum.toString()\\n            ),\\n            string.concat(\\n                serialNumber.issuanceId,\\n                '_',\\n                remainingStartNum.toString(),\\n                '-',\\n                serialNumber.rangeEnd.toString()\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0f1be412e8420d29f1b3691106eea7025a27cc6334baec36602499f11b3c56ab\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Strings.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\\n\\nlibrary Strings {\\n    /// @notice Compare two strings\\n    /// @param a The string to compare\\n    /// @param b The string to compare to\\n    /// @return True if the strings are equal, false otherwise\\n    function equals(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            (bytes(a).length == bytes(b).length) &&\\n            (keccak256(bytes(a)) == keccak256(bytes(b)));\\n    }\\n\\n    /// @notice Convert a string to an integer\\n    /// @param numString The string to convert\\n    /// @return The integer value of the string\\n    function toInteger(string memory numString)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 val = 0;\\n        bytes memory stringBytes = bytes(numString);\\n        uint256 stringBytesLen = stringBytes.length;\\n        for (uint256 i = 0; i < stringBytesLen; ++i) {\\n            uint256 exp = stringBytesLen - i;\\n            bytes1 ival = stringBytes[i];\\n            uint8 uval = uint8(ival);\\n            uint256 jval = uval - uint256(0x30);\\n\\n            val += (uint256(jval) * (10**(exp - 1)));\\n        }\\n        return val;\\n    }\\n\\n    /// @notice Convert an integer to a string\\n    /// @param value The integer to convert\\n    /// @return The string value of the integer\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// @notice Get a substring of a string\\n    /// @param text The string to get a substring from\\n    /// @param begin The start index of the substring\\n    /// @param end The end index of the substring\\n    /// @return The substring\\n    function slice(\\n        string memory text,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (string memory) {\\n        uint256 length = end - begin;\\n        bytes memory a = new bytes(length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            a[i] = bytes(text)[i + begin];\\n        }\\n        return string(a);\\n    }\\n\\n    /// @notice Pad a string with a character\\n    /// @param text The string to pad\\n    /// @param length The length to pad to\\n    /// @param padChar The character to pad with\\n    /// @return The padded string\\n    function pad(\\n        string memory text,\\n        uint256 length,\\n        string memory padChar\\n    ) internal pure returns (string memory) {\\n        uint256 textLen = bytes(text).length;\\n        require(bytes(padChar).length == 1, 'Invalid padChar length');\\n        require(length >= textLen, 'Invalid text length');\\n\\n        for (uint256 i = textLen; i < length; ++i) {\\n            text = string.concat(padChar, text);\\n        }\\n\\n        return text;\\n    }\\n\\n    /// @notice Count the occurrences of a character in a string\\n    /// @param text The string to count occurrences of char in\\n    /// @param char The character to count\\n    /// @return nums The number of occurrences\\n    function count(string memory text, string memory char)\\n        internal\\n        pure\\n        returns (uint256 nums)\\n    {\\n        require(bytes(char).length == 1, 'Invalid char length');\\n        bytes1 c = bytes(char)[0];\\n\\n        uint256 textLen = bytes(text).length;\\n        for (uint256 i = 0; i < textLen; ++i) {\\n            if (bytes(text)[i] == c) {\\n                ++nums;\\n            }\\n        }\\n    }\\n\\n    /// @notice Split a string into two parts. The first occurrence of the delimiter\\n    /// is used to split the string into first and last.\\n    /// @param text The string to split\\n    /// @param delimiter The character to split on\\n    /// @return first last The two parts of the string\\n    function split(string memory text, string memory delimiter)\\n        internal\\n        pure\\n        returns (string memory first, string memory last)\\n    {\\n        require(bytes(delimiter).length == 1, 'Invalid delimiter length');\\n        bytes1 d = bytes(delimiter)[0];\\n\\n        uint256 textLen = bytes(text).length;\\n        for (uint256 i = 0; i < textLen; ++i) {\\n            if (bytes(text)[i] == d) {\\n                first = slice(text, 0, i);\\n                last = slice(text, i + 1, textLen);\\n                return (first, last);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc92c0e80003911ed43df923ad4692f3d9a3fec1fa4d79bc01d6b3706fa034010\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b62000156565b6200003260ff62000035565b50565b60008054610100900460ff1615620000ce578160ff1660011480156200006e57506200006c306200014760201b620020871760201c565b155b620000c65760405162461bcd60e51b815260206004820152602e60248201526000805160206200542c83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106200012d5760405162461bcd60e51b815260206004820152602e60248201526000805160206200542c83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000bd565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b60805161529e6200018e6000396000818161073c0152818161077c01528181610873015281816108b30152610942015261529e6000f3fe6080604052600436106101ee5760003560e01c80638456cb591161010d578063c346a8bf116100a0578063ea158df81161006f578063ea158df81461058f578063ebe5b460146105af578063f2fde38b146105cf578063f8d8353f146105ef578063ffa1ad741461060f57600080fd5b8063c346a8bf146104fb578063d547741f1461051b578063e63ab1e91461053b578063e882e37b1461056f57600080fd5b806392ad01fd116100dc57806392ad01fd14610485578063a217fddf146104a5578063abf410e5146104ba578063aeb2d230146104db57600080fd5b80638456cb59146103fe578063862943a0146104135780638da5cb5b1461043357806391d148541461046557600080fd5b806352d1902d1161018557806369514ebe1161015457806369514ebe146103905780636ca0b0d7146103a7578063715018a6146103bc57806379c20aaa146103d157600080fd5b806352d1902d1461031f5780635860ef5d1461033457806359ad0a0a146103615780635c975abb1461037857600080fd5b80633659cfe6116101c15780633659cfe6146102a95780633f4ba83a146102c95780634e395ea8146102de5780634f1ef2861461030c57600080fd5b806301ffc9a7146101f3578063248a9ca3146102285780632f2ff15d1461026757806336568abe14610289575b600080fd5b3480156101ff57600080fd5b5061021361020e366004614419565b61064d565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b50610259610243366004614443565b600090815261012d602052604090206001015490565b60405190815260200161021f565b34801561027357600080fd5b50610287610282366004614471565b610684565b005b34801561029557600080fd5b506102876102a4366004614471565b6106af565b3480156102b557600080fd5b506102876102c43660046144a1565b610732565b3480156102d557600080fd5b50610287610811565b3480156102ea57600080fd5b506102fe6102f9366004614569565b610843565b60405161021f929190614619565b61028761031a36600461463e565b610869565b34801561032b57600080fd5b50610259610935565b34801561034057600080fd5b5061035461034f366004614443565b6109e8565b60405161021f9190614706565b34801561036d57600080fd5b506102596101605481565b34801561038457600080fd5b5060655460ff16610213565b34801561039c57600080fd5b506102596101625481565b3480156103b357600080fd5b50610259600181565b3480156103c857600080fd5b50610287610adf565b3480156103dd57600080fd5b506103f16103ec366004614443565b610b15565b60405161021f9190614767565b34801561040a57600080fd5b50610287610f62565b34801561041f57600080fd5b5061028761042e366004614443565b610f94565b34801561043f57600080fd5b506033546001600160a01b03165b6040516001600160a01b03909116815260200161021f565b34801561047157600080fd5b50610213610480366004614471565b6110f4565b34801561049157600080fd5b506102876104a0366004614443565b611120565b3480156104b157600080fd5b50610259600081565b3480156104c657600080fd5b5061015f5461044d906001600160a01b031681565b3480156104e757600080fd5b506102596104f63660046148a0565b611635565b34801561050757600080fd5b50610259610516366004614930565b611a84565b34801561052757600080fd5b50610287610536366004614471565b611c4e565b34801561054757600080fd5b506102597f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b34801561057b57600080fd5b5061028761058a3660046144a1565b611c74565b34801561059b57600080fd5b506102876105aa366004614443565b611cf3565b3480156105bb57600080fd5b506102876105ca366004614443565b611d91565b3480156105db57600080fd5b506102876105ea3660046144a1565b611f07565b3480156105fb57600080fd5b5061028761060a36600461498b565b611f9f565b34801561061b57600080fd5b50610640604051806040016040528060058152602001640312e332e360dc1b81525081565b60405161021f9190614a0d565b60006001600160e01b03198216637965db0b60e01b148061067e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600082815261012d60205260409020600101546106a081612096565b6106aa83836120a0565b505050565b6001600160a01b03811633146107245760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61072e8282612127565b5050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361077a5760405162461bcd60e51b815260040161071b90614a20565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107c3600080516020615222833981519152546001600160a01b031690565b6001600160a01b0316146107e95760405162461bcd60e51b815260040161071b90614a6c565b6107f28161218f565b6040805160008082526020820190925261080e918391906121b9565b50565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61083b81612096565b61080e612324565b6060806000610851856123b7565b905061085d8185612405565b90969095509350505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108b15760405162461bcd60e51b815260040161071b90614a20565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108fa600080516020615222833981519152546001600160a01b031690565b6001600160a01b0316146109205760405162461bcd60e51b815260040161071b90614a6c565b6109298261218f565b61072e828260016121b9565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109d55760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161071b565b5060008051602061522283398151915290565b6040805160a0808201835260008083526020808401829052838501829052606080850152608084018290528582526101618152908490208451928301855280546001600160a01b0316835260018101549183019190915260028082015493949293919284019160ff1690811115610a6157610a616146a1565b6002811115610a7257610a726146a1565b815260200160038201805480602002602001604051908101604052809291908181526020018280548015610ac557602002820191906000526020600020905b815481526020019060010190808311610ab1575b505050505081526020016004820154815250509050919050565b6033546001600160a01b03163314610b095760405162461bcd60e51b815260040161071b90614ab8565b610b13600061243e565b565b610b89604080516101a08101825260008082526020820181905290918201908152602001606081526020016060815260200160006001600160a01b03168152602001606081526020016060815260200160608152602001606081526020016000815260200160008152602001600081525090565b6000828152610163602090815260409182902082516101a08101845281546001600160a01b03168152600182015492810192909252600280820154929391929184019160ff1690811115610bdf57610bdf6146a1565b6002811115610bf057610bf06146a1565b815260200160038201805480602002602001604051908101604052809291908181526020018280548015610c4357602002820191906000526020600020905b815481526020019060010190808311610c2f575b50505050508152602001600482018054610c5c90614aed565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8890614aed565b8015610cd55780601f10610caa57610100808354040283529160200191610cd5565b820191906000526020600020905b815481529060010190602001808311610cb857829003601f168201915b505050918352505060058201546001600160a01b03166020820152600682018054604090920191610d0590614aed565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3190614aed565b8015610d7e5780601f10610d5357610100808354040283529160200191610d7e565b820191906000526020600020905b815481529060010190602001808311610d6157829003601f168201915b50505050508152602001600782018054610d9790614aed565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc390614aed565b8015610e105780601f10610de557610100808354040283529160200191610e10565b820191906000526020600020905b815481529060010190602001808311610df357829003601f168201915b50505050508152602001600882018054610e2990614aed565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5590614aed565b8015610ea25780601f10610e7757610100808354040283529160200191610ea2565b820191906000526020600020905b815481529060010190602001808311610e8557829003601f168201915b50505050508152602001600982018054610ebb90614aed565b80601f0160208091040260200160405190810160405280929190818152602001828054610ee790614aed565b8015610f345780601f10610f0957610100808354040283529160200191610f34565b820191906000526020600020905b815481529060010190602001808311610f1757829003601f168201915b50505050508152602001600a8201548152602001600b8201548152602001600c820154815250509050919050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610f8c81612096565b61080e612490565b61015f54604051633a37b16d60e11b81523360048201526001600160a01b039091169063746f62da90602401602060405180830381865afa158015610fdd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110019190614b27565b61101d5760405162461bcd60e51b815260040161071b90614b49565b600081815261016360205260408120905b60028083015460ff1690811115611047576110476146a1565b146110645760405162461bcd60e51b815260040161071b90614b6b565b6002818101805460ff191660018302179055506110d4816003018054806020026020016040519081016040528092919081815260200182805480156110c857602002820191906000526020600020905b8154815260200190600101908083116110b4575b5050505050600261250b565b50508054600182015461072e9133916001600160a01b0390911690612653565b600091825261012d602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61015f54604051633a37b16d60e11b81523360048201526001600160a01b039091169063746f62da90602401602060405180830381865afa158015611169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118d9190614b27565b6111a95760405162461bcd60e51b815260040161071b90614b49565b6000818152610163602052604081209060028083015460ff16908111156111d2576111d26146a1565b146111ef5760405162461bcd60e51b815260040161071b90614b6b565b60028101805460ff191660011790556003810180546040805160208084028201810190925282815261125a939092909183018282801561124e57602002820191906000526020600020905b81548152602001906001019080831161123a575b5050505050600661250b565b5050604080516003830180546101606020820284018101909452610140830181815260009484939192908401828280156112b357602002820191906000526020600020905b81548152602001906001019080831161129f575b50505050508152602001836001015481526020018360040180546112d690614aed565b80601f016020809104026020016040519081016040528092919081815260200182805461130290614aed565b801561134f5780601f106113245761010080835404028352916020019161134f565b820191906000526020600020905b81548152906001019060200180831161133257829003601f168201915b505050918352505060058401546001600160a01b0316602082015260068401805460409092019161137f90614aed565b80601f01602080910402602001604051908101604052809291908181526020018280546113ab90614aed565b80156113f85780601f106113cd576101008083540402835291602001916113f8565b820191906000526020600020905b8154815290600101906020018083116113db57829003601f168201915b5050505050815260200183600701805461141190614aed565b80601f016020809104026020016040519081016040528092919081815260200182805461143d90614aed565b801561148a5780601f1061145f5761010080835404028352916020019161148a565b820191906000526020600020905b81548152906001019060200180831161146d57829003601f168201915b505050505081526020018360080180546114a390614aed565b80601f01602080910402602001604051908101604052809291908181526020018280546114cf90614aed565b801561151c5780601f106114f15761010080835404028352916020019161151c565b820191906000526020600020905b8154815290600101906020018083116114ff57829003601f168201915b5050505050815260200183600901805461153590614aed565b80601f016020809104026020016040519081016040528092919081815260200182805461156190614aed565b80156115ae5780601f10611583576101008083540402835291602001916115ae565b820191906000526020600020905b81548152906001019060200180831161159157829003601f168201915b5050509183525050600a8401546020820152600b840154604091820152835490516333a373df60e11b81529192503391636746e7be916115fe916001600160a01b03909116908590600401614b98565b600060405180830381600087803b15801561161857600080fd5b505af115801561162c573d6000803e3d6000fd5b50505050505050565b61015f54604051633a37b16d60e11b81523360048201526000916001600160a01b03169063746f62da90602401602060405180830381865afa15801561167f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a39190614b27565b6116bf5760405162461bcd60e51b815260040161071b90614b49565b506101628054600101908190556116e560208301356116de8480614ca4565b60056126b6565b600061173060208401356116f98580614ca4565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506127ab92505050565b9050600061173d336128e1565b604080516101a0810182526001600160a01b0388168152602087810135908201529192508101600081526020018381526020018580604001906117809190614ced565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016117ca60808701606088016144a1565b6001600160a01b031681526020016117e56080870187614ced565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200161182c60a0870187614ced565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200161187360c0870187614ced565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016118ba60e0870187614ced565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506101008701356020808401919091526101208801356040808501919091526060909301859052868252610163815290829020835181546001600160a01b0319166001600160a01b0390911617815590830151600180830191909155918301516002808301805493949293909260ff19909116918490811115611974576119746146a1565b021790555060608201518051611994916003840191602090910190614310565b50608082015180516119b091600484019160209091019061435b565b5060a08201516005820180546001600160a01b0319166001600160a01b0390921691909117905560c082015180516119f291600684019160209091019061435b565b5060e08201518051611a0e91600784019160209091019061435b565b506101008201518051611a2b91600884019160209091019061435b565b506101208201518051611a4891600984019160209091019061435b565b50610140820151600a820155610160820151600b82015561018090910151600c90910155611a7c3386306020880135612945565b505092915050565b61015f54604051633a37b16d60e11b81523360048201526000916001600160a01b03169063746f62da90602401602060405180830381865afa158015611ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af29190614b27565b611b0e5760405162461bcd60e51b815260040161071b90614b49565b610160805460010190819055611b2785858560036126b6565b6000611b66868686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506127ab92505050565b90506000611b73336128e1565b6040805160a0810182526001600160a01b038b168152602081018a90529192508101600081526020808201859052604091820184905260008681526101618252829020835181546001600160a01b0319166001600160a01b0390911617815590830151600180830191909155918301516002808301805493949293909260ff19909116918490811115611c0857611c086146a1565b021790555060608201518051611c28916003840191602090910190614310565b5060809190910151600490910155611c423389308a612945565b50909695505050505050565b600082815261012d6020526040902060010154611c6a81612096565b6106aa8383612127565b6033546001600160a01b03163314611c9e5760405162461bcd60e51b815260040161071b90614ab8565b61015f80546001600160a01b0319166001600160a01b0383169081179091556040519081527fb3a6e7c81ebdb0cf9bf28d5ddf6678ded8d73b44f2eee06ca3974dbb9f41ce7e9060200160405180910390a150565b61015f54604051633a37b16d60e11b81523360048201526001600160a01b039091169063746f62da90602401602060405180830381865afa158015611d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d609190614b27565b611d7c5760405162461bcd60e51b815260040161071b90614b49565b6000818152610161602052604081209061102e565b61015f54604051633a37b16d60e11b81523360048201526001600160a01b039091169063746f62da90602401602060405180830381865afa158015611dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfe9190614b27565b611e1a5760405162461bcd60e51b815260040161071b90614b49565b6000818152610161602052604081209060028083015460ff1690811115611e4357611e436146a1565b14611e605760405162461bcd60e51b815260040161071b90614b6b565b60028101805460ff1916600117905560038101805460408051602080840282018101909252828152611ecb9390929091830182828015611ebf57602002820191906000526020600020905b815481526020019060010190808311611eab575b5050505050600461250b565b50506001810154611edd333083612983565b60405163079cc67960e41b81523060048201526024810182905233906379cc6790906044016115fe565b6033546001600160a01b03163314611f315760405162461bcd60e51b815260040161071b90614ab8565b6001600160a01b038116611f965760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161071b565b61080e8161243e565b6000611fab6001612a98565b90508015611fc3576000805461ff0019166101001790555b611fcb612b20565b611fd3612b50565b611fdb612b83565b611fe785858585612baa565b61015f80546001600160a01b0319166001600160a01b0388169081179091556040519081527fb3a6e7c81ebdb0cf9bf28d5ddf6678ded8d73b44f2eee06ca3974dbb9f41ce7e9060200160405180910390a1801561207f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6001600160a01b03163b151590565b61080e8133612ccc565b6120aa82826110f4565b61072e57600082815261012d602090815260408083206001600160a01b03851684529091529020805460ff191660011790556120e33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61213182826110f4565b1561072e57600082815261012d602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6033546001600160a01b0316331461080e5760405162461bcd60e51b815260040161071b90614ab8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156121ec576106aa83612d30565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612246575060408051601f3d908101601f1916820190925261224391810190614d33565b60015b6122a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161071b565b60008051602061522283398151915281146123185760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161071b565b506106aa838383612dcc565b60655460ff1661236d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161071b565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6123bf6143ce565b6123cb600c6002614d62565b6123d760126002614d62565b6123e19190614d81565b6123ec906001614d81565b8251036123fc5761067e82612df1565b61067e82612fd3565b6060808360600151516000146124285761241f848461322d565b91509150612437565b612432848461337f565b915091505b9250929050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16156124d65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161071b565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861239a3390565b600080600061015f60009054906101000a90046001600160a01b03166001600160a01b0316634be4e3dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125889190614d99565b855190915060005b818110156126495760008782815181106125ac576125ac614db6565b6020026020010151905060006125c28583613594565b5091506125d190508188614d81565b9650809550846001600160a01b0316633a484efd838a6040518363ffffffff1660e01b8152600401612604929190614dcc565b600060405180830381600087803b15801561261e57600080fd5b505af1158015612632573d6000803e3d6000fd5b5050505050508061264290614df0565b9050612590565b5050509250929050565b6040516001600160a01b0383166024820152604481018290526106aa90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613636565b604080518082019091526002815261343560f01b6020820152846126ed5760405162461bcd60e51b815260040161071b9190614a0d565b5060008061272f85858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525087925061250b915050565b915091508186111561276b576040805180820182526002815261343560f01b6020820152905162461bcd60e51b815261071b9190600401614a0d565b856127768284614e09565b1061207f576040805180820182526002815261343560f01b6020820152905162461bcd60e51b815261071b9190600401614a0d565b6060600061015f60009054906101000a90046001600160a01b03166001600160a01b0316634be4e3dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128279190614d99565b90506000806128368386613708565b9092509050600061284f670de0b6b3a764000088614e36565b9050808311156128d65760006128658285614e09565b905060006128a5868960018b5161287c9190614e09565b8151811061288c5761288c614db6565b602002602001015184876128a09190614e09565b6137cc565b9050808860018a516128b79190614e09565b815181106128c7576128c7614db6565b60200260200101818152505050505b509395945050505050565b6000816001600160a01b031663e819426c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612921573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190614d33565b6040516001600160a01b038085166024830152831660448201526064810182905261297d9085906323b872dd60e01b9060840161267f565b50505050565b8015806129fd5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156129d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fb9190614d33565b155b612a685760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161071b565b6040516001600160a01b0383166024820152604481018290526106aa90849063095ea7b360e01b9060640161267f565b60008054610100900460ff1615612adf578160ff166001148015612abb5750303b155b612ad75760405162461bcd60e51b815260040161071b90614e4a565b506000919050565b60005460ff808416911610612b065760405162461bcd60e51b815260040161071b90614e4a565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16612b475760405162461bcd60e51b815260040161071b90614e98565b610b133361243e565b600054610100900460ff16612b775760405162461bcd60e51b815260040161071b90614e98565b6065805460ff19169055565b600054610100900460ff16610b135760405162461bcd60e51b815260040161071b90614e98565b828114612bf15760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b604482015260640161071b565b612bf9612b83565b6000805b84811015612c8257612c4d848483818110612c1a57612c1a614db6565b90506020020135878784818110612c3357612c33614db6565b9050602002016020810190612c4891906144a1565b6120a0565b6000848483818110612c6157612c61614db6565b9050602002013503612c7257600191505b612c7b81614df0565b9050612bfd565b5080612cc55760405162461bcd60e51b8152602060048201526012602482015271139bc818591b5a5b881cdc1958da599a595960721b604482015260640161071b565b5050505050565b612cd682826110f4565b61072e57612cee816001600160a01b03166014613935565b612cf9836020613935565b604051602001612d0a929190614ee3565b60408051601f198184030181529082905262461bcd60e51b825261071b91600401614a0d565b6001600160a01b0381163b612d9d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161071b565b60008051602061522283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612dd583613ad7565b600082511180612de25750805b156106aa5761297d8383613b17565b612df96143ce565b6040805180820190915260018152602d60f81b6020820152612e1c908390613c0b565b600114612e6b5760405162461bcd60e51b815260206004820152601d60248201527f76313a20696e636f72726563742064656c696d6974657220636f756e74000000604482015260640161071b565b600080612e9a604051806040016040528060018152602001602d60f81b81525085613cdf90919063ffffffff16565b90925090506000612ead83826012613dd6565b90506000612ebd83826012613dd6565b9050612ec98282613ea1565b612f055760405162461bcd60e51b815260206004820152600d60248201526c0a8f2e0ca40dad2e6dac2e8c6d609b1b604482015260640161071b565b6000612f32612f2d612f1960126001614d81565b612f25600c6012614d81565b889190613dd6565b613ec7565b90506000612f48612f2d612f1960126001614d81565b905080821115612f8a5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642072616e676560981b604482015260640161071b565b6040518060c00160405280878152602001868152602001858152602001604051806020016040528060008152508152602001838152602001828152509650505050505050919050565b612fdb6143ce565b6040805180820190915260018152605f60f81b6020820152612ffe908390613c0b565b60011461304d5760405162461bcd60e51b815260206004820152601d60248201527f76323a20696e636f72726563742064656c696d6974657220636f756e74000000604482015260640161071b565b60008061307c604051806040016040528060018152602001605f60f81b81525085613cdf90919063ffffffff16565b9150915061308982613f6b565b6130cb5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081a5cdcdd585b98d9481a59606a1b604482015260640161071b565b6040805180820190915260018152602d60f81b60208201526130ee908290613c0b565b6001146131485760405162461bcd60e51b815260206004820152602260248201527f496e636f72726563742064656c696d6974657220636f756e7420696e2072616e604482015261676560f01b606482015260840161071b565b600080613177604051806040016040528060018152602001602d60f81b81525084613cdf90919063ffffffff16565b91509150600061318683613ec7565b9050600061319383613ec7565b9050808211156131d55760405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642072616e676560981b604482015260640161071b565b6040805160e081018252600060c0820181815282528251602081810185528282528084019190915283519081018452908152918101919091526060810196909652608086019190915260a08501525091949350505050565b6060808260000361326f5760405162461bcd60e51b815260206004820152600c60248201526b115b5c1d1e48185b5bdd5b9d60a21b604482015260640161071b565b83608001518460a001516132839190614e09565b61328e906001614d81565b83106132cb5760405162461bcd60e51b815260206004820152600c60248201526b10d85b9b9bdd081cdc1b1a5d60a21b604482015260640161071b565b600060018486608001516132df9190614d81565b6132e99190614e09565b905060006132f8826001614d81565b9050856060015161330c8760800151613fa5565b61331584613fa5565b60405160200161332793929190614f58565b604051602081830303815290604052866060015161334483613fa5565b6133518960a00151613fa5565b60405160200161336393929190614f58565b6040516020818303038152906040529350935050509250929050565b606080826000036133c15760405162461bcd60e51b815260206004820152600c60248201526b115b5c1d1e48185b5bdd5b9d60a21b604482015260640161071b565b83608001518460a001516133d59190614e09565b6133e0906001614d81565b831061341d5760405162461bcd60e51b815260206004820152600c60248201526b10d85b9b9bdd081cdc1b1a5d60a21b604482015260640161071b565b600060018486608001516134319190614d81565b61343b9190614e09565b9050600061344a826001614d81565b9050600061347d600c604051806040016040528060018152602001600360fc1b81525061347686613fa5565b9190613fb0565b905060006134a9600c604051806040016040528060018152602001600360fc1b81525061347686613fa5565b905060008860400151836040516020016134c4929190614fb7565b604051602081830303815290604052905060008960400151836040516020016134ee929190614fb7565b60408051601f19818403018152908290528b5190925061351091602001614fe6565b60408051601f198184030181529082905261352f918490602001614fb7565b6040516020818303038152906040528160405160200161354f9190614fe6565b6040516020818303038152906040528b60200151604051602001613574929190614fb7565b604051602081830303815290604052975097505050505050509250929050565b600080600080600080876001600160a01b031663dff35e83886040518263ffffffff1660e01b81526004016135cb91815260200190565b606060405180830381865afa1580156135e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360c919061500b565b919450925090508261362683670de0b6b3a7640000614d62565b9096509450925050509250925092565b600061368b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661408f9092919063ffffffff16565b8051909150156106aa57808060200190518101906136a99190614b27565b6106aa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161071b565b60008060005b83518110156137c4576000856001600160a01b031663dff35e8386848151811061373a5761373a614db6565b60200260200101516040518263ffffffff1660e01b815260040161376091815260200190565b606060405180830381865afa15801561377d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a1919061500b565b5091506137b090508185614d81565b935091506137bd81614df0565b905061370e565b509250929050565b60405163137b20bf60e31b81526004810183905260009081906001600160a01b03861690639bd905f890602401600060405180830381865afa158015613816573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261383e9190810190615048565b905060008061384d8386610843565b60405163095b5ded60e11b815291935091506001600160a01b038816906312b6bbda90613884908990859087908b906004016150b5565b6020604051808303816000875af11580156138a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c79190614d33565b604051633a484efd60e01b81529094506001600160a01b03881690633a484efd906138f9908990600290600401614dcc565b600060405180830381600087803b15801561391357600080fd5b505af1158015613927573d6000803e3d6000fd5b505050505050509392505050565b60606000613944836002614d62565b61394f906002614d81565b6001600160401b03811115613966576139666144be565b6040519080825280601f01601f191660200182016040528015613990576020820181803683370190505b509050600360fc1b816000815181106139ab576139ab614db6565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106139da576139da614db6565b60200101906001600160f81b031916908160001a90535060006139fe846002614d62565b613a09906001614d81565b90505b6001811115613a81576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613a3d57613a3d614db6565b1a60f81b828281518110613a5357613a53614db6565b60200101906001600160f81b031916908160001a90535060049490941c93613a7a816150f2565b9050613a0c565b508315613ad05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161071b565b9392505050565b613ae081612d30565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613b7f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161071b565b600080846001600160a01b031684604051613b9a9190615109565b600060405180830381855af49150503d8060008114613bd5576040519150601f19603f3d011682016040523d82523d6000602084013e613bda565b606091505b5091509150613c028282604051806060016040528060278152602001615242602791396140a6565b95945050505050565b60008151600114613c545760405162461bcd60e51b8152602060048201526013602482015272092dcecc2d8d2c840c6d0c2e440d8cadccee8d606b1b604482015260640161071b565b600082600081518110613c6957613c69614db6565b016020015184516001600160f81b0319909116915060005b81811015613cd657826001600160f81b031916868281518110613ca657613ca6614db6565b01602001516001600160f81b03191603613cc657613cc384614df0565b93505b613ccf81614df0565b9050613c81565b50505092915050565b6060808251600114613d335760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642064656c696d69746572206c656e6774680000000000000000604482015260640161071b565b600083600081518110613d4857613d48614db6565b016020015185516001600160f81b0319909116915060005b8181101561264957826001600160f81b031916878281518110613d8557613d85614db6565b01602001516001600160f81b03191603613dc657613da587600083613dd6565b9450613dbc87613db6836001614d81565b84613dd6565b9350505050612437565b613dcf81614df0565b9050613d60565b60606000613de48484614e09565b90506000816001600160401b03811115613e0057613e006144be565b6040519080825280601f01601f191660200182016040528015613e2a576020820181803683370190505b50905060005b82811015613e975786613e438783614d81565b81518110613e5357613e53614db6565b602001015160f81c60f81b828281518110613e7057613e70614db6565b60200101906001600160f81b031916908160001a905350613e9081614df0565b9050613e30565b5095945050505050565b600081518351148015613ad0575081805190602001208380519060200120149392505050565b805160009081908390825b81811015613f61576000613ee68284614e09565b90506000848381518110613efc57613efc614db6565b01602001516001600160f81b03198116915060f81c6000613f1e603083614e09565b9050613f2b600185614e09565b613f3690600a615201565b613f409082614d62565b613f4a9089614d81565b97505050505080613f5a90614df0565b9050613ed2565b5091949350505050565b60006024825114801561067e57506040805180820190915260018152602d60f81b6020820152613f9c908390613c0b565b60041492915050565b606061067e826140df565b82518151606091906001146140005760405162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e0c2c886d0c2e440d8cadccee8d60531b604482015260640161071b565b808410156140465760405162461bcd60e51b8152602060048201526013602482015272092dcecc2d8d2c840e8caf0e840d8cadccee8d606b1b604482015260640161071b565b805b84811015614085578386604051602001614063929190614fb7565b60405160208183030381529060405295508061407e90614df0565b9050614048565b5093949350505050565b606061409e84846000856141df565b949350505050565b606083156140b5575081613ad0565b8251156140c55782518084602001fd5b8160405162461bcd60e51b815260040161071b9190614a0d565b6060816000036141065750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614130578061411a81614df0565b91506141299050600a83614e36565b915061410a565b6000816001600160401b0381111561414a5761414a6144be565b6040519080825280601f01601f191660200182016040528015614174576020820181803683370190505b5090505b841561409e57614189600183614e09565b9150614196600a8661520d565b6141a1906030614d81565b60f81b8183815181106141b6576141b6614db6565b60200101906001600160f81b031916908160001a9053506141d8600a86614e36565b9450614178565b6060824710156142405760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161071b565b6001600160a01b0385163b6142975760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161071b565b600080866001600160a01b031685876040516142b39190615109565b60006040518083038185875af1925050503d80600081146142f0576040519150601f19603f3d011682016040523d82523d6000602084013e6142f5565b606091505b50915091506143058282866140a6565b979650505050505050565b82805482825590600052602060002090810192821561434b579160200282015b8281111561434b578251825591602001919060010190614330565b50614357929150614404565b5090565b82805461436790614aed565b90600052602060002090601f016020900481019282614389576000855561434b565b82601f106143a257805160ff191683800117855561434b565b8280016001018555821561434b579182018281111561434b578251825591602001919060010190614330565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160008152602001600081525090565b5b808211156143575760008155600101614405565b60006020828403121561442b57600080fd5b81356001600160e01b031981168114613ad057600080fd5b60006020828403121561445557600080fd5b5035919050565b6001600160a01b038116811461080e57600080fd5b6000806040838503121561448457600080fd5b8235915060208301356144968161445c565b809150509250929050565b6000602082840312156144b357600080fd5b8135613ad08161445c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156144fc576144fc6144be565b604052919050565b60006001600160401b0382111561451d5761451d6144be565b50601f01601f191660200190565b600061453e61453984614504565b6144d4565b905082815283838301111561455257600080fd5b828260208301376000602084830101529392505050565b6000806040838503121561457c57600080fd5b82356001600160401b0381111561459257600080fd5b8301601f810185136145a357600080fd5b6145b28582356020840161452b565b95602094909401359450505050565b60005b838110156145dc5781810151838201526020016145c4565b8381111561297d5750506000910152565b600081518084526146058160208601602086016145c1565b601f01601f19169290920160200192915050565b60408152600061462c60408301856145ed565b8281036020840152613c0281856145ed565b6000806040838503121561465157600080fd5b823561465c8161445c565b915060208301356001600160401b0381111561467757600080fd5b8301601f8101851361468857600080fd5b6146978582356020840161452b565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600381106146c7576146c76146a1565b9052565b600081518084526020808501945080840160005b838110156146fb578151875295820195908201906001016146df565b509495945050505050565b6020815260018060a01b038251166020820152602082015160408201526000604083015161473760608401826146b7565b50606083015160a0608084015261475160c08401826146cb565b9050608084015160a08401528091505092915050565b602081526147816020820183516001600160a01b03169052565b602082015160408201526000604083015161479f60608401826146b7565b5060608301516101a08060808501526147bc6101c08501836146cb565b91506080850151601f19808685030160a08701526147da84836145ed565b935060a087015191506147f860c08701836001600160a01b03169052565b60c08701519150808685030160e087015261481384836145ed565b935060e0870151915061010081878603018188015261483285846145ed565b94508088015192505061012081878603018188015261485185846145ed565b94508088015192505061014081878603018188015261487085846145ed565b90880151610160888101919091528801516101808089019190915290970151929095019190915250929392505050565b600080604083850312156148b357600080fd5b82356148be8161445c565b915060208301356001600160401b038111156148d957600080fd5b8301610140818603121561449657600080fd5b60008083601f8401126148fe57600080fd5b5081356001600160401b0381111561491557600080fd5b6020830191508360208260051b850101111561243757600080fd5b6000806000806060858703121561494657600080fd5b84356149518161445c565b93506020850135925060408501356001600160401b0381111561497357600080fd5b61497f878288016148ec565b95989497509550505050565b6000806000806000606086880312156149a357600080fd5b85356149ae8161445c565b945060208601356001600160401b03808211156149ca57600080fd5b6149d689838a016148ec565b909650945060408801359150808211156149ef57600080fd5b506149fc888289016148ec565b969995985093965092949392505050565b602081526000613ad060208301846145ed565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c90821680614b0157607f821691505b602082108103614b2157634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215614b3957600080fd5b81518015158114613ad057600080fd5b6020808252600890820152672737ba102a21a79960c11b604082015260600190565b602080825260139082015272139bdd081c195b991a5b99c81c995c5d595cdd606a1b604082015260600190565b60018060a01b03831681526040602082015260008251610140806040850152614bc56101808501836146cb565b9150602085015160608501526040850151603f1980868503016080870152614bed84836145ed565b935060608701519150614c0b60a08701836001600160a01b03169052565b60808701519150808685030160c0870152614c2684836145ed565b935060a08701519150808685030160e0870152614c4384836145ed565b935060c08701519150610100818786030181880152614c6285846145ed565b945060e08801519250610120828887030181890152614c8186856145ed565b918901519488019490945292909601516101609095019490945295945050505050565b6000808335601e19843603018112614cbb57600080fd5b8301803591506001600160401b03821115614cd557600080fd5b6020019150600581901b360382131561243757600080fd5b6000808335601e19843603018112614d0457600080fd5b8301803591506001600160401b03821115614d1e57600080fd5b60200191503681900382131561243757600080fd5b600060208284031215614d4557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615614d7c57614d7c614d4c565b500290565b60008219821115614d9457614d94614d4c565b500190565b600060208284031215614dab57600080fd5b8151613ad08161445c565b634e487b7160e01b600052603260045260246000fd5b8281526040810160078310614de357614de36146a1565b8260208301529392505050565b600060018201614e0257614e02614d4c565b5060010190565b600082821015614e1b57614e1b614d4c565b500390565b634e487b7160e01b600052601260045260246000fd5b600082614e4557614e45614e20565b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614f1b8160178501602088016145c1565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614f4c8160288401602088016145c1565b01602801949350505050565b60008451614f6a8184602089016145c1565b605f60f81b9083019081528451614f888160018401602089016145c1565b602d60f81b600192909101918201528351614faa8160028401602088016145c1565b0160020195945050505050565b60008351614fc98184602088016145c1565b835190830190614fdd8183602088016145c1565b01949350505050565b60008251614ff88184602087016145c1565b602d60f81b920191825250600101919050565b60008060006060848603121561502057600080fd5b835192506020840151915060408401516007811061503d57600080fd5b809150509250925092565b60006020828403121561505a57600080fd5b81516001600160401b0381111561507057600080fd5b8201601f8101841361508157600080fd5b805161508f61453982614504565b8181528560208385010111156150a457600080fd5b613c028260208301602086016145c1565b8481526080602082015260006150ce60808301866145ed565b82810360408401526150e081866145ed565b91505082606083015295945050505050565b60008161510157615101614d4c565b506000190190565b6000825161511b8184602087016145c1565b9190910192915050565b600181815b808511156137c457816000190482111561514657615146614d4c565b8085161561515357918102915b93841c939080029061512a565b60008261516f5750600161067e565b8161517c5750600061067e565b8160018114615192576002811461519c576151b8565b600191505061067e565b60ff8411156151ad576151ad614d4c565b50506001821b61067e565b5060208310610133831016604e8410600b84101617156151db575081810a61067e565b6151e58383615125565b80600019048211156151f9576151f9614d4c565b029392505050565b6000613ad08383615160565b60008261521c5761521c614e20565b50069056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200583f9d8ee1a91580fb2188be0ca1dd915dd91888748ede2a785001fafe51bb864736f6c634300080e0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x6080604052600436106101ee5760003560e01c80638456cb591161010d578063c346a8bf116100a0578063ea158df81161006f578063ea158df81461058f578063ebe5b460146105af578063f2fde38b146105cf578063f8d8353f146105ef578063ffa1ad741461060f57600080fd5b8063c346a8bf146104fb578063d547741f1461051b578063e63ab1e91461053b578063e882e37b1461056f57600080fd5b806392ad01fd116100dc57806392ad01fd14610485578063a217fddf146104a5578063abf410e5146104ba578063aeb2d230146104db57600080fd5b80638456cb59146103fe578063862943a0146104135780638da5cb5b1461043357806391d148541461046557600080fd5b806352d1902d1161018557806369514ebe1161015457806369514ebe146103905780636ca0b0d7146103a7578063715018a6146103bc57806379c20aaa146103d157600080fd5b806352d1902d1461031f5780635860ef5d1461033457806359ad0a0a146103615780635c975abb1461037857600080fd5b80633659cfe6116101c15780633659cfe6146102a95780633f4ba83a146102c95780634e395ea8146102de5780634f1ef2861461030c57600080fd5b806301ffc9a7146101f3578063248a9ca3146102285780632f2ff15d1461026757806336568abe14610289575b600080fd5b3480156101ff57600080fd5b5061021361020e366004614419565b61064d565b60405190151581526020015b60405180910390f35b34801561023457600080fd5b50610259610243366004614443565b600090815261012d602052604090206001015490565b60405190815260200161021f565b34801561027357600080fd5b50610287610282366004614471565b610684565b005b34801561029557600080fd5b506102876102a4366004614471565b6106af565b3480156102b557600080fd5b506102876102c43660046144a1565b610732565b3480156102d557600080fd5b50610287610811565b3480156102ea57600080fd5b506102fe6102f9366004614569565b610843565b60405161021f929190614619565b61028761031a36600461463e565b610869565b34801561032b57600080fd5b50610259610935565b34801561034057600080fd5b5061035461034f366004614443565b6109e8565b60405161021f9190614706565b34801561036d57600080fd5b506102596101605481565b34801561038457600080fd5b5060655460ff16610213565b34801561039c57600080fd5b506102596101625481565b3480156103b357600080fd5b50610259600181565b3480156103c857600080fd5b50610287610adf565b3480156103dd57600080fd5b506103f16103ec366004614443565b610b15565b60405161021f9190614767565b34801561040a57600080fd5b50610287610f62565b34801561041f57600080fd5b5061028761042e366004614443565b610f94565b34801561043f57600080fd5b506033546001600160a01b03165b6040516001600160a01b03909116815260200161021f565b34801561047157600080fd5b50610213610480366004614471565b6110f4565b34801561049157600080fd5b506102876104a0366004614443565b611120565b3480156104b157600080fd5b50610259600081565b3480156104c657600080fd5b5061015f5461044d906001600160a01b031681565b3480156104e757600080fd5b506102596104f63660046148a0565b611635565b34801561050757600080fd5b50610259610516366004614930565b611a84565b34801561052757600080fd5b50610287610536366004614471565b611c4e565b34801561054757600080fd5b506102597f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b34801561057b57600080fd5b5061028761058a3660046144a1565b611c74565b34801561059b57600080fd5b506102876105aa366004614443565b611cf3565b3480156105bb57600080fd5b506102876105ca366004614443565b611d91565b3480156105db57600080fd5b506102876105ea3660046144a1565b611f07565b3480156105fb57600080fd5b5061028761060a36600461498b565b611f9f565b34801561061b57600080fd5b50610640604051806040016040528060058152602001640312e332e360dc1b81525081565b60405161021f9190614a0d565b60006001600160e01b03198216637965db0b60e01b148061067e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600082815261012d60205260409020600101546106a081612096565b6106aa83836120a0565b505050565b6001600160a01b03811633146107245760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61072e8282612127565b5050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361077a5760405162461bcd60e51b815260040161071b90614a20565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107c3600080516020615222833981519152546001600160a01b031690565b6001600160a01b0316146107e95760405162461bcd60e51b815260040161071b90614a6c565b6107f28161218f565b6040805160008082526020820190925261080e918391906121b9565b50565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61083b81612096565b61080e612324565b6060806000610851856123b7565b905061085d8185612405565b90969095509350505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108b15760405162461bcd60e51b815260040161071b90614a20565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108fa600080516020615222833981519152546001600160a01b031690565b6001600160a01b0316146109205760405162461bcd60e51b815260040161071b90614a6c565b6109298261218f565b61072e828260016121b9565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109d55760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161071b565b5060008051602061522283398151915290565b6040805160a0808201835260008083526020808401829052838501829052606080850152608084018290528582526101618152908490208451928301855280546001600160a01b0316835260018101549183019190915260028082015493949293919284019160ff1690811115610a6157610a616146a1565b6002811115610a7257610a726146a1565b815260200160038201805480602002602001604051908101604052809291908181526020018280548015610ac557602002820191906000526020600020905b815481526020019060010190808311610ab1575b505050505081526020016004820154815250509050919050565b6033546001600160a01b03163314610b095760405162461bcd60e51b815260040161071b90614ab8565b610b13600061243e565b565b610b89604080516101a08101825260008082526020820181905290918201908152602001606081526020016060815260200160006001600160a01b03168152602001606081526020016060815260200160608152602001606081526020016000815260200160008152602001600081525090565b6000828152610163602090815260409182902082516101a08101845281546001600160a01b03168152600182015492810192909252600280820154929391929184019160ff1690811115610bdf57610bdf6146a1565b6002811115610bf057610bf06146a1565b815260200160038201805480602002602001604051908101604052809291908181526020018280548015610c4357602002820191906000526020600020905b815481526020019060010190808311610c2f575b50505050508152602001600482018054610c5c90614aed565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8890614aed565b8015610cd55780601f10610caa57610100808354040283529160200191610cd5565b820191906000526020600020905b815481529060010190602001808311610cb857829003601f168201915b505050918352505060058201546001600160a01b03166020820152600682018054604090920191610d0590614aed565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3190614aed565b8015610d7e5780601f10610d5357610100808354040283529160200191610d7e565b820191906000526020600020905b815481529060010190602001808311610d6157829003601f168201915b50505050508152602001600782018054610d9790614aed565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc390614aed565b8015610e105780601f10610de557610100808354040283529160200191610e10565b820191906000526020600020905b815481529060010190602001808311610df357829003601f168201915b50505050508152602001600882018054610e2990614aed565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5590614aed565b8015610ea25780601f10610e7757610100808354040283529160200191610ea2565b820191906000526020600020905b815481529060010190602001808311610e8557829003601f168201915b50505050508152602001600982018054610ebb90614aed565b80601f0160208091040260200160405190810160405280929190818152602001828054610ee790614aed565b8015610f345780601f10610f0957610100808354040283529160200191610f34565b820191906000526020600020905b815481529060010190602001808311610f1757829003601f168201915b50505050508152602001600a8201548152602001600b8201548152602001600c820154815250509050919050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a610f8c81612096565b61080e612490565b61015f54604051633a37b16d60e11b81523360048201526001600160a01b039091169063746f62da90602401602060405180830381865afa158015610fdd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110019190614b27565b61101d5760405162461bcd60e51b815260040161071b90614b49565b600081815261016360205260408120905b60028083015460ff1690811115611047576110476146a1565b146110645760405162461bcd60e51b815260040161071b90614b6b565b6002818101805460ff191660018302179055506110d4816003018054806020026020016040519081016040528092919081815260200182805480156110c857602002820191906000526020600020905b8154815260200190600101908083116110b4575b5050505050600261250b565b50508054600182015461072e9133916001600160a01b0390911690612653565b600091825261012d602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61015f54604051633a37b16d60e11b81523360048201526001600160a01b039091169063746f62da90602401602060405180830381865afa158015611169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118d9190614b27565b6111a95760405162461bcd60e51b815260040161071b90614b49565b6000818152610163602052604081209060028083015460ff16908111156111d2576111d26146a1565b146111ef5760405162461bcd60e51b815260040161071b90614b6b565b60028101805460ff191660011790556003810180546040805160208084028201810190925282815261125a939092909183018282801561124e57602002820191906000526020600020905b81548152602001906001019080831161123a575b5050505050600661250b565b5050604080516003830180546101606020820284018101909452610140830181815260009484939192908401828280156112b357602002820191906000526020600020905b81548152602001906001019080831161129f575b50505050508152602001836001015481526020018360040180546112d690614aed565b80601f016020809104026020016040519081016040528092919081815260200182805461130290614aed565b801561134f5780601f106113245761010080835404028352916020019161134f565b820191906000526020600020905b81548152906001019060200180831161133257829003601f168201915b505050918352505060058401546001600160a01b0316602082015260068401805460409092019161137f90614aed565b80601f01602080910402602001604051908101604052809291908181526020018280546113ab90614aed565b80156113f85780601f106113cd576101008083540402835291602001916113f8565b820191906000526020600020905b8154815290600101906020018083116113db57829003601f168201915b5050505050815260200183600701805461141190614aed565b80601f016020809104026020016040519081016040528092919081815260200182805461143d90614aed565b801561148a5780601f1061145f5761010080835404028352916020019161148a565b820191906000526020600020905b81548152906001019060200180831161146d57829003601f168201915b505050505081526020018360080180546114a390614aed565b80601f01602080910402602001604051908101604052809291908181526020018280546114cf90614aed565b801561151c5780601f106114f15761010080835404028352916020019161151c565b820191906000526020600020905b8154815290600101906020018083116114ff57829003601f168201915b5050505050815260200183600901805461153590614aed565b80601f016020809104026020016040519081016040528092919081815260200182805461156190614aed565b80156115ae5780601f10611583576101008083540402835291602001916115ae565b820191906000526020600020905b81548152906001019060200180831161159157829003601f168201915b5050509183525050600a8401546020820152600b840154604091820152835490516333a373df60e11b81529192503391636746e7be916115fe916001600160a01b03909116908590600401614b98565b600060405180830381600087803b15801561161857600080fd5b505af115801561162c573d6000803e3d6000fd5b50505050505050565b61015f54604051633a37b16d60e11b81523360048201526000916001600160a01b03169063746f62da90602401602060405180830381865afa15801561167f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a39190614b27565b6116bf5760405162461bcd60e51b815260040161071b90614b49565b506101628054600101908190556116e560208301356116de8480614ca4565b60056126b6565b600061173060208401356116f98580614ca4565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506127ab92505050565b9050600061173d336128e1565b604080516101a0810182526001600160a01b0388168152602087810135908201529192508101600081526020018381526020018580604001906117809190614ced565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016117ca60808701606088016144a1565b6001600160a01b031681526020016117e56080870187614ced565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200161182c60a0870187614ced565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200161187360c0870187614ced565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016118ba60e0870187614ced565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050506101008701356020808401919091526101208801356040808501919091526060909301859052868252610163815290829020835181546001600160a01b0319166001600160a01b0390911617815590830151600180830191909155918301516002808301805493949293909260ff19909116918490811115611974576119746146a1565b021790555060608201518051611994916003840191602090910190614310565b50608082015180516119b091600484019160209091019061435b565b5060a08201516005820180546001600160a01b0319166001600160a01b0390921691909117905560c082015180516119f291600684019160209091019061435b565b5060e08201518051611a0e91600784019160209091019061435b565b506101008201518051611a2b91600884019160209091019061435b565b506101208201518051611a4891600984019160209091019061435b565b50610140820151600a820155610160820151600b82015561018090910151600c90910155611a7c3386306020880135612945565b505092915050565b61015f54604051633a37b16d60e11b81523360048201526000916001600160a01b03169063746f62da90602401602060405180830381865afa158015611ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af29190614b27565b611b0e5760405162461bcd60e51b815260040161071b90614b49565b610160805460010190819055611b2785858560036126b6565b6000611b66868686808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506127ab92505050565b90506000611b73336128e1565b6040805160a0810182526001600160a01b038b168152602081018a90529192508101600081526020808201859052604091820184905260008681526101618252829020835181546001600160a01b0319166001600160a01b0390911617815590830151600180830191909155918301516002808301805493949293909260ff19909116918490811115611c0857611c086146a1565b021790555060608201518051611c28916003840191602090910190614310565b5060809190910151600490910155611c423389308a612945565b50909695505050505050565b600082815261012d6020526040902060010154611c6a81612096565b6106aa8383612127565b6033546001600160a01b03163314611c9e5760405162461bcd60e51b815260040161071b90614ab8565b61015f80546001600160a01b0319166001600160a01b0383169081179091556040519081527fb3a6e7c81ebdb0cf9bf28d5ddf6678ded8d73b44f2eee06ca3974dbb9f41ce7e9060200160405180910390a150565b61015f54604051633a37b16d60e11b81523360048201526001600160a01b039091169063746f62da90602401602060405180830381865afa158015611d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d609190614b27565b611d7c5760405162461bcd60e51b815260040161071b90614b49565b6000818152610161602052604081209061102e565b61015f54604051633a37b16d60e11b81523360048201526001600160a01b039091169063746f62da90602401602060405180830381865afa158015611dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dfe9190614b27565b611e1a5760405162461bcd60e51b815260040161071b90614b49565b6000818152610161602052604081209060028083015460ff1690811115611e4357611e436146a1565b14611e605760405162461bcd60e51b815260040161071b90614b6b565b60028101805460ff1916600117905560038101805460408051602080840282018101909252828152611ecb9390929091830182828015611ebf57602002820191906000526020600020905b815481526020019060010190808311611eab575b5050505050600461250b565b50506001810154611edd333083612983565b60405163079cc67960e41b81523060048201526024810182905233906379cc6790906044016115fe565b6033546001600160a01b03163314611f315760405162461bcd60e51b815260040161071b90614ab8565b6001600160a01b038116611f965760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161071b565b61080e8161243e565b6000611fab6001612a98565b90508015611fc3576000805461ff0019166101001790555b611fcb612b20565b611fd3612b50565b611fdb612b83565b611fe785858585612baa565b61015f80546001600160a01b0319166001600160a01b0388169081179091556040519081527fb3a6e7c81ebdb0cf9bf28d5ddf6678ded8d73b44f2eee06ca3974dbb9f41ce7e9060200160405180910390a1801561207f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6001600160a01b03163b151590565b61080e8133612ccc565b6120aa82826110f4565b61072e57600082815261012d602090815260408083206001600160a01b03851684529091529020805460ff191660011790556120e33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61213182826110f4565b1561072e57600082815261012d602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6033546001600160a01b0316331461080e5760405162461bcd60e51b815260040161071b90614ab8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156121ec576106aa83612d30565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612246575060408051601f3d908101601f1916820190925261224391810190614d33565b60015b6122a95760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161071b565b60008051602061522283398151915281146123185760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161071b565b506106aa838383612dcc565b60655460ff1661236d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161071b565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6123bf6143ce565b6123cb600c6002614d62565b6123d760126002614d62565b6123e19190614d81565b6123ec906001614d81565b8251036123fc5761067e82612df1565b61067e82612fd3565b6060808360600151516000146124285761241f848461322d565b91509150612437565b612432848461337f565b915091505b9250929050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16156124d65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161071b565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861239a3390565b600080600061015f60009054906101000a90046001600160a01b03166001600160a01b0316634be4e3dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125889190614d99565b855190915060005b818110156126495760008782815181106125ac576125ac614db6565b6020026020010151905060006125c28583613594565b5091506125d190508188614d81565b9650809550846001600160a01b0316633a484efd838a6040518363ffffffff1660e01b8152600401612604929190614dcc565b600060405180830381600087803b15801561261e57600080fd5b505af1158015612632573d6000803e3d6000fd5b5050505050508061264290614df0565b9050612590565b5050509250929050565b6040516001600160a01b0383166024820152604481018290526106aa90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613636565b604080518082019091526002815261343560f01b6020820152846126ed5760405162461bcd60e51b815260040161071b9190614a0d565b5060008061272f85858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525087925061250b915050565b915091508186111561276b576040805180820182526002815261343560f01b6020820152905162461bcd60e51b815261071b9190600401614a0d565b856127768284614e09565b1061207f576040805180820182526002815261343560f01b6020820152905162461bcd60e51b815261071b9190600401614a0d565b6060600061015f60009054906101000a90046001600160a01b03166001600160a01b0316634be4e3dd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128279190614d99565b90506000806128368386613708565b9092509050600061284f670de0b6b3a764000088614e36565b9050808311156128d65760006128658285614e09565b905060006128a5868960018b5161287c9190614e09565b8151811061288c5761288c614db6565b602002602001015184876128a09190614e09565b6137cc565b9050808860018a516128b79190614e09565b815181106128c7576128c7614db6565b60200260200101818152505050505b509395945050505050565b6000816001600160a01b031663e819426c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612921573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190614d33565b6040516001600160a01b038085166024830152831660448201526064810182905261297d9085906323b872dd60e01b9060840161267f565b50505050565b8015806129fd5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156129d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fb9190614d33565b155b612a685760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161071b565b6040516001600160a01b0383166024820152604481018290526106aa90849063095ea7b360e01b9060640161267f565b60008054610100900460ff1615612adf578160ff166001148015612abb5750303b155b612ad75760405162461bcd60e51b815260040161071b90614e4a565b506000919050565b60005460ff808416911610612b065760405162461bcd60e51b815260040161071b90614e4a565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff16612b475760405162461bcd60e51b815260040161071b90614e98565b610b133361243e565b600054610100900460ff16612b775760405162461bcd60e51b815260040161071b90614e98565b6065805460ff19169055565b600054610100900460ff16610b135760405162461bcd60e51b815260040161071b90614e98565b828114612bf15760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b604482015260640161071b565b612bf9612b83565b6000805b84811015612c8257612c4d848483818110612c1a57612c1a614db6565b90506020020135878784818110612c3357612c33614db6565b9050602002016020810190612c4891906144a1565b6120a0565b6000848483818110612c6157612c61614db6565b9050602002013503612c7257600191505b612c7b81614df0565b9050612bfd565b5080612cc55760405162461bcd60e51b8152602060048201526012602482015271139bc818591b5a5b881cdc1958da599a595960721b604482015260640161071b565b5050505050565b612cd682826110f4565b61072e57612cee816001600160a01b03166014613935565b612cf9836020613935565b604051602001612d0a929190614ee3565b60408051601f198184030181529082905262461bcd60e51b825261071b91600401614a0d565b6001600160a01b0381163b612d9d5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161071b565b60008051602061522283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612dd583613ad7565b600082511180612de25750805b156106aa5761297d8383613b17565b612df96143ce565b6040805180820190915260018152602d60f81b6020820152612e1c908390613c0b565b600114612e6b5760405162461bcd60e51b815260206004820152601d60248201527f76313a20696e636f72726563742064656c696d6974657220636f756e74000000604482015260640161071b565b600080612e9a604051806040016040528060018152602001602d60f81b81525085613cdf90919063ffffffff16565b90925090506000612ead83826012613dd6565b90506000612ebd83826012613dd6565b9050612ec98282613ea1565b612f055760405162461bcd60e51b815260206004820152600d60248201526c0a8f2e0ca40dad2e6dac2e8c6d609b1b604482015260640161071b565b6000612f32612f2d612f1960126001614d81565b612f25600c6012614d81565b889190613dd6565b613ec7565b90506000612f48612f2d612f1960126001614d81565b905080821115612f8a5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642072616e676560981b604482015260640161071b565b6040518060c00160405280878152602001868152602001858152602001604051806020016040528060008152508152602001838152602001828152509650505050505050919050565b612fdb6143ce565b6040805180820190915260018152605f60f81b6020820152612ffe908390613c0b565b60011461304d5760405162461bcd60e51b815260206004820152601d60248201527f76323a20696e636f72726563742064656c696d6974657220636f756e74000000604482015260640161071b565b60008061307c604051806040016040528060018152602001605f60f81b81525085613cdf90919063ffffffff16565b9150915061308982613f6b565b6130cb5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081a5cdcdd585b98d9481a59606a1b604482015260640161071b565b6040805180820190915260018152602d60f81b60208201526130ee908290613c0b565b6001146131485760405162461bcd60e51b815260206004820152602260248201527f496e636f72726563742064656c696d6974657220636f756e7420696e2072616e604482015261676560f01b606482015260840161071b565b600080613177604051806040016040528060018152602001602d60f81b81525084613cdf90919063ffffffff16565b91509150600061318683613ec7565b9050600061319383613ec7565b9050808211156131d55760405162461bcd60e51b815260206004820152600d60248201526c496e76616c69642072616e676560981b604482015260640161071b565b6040805160e081018252600060c0820181815282528251602081810185528282528084019190915283519081018452908152918101919091526060810196909652608086019190915260a08501525091949350505050565b6060808260000361326f5760405162461bcd60e51b815260206004820152600c60248201526b115b5c1d1e48185b5bdd5b9d60a21b604482015260640161071b565b83608001518460a001516132839190614e09565b61328e906001614d81565b83106132cb5760405162461bcd60e51b815260206004820152600c60248201526b10d85b9b9bdd081cdc1b1a5d60a21b604482015260640161071b565b600060018486608001516132df9190614d81565b6132e99190614e09565b905060006132f8826001614d81565b9050856060015161330c8760800151613fa5565b61331584613fa5565b60405160200161332793929190614f58565b604051602081830303815290604052866060015161334483613fa5565b6133518960a00151613fa5565b60405160200161336393929190614f58565b6040516020818303038152906040529350935050509250929050565b606080826000036133c15760405162461bcd60e51b815260206004820152600c60248201526b115b5c1d1e48185b5bdd5b9d60a21b604482015260640161071b565b83608001518460a001516133d59190614e09565b6133e0906001614d81565b831061341d5760405162461bcd60e51b815260206004820152600c60248201526b10d85b9b9bdd081cdc1b1a5d60a21b604482015260640161071b565b600060018486608001516134319190614d81565b61343b9190614e09565b9050600061344a826001614d81565b9050600061347d600c604051806040016040528060018152602001600360fc1b81525061347686613fa5565b9190613fb0565b905060006134a9600c604051806040016040528060018152602001600360fc1b81525061347686613fa5565b905060008860400151836040516020016134c4929190614fb7565b604051602081830303815290604052905060008960400151836040516020016134ee929190614fb7565b60408051601f19818403018152908290528b5190925061351091602001614fe6565b60408051601f198184030181529082905261352f918490602001614fb7565b6040516020818303038152906040528160405160200161354f9190614fe6565b6040516020818303038152906040528b60200151604051602001613574929190614fb7565b604051602081830303815290604052975097505050505050509250929050565b600080600080600080876001600160a01b031663dff35e83886040518263ffffffff1660e01b81526004016135cb91815260200190565b606060405180830381865afa1580156135e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360c919061500b565b919450925090508261362683670de0b6b3a7640000614d62565b9096509450925050509250925092565b600061368b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661408f9092919063ffffffff16565b8051909150156106aa57808060200190518101906136a99190614b27565b6106aa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161071b565b60008060005b83518110156137c4576000856001600160a01b031663dff35e8386848151811061373a5761373a614db6565b60200260200101516040518263ffffffff1660e01b815260040161376091815260200190565b606060405180830381865afa15801561377d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a1919061500b565b5091506137b090508185614d81565b935091506137bd81614df0565b905061370e565b509250929050565b60405163137b20bf60e31b81526004810183905260009081906001600160a01b03861690639bd905f890602401600060405180830381865afa158015613816573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261383e9190810190615048565b905060008061384d8386610843565b60405163095b5ded60e11b815291935091506001600160a01b038816906312b6bbda90613884908990859087908b906004016150b5565b6020604051808303816000875af11580156138a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c79190614d33565b604051633a484efd60e01b81529094506001600160a01b03881690633a484efd906138f9908990600290600401614dcc565b600060405180830381600087803b15801561391357600080fd5b505af1158015613927573d6000803e3d6000fd5b505050505050509392505050565b60606000613944836002614d62565b61394f906002614d81565b6001600160401b03811115613966576139666144be565b6040519080825280601f01601f191660200182016040528015613990576020820181803683370190505b509050600360fc1b816000815181106139ab576139ab614db6565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106139da576139da614db6565b60200101906001600160f81b031916908160001a90535060006139fe846002614d62565b613a09906001614d81565b90505b6001811115613a81576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613a3d57613a3d614db6565b1a60f81b828281518110613a5357613a53614db6565b60200101906001600160f81b031916908160001a90535060049490941c93613a7a816150f2565b9050613a0c565b508315613ad05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161071b565b9392505050565b613ae081612d30565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613b7f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161071b565b600080846001600160a01b031684604051613b9a9190615109565b600060405180830381855af49150503d8060008114613bd5576040519150601f19603f3d011682016040523d82523d6000602084013e613bda565b606091505b5091509150613c028282604051806060016040528060278152602001615242602791396140a6565b95945050505050565b60008151600114613c545760405162461bcd60e51b8152602060048201526013602482015272092dcecc2d8d2c840c6d0c2e440d8cadccee8d606b1b604482015260640161071b565b600082600081518110613c6957613c69614db6565b016020015184516001600160f81b0319909116915060005b81811015613cd657826001600160f81b031916868281518110613ca657613ca6614db6565b01602001516001600160f81b03191603613cc657613cc384614df0565b93505b613ccf81614df0565b9050613c81565b50505092915050565b6060808251600114613d335760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642064656c696d69746572206c656e6774680000000000000000604482015260640161071b565b600083600081518110613d4857613d48614db6565b016020015185516001600160f81b0319909116915060005b8181101561264957826001600160f81b031916878281518110613d8557613d85614db6565b01602001516001600160f81b03191603613dc657613da587600083613dd6565b9450613dbc87613db6836001614d81565b84613dd6565b9350505050612437565b613dcf81614df0565b9050613d60565b60606000613de48484614e09565b90506000816001600160401b03811115613e0057613e006144be565b6040519080825280601f01601f191660200182016040528015613e2a576020820181803683370190505b50905060005b82811015613e975786613e438783614d81565b81518110613e5357613e53614db6565b602001015160f81c60f81b828281518110613e7057613e70614db6565b60200101906001600160f81b031916908160001a905350613e9081614df0565b9050613e30565b5095945050505050565b600081518351148015613ad0575081805190602001208380519060200120149392505050565b805160009081908390825b81811015613f61576000613ee68284614e09565b90506000848381518110613efc57613efc614db6565b01602001516001600160f81b03198116915060f81c6000613f1e603083614e09565b9050613f2b600185614e09565b613f3690600a615201565b613f409082614d62565b613f4a9089614d81565b97505050505080613f5a90614df0565b9050613ed2565b5091949350505050565b60006024825114801561067e57506040805180820190915260018152602d60f81b6020820152613f9c908390613c0b565b60041492915050565b606061067e826140df565b82518151606091906001146140005760405162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c840e0c2c886d0c2e440d8cadccee8d60531b604482015260640161071b565b808410156140465760405162461bcd60e51b8152602060048201526013602482015272092dcecc2d8d2c840e8caf0e840d8cadccee8d606b1b604482015260640161071b565b805b84811015614085578386604051602001614063929190614fb7565b60405160208183030381529060405295508061407e90614df0565b9050614048565b5093949350505050565b606061409e84846000856141df565b949350505050565b606083156140b5575081613ad0565b8251156140c55782518084602001fd5b8160405162461bcd60e51b815260040161071b9190614a0d565b6060816000036141065750506040805180820190915260018152600360fc1b602082015290565b8160005b8115614130578061411a81614df0565b91506141299050600a83614e36565b915061410a565b6000816001600160401b0381111561414a5761414a6144be565b6040519080825280601f01601f191660200182016040528015614174576020820181803683370190505b5090505b841561409e57614189600183614e09565b9150614196600a8661520d565b6141a1906030614d81565b60f81b8183815181106141b6576141b6614db6565b60200101906001600160f81b031916908160001a9053506141d8600a86614e36565b9450614178565b6060824710156142405760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161071b565b6001600160a01b0385163b6142975760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161071b565b600080866001600160a01b031685876040516142b39190615109565b60006040518083038185875af1925050503d80600081146142f0576040519150601f19603f3d011682016040523d82523d6000602084013e6142f5565b606091505b50915091506143058282866140a6565b979650505050505050565b82805482825590600052602060002090810192821561434b579160200282015b8281111561434b578251825591602001919060010190614330565b50614357929150614404565b5090565b82805461436790614aed565b90600052602060002090601f016020900481019282614389576000855561434b565b82601f106143a257805160ff191683800117855561434b565b8280016001018555821561434b579182018281111561434b578251825591602001919060010190614330565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160008152602001600081525090565b5b808211156143575760008155600101614405565b60006020828403121561442b57600080fd5b81356001600160e01b031981168114613ad057600080fd5b60006020828403121561445557600080fd5b5035919050565b6001600160a01b038116811461080e57600080fd5b6000806040838503121561448457600080fd5b8235915060208301356144968161445c565b809150509250929050565b6000602082840312156144b357600080fd5b8135613ad08161445c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156144fc576144fc6144be565b604052919050565b60006001600160401b0382111561451d5761451d6144be565b50601f01601f191660200190565b600061453e61453984614504565b6144d4565b905082815283838301111561455257600080fd5b828260208301376000602084830101529392505050565b6000806040838503121561457c57600080fd5b82356001600160401b0381111561459257600080fd5b8301601f810185136145a357600080fd5b6145b28582356020840161452b565b95602094909401359450505050565b60005b838110156145dc5781810151838201526020016145c4565b8381111561297d5750506000910152565b600081518084526146058160208601602086016145c1565b601f01601f19169290920160200192915050565b60408152600061462c60408301856145ed565b8281036020840152613c0281856145ed565b6000806040838503121561465157600080fd5b823561465c8161445c565b915060208301356001600160401b0381111561467757600080fd5b8301601f8101851361468857600080fd5b6146978582356020840161452b565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600381106146c7576146c76146a1565b9052565b600081518084526020808501945080840160005b838110156146fb578151875295820195908201906001016146df565b509495945050505050565b6020815260018060a01b038251166020820152602082015160408201526000604083015161473760608401826146b7565b50606083015160a0608084015261475160c08401826146cb565b9050608084015160a08401528091505092915050565b602081526147816020820183516001600160a01b03169052565b602082015160408201526000604083015161479f60608401826146b7565b5060608301516101a08060808501526147bc6101c08501836146cb565b91506080850151601f19808685030160a08701526147da84836145ed565b935060a087015191506147f860c08701836001600160a01b03169052565b60c08701519150808685030160e087015261481384836145ed565b935060e0870151915061010081878603018188015261483285846145ed565b94508088015192505061012081878603018188015261485185846145ed565b94508088015192505061014081878603018188015261487085846145ed565b90880151610160888101919091528801516101808089019190915290970151929095019190915250929392505050565b600080604083850312156148b357600080fd5b82356148be8161445c565b915060208301356001600160401b038111156148d957600080fd5b8301610140818603121561449657600080fd5b60008083601f8401126148fe57600080fd5b5081356001600160401b0381111561491557600080fd5b6020830191508360208260051b850101111561243757600080fd5b6000806000806060858703121561494657600080fd5b84356149518161445c565b93506020850135925060408501356001600160401b0381111561497357600080fd5b61497f878288016148ec565b95989497509550505050565b6000806000806000606086880312156149a357600080fd5b85356149ae8161445c565b945060208601356001600160401b03808211156149ca57600080fd5b6149d689838a016148ec565b909650945060408801359150808211156149ef57600080fd5b506149fc888289016148ec565b969995985093965092949392505050565b602081526000613ad060208301846145ed565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c90821680614b0157607f821691505b602082108103614b2157634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215614b3957600080fd5b81518015158114613ad057600080fd5b6020808252600890820152672737ba102a21a79960c11b604082015260600190565b602080825260139082015272139bdd081c195b991a5b99c81c995c5d595cdd606a1b604082015260600190565b60018060a01b03831681526040602082015260008251610140806040850152614bc56101808501836146cb565b9150602085015160608501526040850151603f1980868503016080870152614bed84836145ed565b935060608701519150614c0b60a08701836001600160a01b03169052565b60808701519150808685030160c0870152614c2684836145ed565b935060a08701519150808685030160e0870152614c4384836145ed565b935060c08701519150610100818786030181880152614c6285846145ed565b945060e08801519250610120828887030181890152614c8186856145ed565b918901519488019490945292909601516101609095019490945295945050505050565b6000808335601e19843603018112614cbb57600080fd5b8301803591506001600160401b03821115614cd557600080fd5b6020019150600581901b360382131561243757600080fd5b6000808335601e19843603018112614d0457600080fd5b8301803591506001600160401b03821115614d1e57600080fd5b60200191503681900382131561243757600080fd5b600060208284031215614d4557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615614d7c57614d7c614d4c565b500290565b60008219821115614d9457614d94614d4c565b500190565b600060208284031215614dab57600080fd5b8151613ad08161445c565b634e487b7160e01b600052603260045260246000fd5b8281526040810160078310614de357614de36146a1565b8260208301529392505050565b600060018201614e0257614e02614d4c565b5060010190565b600082821015614e1b57614e1b614d4c565b500390565b634e487b7160e01b600052601260045260246000fd5b600082614e4557614e45614e20565b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614f1b8160178501602088016145c1565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614f4c8160288401602088016145c1565b01602801949350505050565b60008451614f6a8184602089016145c1565b605f60f81b9083019081528451614f888160018401602089016145c1565b602d60f81b600192909101918201528351614faa8160028401602088016145c1565b0160020195945050505050565b60008351614fc98184602088016145c1565b835190830190614fdd8183602088016145c1565b01949350505050565b60008251614ff88184602087016145c1565b602d60f81b920191825250600101919050565b60008060006060848603121561502057600080fd5b835192506020840151915060408401516007811061503d57600080fd5b809150509250925092565b60006020828403121561505a57600080fd5b81516001600160401b0381111561507057600080fd5b8201601f8101841361508157600080fd5b805161508f61453982614504565b8181528560208385010111156150a457600080fd5b613c028260208301602086016145c1565b8481526080602082015260006150ce60808301866145ed565b82810360408401526150e081866145ed565b91505082606083015295945050505050565b60008161510157615101614d4c565b506000190190565b6000825161511b8184602087016145c1565b9190910192915050565b600181815b808511156137c457816000190482111561514657615146614d4c565b8085161561515357918102915b93841c939080029061512a565b60008261516f5750600161067e565b8161517c5750600061067e565b8160018114615192576002811461519c576151b8565b600191505061067e565b60ff8411156151ad576151ad614d4c565b50506001821b61067e565b5060208310610133831016604e8410600b84101617156151db575081810a61067e565b6151e58383615125565b80600019048211156151f9576151f9614d4c565b029392505050565b6000613ad08383615160565b60008261521c5761521c614e20565b50069056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212200583f9d8ee1a91580fb2188be0ca1dd915dd91888748ede2a785001fafe51bb864736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createDetokenizationRequest(address,uint256,uint256[])": {
        "details": "Only a TCO2 contract can call this function. Additionally, the escrow contract must have been approved to transfer the amount of TCO2 to detokenize.",
        "params": {
          "amount": "The amount of TCO2 to detokenize.",
          "batchTokenIds": "The ids of the batches to detokenize.",
          "user": "The user that is requesting the detokenization."
        }
      },
      "createRetirementRequest(address,(uint256[],uint256,string,address,string,string,string,string,uint256,uint256))": {
        "details": "Only a TCO2 contract can call this function. Additionally, the escrow contract must have been approved to transfer the amount of TCO2 to retire.",
        "params": {
          "params": "Retirement request params.",
          "user": "The user that is requesting the retirement."
        }
      },
      "finalizeDetokenizationRequest(uint256)": {
        "details": "Only the TCO2 contract can call this function.",
        "params": {
          "requestId": "The id of the request to finalize."
        }
      },
      "finalizeRetirementRequest(uint256)": {
        "details": "Only the TCO2 contract can call this function.",
        "params": {
          "requestId": "The id of the request to finalize."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revertDetokenizationRequest(uint256)": {
        "details": "Only the TCO2 contract can call this function.",
        "params": {
          "requestId": "The id of the request to revert."
        }
      },
      "revertRetirementRequest(uint256)": {
        "details": "Only the TCO2 contract can call this function.",
        "params": {
          "requestId": "The id of the request to revert."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "splitSerialNumber(string,uint256)": {
        "params": {
          "amount": "The amount to split by.",
          "serialNumber": "The serial number to split."
        },
        "returns": {
          "balancingSerialNumber": "remainingSerialNumber The serial numbers split from the original serial number."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "PAUSER_ROLE": {
        "details": "All roles related to accessing this contract"
      },
      "VERSION": {
        "details": "Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createDetokenizationRequest(address,uint256,uint256[])": {
        "notice": "Create a new detokenization request."
      },
      "createRetirementRequest(address,(uint256[],uint256,string,address,string,string,string,string,uint256,uint256))": {
        "notice": "Create a new retirement request."
      },
      "finalizeDetokenizationRequest(uint256)": {
        "notice": "Finalize a detokenization request by burning its amount of TCO2."
      },
      "finalizeRetirementRequest(uint256)": {
        "notice": "Finalize a retirement request by calling the retire and mint certificate function in respective TCO2 Batch, which can only be invoked by the escrow After retiring the amount of TCO2 is burned."
      },
      "revertDetokenizationRequest(uint256)": {
        "notice": "Revert a detokenization request by transfering amount of TCO2 back to the user."
      },
      "revertRetirementRequest(uint256)": {
        "notice": "Revert a retirement request by transfering amount of TCO2 back to the user."
      },
      "splitSerialNumber(string,uint256)": {
        "notice": "Split a serial number range into two parts based on the given amount."
      }
    },
    "notice": "Contract for escrowing TCO2s during detokenization or retirement until the off-chain registry confirms the detokenization or retirement request.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2390,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2393,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5494,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1881,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1993,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2682,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 2771,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2372,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2660,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5801,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1497,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "_roles",
        "offset": 0,
        "slot": "301",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1492_storage)"
      },
      {
        "astId": 1796,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16417,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "contractRegistry",
        "offset": 0,
        "slot": "351",
        "type": "t_address"
      },
      {
        "astId": 16419,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "detokenizationRequestIdCounter",
        "offset": 0,
        "slot": "352",
        "type": "t_uint256"
      },
      {
        "astId": 16424,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "_detokenizationRequests",
        "offset": 0,
        "slot": "353",
        "type": "t_mapping(t_uint256,t_struct(DetokenizationRequest)16450_storage)"
      },
      {
        "astId": 16426,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "retirementRequestIdCounter",
        "offset": 0,
        "slot": "354",
        "type": "t_uint256"
      },
      {
        "astId": 16431,
        "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
        "label": "_retirementRequests",
        "offset": 0,
        "slot": "355",
        "type": "t_mapping(t_uint256,t_struct(RetirementRequest)16479_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(RequestStatus)16483": {
        "encoding": "inplace",
        "label": "enum RequestStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1492_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1492_storage"
      },
      "t_mapping(t_uint256,t_struct(DetokenizationRequest)16450_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DetokenizationRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(DetokenizationRequest)16450_storage"
      },
      "t_mapping(t_uint256,t_struct(RetirementRequest)16479_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RetirementRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(RetirementRequest)16479_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DetokenizationRequest)16450_storage": {
        "encoding": "inplace",
        "label": "struct DetokenizationRequest",
        "members": [
          {
            "astId": 16439,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16441,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16444,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(RequestStatus)16483"
          },
          {
            "astId": 16447,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "batchTokenIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 16449,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "projectVintageTokenId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RetirementRequest)16479_storage": {
        "encoding": "inplace",
        "label": "struct RetirementRequest",
        "members": [
          {
            "astId": 16452,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16454,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16457,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "status",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(RequestStatus)16483"
          },
          {
            "astId": 16460,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "batchTokenIds",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 16462,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "retiringEntityString",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 16464,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "beneficiary",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 16466,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "beneficiaryString",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 16468,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "retirementMessage",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 16470,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "beneficiaryLocation",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 16472,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "consumptionCountryCode",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 16474,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "consumptionPeriodStart",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 16476,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "consumptionPeriodEnd",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 16478,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "projectVintageTokenId",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(RoleData)1492_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 1489,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1491,
            "contract": "contracts/ToucanCarbonOffsetsEscrow.sol:ToucanCarbonOffsetsEscrow",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}