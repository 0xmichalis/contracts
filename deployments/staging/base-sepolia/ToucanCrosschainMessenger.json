{
  "address": "0xB42Bdc5520a0c3F708F69B27358C78700eAB6b04",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mailbox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "originDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "toDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requesthash",
          "type": "bytes32"
        }
      ],
      "name": "BridgeRequestReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "originDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "toDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requesthash",
          "type": "bytes32"
        }
      ],
      "name": "BridgeRequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "originDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "toDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requesthash",
          "type": "bytes32"
        }
      ],
      "name": "PoolRebalancingRequestReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "originDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "toDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bridger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requesthash",
          "type": "bytes32"
        }
      ],
      "name": "PoolRebalancingRequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "homeTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "remoteTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domainId",
          "type": "uint32"
        }
      ],
      "name": "TokenPairAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "homeTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "remoteTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domainId",
          "type": "uint32"
        }
      ],
      "name": "TokenPairRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BRIDGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712DomainHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_RELEASE_CANDIDATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "homeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "remoteToken",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        }
      ],
      "name": "addTokenPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "homeTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "remoteTokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        }
      ],
      "name": "batchAddTokenPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "bridgeTCO2s",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domains",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_router",
          "type": "bytes32"
        }
      ],
      "name": "enrollRemoteRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_domains",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_addresses",
          "type": "bytes32[]"
        }
      ],
      "name": "enrollRemoteRouters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hook",
      "outputs": [
        {
          "internalType": "contract IPostDispatchHook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interchainSecurityModule",
      "outputs": [
        {
          "internalType": "contract IInterchainSecurityModule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailbox",
      "outputs": [
        {
          "internalType": "contract IMailbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "quoteBridgeTCO2sFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "quoteTokenTransferFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        }
      ],
      "name": "remoteTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timer",
              "type": "uint256"
            }
          ],
          "internalType": "struct RemoteTokenInformation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isReverted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum BridgeRequestType",
          "name": "requestType",
          "type": "uint8"
        },
        {
          "internalType": "enum MessageType",
          "name": "messageType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "routers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hook",
          "type": "address"
        }
      ],
      "name": "setHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_module",
          "type": "address"
        }
      ],
      "name": "setInterchainSecurityModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferTokensToRecipient",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "unenrollRemoteRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_domains",
          "type": "uint32[]"
        }
      ],
      "name": "unenrollRemoteRouters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "95d2f9d4973fec539020d0313940a7de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mailbox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"toDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requesthash\",\"type\":\"bytes32\"}],\"name\":\"BridgeRequestReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"toDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requesthash\",\"type\":\"bytes32\"}],\"name\":\"BridgeRequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"toDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requesthash\",\"type\":\"bytes32\"}],\"name\":\"PoolRebalancingRequestReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"toDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requesthash\",\"type\":\"bytes32\"}],\"name\":\"PoolRebalancingRequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"homeTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remoteTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domainId\",\"type\":\"uint32\"}],\"name\":\"TokenPairAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"homeTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"remoteTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domainId\",\"type\":\"uint32\"}],\"name\":\"TokenPairRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRIDGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712DomainHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_RELEASE_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"homeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"addTokenPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"homeTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"remoteTokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"batchAddTokenPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"bridgeTCO2s\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domains\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_router\",\"type\":\"bytes32\"}],\"name\":\"enrollRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_domains\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_addresses\",\"type\":\"bytes32[]\"}],\"name\":\"enrollRemoteRouters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hook\",\"outputs\":[{\"internalType\":\"contract IPostDispatchHook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interchainSecurityModule\",\"outputs\":[{\"internalType\":\"contract IInterchainSecurityModule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"contract IMailbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"quoteBridgeTCO2sFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"quoteTokenTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"remoteTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timer\",\"type\":\"uint256\"}],\"internalType\":\"struct RemoteTokenInformation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isReverted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum BridgeRequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"internalType\":\"enum MessageType\",\"name\":\"messageType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"routers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"setHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"setInterchainSecurityModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferTokensToRecipient\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"unenrollRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_domains\",\"type\":\"uint32[]\"}],\"name\":\"unenrollRemoteRouters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTokenPair(address,address,uint32)\":{\"details\":\"Called by owner to add or map home token address to remote token address. Changing the remote token address can only be done within a 7 day period, after first setting it.\",\"params\":{\"domain\":\"domain ID of the remote chain whose token is being mapped\",\"homeToken\":\"token address on home chain\",\"remoteToken\":\"token address on remote chain\"}},\"batchAddTokenPair(address[],address[],uint32)\":{\"details\":\"Called by owner to add or map home token addresses to remote token addresses.\",\"params\":{\"domain\":\"domain ID of the remote chain whose tokens are being mapped\",\"homeTokens\":\"token addresses on home chain\",\"remoteTokens_\":\"token addresses on remote chain\"}},\"bridgeTCO2s(uint32,address[],uint256[],address)\":{\"params\":{\"amounts\":\"the amounts of tokens to be bridged\",\"destinationDomain\":\"The domain to send the tokens to\",\"recipient\":\"the recipient of tokens in the destination domain\",\"tokens\":\"addresses of tokens to be bridged\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"enrollRemoteRouter(uint32,bytes32)\":{\"params\":{\"_domain\":\"The domain of the remote Application Router\",\"_router\":\"The address of the remote Application Router\"}},\"enrollRemoteRouters(uint32[],bytes32[])\":{\"params\":{\"_addresses\":\"The addresses of the remote Application Routers\",\"_domains\":\"The domains of the remote Application Routers\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"handle(uint32,bytes32,bytes)\":{\"params\":{\"_message\":\"The message\",\"_origin\":\"The origin domain\",\"_sender\":\"The sender address\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"when invoked by owner it Pauses the cross chain bridging logic to interact with abacus\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"quoteBridgeTCO2sFee(uint32,address[],uint256[],address)\":{\"details\":\"Use the result of this function as msg.value when calling `transferTokens` or `transferTokensToRecipient`.\",\"params\":{\"amounts\":\"the amount of tokens to be bridged\",\"destinationDomain\":\"The domain to send the message to\",\"recipient\":\"the recipient of tokens in the destination domain\",\"tokens\":\"address of token to be bridged\"},\"returns\":{\"_0\":\"The required fee for a token transfer\"}},\"quoteTokenTransferFee(uint32,address,uint256,address)\":{\"details\":\"Use the result of this function as msg.value when calling `transferTokens` or `transferTokensToRecipient`.\",\"params\":{\"amount\":\"the amount of tokens to be bridged\",\"destinationDomain\":\"The domain to send the message to\",\"recipient\":\"the recipient of tokens in the destination domain\",\"token\":\"address of token to be bridged\"},\"returns\":{\"_0\":\"The required fee for a token transfer\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"routers(uint32)\":{\"details\":\"Returns 0 address if no router is enrolled for the given domain\",\"params\":{\"_domain\":\"The remote domain ID.\"},\"returns\":{\"_0\":\"router The address of the Router contract for the given domain\"}},\"setHook(address)\":{\"params\":{\"_hook\":\"The address of the hook contract.\"}},\"setInterchainSecurityModule(address)\":{\"params\":{\"_module\":\"The address of the interchain security module contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferTokens(uint32,address,uint256)\":{\"params\":{\"amount\":\"the amount of tokens to be bridged\",\"destinationDomain\":\"The domain to send the message to\",\"token\":\"address of token to be bridged\"}},\"transferTokensToRecipient(uint32,address,uint256,address)\":{\"params\":{\"amount\":\"the amount of tokens to be bridged\",\"destinationDomain\":\"The domain to send the tokens to\",\"recipient\":\"the recipient of tokens in the destination domain\",\"token\":\"address of token to be bridged\"}},\"unenrollRemoteRouter(uint32)\":{\"params\":{\"_domain\":\"The domain of the remote Application Router\"}},\"unenrollRemoteRouters(uint32[])\":{\"params\":{\"_domains\":\"The domains of the remote Application Routers\"}},\"unpause()\":{\"details\":\"when invoked by owner it unpauses the cross chain bridging logic to interact with abacus\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"EIP712DomainHash\":{\"details\":\"EIP712Domain hash used in generating request hashes\"},\"VERSION\":{\"details\":\"Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTokenPair(address,address,uint32)\":{\"notice\":\"Adds new token pair than can be bridged\"},\"batchAddTokenPair(address[],address[],uint32)\":{\"notice\":\"Adds a new set of token pairs than can be bridged\"},\"bridgeTCO2s(uint32,address[],uint256[],address)\":{\"notice\":\"Bridges multiple tokens to a recipient in the destination domain\"},\"enrollRemoteRouter(uint32,bytes32)\":{\"notice\":\"Register the address of a Router contract for the same Application on a remote chain\"},\"enrollRemoteRouters(uint32[],bytes32[])\":{\"notice\":\"Batch version of `enrollRemoteRouter`\"},\"handle(uint32,bytes32,bytes)\":{\"notice\":\"Handles an incoming message\"},\"pause()\":{\"notice\":\"Pauses the cross chain bridge\"},\"quoteBridgeTCO2sFee(uint32,address[],uint256[],address)\":{\"notice\":\"Fetch the amount that needs to be used as a fee in order to to pay for the gas of the transfer on the destination domain.\"},\"quoteTokenTransferFee(uint32,address,uint256,address)\":{\"notice\":\"Fetch the amount that needs to be used as a fee in order to to pay for the gas of the transfer on the destination domain.\"},\"routers(uint32)\":{\"notice\":\"Returns the address of the Router contract for the given domain\"},\"setHook(address)\":{\"notice\":\"Sets the address of the application's custom hook.\"},\"setInterchainSecurityModule(address)\":{\"notice\":\"Sets the address of the application's custom interchain security module.\"},\"transferTokens(uint32,address,uint256)\":{\"notice\":\"Transfer tokens to a recipient in the destination domain. The recipient of the tokens in the destination domain is the same as msg.sender in this context.\"},\"transferTokensToRecipient(uint32,address,uint256,address)\":{\"notice\":\"Transfer tokens to a recipient in the destination domain\"},\"unenrollRemoteRouter(uint32)\":{\"notice\":\"Unregister the domain\"},\"unenrollRemoteRouters(uint32[])\":{\"notice\":\"Batch version of `unenrollRemoteRouter`\"},\"unpause()\":{\"notice\":\"Unpauses the cross chain bridge\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/cross-chain/ToucanCrosschainMessenger.sol\":\"ToucanCrosschainMessenger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@hyperlane-xyz/core/contracts/client/MailboxClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {IMailbox} from \\\"../interfaces/IMailbox.sol\\\";\\nimport {IPostDispatchHook} from \\\"../interfaces/hooks/IPostDispatchHook.sol\\\";\\nimport {IInterchainSecurityModule} from \\\"../interfaces/IInterchainSecurityModule.sol\\\";\\nimport {Message} from \\\"../libs/Message.sol\\\";\\n\\n// ============ External Imports ============\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract MailboxClient is OwnableUpgradeable {\\n    using Message for bytes;\\n\\n    IMailbox public immutable mailbox;\\n\\n    uint32 public immutable localDomain;\\n\\n    IPostDispatchHook public hook;\\n\\n    IInterchainSecurityModule public interchainSecurityModule;\\n\\n    uint256[48] private __GAP; // gap for upgrade safety\\n\\n    // ============ Modifiers ============\\n    modifier onlyContract(address _contract) {\\n        require(\\n            Address.isContract(_contract),\\n            \\\"MailboxClient: invalid mailbox\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyContractOrNull(address _contract) {\\n        require(\\n            Address.isContract(_contract) || _contract == address(0),\\n            \\\"MailboxClient: invalid contract setting\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only accept messages from an Hyperlane Mailbox contract\\n     */\\n    modifier onlyMailbox() {\\n        require(\\n            msg.sender == address(mailbox),\\n            \\\"MailboxClient: sender not mailbox\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _mailbox) onlyContract(_mailbox) {\\n        mailbox = IMailbox(_mailbox);\\n        localDomain = mailbox.localDomain();\\n        _transferOwnership(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the application's custom hook.\\n     * @param _hook The address of the hook contract.\\n     */\\n    function setHook(address _hook) public onlyContractOrNull(_hook) onlyOwner {\\n        hook = IPostDispatchHook(_hook);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the application's custom interchain security module.\\n     * @param _module The address of the interchain security module contract.\\n     */\\n    function setInterchainSecurityModule(\\n        address _module\\n    ) public onlyContractOrNull(_module) onlyOwner {\\n        interchainSecurityModule = IInterchainSecurityModule(_module);\\n    }\\n\\n    // ======== Initializer =========\\n    function _MailboxClient_initialize(\\n        address _hook,\\n        address _interchainSecurityModule,\\n        address _owner\\n    ) internal onlyInitializing {\\n        __Ownable_init();\\n        setHook(_hook);\\n        setInterchainSecurityModule(_interchainSecurityModule);\\n        _transferOwnership(_owner);\\n    }\\n\\n    function _isLatestDispatched(bytes32 id) internal view returns (bool) {\\n        return mailbox.latestDispatchedId() == id;\\n    }\\n\\n    function _metadata(\\n        uint32 /*_destinationDomain*/\\n    ) internal view virtual returns (bytes memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function _dispatch(\\n        uint32 _destinationDomain,\\n        bytes32 _recipient,\\n        bytes memory _messageBody\\n    ) internal virtual returns (bytes32) {\\n        return\\n            _dispatch(_destinationDomain, _recipient, msg.value, _messageBody);\\n    }\\n\\n    function _dispatch(\\n        uint32 _destinationDomain,\\n        bytes32 _recipient,\\n        uint256 _value,\\n        bytes memory _messageBody\\n    ) internal virtual returns (bytes32) {\\n        return\\n            mailbox.dispatch{value: _value}(\\n                _destinationDomain,\\n                _recipient,\\n                _messageBody,\\n                _metadata(_destinationDomain),\\n                hook\\n            );\\n    }\\n\\n    function _quoteDispatch(\\n        uint32 _destinationDomain,\\n        bytes32 _recipient,\\n        bytes memory _messageBody\\n    ) internal view virtual returns (uint256) {\\n        return\\n            mailbox.quoteDispatch(\\n                _destinationDomain,\\n                _recipient,\\n                _messageBody,\\n                _metadata(_destinationDomain),\\n                hook\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xbe8ca8a65272d4728dd5edba78821949e85d6ecb01b03c8981e474b47386dd1c\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/client/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ Internal Imports ============\\nimport {IMessageRecipient} from \\\"../interfaces/IMessageRecipient.sol\\\";\\nimport {IPostDispatchHook} from \\\"../interfaces/hooks/IPostDispatchHook.sol\\\";\\nimport {IInterchainSecurityModule} from \\\"../interfaces/IInterchainSecurityModule.sol\\\";\\nimport {MailboxClient} from \\\"./MailboxClient.sol\\\";\\nimport {EnumerableMapExtended} from \\\"../libs/EnumerableMapExtended.sol\\\";\\n\\n// ============ External Imports ============\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nabstract contract Router is MailboxClient, IMessageRecipient {\\n    using EnumerableMapExtended for EnumerableMapExtended.UintToBytes32Map;\\n    using Strings for uint32;\\n\\n    // ============ Mutable Storage ============\\n    EnumerableMapExtended.UintToBytes32Map internal _routers;\\n\\n    uint256[48] private __GAP; // gap for upgrade safety\\n\\n    constructor(address _mailbox) MailboxClient(_mailbox) {}\\n\\n    // ============ External functions ============\\n    function domains() external view returns (uint32[] memory) {\\n        return _routers.uint32Keys();\\n    }\\n\\n    /**\\n     * @notice Returns the address of the Router contract for the given domain\\n     * @param _domain The remote domain ID.\\n     * @dev Returns 0 address if no router is enrolled for the given domain\\n     * @return router The address of the Router contract for the given domain\\n     */\\n    function routers(uint32 _domain) public view virtual returns (bytes32) {\\n        (, bytes32 _router) = _routers.tryGet(_domain);\\n        return _router;\\n    }\\n\\n    /**\\n     * @notice Unregister the domain\\n     * @param _domain The domain of the remote Application Router\\n     */\\n    function unenrollRemoteRouter(uint32 _domain) external virtual onlyOwner {\\n        _unenrollRemoteRouter(_domain);\\n    }\\n\\n    /**\\n     * @notice Register the address of a Router contract for the same Application on a remote chain\\n     * @param _domain The domain of the remote Application Router\\n     * @param _router The address of the remote Application Router\\n     */\\n    function enrollRemoteRouter(\\n        uint32 _domain,\\n        bytes32 _router\\n    ) external virtual onlyOwner {\\n        _enrollRemoteRouter(_domain, _router);\\n    }\\n\\n    /**\\n     * @notice Batch version of `enrollRemoteRouter`\\n     * @param _domains The domains of the remote Application Routers\\n     * @param _addresses The addresses of the remote Application Routers\\n     */\\n    function enrollRemoteRouters(\\n        uint32[] calldata _domains,\\n        bytes32[] calldata _addresses\\n    ) external virtual onlyOwner {\\n        require(_domains.length == _addresses.length, \\\"!length\\\");\\n        uint256 length = _domains.length;\\n        for (uint256 i = 0; i < length; i += 1) {\\n            _enrollRemoteRouter(_domains[i], _addresses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch version of `unenrollRemoteRouter`\\n     * @param _domains The domains of the remote Application Routers\\n     */\\n    function unenrollRemoteRouters(\\n        uint32[] calldata _domains\\n    ) external virtual onlyOwner {\\n        uint256 length = _domains.length;\\n        for (uint256 i = 0; i < length; i += 1) {\\n            _unenrollRemoteRouter(_domains[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles an incoming message\\n     * @param _origin The origin domain\\n     * @param _sender The sender address\\n     * @param _message The message\\n     */\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) external payable virtual override onlyMailbox {\\n        bytes32 _router = _mustHaveRemoteRouter(_origin);\\n        require(_router == _sender, \\\"Enrolled router does not match sender\\\");\\n        _handle(_origin, _sender, _message);\\n    }\\n\\n    // ============ Virtual functions ============\\n    function _handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) internal virtual;\\n\\n    // ============ Internal functions ============\\n\\n    /**\\n     * @notice Set the router for a given domain\\n     * @param _domain The domain\\n     * @param _address The new router\\n     */\\n    function _enrollRemoteRouter(\\n        uint32 _domain,\\n        bytes32 _address\\n    ) internal virtual {\\n        _routers.set(_domain, _address);\\n    }\\n\\n    /**\\n     * @notice Remove the router for a given domain\\n     * @param _domain The domain\\n     */\\n    function _unenrollRemoteRouter(uint32 _domain) internal virtual {\\n        require(_routers.remove(_domain), _domainNotFoundError(_domain));\\n    }\\n\\n    /**\\n     * @notice Return true if the given domain / router is the address of a remote Application Router\\n     * @param _domain The domain of the potential remote Application Router\\n     * @param _address The address of the potential remote Application Router\\n     */\\n    function _isRemoteRouter(\\n        uint32 _domain,\\n        bytes32 _address\\n    ) internal view returns (bool) {\\n        return routers(_domain) == _address;\\n    }\\n\\n    /**\\n     * @notice Assert that the given domain has a Application Router registered and return its address\\n     * @param _domain The domain of the chain for which to get the Application Router\\n     * @return _router The address of the remote Application Router on _domain\\n     */\\n    function _mustHaveRemoteRouter(\\n        uint32 _domain\\n    ) internal view returns (bytes32) {\\n        (bool contained, bytes32 _router) = _routers.tryGet(_domain);\\n        require(contained, _domainNotFoundError(_domain));\\n        return _router;\\n    }\\n\\n    function _domainNotFoundError(\\n        uint32 _domain\\n    ) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                \\\"No router enrolled for domain: \\\",\\n                _domain.toString()\\n            );\\n    }\\n\\n    function _dispatch(\\n        uint32 _destinationDomain,\\n        bytes memory _messageBody\\n    ) internal virtual returns (bytes32) {\\n        return _dispatch(_destinationDomain, msg.value, _messageBody);\\n    }\\n\\n    function _dispatch(\\n        uint32 _destinationDomain,\\n        uint256 _value,\\n        bytes memory _messageBody\\n    ) internal virtual returns (bytes32) {\\n        bytes32 _router = _mustHaveRemoteRouter(_destinationDomain);\\n        return\\n            super._dispatch(_destinationDomain, _router, _value, _messageBody);\\n    }\\n\\n    function _quoteDispatch(\\n        uint32 _destinationDomain,\\n        bytes memory _messageBody\\n    ) internal view virtual returns (uint256) {\\n        bytes32 _router = _mustHaveRemoteRouter(_destinationDomain);\\n        return super._quoteDispatch(_destinationDomain, _router, _messageBody);\\n    }\\n}\\n\",\"keccak256\":\"0x9566d5dab0be03c336616795b3bd80a825df496f83ff261b163b3c64d3f19139\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        LEGACY_MULTISIG,\\n        MERKLE_ROOT_MULTISIG,\\n        MESSAGE_ID_MULTISIG,\\n        NULL, // used with relayer carrying no metadata\\n        CCIP_READ\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool);\\n}\\n\\ninterface ISpecifiesInterchainSecurityModule {\\n    function interchainSecurityModule()\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0xd144a00a15eef18012f8dae28ca1a7d965012f88ff4a07382a172ae6e02811ce\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IInterchainSecurityModule} from \\\"./IInterchainSecurityModule.sol\\\";\\nimport {IPostDispatchHook} from \\\"./hooks/IPostDispatchHook.sol\\\";\\n\\ninterface IMailbox {\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param sender The address that dispatched the message\\n     * @param destination The destination domain of the message\\n     * @param recipient The message recipient address on `destination`\\n     * @param message Raw bytes of message\\n     */\\n    event Dispatch(\\n        address indexed sender,\\n        uint32 indexed destination,\\n        bytes32 indexed recipient,\\n        bytes message\\n    );\\n\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param messageId The unique message identifier\\n     */\\n    event DispatchId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is processed\\n     * @param messageId The unique message identifier\\n     */\\n    event ProcessId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is delivered\\n     * @param origin The origin domain of the message\\n     * @param sender The message sender address on `origin`\\n     * @param recipient The address that handled the message\\n     */\\n    event Process(\\n        uint32 indexed origin,\\n        bytes32 indexed sender,\\n        address indexed recipient\\n    );\\n\\n    function localDomain() external view returns (uint32);\\n\\n    function delivered(bytes32 messageId) external view returns (bool);\\n\\n    function defaultIsm() external view returns (IInterchainSecurityModule);\\n\\n    function defaultHook() external view returns (IPostDispatchHook);\\n\\n    function requiredHook() external view returns (IPostDispatchHook);\\n\\n    function latestDispatchedId() external view returns (bytes32);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata defaultHookMetadata\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata defaultHookMetadata\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external view returns (uint256 fee);\\n\\n    function process(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    function recipientIsm(\\n        address recipient\\n    ) external view returns (IInterchainSecurityModule module);\\n}\\n\",\"keccak256\":\"0x9cd728ba304279775818f8c7b4c02f8c5dd2b28e051ec466dbe36129be01a6ee\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IMessageRecipient {\\n    function handle(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        bytes calldata _message\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x145e8332a91295a710deb3cb1ab689144262ef6ec66d9570c600b778e9dd964d\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/hooks/IPostDispatchHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\ninterface IPostDispatchHook {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        MERKLE_TREE,\\n        INTERCHAIN_GAS_PAYMASTER,\\n        FALLBACK_ROUTING,\\n        ID_AUTH_ISM,\\n        PAUSABLE,\\n        PROTOCOL_FEE\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of hook\\n     */\\n    function hookType() external view returns (uint8);\\n\\n    /**\\n     * @notice Returns whether the hook supports metadata\\n     * @param metadata metadata\\n     * @return Whether the hook supports metadata\\n     */\\n    function supportsMetadata(\\n        bytes calldata metadata\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Post action after a message is dispatched via the Mailbox\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     */\\n    function postDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    /**\\n     * @notice Compute the payment required by the postDispatch call\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     * @return Quoted payment for the postDispatch call\\n     */\\n    function quoteDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe315e6ecacc18c836349bb2792187066c3c743aaa7f2504d181be255f5c9632e\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/EnumerableMapExtended.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\n// ============ External Imports ============\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n// extends EnumerableMap with uint256 => bytes32 type\\n// modelled after https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0/contracts/utils/structs/EnumerableMap.sol\\nlibrary EnumerableMapExtended {\\n    using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    struct UintToBytes32Map {\\n        EnumerableMap.Bytes32ToBytes32Map _inner;\\n    }\\n\\n    // ============ Library Functions ============\\n    function keys(\\n        UintToBytes32Map storage map\\n    ) internal view returns (uint256[] memory _keys) {\\n        uint256 _length = map._inner.length();\\n        _keys = new uint256[](_length);\\n        for (uint256 i = 0; i < _length; i++) {\\n            _keys[i] = uint256(map._inner._keys.at(i));\\n        }\\n    }\\n\\n    function uint32Keys(\\n        UintToBytes32Map storage map\\n    ) internal view returns (uint32[] memory _keys) {\\n        uint256[] memory uint256keys = keys(map);\\n        _keys = new uint32[](uint256keys.length);\\n        for (uint256 i = 0; i < uint256keys.length; i++) {\\n            _keys[i] = uint32(uint256keys[i]);\\n        }\\n    }\\n\\n    function set(\\n        UintToBytes32Map storage map,\\n        uint256 key,\\n        bytes32 value\\n    ) internal {\\n        map._inner.set(bytes32(key), value);\\n    }\\n\\n    function get(\\n        UintToBytes32Map storage map,\\n        uint256 key\\n    ) internal view returns (bytes32) {\\n        return map._inner.get(bytes32(key));\\n    }\\n\\n    function tryGet(\\n        UintToBytes32Map storage map,\\n        uint256 key\\n    ) internal view returns (bool, bytes32) {\\n        return map._inner.tryGet(bytes32(key));\\n    }\\n\\n    function remove(\\n        UintToBytes32Map storage map,\\n        uint256 key\\n    ) internal returns (bool) {\\n        return map._inner.remove(bytes32(key));\\n    }\\n\\n    function contains(\\n        UintToBytes32Map storage map,\\n        uint256 key\\n    ) internal view returns (bool) {\\n        return map._inner.contains(bytes32(key));\\n    }\\n\\n    function length(\\n        UintToBytes32Map storage map\\n    ) internal view returns (uint256) {\\n        return map._inner.length();\\n    }\\n\\n    function at(\\n        UintToBytes32Map storage map,\\n        uint256 index\\n    ) internal view returns (uint256, bytes32) {\\n        (bytes32 key, bytes32 value) = map._inner.at(index);\\n        return (uint256(key), value);\\n    }\\n}\\n\",\"keccak256\":\"0xbd661cdeba756caf35191b71a85461a9ff79c047ec98ec05063748dfc0419595\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {TypeCasts} from \\\"./TypeCasts.sol\\\";\\n\\n/**\\n * @title Hyperlane Message Library\\n * @notice Library for formatted messages used by Mailbox\\n **/\\nlibrary Message {\\n    using TypeCasts for bytes32;\\n\\n    uint256 private constant VERSION_OFFSET = 0;\\n    uint256 private constant NONCE_OFFSET = 1;\\n    uint256 private constant ORIGIN_OFFSET = 5;\\n    uint256 private constant SENDER_OFFSET = 9;\\n    uint256 private constant DESTINATION_OFFSET = 41;\\n    uint256 private constant RECIPIENT_OFFSET = 45;\\n    uint256 private constant BODY_OFFSET = 77;\\n\\n    /**\\n     * @notice Returns formatted (packed) Hyperlane message with provided fields\\n     * @dev This function should only be used in memory message construction.\\n     * @param _version The version of the origin and destination Mailboxes\\n     * @param _nonce A nonce to uniquely identify the message on its origin chain\\n     * @param _originDomain Domain of origin chain\\n     * @param _sender Address of sender as bytes32\\n     * @param _destinationDomain Domain of destination chain\\n     * @param _recipient Address of recipient on destination chain as bytes32\\n     * @param _messageBody Raw bytes of message body\\n     * @return Formatted message\\n     */\\n    function formatMessage(\\n        uint8 _version,\\n        uint32 _nonce,\\n        uint32 _originDomain,\\n        bytes32 _sender,\\n        uint32 _destinationDomain,\\n        bytes32 _recipient,\\n        bytes calldata _messageBody\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _version,\\n                _nonce,\\n                _originDomain,\\n                _sender,\\n                _destinationDomain,\\n                _recipient,\\n                _messageBody\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the message ID.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return ID of `_message`\\n     */\\n    function id(bytes memory _message) internal pure returns (bytes32) {\\n        return keccak256(_message);\\n    }\\n\\n    /**\\n     * @notice Returns the message version.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Version of `_message`\\n     */\\n    function version(bytes calldata _message) internal pure returns (uint8) {\\n        return uint8(bytes1(_message[VERSION_OFFSET:NONCE_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message nonce.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Nonce of `_message`\\n     */\\n    function nonce(bytes calldata _message) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[NONCE_OFFSET:ORIGIN_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message origin domain.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Origin domain of `_message`\\n     */\\n    function origin(bytes calldata _message) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[ORIGIN_OFFSET:SENDER_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message sender as bytes32.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Sender of `_message` as bytes32\\n     */\\n    function sender(bytes calldata _message) internal pure returns (bytes32) {\\n        return bytes32(_message[SENDER_OFFSET:DESTINATION_OFFSET]);\\n    }\\n\\n    /**\\n     * @notice Returns the message sender as address.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Sender of `_message` as address\\n     */\\n    function senderAddress(\\n        bytes calldata _message\\n    ) internal pure returns (address) {\\n        return sender(_message).bytes32ToAddress();\\n    }\\n\\n    /**\\n     * @notice Returns the message destination domain.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Destination domain of `_message`\\n     */\\n    function destination(\\n        bytes calldata _message\\n    ) internal pure returns (uint32) {\\n        return uint32(bytes4(_message[DESTINATION_OFFSET:RECIPIENT_OFFSET]));\\n    }\\n\\n    /**\\n     * @notice Returns the message recipient as bytes32.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Recipient of `_message` as bytes32\\n     */\\n    function recipient(\\n        bytes calldata _message\\n    ) internal pure returns (bytes32) {\\n        return bytes32(_message[RECIPIENT_OFFSET:BODY_OFFSET]);\\n    }\\n\\n    /**\\n     * @notice Returns the message recipient as address.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Recipient of `_message` as address\\n     */\\n    function recipientAddress(\\n        bytes calldata _message\\n    ) internal pure returns (address) {\\n        return recipient(_message).bytes32ToAddress();\\n    }\\n\\n    /**\\n     * @notice Returns the message body.\\n     * @param _message ABI encoded Hyperlane message.\\n     * @return Body of `_message`\\n     */\\n    function body(\\n        bytes calldata _message\\n    ) internal pure returns (bytes calldata) {\\n        return bytes(_message[BODY_OFFSET:]);\\n    }\\n}\\n\",\"keccak256\":\"0x5319af5ade07bcb021d6373f0713f24f34431def78cda16fea6755f580fb5e78\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/libs/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\nlibrary TypeCasts {\\n    // alignment preserving cast\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    // alignment preserving cast\\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n        return address(uint160(uint256(_buf)));\\n    }\\n}\\n\",\"keccak256\":\"0x7e3608c35e1109fc137cea688760f9c10223b1e7d110be113ad44ff716974ead\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableMap.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) since v4.6.0\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x1ce06199047d2ceb26d64a81bc245d0f77a293674778502f7dc912831435d049\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xacac2065b3ed1facff1163435890d4a6bcdc474e857e8e2c91ae5fb50418f723\",\"license\":\"MIT\"},\"contracts/cross-chain/ToucanCrosschainMessenger.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {Router} from '@hyperlane-xyz/core/contracts/client/Router.sol';\\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {PausableUpgradeable} from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport {UUPSUpgradeable} from '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './ToucanCrosschainMessengerStorage.sol';\\nimport {IBridgeableToken} from './interfaces/IBridgeableToken.sol';\\nimport {IPoolBridgeable} from './interfaces/IPoolBridgeable.sol';\\nimport {IToucanCrosschainMessenger} from './interfaces/IToucanCrosschainMessenger.sol';\\n\\ncontract ToucanCrosschainMessenger is\\n    IToucanCrosschainMessenger,\\n    PausableUpgradeable,\\n    UUPSUpgradeable,\\n    AccessControlUpgradeable,\\n    Router,\\n    ToucanCrosschainMessengerStorage\\n{\\n    // ----------------------------------------\\n    //      Constants\\n    // ----------------------------------------\\n\\n    /// @dev Version-related parameters. VERSION keeps track of production\\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\\n    /// of a VERSION in our staging environment.\\n    string public constant VERSION = '2.1.0';\\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 2;\\n\\n    /// @dev EIP712Domain hash used in generating request hashes\\n    bytes32 public constant EIP712DomainHash =\\n        keccak256('EIP712Domain(string name,string version,uint256 chainId)');\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\n    bytes32 public constant BRIDGER_ROLE = keccak256('BRIDGER_ROLE');\\n\\n    // ----------------------------------------\\n    //      Events\\n    // ----------------------------------------\\n\\n    event BridgeRequestReceived(\\n        uint32 indexed originDomain,\\n        uint32 toDomain,\\n        address indexed bridger,\\n        address recipient,\\n        address indexed token,\\n        uint256 amount,\\n        bytes32 requesthash\\n    );\\n    event BridgeRequestSent(\\n        uint32 originDomain,\\n        uint32 indexed toDomain,\\n        address indexed bridger,\\n        address recipient,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 nonce,\\n        bytes32 requesthash\\n    );\\n    event PoolRebalancingRequestReceived(\\n        uint32 indexed originDomain,\\n        uint32 indexed toDomain,\\n        address indexed bridger,\\n        address recipient,\\n        address[] tokens,\\n        uint256[] amounts,\\n        bytes32 requesthash\\n    );\\n    event PoolRebalancingRequestSent(\\n        uint32 indexed originDomain,\\n        uint32 indexed toDomain,\\n        address indexed bridger,\\n        address recipient,\\n        address[] tokens,\\n        uint256[] amounts,\\n        uint256 nonce,\\n        bytes32 requesthash\\n    );\\n\\n    event TokenPairAdded(\\n        address indexed homeTokenAddress,\\n        address indexed remoteTokenAddress,\\n        uint32 domainId\\n    );\\n    event TokenPairRemoved(\\n        address indexed homeTokenAddress,\\n        address indexed remoteTokenAddress,\\n        uint32 domainId\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address mailbox) Router(mailbox) {\\n        _disableInitializers();\\n    }\\n\\n    modifier onlyPausers() {\\n        require(hasRole(PAUSER_ROLE, msg.sender), 'Not authorized');\\n        _;\\n    }\\n\\n    // ----------------------------------------\\n    //      Upgradable related functions\\n    // ----------------------------------------\\n\\n    function initialize(\\n        address owner,\\n        address[] calldata accounts,\\n        bytes32[] calldata roles\\n    ) external virtual initializer {\\n        require(accounts.length == roles.length, 'Array length mismatch');\\n\\n        _MailboxClient_initialize(address(0), address(0), owner);\\n        __Pausable_init();\\n        __UUPSUpgradeable_init_unchained();\\n        __AccessControl_init_unchained();\\n\\n        bool hasDefaultAdmin = false;\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            _grantRole(roles[i], accounts[i]);\\n            if (roles[i] == DEFAULT_ADMIN_ROLE) hasDefaultAdmin = true;\\n        }\\n        require(hasDefaultAdmin, 'No admin specified');\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712DomainHash,\\n                    'ToucanCrosschainMessenger',\\n                    VERSION,\\n                    block.chainid\\n                )\\n            );\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        virtual\\n        override\\n        onlyOwner\\n    {}\\n\\n    // ----------------------------------------\\n    //      Admin functions\\n    // ----------------------------------------\\n\\n    /// @notice Adds a new set of token pairs than can be bridged\\n    /// @dev Called by owner to add or map home token addresses to remote token addresses.\\n    /// @param homeTokens token addresses on home chain\\n    /// @param remoteTokens_ token addresses on remote chain\\n    /// @param domain domain ID of the remote chain whose tokens are being mapped\\n    function batchAddTokenPair(\\n        address[] calldata homeTokens,\\n        address[] calldata remoteTokens_,\\n        uint32 domain\\n    ) external onlyOwner {\\n        uint256 homeTokensLen = homeTokens.length;\\n        require(homeTokensLen == remoteTokens_.length, 'Array length mismatch');\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < homeTokensLen; ++i) {\\n            _addTokenPair(homeTokens[i], remoteTokens_[i], domain);\\n        }\\n    }\\n\\n    /// @notice Adds new token pair than can be bridged\\n    /// @dev Called by owner to add or map home token address to remote token address.\\n    /// Changing the remote token address can only be done within a 7 day period, after first\\n    /// setting it.\\n    /// @param homeToken token address on home chain\\n    /// @param remoteToken token address on remote chain\\n    /// @param domain domain ID of the remote chain whose token is being mapped\\n    function addTokenPair(\\n        address homeToken,\\n        address remoteToken,\\n        uint32 domain\\n    ) external onlyOwner {\\n        _addTokenPair(homeToken, remoteToken, domain);\\n    }\\n\\n    function _addTokenPair(\\n        address homeToken,\\n        address remoteToken,\\n        uint32 domain\\n    ) private {\\n        require(homeToken != address(0), '!homeToken');\\n        address remoteToken_ = _remoteTokens[homeToken][domain].tokenAddress;\\n        _remoteTokens[homeToken][domain] = RemoteTokenInformation(\\n            remoteToken,\\n            block.timestamp\\n        );\\n        if (remoteToken == address(0)) {\\n            require(remoteToken_ != address(0), 'invalid pair removal');\\n            emit TokenPairRemoved(homeToken, remoteToken_, domain);\\n        } else {\\n            emit TokenPairAdded(homeToken, remoteToken, domain);\\n        }\\n    }\\n\\n    /// @notice Pauses the cross chain bridge\\n    /// @dev when invoked by owner it Pauses the cross chain bridging logic to interact with abacus\\n    function pause() external onlyPausers whenNotPaused {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the cross chain bridge\\n    /// @dev when invoked by owner it unpauses the cross chain bridging logic to interact with abacus\\n    function unpause() external onlyPausers whenPaused {\\n        _unpause();\\n    }\\n\\n    // ----------------------------------------\\n    //      Message-handling functions\\n    // ----------------------------------------\\n\\n    /// @notice Receive messages sent via Abacus from other remote Routers;\\n    /// parse the contents of the message and enact the message's effects on the local chain\\n    /// @dev it is internally invoked via handle() which is invoked by Abacus's inbox\\n    /// @param origin The domain the message is coming from\\n    /// @param message The message in the form of raw bytes\\n    function _handle(\\n        uint32 origin,\\n        bytes32, // sender, // commented out because parameter not used\\n        bytes calldata message\\n    ) internal virtual override whenNotPaused {\\n        uint8 messageTypeInt = abi.decode(message, (uint8));\\n\\n        if (messageTypeInt == uint8(MessageType.TOKEN_TRANSFER)) {\\n            _handleTokenTransferRequest(origin, message);\\n        } else if (messageTypeInt == uint8(MessageType.TCO2_REBALANCE)) {\\n            _handleTCO2RebalanceRequest(origin, message);\\n        } else {\\n            revert('Unsupported Operation');\\n        }\\n    }\\n\\n    function _handleTokenTransferRequest(uint32 origin, bytes memory message)\\n        internal\\n    {\\n        (\\n            uint8 messageType,\\n            address bridger,\\n            address recipient,\\n            address token,\\n            uint256 amount,\\n            uint32 toDomain,\\n            bytes32 requestHash\\n        ) = abi.decode(\\n                message,\\n                (uint8, address, address, address, uint256, uint32, bytes32)\\n            );\\n\\n        _saveIncomingRequest(requestHash, MessageType(messageType));\\n\\n        IBridgeableToken(token).bridgeMint(recipient, amount);\\n\\n        emit BridgeRequestReceived(\\n            origin,\\n            toDomain,\\n            bridger,\\n            recipient,\\n            token,\\n            amount,\\n            requestHash\\n        );\\n    }\\n\\n    function _handleTCO2RebalanceRequest(uint32 origin, bytes memory message)\\n        internal\\n    {\\n        (\\n            uint8 messageType,\\n            address bridger,\\n            address recipient,\\n            address[] memory tokens,\\n            uint256[] memory amounts,\\n            uint32 toDomain,\\n            bytes32 requestHash\\n        ) = abi.decode(\\n                message,\\n                (uint8, address, address, address[], uint256[], uint32, bytes32)\\n            );\\n\\n        _saveIncomingRequest(requestHash, MessageType(messageType));\\n\\n        uint256 length = tokens.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            address token = tokens[i];\\n            uint256 amount = amounts[i];\\n            IBridgeableToken bridgeableToken = IBridgeableToken(token);\\n            bridgeableToken.bridgeMint(address(this), amount);\\n            require(\\n                bridgeableToken.approve(recipient, amount),\\n                'approval unsuccessful'\\n            );\\n        }\\n\\n        IPoolBridgeable(recipient).completeTCO2Bridging(tokens, amounts);\\n\\n        emit PoolRebalancingRequestReceived(\\n            origin,\\n            toDomain,\\n            bridger,\\n            recipient,\\n            tokens,\\n            amounts,\\n            requestHash\\n        );\\n    }\\n\\n    // ----------------------------------------\\n    //      Message-dispatching functions\\n    // ----------------------------------------\\n\\n    /// @notice Fetch the amount that needs to be used as a fee\\n    /// in order to to pay for the gas of the transfer on the\\n    /// destination domain.\\n    /// @dev Use the result of this function as msg.value when calling\\n    /// `transferTokens` or `transferTokensToRecipient`.\\n    /// @param destinationDomain The domain to send the message to\\n    /// @param tokens address of token to be bridged\\n    /// @param amounts the amount of tokens to be bridged\\n    /// @param recipient the recipient of tokens in the destination domain\\n    /// @return The required fee for a token transfer\\n    function quoteBridgeTCO2sFee(\\n        uint32 destinationDomain,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        address recipient\\n    ) external view override returns (uint256) {\\n        bytes memory message = _buildTCO2RebalanceMessage(\\n            destinationDomain,\\n            recipient,\\n            tokens,\\n            amounts,\\n            bytes32(type(uint256).max)\\n        );\\n        return _quoteDispatch(destinationDomain, message);\\n    }\\n\\n    /// @notice Fetch the amount that needs to be used as a fee\\n    /// in order to to pay for the gas of the transfer on the\\n    /// destination domain.\\n    /// @dev Use the result of this function as msg.value when calling\\n    /// `transferTokens` or `transferTokensToRecipient`.\\n    /// @param destinationDomain The domain to send the message to\\n    /// @param token address of token to be bridged\\n    /// @param amount the amount of tokens to be bridged\\n    /// @param recipient the recipient of tokens in the destination domain\\n    /// @return The required fee for a token transfer\\n    function quoteTokenTransferFee(\\n        uint32 destinationDomain,\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external view override returns (uint256) {\\n        bytes memory message = _buildTokenTransferMessage(\\n            destinationDomain,\\n            token,\\n            amount,\\n            recipient,\\n            bytes32(type(uint256).max)\\n        );\\n        return _quoteDispatch(destinationDomain, message);\\n    }\\n\\n    function _buildTokenTransferMessage(\\n        uint32 destinationDomain,\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        bytes32 requestHash\\n    ) internal view returns (bytes memory) {\\n        address remoteToken = _remoteTokens[token][destinationDomain]\\n            .tokenAddress;\\n        require(remoteToken != address(0), 'remote token not mapped');\\n        return\\n            abi.encode(\\n                MessageType.TOKEN_TRANSFER,\\n                msg.sender,\\n                recipient,\\n                remoteToken,\\n                amount,\\n                destinationDomain,\\n                requestHash\\n            );\\n    }\\n\\n    /// @notice Transfer tokens to a recipient in the destination domain\\n    /// @param destinationDomain The domain to send the tokens to\\n    /// @param token address of token to be bridged\\n    /// @param amount the amount of tokens to be bridged\\n    /// @param recipient the recipient of tokens in the destination domain\\n    function transferTokensToRecipient(\\n        uint32 destinationDomain,\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) public payable whenNotPaused {\\n        bytes32 requestHash = _saveOutgoingTokenTransferRequest(\\n            destinationDomain,\\n            token,\\n            recipient,\\n            amount\\n        );\\n\\n        // encode a message to send to the remote xApp Router\\n        bytes memory _outboundMessage = _buildTokenTransferMessage(\\n            destinationDomain,\\n            token,\\n            amount,\\n            recipient,\\n            requestHash\\n        );\\n        // Dispatch the message\\n        _dispatch(destinationDomain, _outboundMessage);\\n        // Burn the tokens on this side of the bridge\\n        IBridgeableToken(token).bridgeBurn(msg.sender, amount);\\n        emit BridgeRequestSent(\\n            localDomain,\\n            destinationDomain,\\n            msg.sender,\\n            recipient,\\n            token,\\n            amount,\\n            nonce,\\n            requestHash\\n        );\\n    }\\n\\n    /// @notice Transfer tokens to a recipient in the destination domain.\\n    /// The recipient of the tokens in the destination domain is the same as\\n    /// msg.sender in this context.\\n    /// @param destinationDomain The domain to send the message to\\n    /// @param token address of token to be bridged\\n    /// @param amount the amount of tokens to be bridged\\n    function transferTokens(\\n        uint32 destinationDomain,\\n        address token,\\n        uint256 amount\\n    ) external payable {\\n        transferTokensToRecipient(destinationDomain, token, amount, msg.sender);\\n    }\\n\\n    /// @notice Bridges multiple tokens to a recipient in the destination domain\\n    /// @param destinationDomain The domain to send the tokens to\\n    /// @param tokens addresses of tokens to be bridged\\n    /// @param amounts the amounts of tokens to be bridged\\n    /// @param recipient the recipient of tokens in the destination domain\\n    function bridgeTCO2s(\\n        uint32 destinationDomain,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        address recipient\\n    ) external payable override whenNotPaused onlyRole(BRIDGER_ROLE) {\\n        bytes32 requestHash = _saveOutgoingTCO2RebalanceRequest(\\n            destinationDomain,\\n            recipient,\\n            tokens,\\n            amounts\\n        );\\n\\n        bytes memory message = _buildTCO2RebalanceMessage(\\n            destinationDomain,\\n            recipient,\\n            tokens,\\n            amounts,\\n            requestHash\\n        );\\n\\n        _dispatch(destinationDomain, message);\\n        emit PoolRebalancingRequestSent(\\n            localDomain,\\n            destinationDomain,\\n            msg.sender,\\n            recipient,\\n            tokens,\\n            amounts,\\n            nonce,\\n            requestHash\\n        );\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            IBridgeableToken(tokens[i]).bridgeBurn(msg.sender, amounts[i]);\\n        }\\n    }\\n\\n    function _buildTCO2RebalanceMessage(\\n        uint32 destinationDomain,\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes32 requestHash\\n    ) internal view returns (bytes memory message) {\\n        uint256 length = tokens.length;\\n        address[] memory remoteTokens_ = new address[](tokens.length);\\n        for (uint256 i = 0; i < length; i++) {\\n            address remoteToken = _remoteTokens[tokens[i]][destinationDomain]\\n                .tokenAddress;\\n            require(remoteToken != address(0), 'remote token not mapped');\\n            require(amounts[i] > 0, 'invalid amount');\\n            remoteTokens_[i] = remoteToken;\\n        }\\n\\n        message = abi.encode(\\n            MessageType.TCO2_REBALANCE,\\n            msg.sender,\\n            recipient,\\n            remoteTokens_,\\n            amounts,\\n            destinationDomain,\\n            requestHash\\n        );\\n    }\\n\\n    function _saveOutgoingTCO2RebalanceRequest(\\n        uint32 destinationDomain,\\n        address recipient,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    ) internal returns (bytes32 requestHash) {\\n        requestHash = _generateRequestHash(\\n            recipient,\\n            tokens,\\n            amounts,\\n            destinationDomain\\n        );\\n\\n        requests[requestHash] = BridgeRequest(\\n            false,\\n            block.timestamp,\\n            BridgeRequestType.SENT,\\n            MessageType.TCO2_REBALANCE\\n        );\\n    }\\n\\n    function _saveOutgoingTokenTransferRequest(\\n        uint32 destinationDomain,\\n        address recipient,\\n        address token,\\n        uint256 amount\\n    ) internal returns (bytes32 requestHash) {\\n        requestHash = _generateRequestHash(\\n            recipient,\\n            token,\\n            amount,\\n            destinationDomain\\n        );\\n        requests[requestHash] = BridgeRequest(\\n            false,\\n            block.timestamp, // timestamp when the bridge request was sent\\n            BridgeRequestType.SENT,\\n            MessageType.TOKEN_TRANSFER\\n        );\\n    }\\n\\n    function _saveIncomingRequest(bytes32 requestHash, MessageType messageType)\\n        internal\\n    {\\n        //slither-disable-next-line incorrect-equality\\n        require(\\n            requests[requestHash].requestType ==\\n                BridgeRequestType.NOT_REGISTERED,\\n            'Bridge Request Executed'\\n        );\\n\\n        requests[requestHash] = BridgeRequest(\\n            false,\\n            block.timestamp, // timestamp when the bridge request was received\\n            BridgeRequestType.RECEIVED,\\n            messageType\\n        );\\n    }\\n\\n    function _generateRequestHash(\\n        address receiver,\\n        address token,\\n        uint256 amount,\\n        uint32 destinationDomain\\n    ) internal returns (bytes32 _requestHash) {\\n        _updateNonce();\\n        _requestHash = keccak256(\\n            abi.encodePacked(\\n                DOMAIN_SEPARATOR(),\\n                receiver,\\n                token,\\n                amount,\\n                destinationDomain,\\n                nonce\\n            )\\n        );\\n    }\\n\\n    function _generateRequestHash(\\n        address receiver,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        uint32 destinationDomain\\n    ) internal returns (bytes32 requestHash) {\\n        uint256 length = tokens.length;\\n        bytes memory tokensAndAmounts;\\n        for (uint256 i = 0; i < length; i++) {\\n            tokensAndAmounts = abi.encodePacked(\\n                tokensAndAmounts,\\n                tokens[i],\\n                amounts[i]\\n            );\\n        }\\n\\n        _updateNonce();\\n        requestHash = keccak256(\\n            abi.encodePacked(\\n                DOMAIN_SEPARATOR(),\\n                receiver,\\n                tokensAndAmounts,\\n                destinationDomain,\\n                nonce\\n            )\\n        );\\n    }\\n\\n    function _updateNonce() internal {\\n        uint256 currentNonce = nonce;\\n        unchecked {\\n            ++currentNonce;\\n        }\\n        nonce = currentNonce;\\n    }\\n\\n    function remoteTokens(address token, uint32 domain)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (RemoteTokenInformation memory)\\n    {\\n        return _remoteTokens[token][domain];\\n    }\\n}\\n\",\"keccak256\":\"0xd18142e05d274a6da8278ecbb4ad40bcb65137d591571ac5fd7a438304b52a83\",\"license\":\"UNLICENSED\"},\"contracts/cross-chain/ToucanCrosschainMessengerStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earthz\\npragma solidity 0.8.14;\\n\\nstruct RemoteTokenInformation {\\n    /// @notice address of the token in the remote chain\\n    address tokenAddress;\\n    /// @notice timer keeps track of when the token pair\\n    /// was created in order to disallow updates to the\\n    /// pair after a specific amount of time elapses\\n    uint256 timer;\\n}\\n\\nstruct BridgeRequest {\\n    bool isReverted; // this state is added for future addition of revert functionality\\n    uint256 timestamp;\\n    BridgeRequestType requestType;\\n    MessageType messageType;\\n}\\n\\nenum BridgeRequestType {\\n    NOT_REGISTERED, // 0\\n    SENT, // 1\\n    RECEIVED // 2\\n}\\n\\nenum MessageType {\\n    TOKEN_TRANSFER,\\n    TCO2_REBALANCE\\n}\\n\\n/// @dev Separate storage contract to improve upgrade safety\\nabstract contract ToucanCrosschainMessengerStorageV1 {\\n    /// @dev nonce is used to serialize requests executed\\n    /// by the source chain in order to avoid duplicates\\n    /// from being processed in the remote chain\\n    uint256 public nonce;\\n    //slither-disable-next-line constable-states\\n    bytes32 private DEPRECATED_DOMAIN_SEPARATOR;\\n    /// @dev requests keeps track of a hash of the request\\n    /// to the request info in order to avoid duplicates\\n    /// from being processed in the remote chain\\n    /// @custom:oz-retyped-from mapping(bytes32 => ToucanCrosschainMessengerStorageV1.BridgeRequest)\\n    mapping(bytes32 => BridgeRequest) public requests;\\n    /// @notice remoteTokens maps a token (address) in the source\\n    /// chain to the domain id of the remote chain (uint32)\\n    /// to info about the token in the remote chain (RemoteTokenInformation)\\n    mapping(address => mapping(uint32 => RemoteTokenInformation))\\n        internal _remoteTokens;\\n}\\n\\nabstract contract ToucanCrosschainMessengerStorage is\\n    ToucanCrosschainMessengerStorageV1\\n{}\\n\",\"keccak256\":\"0xe6ea1945b1673462f301bcc39fe0a879bcedc79cccff8ba55e3d6f6c62c6fb33\",\"license\":\"UNLICENSED\"},\"contracts/cross-chain/interfaces/IBridgeableToken.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IBridgeableToken is IERC20 {\\n    function bridgeMint(address _account, uint256 _amount) external;\\n\\n    function bridgeBurn(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x34747baf8d57587d730b8a587b4cda127d04f15b5b96778fb391171c360a837e\",\"license\":\"UNLICENSED\"},\"contracts/cross-chain/interfaces/IPoolBridgeable.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2024 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IPoolBridgeable {\\n    function completeTCO2Bridging(\\n        address[] memory tco2s,\\n        uint256[] memory amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0f9f88e99188784df18a303dbe3e8ae24f7955485bc8cbf63f87202fe5a8955e\",\"license\":\"UNLICENSED\"},\"contracts/cross-chain/interfaces/IToucanCrosschainMessenger.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {RemoteTokenInformation} from '../ToucanCrosschainMessengerStorage.sol';\\n\\ninterface IToucanCrosschainMessenger {\\n    function transferTokens(\\n        uint32 destinationDomain,\\n        address token,\\n        uint256 amount\\n    ) external payable;\\n\\n    function transferTokensToRecipient(\\n        uint32 destinationDomain,\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external payable;\\n\\n    function bridgeTCO2s(\\n        uint32 destinationDomain,\\n        address[] memory token,\\n        uint256[] memory amount,\\n        address recipient\\n    ) external payable;\\n\\n    function remoteTokens(address _token, uint32 _destinationDomain)\\n        external\\n        view\\n        returns (RemoteTokenInformation memory);\\n\\n    function quoteTokenTransferFee(\\n        uint32 destinationDomain,\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external view returns (uint256);\\n\\n    function quoteBridgeTCO2sFee(\\n        uint32 destinationDomain,\\n        address[] memory tokens,\\n        uint256[] memory amounts,\\n        address recipient\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2325945dada49e37bd52dc9d82f45c7534281f341944c24c46ccc91a1d802904\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60e0604052306080523480156200001557600080fd5b5060405162004c4838038062004c488339810160408190526200003891620002bc565b80808062000051816200013d60201b620019761760201c565b620000a35760405162461bcd60e51b815260206004820152601e60248201527f4d61696c626f78436c69656e743a20696e76616c6964206d61696c626f78000060448201526064015b60405180910390fd5b6001600160a01b03821660a08190526040805163234d8e3d60e21b81529051638d3638f4916004808201926020929091908290030181865afa158015620000ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001149190620002ee565b63ffffffff1660c05262000128336200014c565b50620001369150506200019f565b5062000316565b6001600160a01b03163b151590565b61012d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001ab60ff620001ae565b50565b60008054610100900460ff161562000243578160ff166001148015620001e75750620001e5306200013d60201b620019761760201c565b155b6200023b5760405162461bcd60e51b815260206004820152602e602482015260008051602062004c2883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200009a565b506000919050565b60005460ff808416911610620002a25760405162461bcd60e51b815260206004820152602e602482015260008051602062004c2883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200009a565b506000805460ff191660ff92909216919091179055600190565b600060208284031215620002cf57600080fd5b81516001600160a01b0381168114620002e757600080fd5b9392505050565b6000602082840312156200030157600080fd5b815163ffffffff81168114620002e757600080fd5b60805160a05160c0516148a3620003856000396000818161057b01528181610ade01526115620152600081816107b5015281816110c101528181612d06015261305d015260008181610d0b01528181610d4b01528181610f4101528181610f81015261101001526148a36000f3fe60806040526004361061027d5760003560e01c80638d3638f41161014f578063d3f6c4f1116100c1578063e9198bf91161007a578063e9198bf91461086c578063efae508a1461088c578063f292e805146108ac578063f2fde38b146108bf578063f8d8353f146108df578063ffa1ad74146108ff57600080fd5b8063d3f6c4f114610790578063d5438eae146107a3578063d547741f146107d7578063d9e7e0b7146107f7578063de523cf314610817578063e63ab1e91461083857600080fd5b8063a217fddf11610113578063a217fddf1461066c578063affed0e014610681578063b49c53a714610698578063b7220e22146106b8578063bdaca27a146106d8578063c0d5f4471461077057600080fd5b80638d3638f4146105695780638da5cb5b146105b257806391d14854146105d157806394eda280146105f15780639d8669851461061157600080fd5b80633f4ba83a116101f35780636ca0b0d7116101ac5780636ca0b0d71461049d57806370722ced146104b2578063715018a6146104e657806371a15b38146104fb5780637f5a7c7b1461051b5780638456cb591461055457600080fd5b80633f4ba83a14610413578063440df4f4146104285780634f1ef2861461044a57806352d1902d1461045d57806356d5d475146104725780635c975abb1461048557600080fd5b80633456b29d116102455780633456b29d146103575780633644e5151461036a57806336568abe1461037f5780633659cfe61461039f5780633d75e451146103bf5780633dfd3873146103f357600080fd5b806301ffc9a7146102825780630e72cc06146102b7578063248a9ca3146102d95780632ead72f6146103175780632f2ff15d14610337575b600080fd5b34801561028e57600080fd5b506102a261029d3660046136d4565b61093d565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b506102d76102d236600461371e565b610974565b005b3480156102e557600080fd5b506103096102f436600461373b565b600090815260fb602052604090206001015490565b6040519081526020016102ae565b34801561032357600080fd5b50610309610332366004613766565b610a08565b34801561034357600080fd5b506102d7610352366004613783565b610a28565b6102d7610365366004613887565b610a52565b34801561037657600080fd5b50610309610c14565b34801561038b57600080fd5b506102d761039a366004613783565b610c83565b3480156103ab57600080fd5b506102d76103ba36600461371e565b610d01565b3480156103cb57600080fd5b506103097fc809a7fd521f10cdc3c068621a1c61d5fd9bb3f1502a773e53811bc248d919a881565b3480156103ff57600080fd5b506102d761040e36600461371e565b610de0565b34801561041f57600080fd5b506102d7610e6b565b34801561043457600080fd5b5061043d610f25565b6040516102ae919061396d565b6102d76104583660046139b7565b610f37565b34801561046957600080fd5b50610309611003565b6102d7610480366004613a5e565b6110b6565b34801561049157600080fd5b5060335460ff166102a2565b3480156104a957600080fd5b50610309600281565b3480156104be57600080fd5b506103097fc2f8787176b8ac6bf7215b4adcc1e069bf4ab82d9ab1df05a57a91d425935b6e81565b3480156104f257600080fd5b506102d76111b5565b34801561050757600080fd5b506102d7610516366004613b2a565b6111ea565b34801561052757600080fd5b5061015f5461053c906001600160a01b031681565b6040516001600160a01b0390911681526020016102ae565b34801561056057600080fd5b506102d7611268565b34801561057557600080fd5b5061059d7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016102ae565b3480156105be57600080fd5b5061012d546001600160a01b031661053c565b3480156105dd57600080fd5b506102a26105ec366004613783565b6112fa565b3480156105fd57600080fd5b506102d761060c366004613b6b565b611325565b34801561061d57600080fd5b5061065c61062c36600461373b565b6101c66020526000908152604090208054600182015460029092015460ff91821692918181169161010090041684565b6040516102ae9493929190613c18565b34801561067857600080fd5b50610309600081565b34801561068d57600080fd5b506103096101c45481565b3480156106a457600080fd5b506102d76106b3366004613c4b565b611413565b3480156106c457600080fd5b506103096106d3366004613887565b611448565b3480156106e457600080fd5b5061074c6106f3366004613c77565b604080518082018252600080825260209182018190526001600160a01b0394851681526101c7825282812063ffffffff949094168152928152918190208151808301909252805490931681526001909201549082015290565b6040805182516001600160a01b0316815260209283015192810192909252016102ae565b34801561077c57600080fd5b506102d761078b366004613ca5565b611470565b6102d761079e366004613cf0565b6114a6565b3480156107af57600080fd5b5061053c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107e357600080fd5b506102d76107f2366004613783565b6115eb565b34801561080357600080fd5b50610309610812366004613cf0565b611610565b34801561082357600080fd5b506101605461053c906001600160a01b031681565b34801561084457600080fd5b506103097f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b34801561087857600080fd5b506102d7610887366004613d43565b611622565b34801561089857600080fd5b506102d76108a7366004613766565b6116f4565b6102d76108ba366004613dae565b611728565b3480156108cb57600080fd5b506102d76108da36600461371e565b611734565b3480156108eb57600080fd5b506102d76108fa366004613def565b6117cd565b34801561090b57600080fd5b50610930604051806040016040528060058152602001640322e312e360dc1b81525081565b6040516102ae9190613ec9565b60006001600160e01b03198216637965db0b60e01b148061096e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b806001600160a01b0381163b15158061099457506001600160a01b038116155b6109b95760405162461bcd60e51b81526004016109b090613edc565b60405180910390fd5b61012d546001600160a01b031633146109e45760405162461bcd60e51b81526004016109b090613f23565b5061016080546001600160a01b0319166001600160a01b0392909216919091179055565b600080610a2061019163ffffffff8086169061198516565b949350505050565b600082815260fb6020526040902060010154610a438161199e565b610a4d83836119a8565b505050565b60335460ff1615610a755760405162461bcd60e51b81526004016109b090613f58565b7fc809a7fd521f10cdc3c068621a1c61d5fd9bb3f1502a773e53811bc248d919a8610a9f8161199e565b6000610aad86848787611a2e565b90506000610abe8785888886611af0565b9050610aca8782611cb4565b50336001600160a01b03168763ffffffff167f000000000000000000000000000000000000000000000000000000000000000063ffffffff167f30c7996a02aac74afe5a5524a67078e755366c4020290c22bea20ff36ddd8587878a8a6101c45489604051610b3d959493929190613ff6565b60405180910390a460005b8651811015610c0a57868181518110610b6357610b63614041565b60200260200101516001600160a01b03166374f4f54733888481518110610b8c57610b8c614041565b60200260200101516040518363ffffffff1660e01b8152600401610bc59291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b158015610bdf57600080fd5b505af1158015610bf3573d6000803e3d6000fd5b505050508080610c029061406d565b915050610b48565b5050505050505050565b60007fc2f8787176b8ac6bf7215b4adcc1e069bf4ab82d9ab1df05a57a91d425935b6e604051806040016040528060058152602001640322e312e360dc1b81525046604051602001610c6893929190614086565b60405160208183030381529060405280519060200120905090565b6001600160a01b0381163314610cf35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016109b0565b610cfd8282611cc8565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d495760405162461bcd60e51b81526004016109b0906140e3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d92600080516020614827833981519152546001600160a01b031690565b6001600160a01b031614610db85760405162461bcd60e51b81526004016109b09061412f565b610dc181611d2f565b60408051600080825260208201909252610ddd91839190611d5a565b50565b806001600160a01b0381163b151580610e0057506001600160a01b038116155b610e1c5760405162461bcd60e51b81526004016109b090613edc565b61012d546001600160a01b03163314610e475760405162461bcd60e51b81526004016109b090613f23565b5061015f80546001600160a01b0319166001600160a01b0392909216919091179055565b610e957f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336112fa565b610ed25760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016109b0565b60335460ff16610f1b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016109b0565b610f23611ec5565b565b6060610f32610191611f58565b905090565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610f7f5760405162461bcd60e51b81526004016109b0906140e3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fc8600080516020614827833981519152546001600160a01b031690565b6001600160a01b031614610fee5760405162461bcd60e51b81526004016109b09061412f565b610ff782611d2f565b610cfd82826001611d5a565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110a35760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016109b0565b5060008051602061482783398151915290565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111385760405162461bcd60e51b815260206004820152602160248201527f4d61696c626f78436c69656e743a2073656e646572206e6f74206d61696c626f6044820152600f60fb1b60648201526084016109b0565b600061114385612012565b90508381146111a25760405162461bcd60e51b815260206004820152602560248201527f456e726f6c6c656420726f7574657220646f6573206e6f74206d61746368207360448201526432b73232b960d91b60648201526084016109b0565b6111ae8585858561205f565b5050505050565b61012d546001600160a01b031633146111e05760405162461bcd60e51b81526004016109b090613f23565b610f23600061216b565b61012d546001600160a01b031633146112155760405162461bcd60e51b81526004016109b090613f23565b8060005b818110156112625761125084848381811061123657611236614041565b905060200201602081019061124b9190613766565b6121be565b61125b60018261417b565b9050611219565b50505050565b6112927f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336112fa565b6112cf5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016109b0565b60335460ff16156112f25760405162461bcd60e51b81526004016109b090613f58565b610f236121fa565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61012d546001600160a01b031633146113505760405162461bcd60e51b81526004016109b090613f23565b838281146113985760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60448201526064016109b0565b60005b8181101561140a576113fa8787838181106113b8576113b8614041565b90506020020160208101906113cd919061371e565b8686848181106113df576113df614041565b90506020020160208101906113f4919061371e565b85612252565b6114038161406d565b905061139b565b50505050505050565b61012d546001600160a01b0316331461143e5760405162461bcd60e51b81526004016109b090613f23565b610cfd82826123f0565b60008061145a86848787600019611af0565b90506114668682612407565b9695505050505050565b61012d546001600160a01b0316331461149b5760405162461bcd60e51b81526004016109b090613f23565b610a4d838383612252565b60335460ff16156114c95760405162461bcd60e51b81526004016109b090613f58565b60006114d785858486612420565b905060006114e88686868686612455565b90506114f48682611cb4565b506040516374f4f54760e01b8152336004820152602481018590526001600160a01b038616906374f4f54790604401600060405180830381600087803b15801561153d57600080fd5b505af1158015611551573d6000803e3d6000fd5b50506101c4546040805163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000811682526001600160a01b0389811660208401529282018a90526060820193909352608081018790529089169350339250908916907fb967a159106e693bcb8298f42c743d6a70b66535ae64bdaf9710db69156984c69060a00160405180910390a4505050505050565b600082815260fb60205260409020600101546116068161199e565b610a4d8383611cc8565b60008061145a86868686600019612455565b61012d546001600160a01b0316331461164d5760405162461bcd60e51b81526004016109b090613f23565b8281146116865760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b60448201526064016109b0565b8260005b818110156116ec576116da8686838181106116a7576116a7614041565b90506020020160208101906116bc9190613766565b8585848181106116ce576116ce614041565b905060200201356123f0565b6116e560018261417b565b905061168a565b505050505050565b61012d546001600160a01b0316331461171f5760405162461bcd60e51b81526004016109b090613f23565b610ddd816121be565b610a4d838383336114a6565b61012d546001600160a01b0316331461175f5760405162461bcd60e51b81526004016109b090613f23565b6001600160a01b0381166117c45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109b0565b610ddd8161216b565b60006117d96001612506565b905080156117f1576000805461ff0019166101001790555b8382146118385760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60448201526064016109b0565b61184460008088612593565b61184c6125dd565b61185461260c565b61185c61260c565b6000805b858110156118e5576118b085858381811061187d5761187d614041565b9050602002013588888481811061189657611896614041565b90506020020160208101906118ab919061371e565b6119a8565b60008585838181106118c4576118c4614041565b90506020020135036118d557600191505b6118de8161406d565b9050611860565b50806119285760405162461bcd60e51b8152602060048201526012602482015271139bc818591b5a5b881cdc1958da599a595960721b60448201526064016109b0565b5080156116ec576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6001600160a01b03163b151590565b6000806119928484612633565b915091505b9250929050565b610ddd813361266d565b6119b282826112fa565b610cfd57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119ea3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611a3c848484886126d1565b604080516080810182526000815242602082015291925081016001815260200160015b905260008281526101c660209081526040918290208351815490151560ff199182161782559184015160018083019190915592840151600280830180549395929490931691908490811115611ab657611ab6613bee565b0217905550606082015160028201805461ff001916610100836001811115611ae057611ae0613bee565b0217905550905050949350505050565b82516060906000816001600160401b03811115611b0f57611b0f6137b3565b604051908082528060200260200182016040528015611b38578160200160208202803683370190505b50905060005b82811015611c795760006101c76000898481518110611b5f57611b5f614041565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812063ffffffff8f168252909152205416905080611be15760405162461bcd60e51b81526020600482015260176024820152761c995b5bdd19481d1bdad95b881b9bdd081b585c1c1959604a1b60448201526064016109b0565b6000878381518110611bf557611bf5614041565b602002602001015111611c3b5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016109b0565b80838381518110611c4e57611c4e614041565b6001600160a01b03909216602092830291909101909101525080611c718161406d565b915050611b3e565b506001338883888c89604051602001611c989796959493929190614193565b6040516020818303038152906040529250505095945050505050565b6000611cc18334846127a1565b9392505050565b611cd282826112fa565b15610cfd57600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61012d546001600160a01b03163314610ddd5760405162461bcd60e51b81526004016109b090613f23565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611d8d57610a4d836127bb565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611de7575060408051601f3d908101601f19168201909252611de4918101906141fb565b60015b611e4a5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016109b0565b6000805160206148278339815191528114611eb95760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016109b0565b50610a4d838383612857565b60335460ff16611f0e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016109b0565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60606000611f658361287c565b905080516001600160401b03811115611f8057611f806137b3565b604051908082528060200260200182016040528015611fa9578160200160208202803683370190505b50915060005b815181101561200b57818181518110611fca57611fca614041565b6020026020010151838281518110611fe457611fe4614041565b63ffffffff90921660209283029190910190910152806120038161406d565b915050611faf565b5050919050565b6000808061202b61019163ffffffff8087169061198516565b915091508161203985612916565b906120575760405162461bcd60e51b81526004016109b09190613ec9565b509392505050565b60335460ff16156120825760405162461bcd60e51b81526004016109b090613f58565b600061209082840184614223565b905060ff81166120df576120da8584848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294d92505050565b6111ae565b60001960ff82160161212b576120da8584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a6792505050565b60405162461bcd60e51b81526020600482015260156024820152742ab739bab83837b93a32b21027b832b930ba34b7b760591b60448201526064016109b0565b61012d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6121d361019163ffffffff80841690612ceb16565b6121dc82612916565b90610cfd5760405162461bcd60e51b81526004016109b09190613ec9565b60335460ff161561221d5760405162461bcd60e51b81526004016109b090613f58565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f3b3390565b6001600160a01b0383166122955760405162461bcd60e51b815260206004820152600a60248201526910b437b6b2aa37b5b2b760b11b60448201526064016109b0565b6001600160a01b0380841660009081526101c76020908152604080832063ffffffff861680855281845282852080548451808601909552898816808652428688019081529390975292909452915185166001600160a01b031982161783559051600190920191909155909116906123a1576001600160a01b0381166123535760405162461bcd60e51b81526020600482015260146024820152731a5b9d985b1a59081c185a5c881c995b5bdd985b60621b60448201526064016109b0565b60405163ffffffff831681526001600160a01b0380831691908616907f9562b33b08bb74534647f3dff5a674dcd7d10854e517bd258eb5e9d3d4c2c6b29060200160405180910390a3611262565b60405163ffffffff831681526001600160a01b0380851691908616907f1a954a85d933c5418c8c7edb1605fff69c5d182538b3a5299682a97f788311b49060200160405180910390a350505050565b610cfd61019163ffffffff808516908490612cf716565b60008061241384612012565b9050610a20848285612d02565b600061242e84848488612dbe565b60408051608081018252600081524260208201529192508101600181526020016000611a5f565b6001600160a01b0380851660009081526101c76020908152604080832063ffffffff8a16845290915290205460609116806124cc5760405162461bcd60e51b81526020600482015260176024820152761c995b5bdd19481d1bdad95b881b9bdd081b585c1c1959604a1b60448201526064016109b0565b6000338583888b886040516020016124ea9796959493929190614240565b6040516020818303038152906040529150505b95945050505050565b60008054610100900460ff161561254d578160ff1660011480156125295750303b155b6125455760405162461bcd60e51b81526004016109b09061428e565b506000919050565b60005460ff8084169116106125745760405162461bcd60e51b81526004016109b09061428e565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166125ba5760405162461bcd60e51b81526004016109b0906142dc565b6125c2612e50565b6125cb83610de0565b6125d482610974565b610a4d8161216b565b600054610100900460ff166126045760405162461bcd60e51b81526004016109b0906142dc565b610f23612e7f565b600054610100900460ff16610f235760405162461bcd60e51b81526004016109b0906142dc565b6000818152600283016020526040812054819080612662576126558585612eb2565b9250600091506119979050565b600192509050611997565b61267782826112fa565b610cfd5761268f816001600160a01b03166014612ebe565b61269a836020612ebe565b6040516020016126ab929190614327565b60408051601f198184030181529082905262461bcd60e51b82526109b091600401613ec9565b82516000906060825b8281101561274d57818782815181106126f5576126f5614041565b602002602001015187838151811061270f5761270f614041565b60200260200101516040516020016127299392919061439c565b604051602081830303815290604052915080806127459061406d565b9150506126da565b5061275d6101c480546001019055565b612765610c14565b6101c45460405161277f92918a91859189916020016143db565b6040516020818303038152906040528051906020012092505050949350505050565b6000806127ad85612012565b90506124fd85828686613059565b6001600160a01b0381163b6128285760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016109b0565b60008051602061482783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61286083613118565b60008251118061286d5750805b15610a4d576112628383613158565b6060600061288983613243565b9050806001600160401b038111156128a3576128a36137b3565b6040519080825280602002602001820160405280156128cc578160200160208202803683370190505b50915060005b8181101561200b576128e4848261324e565b60001c8382815181106128f9576128f9614041565b60209081029190910101528061290e8161406d565b9150506128d2565b60606129278263ffffffff1661325a565b604051602001612937919061443b565b6040516020818303038152906040529050919050565b60008060008060008060008780602001905181019061296c919061448b565b9650965096509650965096509650612998818860ff16600181111561299357612993613bee565b61335a565b6040516346154c9f60e11b81526001600160a01b03868116600483015260248201859052851690638c2a993e90604401600060405180830381600087803b1580156129e257600080fd5b505af11580156129f6573d6000803e3d6000fd5b50506040805163ffffffff86811682526001600160a01b038a811660208401528284018990526060830187905292518984169550928b1693508d16917ff475ec3ebd0a821ced53bf4d9fb1b6e5110cdf24015f2a590842816d2aced35d9181900360800190a4505050505050505050565b600080600080600080600087806020019051810190612a86919061456e565b9650965096509650965096509650612aad818860ff16600181111561299357612993613bee565b835160005b81811015612c29576000868281518110612ace57612ace614041565b602002602001015190506000868381518110612aec57612aec614041565b60209081029190910101516040516346154c9f60e11b81523060048201526024810182905290915082906001600160a01b03821690638c2a993e90604401600060405180830381600087803b158015612b4457600080fd5b505af1158015612b58573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b038d81166004830152602482018690528416925063095ea7b391506044016020604051808303816000875af1158015612bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcf9190614688565b612c135760405162461bcd60e51b8152602060048201526015602482015274185c1c1c9bdd985b081d5b9cdd58d8d95cdcd99d5b605a1b60448201526064016109b0565b5050508080612c219061406d565b915050612ab2565b506040516347202c0960e11b81526001600160a01b03871690638e40581290612c5890889088906004016146aa565b600060405180830381600087803b158015612c7257600080fd5b505af1158015612c86573d6000803e3d6000fd5b50505050866001600160a01b03168363ffffffff168b63ffffffff167f9b487637b9c49858ddbb3b811d4d1d020220e23d31d8da2e18f0df625f77166b89898988604051612cd794939291906146cf565b60405180910390a450505050505050505050565b6000611cc1838361348b565b6112628383836134a8565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166381d2ea95858585612d4b60408051602081019091526000815290565b61015f546040516001600160e01b031960e088901b168152612d7d95949392916001600160a01b031690600401614717565b602060405180830381865afa158015612d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2091906141fb565b6000612dcf6101c480546001019055565b612dd7610c14565b6101c4546040805160208101939093526bffffffffffffffffffffffff19606089811b8216928501929092529087901b166054830152606882018590526001600160e01b031960e085901b166088830152608c82015260ac01604051602081830303815290604052805190602001209050949350505050565b600054610100900460ff16612e775760405162461bcd60e51b81526004016109b0906142dc565b610f236134c5565b600054610100900460ff16612ea65760405162461bcd60e51b81526004016109b0906142dc565b6033805460ff19169055565b6000611cc183836134f5565b60606000612ecd836002614769565b612ed890600261417b565b6001600160401b03811115612eef57612eef6137b3565b6040519080825280601f01601f191660200182016040528015612f19576020820181803683370190505b509050600360fc1b81600081518110612f3457612f34614041565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612f6357612f63614041565b60200101906001600160f81b031916908160001a9053506000612f87846002614769565b612f9290600161417b565b90505b600181111561300a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612fc657612fc6614041565b1a60f81b828281518110612fdc57612fdc614041565b60200101906001600160f81b031916908160001a90535060049490941c9361300381614788565b9050612f95565b508315611cc15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109b0565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310b83dc0848787866130a360408051602081019091526000815290565b61015f546040516001600160e01b031960e089901b1681526130d595949392916001600160a01b031690600401614717565b60206040518083038185885af11580156130f3573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906124fd91906141fb565b613121816127bb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6131c05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016109b0565b600080846001600160a01b0316846040516131db919061479f565b600060405180830381855af49150503d8060008114613216576040519150601f19603f3d011682016040523d82523d6000602084013e61321b565b606091505b50915091506124fd82826040518060600160405280602781526020016148476027913961350d565b600061096e82613546565b6000611cc18383613550565b6060816000036132815750506040805180820190915260018152600360fc1b602082015290565b8160005b81156132ab57806132958161406d565b91506132a49050600a836147d1565b9150613285565b6000816001600160401b038111156132c5576132c56137b3565b6040519080825280601f01601f1916602001820160405280156132ef576020820181803683370190505b5090505b8415610a20576133046001836147e5565b9150613311600a866147fc565b61331c90603061417b565b60f81b81838151811061333157613331614041565b60200101906001600160f81b031916908160001a905350613353600a866147d1565b94506132f3565b60008281526101c66020526040812060029081015460ff169081111561338257613382613bee565b146133cf5760405162461bcd60e51b815260206004820152601760248201527f427269646765205265717565737420457865637574656400000000000000000060448201526064016109b0565b6040805160808101825260008152426020820152908101600281526020018260018111156133ff576133ff613bee565b905260008381526101c660209081526040918290208351815490151560ff19918216178255918401516001808301919091559284015160028083018054939592949093169190849081111561345657613456613bee565b0217905550606082015160028201805461ff00191661010083600181111561348057613480613bee565b021790555050505050565b60008181526002830160205260408120819055611cc1838361357a565b60008281526002840160205260408120829055610a208484613586565b600054610100900460ff166134ec5760405162461bcd60e51b81526004016109b0906142dc565b610f233361216b565b60008181526001830160205260408120541515611cc1565b6060831561351c575081611cc1565b82511561352c5782518084602001fd5b8160405162461bcd60e51b81526004016109b09190613ec9565b600061096e825490565b600082600001828154811061356757613567614041565b9060005260206000200154905092915050565b6000611cc18383613592565b6000611cc18383613685565b6000818152600183016020526040812054801561367b5760006135b66001836147e5565b85549091506000906135ca906001906147e5565b905081811461362f5760008660000182815481106135ea576135ea614041565b906000526020600020015490508087600001848154811061360d5761360d614041565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061364057613640614810565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061096e565b600091505061096e565b60008181526001830160205260408120546136cc5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561096e565b50600061096e565b6000602082840312156136e657600080fd5b81356001600160e01b031981168114611cc157600080fd5b6001600160a01b0381168114610ddd57600080fd5b803561258e816136fe565b60006020828403121561373057600080fd5b8135611cc1816136fe565b60006020828403121561374d57600080fd5b5035919050565b63ffffffff81168114610ddd57600080fd5b60006020828403121561377857600080fd5b8135611cc181613754565b6000806040838503121561379657600080fd5b8235915060208301356137a8816136fe565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156137f1576137f16137b3565b604052919050565b60006001600160401b03821115613812576138126137b3565b5060051b60200190565b600082601f83011261382d57600080fd5b8135602061384261383d836137f9565b6137c9565b82815260059290921b8401810191818101908684111561386157600080fd5b8286015b8481101561387c5780358352918301918301613865565b509695505050505050565b6000806000806080858703121561389d57600080fd5b84356138a881613754565b93506020858101356001600160401b03808211156138c557600080fd5b818801915088601f8301126138d957600080fd5b81356138e761383d826137f9565b81815260059190911b8301840190848101908b83111561390657600080fd5b938501935b8285101561392d57843561391e816136fe565b8252938501939085019061390b565b97505050604088013592508083111561394557600080fd5b50506139538782880161381c565b92505061396260608601613713565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b818110156139ab57835163ffffffff1683529284019291840191600101613989565b50909695505050505050565b600080604083850312156139ca57600080fd5b82356139d5816136fe565b91506020838101356001600160401b03808211156139f257600080fd5b818601915086601f830112613a0657600080fd5b813581811115613a1857613a186137b3565b613a2a601f8201601f191685016137c9565b91508082528784828501011115613a4057600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060008060608587031215613a7457600080fd5b8435613a7f81613754565b93506020850135925060408501356001600160401b0380821115613aa257600080fd5b818701915087601f830112613ab657600080fd5b813581811115613ac557600080fd5b886020828501011115613ad757600080fd5b95989497505060200194505050565b60008083601f840112613af857600080fd5b5081356001600160401b03811115613b0f57600080fd5b6020830191508360208260051b850101111561199757600080fd5b60008060208385031215613b3d57600080fd5b82356001600160401b03811115613b5357600080fd5b613b5f85828601613ae6565b90969095509350505050565b600080600080600060608688031215613b8357600080fd5b85356001600160401b0380821115613b9a57600080fd5b613ba689838a01613ae6565b90975095506020880135915080821115613bbf57600080fd5b50613bcc88828901613ae6565b9094509250506040860135613be081613754565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b60028110613c1457613c14613bee565b9052565b8415158152602081018490526080810160038410613c3857613c38613bee565b8360408301526124fd6060830184613c04565b60008060408385031215613c5e57600080fd5b8235613c6981613754565b946020939093013593505050565b60008060408385031215613c8a57600080fd5b8235613c95816136fe565b915060208301356137a881613754565b600080600060608486031215613cba57600080fd5b8335613cc5816136fe565b92506020840135613cd5816136fe565b91506040840135613ce581613754565b809150509250925092565b60008060008060808587031215613d0657600080fd5b8435613d1181613754565b93506020850135613d21816136fe565b9250604085013591506060850135613d38816136fe565b939692955090935050565b60008060008060408587031215613d5957600080fd5b84356001600160401b0380821115613d7057600080fd5b613d7c88838901613ae6565b90965094506020870135915080821115613d9557600080fd5b50613da287828801613ae6565b95989497509550505050565b600080600060608486031215613dc357600080fd5b8335613dce81613754565b92506020840135613dde816136fe565b929592945050506040919091013590565b600080600080600060608688031215613e0757600080fd5b8535613e12816136fe565b945060208601356001600160401b0380821115613e2e57600080fd5b613e3a89838a01613ae6565b90965094506040880135915080821115613e5357600080fd5b50613e6088828901613ae6565b969995985093965092949392505050565b60005b83811015613e8c578181015183820152602001613e74565b838111156112625750506000910152565b60008151808452613eb5816020860160208601613e71565b601f01601f19169290920160200192915050565b602081526000611cc16020830184613e9d565b60208082526027908201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060408201526673657474696e6760c81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b600081518084526020808501945080840160005b83811015613fbb5781516001600160a01b031687529582019590820190600101613f96565b509495945050505050565b600081518084526020808501945080840160005b83811015613fbb57815187529582019590820190600101613fda565b6001600160a01b038616815260a06020820181905260009061401a90830187613f82565b828103604084015261402c8187613fc6565b60608401959095525050608001529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161407f5761407f614057565b5060010190565b83815260806020820152601960808201527f546f7563616e43726f7373636861696e4d657373656e6765720000000000000060a082015260c0604082015260006140d360c0830185613e9d565b9050826060830152949350505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000821982111561418e5761418e614057565b500190565b61419d8189613c04565b6001600160a01b0387811660208301528616604082015260e0606082018190526000906141cc90830187613f82565b82810360808401526141de8187613fc6565b63ffffffff9590951660a0840152505060c0015295945050505050565b60006020828403121561420d57600080fd5b5051919050565b60ff81168114610ddd57600080fd5b60006020828403121561423557600080fd5b8135611cc181614214565b60e0810161424e828a613c04565b6001600160a01b0397881660208301529587166040820152939095166060840152608083019190915263ffffffff1660a082015260c00191909152919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161435f816017850160208801613e71565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614390816028840160208801613e71565b01602801949350505050565b600084516143ae818460208901613e71565b60609490941b6bffffffffffffffffffffffff191691909301908152601481019190915260340192915050565b8581526bffffffffffffffffffffffff198560601b1660208201526000845161440b816034850160208901613e71565b60e09490941b6001600160e01b031916603492909401918201939093526038810191909152605801949350505050565b7f4e6f20726f7574657220656e726f6c6c656420666f7220646f6d61696e3a200081526000825161447381601f850160208701613e71565b91909101601f0192915050565b805161258e81613754565b600080600080600080600060e0888a0312156144a657600080fd5b87516144b181614214565b60208901519097506144c2816136fe565b60408901519096506144d3816136fe565b60608901519095506144e4816136fe565b608089015160a08a015191955093506144fc81613754565b8092505060c0880151905092959891949750929550565b600082601f83011261452457600080fd5b8151602061453461383d836137f9565b82815260059290921b8401810191818101908684111561455357600080fd5b8286015b8481101561387c5780518352918301918301614557565b600080600080600080600060e0888a03121561458957600080fd5b875161459481614214565b809750506020808901516145a7816136fe565b60408a01519097506145b8816136fe565b60608a01519096506001600160401b03808211156145d557600080fd5b818b0191508b601f8301126145e957600080fd5b81516145f761383d826137f9565b81815260059190911b8301840190848101908e83111561461657600080fd5b938501935b8285101561463d57845161462e816136fe565b8252938501939085019061461b565b60808e0151909950945050508083111561465657600080fd5b50506146648a828b01614513565b93505061467360a08901614480565b915060c0880151905092959891949750929550565b60006020828403121561469a57600080fd5b81518015158114611cc157600080fd5b6040815260006146bd6040830185613f82565b82810360208401526124fd8185613fc6565b6001600160a01b03851681526080602082018190526000906146f390830186613f82565b82810360408401526147058186613fc6565b91505082606083015295945050505050565b63ffffffff8616815284602082015260a06040820152600061473c60a0830186613e9d565b828103606084015261474e8186613e9d565b91505060018060a01b03831660808301529695505050505050565b600081600019048311821515161561478357614783614057565b500290565b60008161479757614797614057565b506000190190565b600082516147b1818460208701613e71565b9190910192915050565b634e487b7160e01b600052601260045260246000fd5b6000826147e0576147e06147bb565b500490565b6000828210156147f7576147f7614057565b500390565b60008261480b5761480b6147bb565b500690565b634e487b7160e01b600052603160045260246000fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208cb6e630ba7eec2eb5686ce136896cdc74ce9605991aff8a5cdd2cb793f2bc8764736f6c634300080e0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x60806040526004361061027d5760003560e01c80638d3638f41161014f578063d3f6c4f1116100c1578063e9198bf91161007a578063e9198bf91461086c578063efae508a1461088c578063f292e805146108ac578063f2fde38b146108bf578063f8d8353f146108df578063ffa1ad74146108ff57600080fd5b8063d3f6c4f114610790578063d5438eae146107a3578063d547741f146107d7578063d9e7e0b7146107f7578063de523cf314610817578063e63ab1e91461083857600080fd5b8063a217fddf11610113578063a217fddf1461066c578063affed0e014610681578063b49c53a714610698578063b7220e22146106b8578063bdaca27a146106d8578063c0d5f4471461077057600080fd5b80638d3638f4146105695780638da5cb5b146105b257806391d14854146105d157806394eda280146105f15780639d8669851461061157600080fd5b80633f4ba83a116101f35780636ca0b0d7116101ac5780636ca0b0d71461049d57806370722ced146104b2578063715018a6146104e657806371a15b38146104fb5780637f5a7c7b1461051b5780638456cb591461055457600080fd5b80633f4ba83a14610413578063440df4f4146104285780634f1ef2861461044a57806352d1902d1461045d57806356d5d475146104725780635c975abb1461048557600080fd5b80633456b29d116102455780633456b29d146103575780633644e5151461036a57806336568abe1461037f5780633659cfe61461039f5780633d75e451146103bf5780633dfd3873146103f357600080fd5b806301ffc9a7146102825780630e72cc06146102b7578063248a9ca3146102d95780632ead72f6146103175780632f2ff15d14610337575b600080fd5b34801561028e57600080fd5b506102a261029d3660046136d4565b61093d565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b506102d76102d236600461371e565b610974565b005b3480156102e557600080fd5b506103096102f436600461373b565b600090815260fb602052604090206001015490565b6040519081526020016102ae565b34801561032357600080fd5b50610309610332366004613766565b610a08565b34801561034357600080fd5b506102d7610352366004613783565b610a28565b6102d7610365366004613887565b610a52565b34801561037657600080fd5b50610309610c14565b34801561038b57600080fd5b506102d761039a366004613783565b610c83565b3480156103ab57600080fd5b506102d76103ba36600461371e565b610d01565b3480156103cb57600080fd5b506103097fc809a7fd521f10cdc3c068621a1c61d5fd9bb3f1502a773e53811bc248d919a881565b3480156103ff57600080fd5b506102d761040e36600461371e565b610de0565b34801561041f57600080fd5b506102d7610e6b565b34801561043457600080fd5b5061043d610f25565b6040516102ae919061396d565b6102d76104583660046139b7565b610f37565b34801561046957600080fd5b50610309611003565b6102d7610480366004613a5e565b6110b6565b34801561049157600080fd5b5060335460ff166102a2565b3480156104a957600080fd5b50610309600281565b3480156104be57600080fd5b506103097fc2f8787176b8ac6bf7215b4adcc1e069bf4ab82d9ab1df05a57a91d425935b6e81565b3480156104f257600080fd5b506102d76111b5565b34801561050757600080fd5b506102d7610516366004613b2a565b6111ea565b34801561052757600080fd5b5061015f5461053c906001600160a01b031681565b6040516001600160a01b0390911681526020016102ae565b34801561056057600080fd5b506102d7611268565b34801561057557600080fd5b5061059d7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016102ae565b3480156105be57600080fd5b5061012d546001600160a01b031661053c565b3480156105dd57600080fd5b506102a26105ec366004613783565b6112fa565b3480156105fd57600080fd5b506102d761060c366004613b6b565b611325565b34801561061d57600080fd5b5061065c61062c36600461373b565b6101c66020526000908152604090208054600182015460029092015460ff91821692918181169161010090041684565b6040516102ae9493929190613c18565b34801561067857600080fd5b50610309600081565b34801561068d57600080fd5b506103096101c45481565b3480156106a457600080fd5b506102d76106b3366004613c4b565b611413565b3480156106c457600080fd5b506103096106d3366004613887565b611448565b3480156106e457600080fd5b5061074c6106f3366004613c77565b604080518082018252600080825260209182018190526001600160a01b0394851681526101c7825282812063ffffffff949094168152928152918190208151808301909252805490931681526001909201549082015290565b6040805182516001600160a01b0316815260209283015192810192909252016102ae565b34801561077c57600080fd5b506102d761078b366004613ca5565b611470565b6102d761079e366004613cf0565b6114a6565b3480156107af57600080fd5b5061053c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107e357600080fd5b506102d76107f2366004613783565b6115eb565b34801561080357600080fd5b50610309610812366004613cf0565b611610565b34801561082357600080fd5b506101605461053c906001600160a01b031681565b34801561084457600080fd5b506103097f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b34801561087857600080fd5b506102d7610887366004613d43565b611622565b34801561089857600080fd5b506102d76108a7366004613766565b6116f4565b6102d76108ba366004613dae565b611728565b3480156108cb57600080fd5b506102d76108da36600461371e565b611734565b3480156108eb57600080fd5b506102d76108fa366004613def565b6117cd565b34801561090b57600080fd5b50610930604051806040016040528060058152602001640322e312e360dc1b81525081565b6040516102ae9190613ec9565b60006001600160e01b03198216637965db0b60e01b148061096e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b806001600160a01b0381163b15158061099457506001600160a01b038116155b6109b95760405162461bcd60e51b81526004016109b090613edc565b60405180910390fd5b61012d546001600160a01b031633146109e45760405162461bcd60e51b81526004016109b090613f23565b5061016080546001600160a01b0319166001600160a01b0392909216919091179055565b600080610a2061019163ffffffff8086169061198516565b949350505050565b600082815260fb6020526040902060010154610a438161199e565b610a4d83836119a8565b505050565b60335460ff1615610a755760405162461bcd60e51b81526004016109b090613f58565b7fc809a7fd521f10cdc3c068621a1c61d5fd9bb3f1502a773e53811bc248d919a8610a9f8161199e565b6000610aad86848787611a2e565b90506000610abe8785888886611af0565b9050610aca8782611cb4565b50336001600160a01b03168763ffffffff167f000000000000000000000000000000000000000000000000000000000000000063ffffffff167f30c7996a02aac74afe5a5524a67078e755366c4020290c22bea20ff36ddd8587878a8a6101c45489604051610b3d959493929190613ff6565b60405180910390a460005b8651811015610c0a57868181518110610b6357610b63614041565b60200260200101516001600160a01b03166374f4f54733888481518110610b8c57610b8c614041565b60200260200101516040518363ffffffff1660e01b8152600401610bc59291906001600160a01b03929092168252602082015260400190565b600060405180830381600087803b158015610bdf57600080fd5b505af1158015610bf3573d6000803e3d6000fd5b505050508080610c029061406d565b915050610b48565b5050505050505050565b60007fc2f8787176b8ac6bf7215b4adcc1e069bf4ab82d9ab1df05a57a91d425935b6e604051806040016040528060058152602001640322e312e360dc1b81525046604051602001610c6893929190614086565b60405160208183030381529060405280519060200120905090565b6001600160a01b0381163314610cf35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016109b0565b610cfd8282611cc8565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610d495760405162461bcd60e51b81526004016109b0906140e3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d92600080516020614827833981519152546001600160a01b031690565b6001600160a01b031614610db85760405162461bcd60e51b81526004016109b09061412f565b610dc181611d2f565b60408051600080825260208201909252610ddd91839190611d5a565b50565b806001600160a01b0381163b151580610e0057506001600160a01b038116155b610e1c5760405162461bcd60e51b81526004016109b090613edc565b61012d546001600160a01b03163314610e475760405162461bcd60e51b81526004016109b090613f23565b5061015f80546001600160a01b0319166001600160a01b0392909216919091179055565b610e957f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336112fa565b610ed25760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016109b0565b60335460ff16610f1b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016109b0565b610f23611ec5565b565b6060610f32610191611f58565b905090565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610f7f5760405162461bcd60e51b81526004016109b0906140e3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fc8600080516020614827833981519152546001600160a01b031690565b6001600160a01b031614610fee5760405162461bcd60e51b81526004016109b09061412f565b610ff782611d2f565b610cfd82826001611d5a565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110a35760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016109b0565b5060008051602061482783398151915290565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111385760405162461bcd60e51b815260206004820152602160248201527f4d61696c626f78436c69656e743a2073656e646572206e6f74206d61696c626f6044820152600f60fb1b60648201526084016109b0565b600061114385612012565b90508381146111a25760405162461bcd60e51b815260206004820152602560248201527f456e726f6c6c656420726f7574657220646f6573206e6f74206d61746368207360448201526432b73232b960d91b60648201526084016109b0565b6111ae8585858561205f565b5050505050565b61012d546001600160a01b031633146111e05760405162461bcd60e51b81526004016109b090613f23565b610f23600061216b565b61012d546001600160a01b031633146112155760405162461bcd60e51b81526004016109b090613f23565b8060005b818110156112625761125084848381811061123657611236614041565b905060200201602081019061124b9190613766565b6121be565b61125b60018261417b565b9050611219565b50505050565b6112927f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336112fa565b6112cf5760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016109b0565b60335460ff16156112f25760405162461bcd60e51b81526004016109b090613f58565b610f236121fa565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61012d546001600160a01b031633146113505760405162461bcd60e51b81526004016109b090613f23565b838281146113985760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60448201526064016109b0565b60005b8181101561140a576113fa8787838181106113b8576113b8614041565b90506020020160208101906113cd919061371e565b8686848181106113df576113df614041565b90506020020160208101906113f4919061371e565b85612252565b6114038161406d565b905061139b565b50505050505050565b61012d546001600160a01b0316331461143e5760405162461bcd60e51b81526004016109b090613f23565b610cfd82826123f0565b60008061145a86848787600019611af0565b90506114668682612407565b9695505050505050565b61012d546001600160a01b0316331461149b5760405162461bcd60e51b81526004016109b090613f23565b610a4d838383612252565b60335460ff16156114c95760405162461bcd60e51b81526004016109b090613f58565b60006114d785858486612420565b905060006114e88686868686612455565b90506114f48682611cb4565b506040516374f4f54760e01b8152336004820152602481018590526001600160a01b038616906374f4f54790604401600060405180830381600087803b15801561153d57600080fd5b505af1158015611551573d6000803e3d6000fd5b50506101c4546040805163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000811682526001600160a01b0389811660208401529282018a90526060820193909352608081018790529089169350339250908916907fb967a159106e693bcb8298f42c743d6a70b66535ae64bdaf9710db69156984c69060a00160405180910390a4505050505050565b600082815260fb60205260409020600101546116068161199e565b610a4d8383611cc8565b60008061145a86868686600019612455565b61012d546001600160a01b0316331461164d5760405162461bcd60e51b81526004016109b090613f23565b8281146116865760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b60448201526064016109b0565b8260005b818110156116ec576116da8686838181106116a7576116a7614041565b90506020020160208101906116bc9190613766565b8585848181106116ce576116ce614041565b905060200201356123f0565b6116e560018261417b565b905061168a565b505050505050565b61012d546001600160a01b0316331461171f5760405162461bcd60e51b81526004016109b090613f23565b610ddd816121be565b610a4d838383336114a6565b61012d546001600160a01b0316331461175f5760405162461bcd60e51b81526004016109b090613f23565b6001600160a01b0381166117c45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109b0565b610ddd8161216b565b60006117d96001612506565b905080156117f1576000805461ff0019166101001790555b8382146118385760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60448201526064016109b0565b61184460008088612593565b61184c6125dd565b61185461260c565b61185c61260c565b6000805b858110156118e5576118b085858381811061187d5761187d614041565b9050602002013588888481811061189657611896614041565b90506020020160208101906118ab919061371e565b6119a8565b60008585838181106118c4576118c4614041565b90506020020135036118d557600191505b6118de8161406d565b9050611860565b50806119285760405162461bcd60e51b8152602060048201526012602482015271139bc818591b5a5b881cdc1958da599a595960721b60448201526064016109b0565b5080156116ec576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6001600160a01b03163b151590565b6000806119928484612633565b915091505b9250929050565b610ddd813361266d565b6119b282826112fa565b610cfd57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119ea3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000611a3c848484886126d1565b604080516080810182526000815242602082015291925081016001815260200160015b905260008281526101c660209081526040918290208351815490151560ff199182161782559184015160018083019190915592840151600280830180549395929490931691908490811115611ab657611ab6613bee565b0217905550606082015160028201805461ff001916610100836001811115611ae057611ae0613bee565b0217905550905050949350505050565b82516060906000816001600160401b03811115611b0f57611b0f6137b3565b604051908082528060200260200182016040528015611b38578160200160208202803683370190505b50905060005b82811015611c795760006101c76000898481518110611b5f57611b5f614041565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812063ffffffff8f168252909152205416905080611be15760405162461bcd60e51b81526020600482015260176024820152761c995b5bdd19481d1bdad95b881b9bdd081b585c1c1959604a1b60448201526064016109b0565b6000878381518110611bf557611bf5614041565b602002602001015111611c3b5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b60448201526064016109b0565b80838381518110611c4e57611c4e614041565b6001600160a01b03909216602092830291909101909101525080611c718161406d565b915050611b3e565b506001338883888c89604051602001611c989796959493929190614193565b6040516020818303038152906040529250505095945050505050565b6000611cc18334846127a1565b9392505050565b611cd282826112fa565b15610cfd57600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61012d546001600160a01b03163314610ddd5760405162461bcd60e51b81526004016109b090613f23565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611d8d57610a4d836127bb565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611de7575060408051601f3d908101601f19168201909252611de4918101906141fb565b60015b611e4a5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016109b0565b6000805160206148278339815191528114611eb95760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016109b0565b50610a4d838383612857565b60335460ff16611f0e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016109b0565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60606000611f658361287c565b905080516001600160401b03811115611f8057611f806137b3565b604051908082528060200260200182016040528015611fa9578160200160208202803683370190505b50915060005b815181101561200b57818181518110611fca57611fca614041565b6020026020010151838281518110611fe457611fe4614041565b63ffffffff90921660209283029190910190910152806120038161406d565b915050611faf565b5050919050565b6000808061202b61019163ffffffff8087169061198516565b915091508161203985612916565b906120575760405162461bcd60e51b81526004016109b09190613ec9565b509392505050565b60335460ff16156120825760405162461bcd60e51b81526004016109b090613f58565b600061209082840184614223565b905060ff81166120df576120da8584848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061294d92505050565b6111ae565b60001960ff82160161212b576120da8584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a6792505050565b60405162461bcd60e51b81526020600482015260156024820152742ab739bab83837b93a32b21027b832b930ba34b7b760591b60448201526064016109b0565b61012d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6121d361019163ffffffff80841690612ceb16565b6121dc82612916565b90610cfd5760405162461bcd60e51b81526004016109b09190613ec9565b60335460ff161561221d5760405162461bcd60e51b81526004016109b090613f58565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611f3b3390565b6001600160a01b0383166122955760405162461bcd60e51b815260206004820152600a60248201526910b437b6b2aa37b5b2b760b11b60448201526064016109b0565b6001600160a01b0380841660009081526101c76020908152604080832063ffffffff861680855281845282852080548451808601909552898816808652428688019081529390975292909452915185166001600160a01b031982161783559051600190920191909155909116906123a1576001600160a01b0381166123535760405162461bcd60e51b81526020600482015260146024820152731a5b9d985b1a59081c185a5c881c995b5bdd985b60621b60448201526064016109b0565b60405163ffffffff831681526001600160a01b0380831691908616907f9562b33b08bb74534647f3dff5a674dcd7d10854e517bd258eb5e9d3d4c2c6b29060200160405180910390a3611262565b60405163ffffffff831681526001600160a01b0380851691908616907f1a954a85d933c5418c8c7edb1605fff69c5d182538b3a5299682a97f788311b49060200160405180910390a350505050565b610cfd61019163ffffffff808516908490612cf716565b60008061241384612012565b9050610a20848285612d02565b600061242e84848488612dbe565b60408051608081018252600081524260208201529192508101600181526020016000611a5f565b6001600160a01b0380851660009081526101c76020908152604080832063ffffffff8a16845290915290205460609116806124cc5760405162461bcd60e51b81526020600482015260176024820152761c995b5bdd19481d1bdad95b881b9bdd081b585c1c1959604a1b60448201526064016109b0565b6000338583888b886040516020016124ea9796959493929190614240565b6040516020818303038152906040529150505b95945050505050565b60008054610100900460ff161561254d578160ff1660011480156125295750303b155b6125455760405162461bcd60e51b81526004016109b09061428e565b506000919050565b60005460ff8084169116106125745760405162461bcd60e51b81526004016109b09061428e565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166125ba5760405162461bcd60e51b81526004016109b0906142dc565b6125c2612e50565b6125cb83610de0565b6125d482610974565b610a4d8161216b565b600054610100900460ff166126045760405162461bcd60e51b81526004016109b0906142dc565b610f23612e7f565b600054610100900460ff16610f235760405162461bcd60e51b81526004016109b0906142dc565b6000818152600283016020526040812054819080612662576126558585612eb2565b9250600091506119979050565b600192509050611997565b61267782826112fa565b610cfd5761268f816001600160a01b03166014612ebe565b61269a836020612ebe565b6040516020016126ab929190614327565b60408051601f198184030181529082905262461bcd60e51b82526109b091600401613ec9565b82516000906060825b8281101561274d57818782815181106126f5576126f5614041565b602002602001015187838151811061270f5761270f614041565b60200260200101516040516020016127299392919061439c565b604051602081830303815290604052915080806127459061406d565b9150506126da565b5061275d6101c480546001019055565b612765610c14565b6101c45460405161277f92918a91859189916020016143db565b6040516020818303038152906040528051906020012092505050949350505050565b6000806127ad85612012565b90506124fd85828686613059565b6001600160a01b0381163b6128285760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016109b0565b60008051602061482783398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61286083613118565b60008251118061286d5750805b15610a4d576112628383613158565b6060600061288983613243565b9050806001600160401b038111156128a3576128a36137b3565b6040519080825280602002602001820160405280156128cc578160200160208202803683370190505b50915060005b8181101561200b576128e4848261324e565b60001c8382815181106128f9576128f9614041565b60209081029190910101528061290e8161406d565b9150506128d2565b60606129278263ffffffff1661325a565b604051602001612937919061443b565b6040516020818303038152906040529050919050565b60008060008060008060008780602001905181019061296c919061448b565b9650965096509650965096509650612998818860ff16600181111561299357612993613bee565b61335a565b6040516346154c9f60e11b81526001600160a01b03868116600483015260248201859052851690638c2a993e90604401600060405180830381600087803b1580156129e257600080fd5b505af11580156129f6573d6000803e3d6000fd5b50506040805163ffffffff86811682526001600160a01b038a811660208401528284018990526060830187905292518984169550928b1693508d16917ff475ec3ebd0a821ced53bf4d9fb1b6e5110cdf24015f2a590842816d2aced35d9181900360800190a4505050505050505050565b600080600080600080600087806020019051810190612a86919061456e565b9650965096509650965096509650612aad818860ff16600181111561299357612993613bee565b835160005b81811015612c29576000868281518110612ace57612ace614041565b602002602001015190506000868381518110612aec57612aec614041565b60209081029190910101516040516346154c9f60e11b81523060048201526024810182905290915082906001600160a01b03821690638c2a993e90604401600060405180830381600087803b158015612b4457600080fd5b505af1158015612b58573d6000803e3d6000fd5b505060405163095ea7b360e01b81526001600160a01b038d81166004830152602482018690528416925063095ea7b391506044016020604051808303816000875af1158015612bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcf9190614688565b612c135760405162461bcd60e51b8152602060048201526015602482015274185c1c1c9bdd985b081d5b9cdd58d8d95cdcd99d5b605a1b60448201526064016109b0565b5050508080612c219061406d565b915050612ab2565b506040516347202c0960e11b81526001600160a01b03871690638e40581290612c5890889088906004016146aa565b600060405180830381600087803b158015612c7257600080fd5b505af1158015612c86573d6000803e3d6000fd5b50505050866001600160a01b03168363ffffffff168b63ffffffff167f9b487637b9c49858ddbb3b811d4d1d020220e23d31d8da2e18f0df625f77166b89898988604051612cd794939291906146cf565b60405180910390a450505050505050505050565b6000611cc1838361348b565b6112628383836134a8565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166381d2ea95858585612d4b60408051602081019091526000815290565b61015f546040516001600160e01b031960e088901b168152612d7d95949392916001600160a01b031690600401614717565b602060405180830381865afa158015612d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2091906141fb565b6000612dcf6101c480546001019055565b612dd7610c14565b6101c4546040805160208101939093526bffffffffffffffffffffffff19606089811b8216928501929092529087901b166054830152606882018590526001600160e01b031960e085901b166088830152608c82015260ac01604051602081830303815290604052805190602001209050949350505050565b600054610100900460ff16612e775760405162461bcd60e51b81526004016109b0906142dc565b610f236134c5565b600054610100900460ff16612ea65760405162461bcd60e51b81526004016109b0906142dc565b6033805460ff19169055565b6000611cc183836134f5565b60606000612ecd836002614769565b612ed890600261417b565b6001600160401b03811115612eef57612eef6137b3565b6040519080825280601f01601f191660200182016040528015612f19576020820181803683370190505b509050600360fc1b81600081518110612f3457612f34614041565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612f6357612f63614041565b60200101906001600160f81b031916908160001a9053506000612f87846002614769565b612f9290600161417b565b90505b600181111561300a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612fc657612fc6614041565b1a60f81b828281518110612fdc57612fdc614041565b60200101906001600160f81b031916908160001a90535060049490941c9361300381614788565b9050612f95565b508315611cc15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016109b0565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310b83dc0848787866130a360408051602081019091526000815290565b61015f546040516001600160e01b031960e089901b1681526130d595949392916001600160a01b031690600401614717565b60206040518083038185885af11580156130f3573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906124fd91906141fb565b613121816127bb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6131c05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016109b0565b600080846001600160a01b0316846040516131db919061479f565b600060405180830381855af49150503d8060008114613216576040519150601f19603f3d011682016040523d82523d6000602084013e61321b565b606091505b50915091506124fd82826040518060600160405280602781526020016148476027913961350d565b600061096e82613546565b6000611cc18383613550565b6060816000036132815750506040805180820190915260018152600360fc1b602082015290565b8160005b81156132ab57806132958161406d565b91506132a49050600a836147d1565b9150613285565b6000816001600160401b038111156132c5576132c56137b3565b6040519080825280601f01601f1916602001820160405280156132ef576020820181803683370190505b5090505b8415610a20576133046001836147e5565b9150613311600a866147fc565b61331c90603061417b565b60f81b81838151811061333157613331614041565b60200101906001600160f81b031916908160001a905350613353600a866147d1565b94506132f3565b60008281526101c66020526040812060029081015460ff169081111561338257613382613bee565b146133cf5760405162461bcd60e51b815260206004820152601760248201527f427269646765205265717565737420457865637574656400000000000000000060448201526064016109b0565b6040805160808101825260008152426020820152908101600281526020018260018111156133ff576133ff613bee565b905260008381526101c660209081526040918290208351815490151560ff19918216178255918401516001808301919091559284015160028083018054939592949093169190849081111561345657613456613bee565b0217905550606082015160028201805461ff00191661010083600181111561348057613480613bee565b021790555050505050565b60008181526002830160205260408120819055611cc1838361357a565b60008281526002840160205260408120829055610a208484613586565b600054610100900460ff166134ec5760405162461bcd60e51b81526004016109b0906142dc565b610f233361216b565b60008181526001830160205260408120541515611cc1565b6060831561351c575081611cc1565b82511561352c5782518084602001fd5b8160405162461bcd60e51b81526004016109b09190613ec9565b600061096e825490565b600082600001828154811061356757613567614041565b9060005260206000200154905092915050565b6000611cc18383613592565b6000611cc18383613685565b6000818152600183016020526040812054801561367b5760006135b66001836147e5565b85549091506000906135ca906001906147e5565b905081811461362f5760008660000182815481106135ea576135ea614041565b906000526020600020015490508087600001848154811061360d5761360d614041565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061364057613640614810565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061096e565b600091505061096e565b60008181526001830160205260408120546136cc5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561096e565b50600061096e565b6000602082840312156136e657600080fd5b81356001600160e01b031981168114611cc157600080fd5b6001600160a01b0381168114610ddd57600080fd5b803561258e816136fe565b60006020828403121561373057600080fd5b8135611cc1816136fe565b60006020828403121561374d57600080fd5b5035919050565b63ffffffff81168114610ddd57600080fd5b60006020828403121561377857600080fd5b8135611cc181613754565b6000806040838503121561379657600080fd5b8235915060208301356137a8816136fe565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156137f1576137f16137b3565b604052919050565b60006001600160401b03821115613812576138126137b3565b5060051b60200190565b600082601f83011261382d57600080fd5b8135602061384261383d836137f9565b6137c9565b82815260059290921b8401810191818101908684111561386157600080fd5b8286015b8481101561387c5780358352918301918301613865565b509695505050505050565b6000806000806080858703121561389d57600080fd5b84356138a881613754565b93506020858101356001600160401b03808211156138c557600080fd5b818801915088601f8301126138d957600080fd5b81356138e761383d826137f9565b81815260059190911b8301840190848101908b83111561390657600080fd5b938501935b8285101561392d57843561391e816136fe565b8252938501939085019061390b565b97505050604088013592508083111561394557600080fd5b50506139538782880161381c565b92505061396260608601613713565b905092959194509250565b6020808252825182820181905260009190848201906040850190845b818110156139ab57835163ffffffff1683529284019291840191600101613989565b50909695505050505050565b600080604083850312156139ca57600080fd5b82356139d5816136fe565b91506020838101356001600160401b03808211156139f257600080fd5b818601915086601f830112613a0657600080fd5b813581811115613a1857613a186137b3565b613a2a601f8201601f191685016137c9565b91508082528784828501011115613a4057600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060008060608587031215613a7457600080fd5b8435613a7f81613754565b93506020850135925060408501356001600160401b0380821115613aa257600080fd5b818701915087601f830112613ab657600080fd5b813581811115613ac557600080fd5b886020828501011115613ad757600080fd5b95989497505060200194505050565b60008083601f840112613af857600080fd5b5081356001600160401b03811115613b0f57600080fd5b6020830191508360208260051b850101111561199757600080fd5b60008060208385031215613b3d57600080fd5b82356001600160401b03811115613b5357600080fd5b613b5f85828601613ae6565b90969095509350505050565b600080600080600060608688031215613b8357600080fd5b85356001600160401b0380821115613b9a57600080fd5b613ba689838a01613ae6565b90975095506020880135915080821115613bbf57600080fd5b50613bcc88828901613ae6565b9094509250506040860135613be081613754565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b60028110613c1457613c14613bee565b9052565b8415158152602081018490526080810160038410613c3857613c38613bee565b8360408301526124fd6060830184613c04565b60008060408385031215613c5e57600080fd5b8235613c6981613754565b946020939093013593505050565b60008060408385031215613c8a57600080fd5b8235613c95816136fe565b915060208301356137a881613754565b600080600060608486031215613cba57600080fd5b8335613cc5816136fe565b92506020840135613cd5816136fe565b91506040840135613ce581613754565b809150509250925092565b60008060008060808587031215613d0657600080fd5b8435613d1181613754565b93506020850135613d21816136fe565b9250604085013591506060850135613d38816136fe565b939692955090935050565b60008060008060408587031215613d5957600080fd5b84356001600160401b0380821115613d7057600080fd5b613d7c88838901613ae6565b90965094506020870135915080821115613d9557600080fd5b50613da287828801613ae6565b95989497509550505050565b600080600060608486031215613dc357600080fd5b8335613dce81613754565b92506020840135613dde816136fe565b929592945050506040919091013590565b600080600080600060608688031215613e0757600080fd5b8535613e12816136fe565b945060208601356001600160401b0380821115613e2e57600080fd5b613e3a89838a01613ae6565b90965094506040880135915080821115613e5357600080fd5b50613e6088828901613ae6565b969995985093965092949392505050565b60005b83811015613e8c578181015183820152602001613e74565b838111156112625750506000910152565b60008151808452613eb5816020860160208601613e71565b601f01601f19169290920160200192915050565b602081526000611cc16020830184613e9d565b60208082526027908201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060408201526673657474696e6760c81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b600081518084526020808501945080840160005b83811015613fbb5781516001600160a01b031687529582019590820190600101613f96565b509495945050505050565b600081518084526020808501945080840160005b83811015613fbb57815187529582019590820190600101613fda565b6001600160a01b038616815260a06020820181905260009061401a90830187613f82565b828103604084015261402c8187613fc6565b60608401959095525050608001529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161407f5761407f614057565b5060010190565b83815260806020820152601960808201527f546f7563616e43726f7373636861696e4d657373656e6765720000000000000060a082015260c0604082015260006140d360c0830185613e9d565b9050826060830152949350505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000821982111561418e5761418e614057565b500190565b61419d8189613c04565b6001600160a01b0387811660208301528616604082015260e0606082018190526000906141cc90830187613f82565b82810360808401526141de8187613fc6565b63ffffffff9590951660a0840152505060c0015295945050505050565b60006020828403121561420d57600080fd5b5051919050565b60ff81168114610ddd57600080fd5b60006020828403121561423557600080fd5b8135611cc181614214565b60e0810161424e828a613c04565b6001600160a01b0397881660208301529587166040820152939095166060840152608083019190915263ffffffff1660a082015260c00191909152919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161435f816017850160208801613e71565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614390816028840160208801613e71565b01602801949350505050565b600084516143ae818460208901613e71565b60609490941b6bffffffffffffffffffffffff191691909301908152601481019190915260340192915050565b8581526bffffffffffffffffffffffff198560601b1660208201526000845161440b816034850160208901613e71565b60e09490941b6001600160e01b031916603492909401918201939093526038810191909152605801949350505050565b7f4e6f20726f7574657220656e726f6c6c656420666f7220646f6d61696e3a200081526000825161447381601f850160208701613e71565b91909101601f0192915050565b805161258e81613754565b600080600080600080600060e0888a0312156144a657600080fd5b87516144b181614214565b60208901519097506144c2816136fe565b60408901519096506144d3816136fe565b60608901519095506144e4816136fe565b608089015160a08a015191955093506144fc81613754565b8092505060c0880151905092959891949750929550565b600082601f83011261452457600080fd5b8151602061453461383d836137f9565b82815260059290921b8401810191818101908684111561455357600080fd5b8286015b8481101561387c5780518352918301918301614557565b600080600080600080600060e0888a03121561458957600080fd5b875161459481614214565b809750506020808901516145a7816136fe565b60408a01519097506145b8816136fe565b60608a01519096506001600160401b03808211156145d557600080fd5b818b0191508b601f8301126145e957600080fd5b81516145f761383d826137f9565b81815260059190911b8301840190848101908e83111561461657600080fd5b938501935b8285101561463d57845161462e816136fe565b8252938501939085019061461b565b60808e0151909950945050508083111561465657600080fd5b50506146648a828b01614513565b93505061467360a08901614480565b915060c0880151905092959891949750929550565b60006020828403121561469a57600080fd5b81518015158114611cc157600080fd5b6040815260006146bd6040830185613f82565b82810360208401526124fd8185613fc6565b6001600160a01b03851681526080602082018190526000906146f390830186613f82565b82810360408401526147058186613fc6565b91505082606083015295945050505050565b63ffffffff8616815284602082015260a06040820152600061473c60a0830186613e9d565b828103606084015261474e8186613e9d565b91505060018060a01b03831660808301529695505050505050565b600081600019048311821515161561478357614783614057565b500290565b60008161479757614797614057565b506000190190565b600082516147b1818460208701613e71565b9190910192915050565b634e487b7160e01b600052601260045260246000fd5b6000826147e0576147e06147bb565b500490565b6000828210156147f7576147f7614057565b500390565b60008261480b5761480b6147bb565b500690565b634e487b7160e01b600052603160045260246000fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208cb6e630ba7eec2eb5686ce136896cdc74ce9605991aff8a5cdd2cb793f2bc8764736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTokenPair(address,address,uint32)": {
        "details": "Called by owner to add or map home token address to remote token address. Changing the remote token address can only be done within a 7 day period, after first setting it.",
        "params": {
          "domain": "domain ID of the remote chain whose token is being mapped",
          "homeToken": "token address on home chain",
          "remoteToken": "token address on remote chain"
        }
      },
      "batchAddTokenPair(address[],address[],uint32)": {
        "details": "Called by owner to add or map home token addresses to remote token addresses.",
        "params": {
          "domain": "domain ID of the remote chain whose tokens are being mapped",
          "homeTokens": "token addresses on home chain",
          "remoteTokens_": "token addresses on remote chain"
        }
      },
      "bridgeTCO2s(uint32,address[],uint256[],address)": {
        "params": {
          "amounts": "the amounts of tokens to be bridged",
          "destinationDomain": "The domain to send the tokens to",
          "recipient": "the recipient of tokens in the destination domain",
          "tokens": "addresses of tokens to be bridged"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "params": {
          "_domain": "The domain of the remote Application Router",
          "_router": "The address of the remote Application Router"
        }
      },
      "enrollRemoteRouters(uint32[],bytes32[])": {
        "params": {
          "_addresses": "The addresses of the remote Application Routers",
          "_domains": "The domains of the remote Application Routers"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "handle(uint32,bytes32,bytes)": {
        "params": {
          "_message": "The message",
          "_origin": "The origin domain",
          "_sender": "The sender address"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "when invoked by owner it Pauses the cross chain bridging logic to interact with abacus"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "quoteBridgeTCO2sFee(uint32,address[],uint256[],address)": {
        "details": "Use the result of this function as msg.value when calling `transferTokens` or `transferTokensToRecipient`.",
        "params": {
          "amounts": "the amount of tokens to be bridged",
          "destinationDomain": "The domain to send the message to",
          "recipient": "the recipient of tokens in the destination domain",
          "tokens": "address of token to be bridged"
        },
        "returns": {
          "_0": "The required fee for a token transfer"
        }
      },
      "quoteTokenTransferFee(uint32,address,uint256,address)": {
        "details": "Use the result of this function as msg.value when calling `transferTokens` or `transferTokensToRecipient`.",
        "params": {
          "amount": "the amount of tokens to be bridged",
          "destinationDomain": "The domain to send the message to",
          "recipient": "the recipient of tokens in the destination domain",
          "token": "address of token to be bridged"
        },
        "returns": {
          "_0": "The required fee for a token transfer"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "routers(uint32)": {
        "details": "Returns 0 address if no router is enrolled for the given domain",
        "params": {
          "_domain": "The remote domain ID."
        },
        "returns": {
          "_0": "router The address of the Router contract for the given domain"
        }
      },
      "setHook(address)": {
        "params": {
          "_hook": "The address of the hook contract."
        }
      },
      "setInterchainSecurityModule(address)": {
        "params": {
          "_module": "The address of the interchain security module contract."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferTokens(uint32,address,uint256)": {
        "params": {
          "amount": "the amount of tokens to be bridged",
          "destinationDomain": "The domain to send the message to",
          "token": "address of token to be bridged"
        }
      },
      "transferTokensToRecipient(uint32,address,uint256,address)": {
        "params": {
          "amount": "the amount of tokens to be bridged",
          "destinationDomain": "The domain to send the tokens to",
          "recipient": "the recipient of tokens in the destination domain",
          "token": "address of token to be bridged"
        }
      },
      "unenrollRemoteRouter(uint32)": {
        "params": {
          "_domain": "The domain of the remote Application Router"
        }
      },
      "unenrollRemoteRouters(uint32[])": {
        "params": {
          "_domains": "The domains of the remote Application Routers"
        }
      },
      "unpause()": {
        "details": "when invoked by owner it unpauses the cross chain bridging logic to interact with abacus"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "EIP712DomainHash": {
        "details": "EIP712Domain hash used in generating request hashes"
      },
      "VERSION": {
        "details": "Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addTokenPair(address,address,uint32)": {
        "notice": "Adds new token pair than can be bridged"
      },
      "batchAddTokenPair(address[],address[],uint32)": {
        "notice": "Adds a new set of token pairs than can be bridged"
      },
      "bridgeTCO2s(uint32,address[],uint256[],address)": {
        "notice": "Bridges multiple tokens to a recipient in the destination domain"
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "notice": "Register the address of a Router contract for the same Application on a remote chain"
      },
      "enrollRemoteRouters(uint32[],bytes32[])": {
        "notice": "Batch version of `enrollRemoteRouter`"
      },
      "handle(uint32,bytes32,bytes)": {
        "notice": "Handles an incoming message"
      },
      "pause()": {
        "notice": "Pauses the cross chain bridge"
      },
      "quoteBridgeTCO2sFee(uint32,address[],uint256[],address)": {
        "notice": "Fetch the amount that needs to be used as a fee in order to to pay for the gas of the transfer on the destination domain."
      },
      "quoteTokenTransferFee(uint32,address,uint256,address)": {
        "notice": "Fetch the amount that needs to be used as a fee in order to to pay for the gas of the transfer on the destination domain."
      },
      "routers(uint32)": {
        "notice": "Returns the address of the Router contract for the given domain"
      },
      "setHook(address)": {
        "notice": "Sets the address of the application's custom hook."
      },
      "setInterchainSecurityModule(address)": {
        "notice": "Sets the address of the application's custom interchain security module."
      },
      "transferTokens(uint32,address,uint256)": {
        "notice": "Transfer tokens to a recipient in the destination domain. The recipient of the tokens in the destination domain is the same as msg.sender in this context."
      },
      "transferTokensToRecipient(uint32,address,uint256,address)": {
        "notice": "Transfer tokens to a recipient in the destination domain"
      },
      "unenrollRemoteRouter(uint32)": {
        "notice": "Unregister the domain"
      },
      "unenrollRemoteRouters(uint32[])": {
        "notice": "Batch version of `unenrollRemoteRouter`"
      },
      "unpause()": {
        "notice": "Unpauses the cross chain bridge"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2390,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2393,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7094,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2682,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 2771,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2372,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2660,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7401,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1497,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1492_storage)"
      },
      {
        "astId": 1796,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1881,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "_owner",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 1993,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 26,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "hook",
        "offset": 0,
        "slot": "351",
        "type": "t_contract(IPostDispatchHook)912"
      },
      {
        "astId": 29,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "interchainSecurityModule",
        "offset": 0,
        "slot": "352",
        "type": "t_contract(IInterchainSecurityModule)681"
      },
      {
        "astId": 33,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__GAP",
        "offset": 0,
        "slot": "353",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 296,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "_routers",
        "offset": 0,
        "slot": "401",
        "type": "t_struct(UintToBytes32Map)928_storage"
      },
      {
        "astId": 300,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "__GAP",
        "offset": 0,
        "slot": "404",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 22165,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "nonce",
        "offset": 0,
        "slot": "452",
        "type": "t_uint256"
      },
      {
        "astId": 22167,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "DEPRECATED_DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "453",
        "type": "t_bytes32"
      },
      {
        "astId": 22173,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "requests",
        "offset": 0,
        "slot": "454",
        "type": "t_mapping(t_bytes32,t_struct(BridgeRequest)22154_storage)"
      },
      {
        "astId": 22181,
        "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
        "label": "_remoteTokens",
        "offset": 0,
        "slot": "455",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(RemoteTokenInformation)22143_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IInterchainSecurityModule)681": {
        "encoding": "inplace",
        "label": "contract IInterchainSecurityModule",
        "numberOfBytes": "20"
      },
      "t_contract(IPostDispatchHook)912": {
        "encoding": "inplace",
        "label": "contract IPostDispatchHook",
        "numberOfBytes": "20"
      },
      "t_enum(BridgeRequestType)22158": {
        "encoding": "inplace",
        "label": "enum BridgeRequestType",
        "numberOfBytes": "1"
      },
      "t_enum(MessageType)22161": {
        "encoding": "inplace",
        "label": "enum MessageType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(RemoteTokenInformation)22143_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct RemoteTokenInformation))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(RemoteTokenInformation)22143_storage)"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(BridgeRequest)22154_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct BridgeRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(BridgeRequest)22154_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1492_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1492_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_struct(RemoteTokenInformation)22143_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct RemoteTokenInformation)",
        "numberOfBytes": "32",
        "value": "t_struct(RemoteTokenInformation)22143_storage"
      },
      "t_struct(BridgeRequest)22154_storage": {
        "encoding": "inplace",
        "label": "struct BridgeRequest",
        "members": [
          {
            "astId": 22145,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "isReverted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 22147,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22150,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "requestType",
            "offset": 0,
            "slot": "2",
            "type": "t_enum(BridgeRequestType)22158"
          },
          {
            "astId": 22153,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "messageType",
            "offset": 1,
            "slot": "2",
            "type": "t_enum(MessageType)22161"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)12743_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 12742,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)12549_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)11825_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 11820,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)12743_storage"
          },
          {
            "astId": 11824,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RemoteTokenInformation)22143_storage": {
        "encoding": "inplace",
        "label": "struct RemoteTokenInformation",
        "members": [
          {
            "astId": 22139,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 22142,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "timer",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)1492_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 1489,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1491,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)12549_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 12544,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 12548,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToBytes32Map)928_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMapExtended.UintToBytes32Map",
        "members": [
          {
            "astId": 927,
            "contract": "contracts/cross-chain/ToucanCrosschainMessenger.sol:ToucanCrosschainMessenger",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)11825_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}