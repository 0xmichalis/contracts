{
  "address": "0x60F8CCDce379307AD3cC2c9a940D10C8d2B0152d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "PRBMath_MulDiv18_Overflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath_MulDiv_Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMath_SD59x18_Div_InputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "SD59x18",
          "name": "x",
          "type": "int256"
        },
        {
          "internalType": "SD59x18",
          "name": "y",
          "type": "int256"
        }
      ],
      "name": "PRBMath_SD59x18_Div_Overflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "SD59x18",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "PRBMath_SD59x18_IntoUint256_Underflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "SD59x18",
          "name": "x",
          "type": "int256"
        }
      ],
      "name": "PRBMath_SD59x18_Log_InputTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMath_SD59x18_Mul_InputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "SD59x18",
          "name": "x",
          "type": "int256"
        },
        {
          "internalType": "SD59x18",
          "name": "y",
          "type": "int256"
        }
      ],
      "name": "PRBMath_SD59x18_Mul_Overflow",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "depositFeeRatioScale",
          "type": "int256"
        }
      ],
      "name": "DepositFeeRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "depositFeeScale",
          "type": "int256"
        }
      ],
      "name": "DepositFeeScaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "dustAssetRedemptionRelativeFee",
          "type": "int256"
        }
      ],
      "name": "DustAssetRedemptionRelativeFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "FeeSetup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "redemptionFeeScale",
          "type": "int256"
        }
      ],
      "name": "RedemptionFeeScaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "redemptionFeeShift",
          "type": "int256"
        }
      ],
      "name": "RedemptionFeeShift",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "singleAssetDepositRelativeFee",
          "type": "int256"
        }
      ],
      "name": "SingleAssetDepositRelativeFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "singleAssetRedemptionRelativeFee",
          "type": "int256"
        }
      ],
      "name": "SingleAssetRedemptionRelativeFeeUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tco2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct FeeDistribution",
          "name": "feeDistribution",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "redemptionAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "calculateRedemptionFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "recipients",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct FeeDistribution",
          "name": "feeDistribution",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFeeRatioScale",
      "outputs": [
        {
          "internalType": "SD59x18",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositFeeScale",
      "outputs": [
        {
          "internalType": "SD59x18",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dustAssetRedemptionRelativeFee",
      "outputs": [
        {
          "internalType": "SD59x18",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "feeSetup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeSetup",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionFeeConstant",
      "outputs": [
        {
          "internalType": "SD59x18",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionFeeScale",
      "outputs": [
        {
          "internalType": "SD59x18",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redemptionFeeShift",
      "outputs": [
        {
          "internalType": "SD59x18",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_depositFeeRatioScale",
          "type": "int256"
        }
      ],
      "name": "setDepositFeeRatioScale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_depositFeeScale",
          "type": "int256"
        }
      ],
      "name": "setDepositFeeScale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_dustAssetRedemptionRelativeFee",
          "type": "int256"
        }
      ],
      "name": "setDustAssetRedemptionRelativeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_redemptionFeeScale",
          "type": "int256"
        }
      ],
      "name": "setRedemptionFeeScale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_redemptionFeeShift",
          "type": "int256"
        }
      ],
      "name": "setRedemptionFeeShift",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_singleAssetDepositRelativeFee",
          "type": "int256"
        }
      ],
      "name": "setSingleAssetDepositRelativeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_singleAssetRedemptionRelativeFee",
          "type": "int256"
        }
      ],
      "name": "setSingleAssetRedemptionRelativeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "singleAssetDepositRelativeFee",
      "outputs": [
        {
          "internalType": "SD59x18",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "singleAssetRedemptionRelativeFee",
      "outputs": [
        {
          "internalType": "SD59x18",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x750ebc4975ad99d6a5a8ff2d911db65b8152d7bc6e7a9a11005290121b07f202",
  "receipt": {
    "to": null,
    "from": "0x3Db779C4b9Dba398a3ec6b4284FBC2E20f7d39b0",
    "contractAddress": "0x60F8CCDce379307AD3cC2c9a940D10C8d2B0152d",
    "transactionIndex": 11,
    "gasUsed": "2943077",
    "logsBloom": "0x
    "blockHash": "0x6bb910011619c726e2b46775a717766abe007ff147070194b65ae67e4d2935ff",
    "transactionHash": "0x750ebc4975ad99d6a5a8ff2d911db65b8152d7bc6e7a9a11005290121b07f202",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 46461025,
        "transactionHash": "0x750ebc4975ad99d6a5a8ff2d911db65b8152d7bc6e7a9a11005290121b07f202",
        "address": "0x60F8CCDce379307AD3cC2c9a940D10C8d2B0152d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003db779c4b9dba398a3ec6b4284fbc2e20f7d39b0"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0x6bb910011619c726e2b46775a717766abe007ff147070194b65ae67e4d2935ff"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 46461025,
        "transactionHash": "0x750ebc4975ad99d6a5a8ff2d911db65b8152d7bc6e7a9a11005290121b07f202",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003db779c4b9dba398a3ec6b4284fbc2e20f7d39b0",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000faf11c4b28b0000000000000000000000000000000000000000000000000015d401bf090189f70000000000000000000000000000000000000000000006c2d51e70af321ac04700000000000000000000000000000000000000000000000015c452ad444efef70000000000000000000000000000000000000000000006c2d52e1fc0f6cd4b47",
        "logIndex": 27,
        "blockHash": "0x6bb910011619c726e2b46775a717766abe007ff147070194b65ae67e4d2935ff"
      }
    ],
    "blockNumber": 46461025,
    "cumulativeGasUsed": "4242081",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "da3a730f01a9bec306f2cb8c04f42197",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv18_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath_MulDiv_Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Div_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Div_Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_IntoUint256_Underflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Log_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMath_SD59x18_Mul_InputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SD59x18\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"SD59x18\",\"name\":\"y\",\"type\":\"int256\"}],\"name\":\"PRBMath_SD59x18_Mul_Overflow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"depositFeeRatioScale\",\"type\":\"int256\"}],\"name\":\"DepositFeeRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"depositFeeScale\",\"type\":\"int256\"}],\"name\":\"DepositFeeScaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"dustAssetRedemptionRelativeFee\",\"type\":\"int256\"}],\"name\":\"DustAssetRedemptionRelativeFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"FeeSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"redemptionFeeScale\",\"type\":\"int256\"}],\"name\":\"RedemptionFeeScaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"redemptionFeeShift\",\"type\":\"int256\"}],\"name\":\"RedemptionFeeShift\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"singleAssetDepositRelativeFee\",\"type\":\"int256\"}],\"name\":\"SingleAssetDepositRelativeFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"singleAssetRedemptionRelativeFee\",\"type\":\"int256\"}],\"name\":\"SingleAssetRedemptionRelativeFeeUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tco2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFees\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FeeDistribution\",\"name\":\"feeDistribution\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redemptionAmounts\",\"type\":\"uint256[]\"}],\"name\":\"calculateRedemptionFees\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FeeDistribution\",\"name\":\"feeDistribution\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeRatioScale\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFeeScale\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dustAssetRedemptionRelativeFee\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"feeSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeSetup\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFeeConstant\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFeeScale\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFeeShift\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_depositFeeRatioScale\",\"type\":\"int256\"}],\"name\":\"setDepositFeeRatioScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_depositFeeScale\",\"type\":\"int256\"}],\"name\":\"setDepositFeeScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_dustAssetRedemptionRelativeFee\",\"type\":\"int256\"}],\"name\":\"setDustAssetRedemptionRelativeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_redemptionFeeScale\",\"type\":\"int256\"}],\"name\":\"setRedemptionFeeScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_redemptionFeeShift\",\"type\":\"int256\"}],\"name\":\"setRedemptionFeeShift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_singleAssetDepositRelativeFee\",\"type\":\"int256\"}],\"name\":\"setSingleAssetDepositRelativeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_singleAssetRedemptionRelativeFee\",\"type\":\"int256\"}],\"name\":\"setSingleAssetRedemptionRelativeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleAssetDepositRelativeFee\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleAssetRedemptionRelativeFee\",\"outputs\":[{\"internalType\":\"SD59x18\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Neutral Labs Inc.\",\"details\":\"It implements the IFeeCalculator interface.\",\"kind\":\"dev\",\"methods\":{\"calculateDepositFees(address,address,uint256)\":{\"params\":{\"depositAmount\":\"The amount to be deposited.\",\"pool\":\"The address of the pool.\",\"tco2\":\"The address of the TCO2 token.\"},\"returns\":{\"feeDistribution\":\"How the fee is meant to be distributed among the fee recipients.\"}},\"calculateRedemptionFees(address,address[],uint256[])\":{\"params\":{\"pool\":\"The address of the pool.\",\"redemptionAmounts\":\"The amounts to be redeemed.\",\"tco2s\":\"The addresses of the TCO2 token.\"},\"returns\":{\"feeDistribution\":\"How the fee is meant to be distributed among the fee recipients.\"}},\"feeSetup(address[],uint256[])\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"recipients\":\"The addresses of the fee recipients.\",\"shares\":\"The share of the fee each recipient should receive.\"}},\"getFeeSetup()\":{\"returns\":{\"recipients\":\"shares The fee recipients and their share of the total fee.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDepositFeeRatioScale(int256)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"_depositFeeRatioScale\":\"The new deposit fee ratio scale.\"}},\"setDepositFeeScale(int256)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"_depositFeeScale\":\"The new deposit fee scale.\"}},\"setDustAssetRedemptionRelativeFee(int256)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"_dustAssetRedemptionRelativeFee\":\"The new dust asset redemption relative fee.\"}},\"setRedemptionFeeScale(int256)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"_redemptionFeeScale\":\"The new redemption fee scale.\"}},\"setRedemptionFeeShift(int256)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"_redemptionFeeShift\":\"The new redemption fee shift.\"}},\"setSingleAssetDepositRelativeFee(int256)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"_singleAssetDepositRelativeFee\":\"The new single asset deposit relative fee.\"}},\"setSingleAssetRedemptionRelativeFee(int256)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"_singleAssetRedemptionRelativeFee\":\"The new single asset redemption relative fee.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"FeeCalculator\",\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath_MulDiv18_Overflow(uint256,uint256)\":[{\"notice\":\"Thrown when the resultant value in {mulDiv18} overflows uint256.\"}],\"PRBMath_MulDiv_Overflow(uint256,uint256,uint256)\":[{\"notice\":\"Thrown when the resultant value in {mulDiv} overflows uint256.\"}],\"PRBMath_SD59x18_Div_InputTooSmall()\":[{\"notice\":\"Thrown when dividing two numbers and one of them is `MIN_SD59x18`.\"}],\"PRBMath_SD59x18_Div_Overflow(int256,int256)\":[{\"notice\":\"Thrown when dividing two numbers and one of the intermediary unsigned results overflows SD59x18.\"}],\"PRBMath_SD59x18_IntoUint256_Underflow(int256)\":[{\"notice\":\"Thrown when trying to cast a UD60x18 number that doesn't fit in uint256.\"}],\"PRBMath_SD59x18_Log_InputTooSmall(int256)\":[{\"notice\":\"Thrown when taking the logarithm of a number less than or equal to zero.\"}],\"PRBMath_SD59x18_Mul_InputTooSmall()\":[{\"notice\":\"Thrown when multiplying two numbers and one of the inputs is `MIN_SD59x18`.\"}],\"PRBMath_SD59x18_Mul_Overflow(int256,int256)\":[{\"notice\":\"Thrown when multiplying two numbers and the intermediary absolute result overflows SD59x18.\"}]},\"kind\":\"user\",\"methods\":{\"calculateDepositFees(address,address,uint256)\":{\"notice\":\"Calculates the deposit fee for a given amount.\"},\"calculateRedemptionFees(address,address[],uint256[])\":{\"notice\":\"Calculates the redemption fees for a given amount.\"},\"feeSetup(address[],uint256[])\":{\"notice\":\"Sets up the fee distribution among recipients.\"},\"getFeeSetup()\":{\"notice\":\"Returns the current fee setup.\"},\"setDepositFeeRatioScale(int256)\":{\"notice\":\"Sets the deposit fee ratio scale.\"},\"setDepositFeeScale(int256)\":{\"notice\":\"Sets the deposit fee scale.\"},\"setDustAssetRedemptionRelativeFee(int256)\":{\"notice\":\"Sets the dust asset redemption relative fee.\"},\"setRedemptionFeeScale(int256)\":{\"notice\":\"Sets the redemption fee scale.\"},\"setRedemptionFeeShift(int256)\":{\"notice\":\"Sets the redemption fee shift.\"},\"setSingleAssetDepositRelativeFee(int256)\":{\"notice\":\"Sets the single asset deposit relative fee.\"},\"setSingleAssetRedemptionRelativeFee(int256)\":{\"notice\":\"Sets the single asset redemption relative fee.\"}},\"notice\":\"This contract calculates deposit and redemption fees for a given pool.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol\":\"FeeCalculator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@prb/math/src/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n// Common.sol\\n//\\n// Common mathematical functions needed by both SD59x18 and UD60x18. Note that these global functions do not\\n// always operate with SD59x18 and UD60x18 numbers.\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                CUSTOM ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the resultant value in {mulDiv} overflows uint256.\\nerror PRBMath_MulDiv_Overflow(uint256 x, uint256 y, uint256 denominator);\\n\\n/// @notice Thrown when the resultant value in {mulDiv18} overflows uint256.\\nerror PRBMath_MulDiv18_Overflow(uint256 x, uint256 y);\\n\\n/// @notice Thrown when one of the inputs passed to {mulDivSigned} is `type(int256).min`.\\nerror PRBMath_MulDivSigned_InputTooSmall();\\n\\n/// @notice Thrown when the resultant value in {mulDivSigned} overflows int256.\\nerror PRBMath_MulDivSigned_Overflow(int256 x, int256 y);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CONSTANTS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev The maximum value a uint128 number can have.\\nuint128 constant MAX_UINT128 = type(uint128).max;\\n\\n/// @dev The maximum value a uint40 number can have.\\nuint40 constant MAX_UINT40 = type(uint40).max;\\n\\n/// @dev The unit number, which the decimal precision of the fixed-point types.\\nuint256 constant UNIT = 1e18;\\n\\n/// @dev The unit number inverted mod 2^256.\\nuint256 constant UNIT_INVERSE = 78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n/// @dev The the largest power of two that divides the decimal value of `UNIT`. The logarithm of this value is the least significant\\n/// bit in the binary representation of `UNIT`.\\nuint256 constant UNIT_LPOTD = 262144;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n/// @dev Has to use 192.64-bit fixed-point numbers. See https://ethereum.stackexchange.com/a/96594/24693.\\n/// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(uint256 x) pure returns (uint256 result) {\\n    unchecked {\\n        // Start from 0.5 in the 192.64-bit fixed-point format.\\n        result = 0x800000000000000000000000000000000000000000000000;\\n\\n        // The following logic multiplies the result by $\\\\sqrt{2^{-i}}$ when the bit at position i is 1. Key points:\\n        //\\n        // 1. Intermediate results will not overflow, as the starting point is 2^191 and all magic factors are under 2^65.\\n        // 2. The rationale for organizing the if statements into groups of 8 is gas savings. If the result of performing\\n        // a bitwise AND operation between x and any value in the array [0x80; 0x40; 0x20; 0x10; 0x08; 0x04; 0x02; 0x01] is 1,\\n        // we know that `x & 0xFF` is also 1.\\n        if (x & 0xFF00000000000000 > 0) {\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF000000000000 > 0) {\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000000000 > 0) {\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00000000 > 0) {\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF000000 > 0) {\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000 > 0) {\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00 > 0) {\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF > 0) {\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n        }\\n\\n        // In the code snippet below, two operations are executed simultaneously:\\n        //\\n        // 1. The result is multiplied by $(2^n + 1)$, where $2^n$ represents the integer part, and the additional 1\\n        // accounts for the initial guess of 0.5. This is achieved by subtracting from 191 instead of 192.\\n        // 2. The result is then converted to an unsigned 60.18-decimal fixed-point format.\\n        //\\n        // The underlying logic is based on the relationship $2^{191-ip} = 2^{ip} / 2^{191}$, where $ip$ denotes the,\\n        // integer part, $2^n$.\\n        result *= UNIT;\\n        result >>= (191 - (x >> 64));\\n    }\\n}\\n\\n/// @notice Finds the zero-based index of the first 1 in the binary representation of x.\\n///\\n/// @dev See the note on \\\"msb\\\" in this Wikipedia article: https://en.wikipedia.org/wiki/Find_first_set\\n///\\n/// Each step in this implementation is equivalent to this high-level code:\\n///\\n/// ```solidity\\n/// if (x >= 2 ** 128) {\\n///     x >>= 128;\\n///     result += 128;\\n/// }\\n/// ```\\n///\\n/// Where 128 is replaced with each respective power of two factor. See the full high-level implementation here:\\n/// https://gist.github.com/PaulRBerg/f932f8693f2733e30c4d479e8e980948\\n///\\n/// The Yul instructions used below are:\\n///\\n/// - \\\"gt\\\" is \\\"greater than\\\"\\n/// - \\\"or\\\" is the OR bitwise operator\\n/// - \\\"shl\\\" is \\\"shift left\\\"\\n/// - \\\"shr\\\" is \\\"shift right\\\"\\n///\\n/// @param x The uint256 number for which to find the index of the most significant bit.\\n/// @return result The index of the most significant bit as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction msb(uint256 x) pure returns (uint256 result) {\\n    // 2^128\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^64\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^32\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(5, gt(x, 0xFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^16\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(4, gt(x, 0xFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^8\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(3, gt(x, 0xFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^4\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(2, gt(x, 0xF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^2\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(1, gt(x, 0x3))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^1\\n    // No need to shift x any more.\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := gt(x, 0x1)\\n        result := or(result, factor)\\n    }\\n}\\n\\n/// @notice Calculates x*y\\u00f7denominator with 512-bit precision.\\n///\\n/// @dev Credits to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - The denominator must not be zero.\\n/// - The result must fit in uint256.\\n///\\n/// @param x The multiplicand as a uint256.\\n/// @param y The multiplier as a uint256.\\n/// @param denominator The divisor as a uint256.\\n/// @return result The result as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDiv(uint256 x, uint256 y, uint256 denominator) pure returns (uint256 result) {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512-bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / denominator;\\n        }\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    if (prod1 >= denominator) {\\n        revert PRBMath_MulDiv_Overflow(x, y, denominator);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // 512 by 256 division\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        // Compute remainder using the mulmod Yul instruction.\\n        remainder := mulmod(x, y, denominator)\\n\\n        // Subtract 256 bit number from 512-bit number.\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n    }\\n\\n    unchecked {\\n        // Calculate the largest power of two divisor of the denominator using the unary operator ~. This operation cannot overflow\\n        // because the denominator cannot be zero at this point in the function execution. The result is always >= 1.\\n        // For more detail, see https://cs.stackexchange.com/q/138556/92363.\\n        uint256 lpotdod = denominator & (~denominator + 1);\\n        uint256 flippedLpotdod;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            // Factor powers of two out of denominator.\\n            denominator := div(denominator, lpotdod)\\n\\n            // Divide [prod1 prod0] by lpotdod.\\n            prod0 := div(prod0, lpotdod)\\n\\n            // Get the flipped value `2^256 / lpotdod`. If the `lpotdod` is zero, the flipped value is one.\\n            // `sub(0, lpotdod)` produces the two's complement version of `lpotdod`, which is equivalent to flipping all the bits.\\n            // However, `div` interprets this value as an unsigned value: https://ethereum.stackexchange.com/q/147168/24693\\n            flippedLpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n        }\\n\\n        // Shift in bits from prod1 into prod0.\\n        prod0 |= prod1 * flippedLpotdod;\\n\\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n        // four bits. That is, denominator * inv = 1 mod 2^4.\\n        uint256 inverse = (3 * denominator) ^ 2;\\n\\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n        // in modular arithmetic, doubling the correct bits in each step.\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inverse;\\n    }\\n}\\n\\n/// @notice Calculates x*y\\u00f71e18 with 512-bit precision.\\n///\\n/// @dev A variant of {mulDiv} with constant folding, i.e. in which the denominator is hard coded to 1e18.\\n///\\n/// Notes:\\n/// - The body is purposely left uncommented; to understand how this works, see the documentation in {mulDiv}.\\n/// - The result is rounded toward zero.\\n/// - We take as an axiom that the result cannot be `MAX_UINT256` when x and y solve the following system of equations:\\n///\\n/// $$\\n/// \\\\begin{cases}\\n///     x * y = MAX\\\\_UINT256 * UNIT \\\\\\\\\\n///     (x * y) \\\\% UNIT \\\\geq \\\\frac{UNIT}{2}\\n/// \\\\end{cases}\\n/// $$\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {mulDiv}.\\n/// - The result must fit in uint256.\\n///\\n/// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n/// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDiv18(uint256 x, uint256 y) pure returns (uint256 result) {\\n    uint256 prod0;\\n    uint256 prod1;\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / UNIT;\\n        }\\n    }\\n\\n    if (prod1 >= UNIT) {\\n        revert PRBMath_MulDiv18_Overflow(x, y);\\n    }\\n\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        remainder := mulmod(x, y, UNIT)\\n        result :=\\n            mul(\\n                or(\\n                    div(sub(prod0, remainder), UNIT_LPOTD),\\n                    mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, UNIT_LPOTD), UNIT_LPOTD), 1))\\n                ),\\n                UNIT_INVERSE\\n            )\\n    }\\n}\\n\\n/// @notice Calculates x*y\\u00f7denominator with 512-bit precision.\\n///\\n/// @dev This is an extension of {mulDiv} for signed numbers, which works by computing the signs and the absolute values separately.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {mulDiv}.\\n/// - None of the inputs can be `type(int256).min`.\\n/// - The result must fit in int256.\\n///\\n/// @param x The multiplicand as an int256.\\n/// @param y The multiplier as an int256.\\n/// @param denominator The divisor as an int256.\\n/// @return result The result as an int256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDivSigned(int256 x, int256 y, int256 denominator) pure returns (int256 result) {\\n    if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n        revert PRBMath_MulDivSigned_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x, y and the denominator.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    uint256 dAbs;\\n    unchecked {\\n        xAbs = x < 0 ? uint256(-x) : uint256(x);\\n        yAbs = y < 0 ? uint256(-y) : uint256(y);\\n        dAbs = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n    }\\n\\n    // Compute the absolute value of x*y\\u00f7denominator. The result must fit in int256.\\n    uint256 resultAbs = mulDiv(xAbs, yAbs, dAbs);\\n    if (resultAbs > uint256(type(int256).max)) {\\n        revert PRBMath_MulDivSigned_Overflow(x, y);\\n    }\\n\\n    // Get the signs of x, y and the denominator.\\n    uint256 sx;\\n    uint256 sy;\\n    uint256 sd;\\n    assembly (\\\"memory-safe\\\") {\\n        // \\\"sgt\\\" is the \\\"signed greater than\\\" assembly instruction and \\\"sub(0,1)\\\" is -1 in two's complement.\\n        sx := sgt(x, sub(0, 1))\\n        sy := sgt(y, sub(0, 1))\\n        sd := sgt(denominator, sub(0, 1))\\n    }\\n\\n    // XOR over sx, sy and sd. What this does is to check whether there are 1 or 3 negative signs in the inputs.\\n    // If there are, the result should be negative. Otherwise, it should be positive.\\n    unchecked {\\n        result = sx ^ sy ^ sd == 0 ? -int256(resultAbs) : int256(resultAbs);\\n    }\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - If x is not a perfect square, the result is rounded down.\\n/// - Credits to OpenZeppelin for the explanations in comments below.\\n///\\n/// @param x The uint256 number for which to calculate the square root.\\n/// @return result The result as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(uint256 x) pure returns (uint256 result) {\\n    if (x == 0) {\\n        return 0;\\n    }\\n\\n    // For our first guess, we calculate the biggest power of 2 which is smaller than the square root of x.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of x is a power of 2 such that we have:\\n    //\\n    // $$\\n    // msb(x) <= x <= 2*msb(x)$\\n    // $$\\n    //\\n    // We write $msb(x)$ as $2^k$, and we get:\\n    //\\n    // $$\\n    // k = log_2(x)\\n    // $$\\n    //\\n    // Thus, we can write the initial inequality as:\\n    //\\n    // $$\\n    // 2^{log_2(x)} <= x <= 2*2^{log_2(x)+1} \\\\\\\\\\n    // sqrt(2^k) <= sqrt(x) < sqrt(2^{k+1}) \\\\\\\\\\n    // 2^{k/2} <= sqrt(x) < 2^{(k+1)/2} <= 2^{(k/2)+1}\\n    // $$\\n    //\\n    // Consequently, $2^{log_2(x) /2} is a good first approximation of sqrt(x) with at least one correct bit.\\n    uint256 xAux = uint256(x);\\n    result = 1;\\n    if (xAux >= 2 ** 128) {\\n        xAux >>= 128;\\n        result <<= 64;\\n    }\\n    if (xAux >= 2 ** 64) {\\n        xAux >>= 64;\\n        result <<= 32;\\n    }\\n    if (xAux >= 2 ** 32) {\\n        xAux >>= 32;\\n        result <<= 16;\\n    }\\n    if (xAux >= 2 ** 16) {\\n        xAux >>= 16;\\n        result <<= 8;\\n    }\\n    if (xAux >= 2 ** 8) {\\n        xAux >>= 8;\\n        result <<= 4;\\n    }\\n    if (xAux >= 2 ** 4) {\\n        xAux >>= 4;\\n        result <<= 2;\\n    }\\n    if (xAux >= 2 ** 2) {\\n        result <<= 1;\\n    }\\n\\n    // At this point, `result` is an estimation with at least one bit of precision. We know the true value has at\\n    // most 128 bits, since it is the square root of a uint256. Newton's method converges quadratically (precision\\n    // doubles at every iteration). We thus need at most 7 iteration to turn our partial result with one bit of\\n    // precision into the expected uint128 result.\\n    unchecked {\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n\\n        // If x is not a perfect square, round the result toward zero.\\n        uint256 roundedResult = x / result;\\n        if (result >= roundedResult) {\\n            result = roundedResult;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x70b3a76443312b2c6c500996306a18e3d91e5d56fed0d898d98ca0bfb6225053\",\"license\":\"MIT\"},\"@prb/math/src/SD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n/*\\n\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551 \\u255a\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551 \\u255a\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551 \\u2588\\u2588\\u2554\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n*/\\n\\nimport \\\"./sd59x18/Casting.sol\\\";\\nimport \\\"./sd59x18/Constants.sol\\\";\\nimport \\\"./sd59x18/Conversions.sol\\\";\\nimport \\\"./sd59x18/Errors.sol\\\";\\nimport \\\"./sd59x18/Helpers.sol\\\";\\nimport \\\"./sd59x18/Math.sol\\\";\\nimport \\\"./sd59x18/ValueType.sol\\\";\\n\",\"keccak256\":\"0xff25fe75f8e77d4c839fbe69198d273039575fa72f31ce9725bcacb80db65461\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an SD1x18 number into SD59x18.\\n/// @dev There is no overflow check because the domain of SD1x18 is a subset of SD59x18.\\nfunction intoSD59x18(SD1x18 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(int256(SD1x18.unwrap(x)));\\n}\\n\\n/// @notice Casts an SD1x18 number into UD2x18.\\n/// - x must be positive.\\nfunction intoUD2x18(SD1x18 x) pure returns (UD2x18 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUD2x18_Underflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into UD60x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUD60x18(SD1x18 x) pure returns (UD60x18 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUD60x18_Underflow(x);\\n    }\\n    result = UD60x18.wrap(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint256.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint256(SD1x18 x) pure returns (uint256 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint256_Underflow(x);\\n    }\\n    result = uint256(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint128(SD1x18 x) pure returns (uint128 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint128_Underflow(x);\\n    }\\n    result = uint128(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(SD1x18 x) pure returns (uint40 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint40_Underflow(x);\\n    }\\n    if (xInt > int64(uint64(Common.MAX_UINT40))) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint40_Overflow(x);\\n    }\\n    result = uint40(uint64(xInt));\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd1x18(int64 x) pure returns (SD1x18 result) {\\n    result = SD1x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an SD1x18 number into int64.\\nfunction unwrap(SD1x18 x) pure returns (int64 result) {\\n    result = SD1x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an int64 number into SD1x18.\\nfunction wrap(int64 x) pure returns (SD1x18 result) {\\n    result = SD1x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x9e49e2b37c1bb845861740805edaaef3fe951a7b96eef16ce84fbf76e8278670\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as an SD1x18 number.\\nSD1x18 constant E = SD1x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum value an SD1x18 number can have.\\nint64 constant uMAX_SD1x18 = 9_223372036854775807;\\nSD1x18 constant MAX_SD1x18 = SD1x18.wrap(uMAX_SD1x18);\\n\\n/// @dev The maximum value an SD1x18 number can have.\\nint64 constant uMIN_SD1x18 = -9_223372036854775808;\\nSD1x18 constant MIN_SD1x18 = SD1x18.wrap(uMIN_SD1x18);\\n\\n/// @dev PI as an SD1x18 number.\\nSD1x18 constant PI = SD1x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of SD1x18.\\nSD1x18 constant UNIT = SD1x18.wrap(1e18);\\nint256 constant uUNIT = 1e18;\\n\",\"keccak256\":\"0xb51aab4a2ea76f530dccbf3b7d4af24c8f3ceef67f3c574b58650466ea924a3f\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD1x18_ToUD2x18_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in UD60x18.\\nerror PRBMath_SD1x18_ToUD60x18_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint128.\\nerror PRBMath_SD1x18_ToUint128_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint256.\\nerror PRBMath_SD1x18_ToUint256_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint40.\\nerror PRBMath_SD1x18_ToUint40_Overflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint40.\\nerror PRBMath_SD1x18_ToUint40_Underflow(SD1x18 x);\\n\",\"keccak256\":\"0x836cb42ba619ca369fd4765bc47fefc3c3621369c5861882af14660aca5057ee\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\n\\n/// @notice The signed 1.18-decimal fixed-point number representation, which can have up to 1 digit and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type int64. This is useful when end users want to use int64 to save gas, e.g. with tight variable packing in contract\\n/// storage.\\ntype SD1x18 is int64;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD59x18,\\n    Casting.intoUD2x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for SD1x18 global;\\n\",\"keccak256\":\"0x2f86f1aa9fca42f40808b51a879b406ac51817647bdb9642f8a79dd8fdb754a7\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { MAX_UINT128, MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18, uMIN_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { uMAX_UD2x18 } from \\\"../ud2x18/Constants.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an SD59x18 number into int256.\\n/// @dev This is basically a functional alias for {unwrap}.\\nfunction intoInt256(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x);\\n}\\n\\n/// @notice Casts an SD59x18 number into SD1x18.\\n/// @dev Requirements:\\n/// - x must be greater than or equal to `uMIN_SD1x18`.\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(SD59x18 x) pure returns (SD1x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < uMIN_SD1x18) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoSD1x18_Underflow(x);\\n    }\\n    if (xInt > uMAX_SD1x18) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into UD2x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `uMAX_UD2x18`.\\nfunction intoUD2x18(SD59x18 x) pure returns (UD2x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD2x18_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(uMAX_UD2x18))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD2x18_Overflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(uint256(xInt)));\\n}\\n\\n/// @notice Casts an SD59x18 number into UD60x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUD60x18(SD59x18 x) pure returns (UD60x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD60x18_Underflow(x);\\n    }\\n    result = UD60x18.wrap(uint256(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into uint256.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint256(SD59x18 x) pure returns (uint256 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint256_Underflow(x);\\n    }\\n    result = uint256(xInt);\\n}\\n\\n/// @notice Casts an SD59x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `uMAX_UINT128`.\\nfunction intoUint128(SD59x18 x) pure returns (uint128 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint128_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(MAX_UINT128))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint128_Overflow(x);\\n    }\\n    result = uint128(uint256(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(SD59x18 x) pure returns (uint40 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint40_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(MAX_UINT40))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(uint256(xInt));\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd59x18(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an SD59x18 number into int256.\\nfunction unwrap(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an int256 number into SD59x18.\\nfunction wrap(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x3b21b60ec2998c3ae32f647412da51d3683b3f183a807198cc8d157499484f99\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n// NOTICE: the \\\"u\\\" prefix stands for \\\"unwrapped\\\".\\n\\n/// @dev Euler's number as an SD59x18 number.\\nSD59x18 constant E = SD59x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum input permitted in {exp}.\\nint256 constant uEXP_MAX_INPUT = 133_084258667509499440;\\nSD59x18 constant EXP_MAX_INPUT = SD59x18.wrap(uEXP_MAX_INPUT);\\n\\n/// @dev The maximum input permitted in {exp2}.\\nint256 constant uEXP2_MAX_INPUT = 192e18 - 1;\\nSD59x18 constant EXP2_MAX_INPUT = SD59x18.wrap(uEXP2_MAX_INPUT);\\n\\n/// @dev Half the UNIT number.\\nint256 constant uHALF_UNIT = 0.5e18;\\nSD59x18 constant HALF_UNIT = SD59x18.wrap(uHALF_UNIT);\\n\\n/// @dev $log_2(10)$ as an SD59x18 number.\\nint256 constant uLOG2_10 = 3_321928094887362347;\\nSD59x18 constant LOG2_10 = SD59x18.wrap(uLOG2_10);\\n\\n/// @dev $log_2(e)$ as an SD59x18 number.\\nint256 constant uLOG2_E = 1_442695040888963407;\\nSD59x18 constant LOG2_E = SD59x18.wrap(uLOG2_E);\\n\\n/// @dev The maximum value an SD59x18 number can have.\\nint256 constant uMAX_SD59x18 = 57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\nSD59x18 constant MAX_SD59x18 = SD59x18.wrap(uMAX_SD59x18);\\n\\n/// @dev The maximum whole value an SD59x18 number can have.\\nint256 constant uMAX_WHOLE_SD59x18 = 57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\nSD59x18 constant MAX_WHOLE_SD59x18 = SD59x18.wrap(uMAX_WHOLE_SD59x18);\\n\\n/// @dev The minimum value an SD59x18 number can have.\\nint256 constant uMIN_SD59x18 = -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\nSD59x18 constant MIN_SD59x18 = SD59x18.wrap(uMIN_SD59x18);\\n\\n/// @dev The minimum whole value an SD59x18 number can have.\\nint256 constant uMIN_WHOLE_SD59x18 = -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\nSD59x18 constant MIN_WHOLE_SD59x18 = SD59x18.wrap(uMIN_WHOLE_SD59x18);\\n\\n/// @dev PI as an SD59x18 number.\\nSD59x18 constant PI = SD59x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of SD59x18.\\nint256 constant uUNIT = 1e18;\\nSD59x18 constant UNIT = SD59x18.wrap(1e18);\\n\\n/// @dev The unit number squared.\\nint256 constant uUNIT_SQUARED = 1e36;\\nSD59x18 constant UNIT_SQUARED = SD59x18.wrap(uUNIT_SQUARED);\\n\\n/// @dev Zero as an SD59x18 number.\\nSD59x18 constant ZERO = SD59x18.wrap(0);\\n\",\"keccak256\":\"0xe0a1ca1a7b5b2d637cff83a8caa3d2e67a6a34f7ee9df58a9ca5d5fa268c474a\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Conversions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { uMAX_SD59x18, uMIN_SD59x18, uUNIT } from \\\"./Constants.sol\\\";\\nimport { PRBMath_SD59x18_Convert_Overflow, PRBMath_SD59x18_Convert_Underflow } from \\\"./Errors.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Converts a simple integer to SD59x18 by multiplying it by `UNIT`.\\n///\\n/// @dev Requirements:\\n/// - x must be greater than or equal to `MIN_SD59x18 / UNIT`.\\n/// - x must be less than or equal to `MAX_SD59x18 / UNIT`.\\n///\\n/// @param x The basic integer to convert.\\n/// @param result The same number converted to SD59x18.\\nfunction convert(int256 x) pure returns (SD59x18 result) {\\n    if (x < uMIN_SD59x18 / uUNIT) {\\n        revert PRBMath_SD59x18_Convert_Underflow(x);\\n    }\\n    if (x > uMAX_SD59x18 / uUNIT) {\\n        revert PRBMath_SD59x18_Convert_Overflow(x);\\n    }\\n    unchecked {\\n        result = SD59x18.wrap(x * uUNIT);\\n    }\\n}\\n\\n/// @notice Converts an SD59x18 number to a simple integer by dividing it by `UNIT`.\\n/// @dev The result is rounded toward zero.\\n/// @param x The SD59x18 number to convert.\\n/// @return result The same number as a simple integer.\\nfunction convert(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x) / uUNIT;\\n}\\n\",\"keccak256\":\"0x9876a288dcbb2583c5361a3e60b5b30c7d4c89c8d2aa35364f2f521656d8db80\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when taking the absolute value of `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Abs_MinSD59x18();\\n\\n/// @notice Thrown when ceiling a number overflows SD59x18.\\nerror PRBMath_SD59x18_Ceil_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMath_SD59x18_Convert_Overflow(int256 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMath_SD59x18_Convert_Underflow(int256 x);\\n\\n/// @notice Thrown when dividing two numbers and one of them is `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Div_InputTooSmall();\\n\\n/// @notice Thrown when dividing two numbers and one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMath_SD59x18_Div_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when taking the natural exponent of a base greater than 133_084258667509499441.\\nerror PRBMath_SD59x18_Exp_InputTooBig(SD59x18 x);\\n\\n/// @notice Thrown when taking the binary exponent of a base greater than 192e18.\\nerror PRBMath_SD59x18_Exp2_InputTooBig(SD59x18 x);\\n\\n/// @notice Thrown when flooring a number underflows SD59x18.\\nerror PRBMath_SD59x18_Floor_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and their product is negative.\\nerror PRBMath_SD59x18_Gm_NegativeProduct(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and multiplying them overflows SD59x18.\\nerror PRBMath_SD59x18_Gm_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_SD59x18_IntoSD1x18_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_SD59x18_IntoSD1x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD59x18_IntoUD2x18_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD59x18_IntoUD2x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD60x18.\\nerror PRBMath_SD59x18_IntoUD60x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_SD59x18_IntoUint128_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_SD59x18_IntoUint128_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint256.\\nerror PRBMath_SD59x18_IntoUint256_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_SD59x18_IntoUint40_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_SD59x18_IntoUint40_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when taking the logarithm of a number less than or equal to zero.\\nerror PRBMath_SD59x18_Log_InputTooSmall(SD59x18 x);\\n\\n/// @notice Thrown when multiplying two numbers and one of the inputs is `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Mul_InputTooSmall();\\n\\n/// @notice Thrown when multiplying two numbers and the intermediary absolute result overflows SD59x18.\\nerror PRBMath_SD59x18_Mul_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when raising a number to a power and hte intermediary absolute result overflows SD59x18.\\nerror PRBMath_SD59x18_Powu_Overflow(SD59x18 x, uint256 y);\\n\\n/// @notice Thrown when taking the square root of a negative number.\\nerror PRBMath_SD59x18_Sqrt_NegativeInput(SD59x18 x);\\n\\n/// @notice Thrown when the calculating the square root overflows SD59x18.\\nerror PRBMath_SD59x18_Sqrt_Overflow(SD59x18 x);\\n\",\"keccak256\":\"0x83ee24e41d235bc05cb641d2c5c16c67b17fa00e4593661a8d14350435d4df04\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Implements the checked addition operation (+) in the SD59x18 type.\\nfunction add(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() + y.unwrap());\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the SD59x18 type.\\nfunction and(SD59x18 x, int256 bits) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() & bits);\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the SD59x18 type.\\nfunction and2(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() & y.unwrap());\\n}\\n\\n/// @notice Implements the equal (=) operation in the SD59x18 type.\\nfunction eq(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() == y.unwrap();\\n}\\n\\n/// @notice Implements the greater than operation (>) in the SD59x18 type.\\nfunction gt(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() > y.unwrap();\\n}\\n\\n/// @notice Implements the greater than or equal to operation (>=) in the SD59x18 type.\\nfunction gte(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() >= y.unwrap();\\n}\\n\\n/// @notice Implements a zero comparison check function in the SD59x18 type.\\nfunction isZero(SD59x18 x) pure returns (bool result) {\\n    result = x.unwrap() == 0;\\n}\\n\\n/// @notice Implements the left shift operation (<<) in the SD59x18 type.\\nfunction lshift(SD59x18 x, uint256 bits) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() << bits);\\n}\\n\\n/// @notice Implements the lower than operation (<) in the SD59x18 type.\\nfunction lt(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() < y.unwrap();\\n}\\n\\n/// @notice Implements the lower than or equal to operation (<=) in the SD59x18 type.\\nfunction lte(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() <= y.unwrap();\\n}\\n\\n/// @notice Implements the unchecked modulo operation (%) in the SD59x18 type.\\nfunction mod(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() % y.unwrap());\\n}\\n\\n/// @notice Implements the not equal operation (!=) in the SD59x18 type.\\nfunction neq(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() != y.unwrap();\\n}\\n\\n/// @notice Implements the NOT (~) bitwise operation in the SD59x18 type.\\nfunction not(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(~x.unwrap());\\n}\\n\\n/// @notice Implements the OR (|) bitwise operation in the SD59x18 type.\\nfunction or(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() | y.unwrap());\\n}\\n\\n/// @notice Implements the right shift operation (>>) in the SD59x18 type.\\nfunction rshift(SD59x18 x, uint256 bits) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() >> bits);\\n}\\n\\n/// @notice Implements the checked subtraction operation (-) in the SD59x18 type.\\nfunction sub(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() - y.unwrap());\\n}\\n\\n/// @notice Implements the checked unary minus operation (-) in the SD59x18 type.\\nfunction unary(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(-x.unwrap());\\n}\\n\\n/// @notice Implements the unchecked addition operation (+) in the SD59x18 type.\\nfunction uncheckedAdd(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() + y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked subtraction operation (-) in the SD59x18 type.\\nfunction uncheckedSub(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() - y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked unary minus operation (-) in the SD59x18 type.\\nfunction uncheckedUnary(SD59x18 x) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(-x.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the XOR (^) bitwise operation in the SD59x18 type.\\nfunction xor(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() ^ y.unwrap());\\n}\\n\",\"keccak256\":\"0x208570f1657cf730cb6c3d81aa14030e0d45cf906cdedea5059369d7df4bb716\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport {\\n    uEXP_MAX_INPUT,\\n    uEXP2_MAX_INPUT,\\n    uHALF_UNIT,\\n    uLOG2_10,\\n    uLOG2_E,\\n    uMAX_SD59x18,\\n    uMAX_WHOLE_SD59x18,\\n    uMIN_SD59x18,\\n    uMIN_WHOLE_SD59x18,\\n    UNIT,\\n    uUNIT,\\n    uUNIT_SQUARED,\\n    ZERO\\n} from \\\"./Constants.sol\\\";\\nimport { wrap } from \\\"./Helpers.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Calculates the absolute value of x.\\n///\\n/// @dev Requirements:\\n/// - x must be greater than `MIN_SD59x18`.\\n///\\n/// @param x The SD59x18 number for which to calculate the absolute value.\\n/// @param result The absolute value of x as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction abs(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Abs_MinSD59x18();\\n    }\\n    result = xInt < 0 ? wrap(-xInt) : x;\\n}\\n\\n/// @notice Calculates the arithmetic average of x and y.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// @param x The first operand as an SD59x18 number.\\n/// @param y The second operand as an SD59x18 number.\\n/// @return result The arithmetic average as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction avg(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n\\n    unchecked {\\n        // This operation is equivalent to `x / 2 +  y / 2`, and it can never overflow.\\n        int256 sum = (xInt >> 1) + (yInt >> 1);\\n\\n        if (sum < 0) {\\n            // If at least one of x and y is odd, add 1 to the result, because shifting negative numbers to the right\\n            // rounds toward negative infinity. The right part is equivalent to `sum + (x % 2 == 1 || y % 2 == 1)`.\\n            assembly (\\\"memory-safe\\\") {\\n                result := add(sum, and(or(xInt, yInt), 1))\\n            }\\n        } else {\\n            // Add 1 if both x and y are odd to account for the double 0.5 remainder truncated after shifting.\\n            result = wrap(sum + (xInt & yInt & 1));\\n        }\\n    }\\n}\\n\\n/// @notice Yields the smallest whole number greater than or equal to x.\\n///\\n/// @dev Optimized for fractional value inputs, because every whole value has (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be less than or equal to `MAX_WHOLE_SD59x18`.\\n///\\n/// @param x The SD59x18 number to ceil.\\n/// @param result The smallest whole number greater than or equal to x, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ceil(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt > uMAX_WHOLE_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Ceil_Overflow(x);\\n    }\\n\\n    int256 remainder = xInt % uUNIT;\\n    if (remainder == 0) {\\n        result = x;\\n    } else {\\n        unchecked {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            int256 resultInt = xInt - remainder;\\n            if (xInt > 0) {\\n                resultInt += uUNIT;\\n            }\\n            result = wrap(resultInt);\\n        }\\n    }\\n}\\n\\n/// @notice Divides two SD59x18 numbers, returning a new SD59x18 number.\\n///\\n/// @dev This is an extension of {Common.mulDiv} for signed numbers, which works by computing the signs and the absolute\\n/// values separately.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n/// - None of the inputs can be `MIN_SD59x18`.\\n/// - The denominator must not be zero.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The numerator as an SD59x18 number.\\n/// @param y The denominator as an SD59x18 number.\\n/// @param result The quotient as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction div(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == uMIN_SD59x18 || yInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Div_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x and y.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    unchecked {\\n        xAbs = xInt < 0 ? uint256(-xInt) : uint256(xInt);\\n        yAbs = yInt < 0 ? uint256(-yInt) : uint256(yInt);\\n    }\\n\\n    // Compute the absolute value (x*UNIT\\u00f7y). The resulting value must fit in SD59x18.\\n    uint256 resultAbs = Common.mulDiv(xAbs, uint256(uUNIT), yAbs);\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Div_Overflow(x, y);\\n    }\\n\\n    // Check if x and y have the same sign using two's complement representation. The left-most bit represents the sign (1 for\\n    // negative, 0 for positive or zero).\\n    bool sameSign = (xInt ^ yInt) > -1;\\n\\n    // If the inputs have the same sign, the result should be positive. Otherwise, it should be negative.\\n    unchecked {\\n        result = wrap(sameSign ? int256(resultAbs) : -int256(resultAbs));\\n    }\\n}\\n\\n/// @notice Calculates the natural exponent of x using the following formula:\\n///\\n/// $$\\n/// e^x = 2^{x * log_2{e}}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {exp2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}.\\n/// - x must be less than 133_084258667509499441.\\n///\\n/// @param x The exponent as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n\\n    // This check prevents values greater than 192e18 from being passed to {exp2}.\\n    if (xInt > uEXP_MAX_INPUT) {\\n        revert Errors.PRBMath_SD59x18_Exp_InputTooBig(x);\\n    }\\n\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas.\\n        int256 doubleUnitProduct = xInt * uLOG2_E;\\n        result = exp2(wrap(doubleUnitProduct / uUNIT));\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method using the following formula:\\n///\\n/// $$\\n/// 2^{-x} = \\\\frac{1}{2^x}\\n/// $$\\n///\\n/// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n///\\n/// Notes:\\n/// - If x is less than -59_794705707972522261, the result is zero.\\n///\\n/// Requirements:\\n/// - x must be less than 192e18.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The exponent as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        // The inverse of any number less than this is truncated to zero.\\n        if (xInt < -59_794705707972522261) {\\n            return ZERO;\\n        }\\n\\n        unchecked {\\n            // Inline the fixed-point inversion to save gas.\\n            result = wrap(uUNIT_SQUARED / exp2(wrap(-xInt)).unwrap());\\n        }\\n    } else {\\n        // Numbers greater than or equal to 192e18 don't fit in the 192.64-bit format.\\n        if (xInt > uEXP2_MAX_INPUT) {\\n            revert Errors.PRBMath_SD59x18_Exp2_InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x_192x64 = uint256((xInt << 64) / uUNIT);\\n\\n            // It is safe to cast the result to int256 due to the checks above.\\n            result = wrap(int256(Common.exp2(x_192x64)));\\n        }\\n    }\\n}\\n\\n/// @notice Yields the greatest whole number less than or equal to x.\\n///\\n/// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional\\n/// counterparts. See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be greater than or equal to `MIN_WHOLE_SD59x18`.\\n///\\n/// @param x The SD59x18 number to floor.\\n/// @param result The greatest whole number less than or equal to x, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction floor(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < uMIN_WHOLE_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Floor_Underflow(x);\\n    }\\n\\n    int256 remainder = xInt % uUNIT;\\n    if (remainder == 0) {\\n        result = x;\\n    } else {\\n        unchecked {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            int256 resultInt = xInt - remainder;\\n            if (xInt < 0) {\\n                resultInt -= uUNIT;\\n            }\\n            result = wrap(resultInt);\\n        }\\n    }\\n}\\n\\n/// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right.\\n/// of the radix point for negative numbers.\\n/// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n/// @param x The SD59x18 number to get the fractional part of.\\n/// @param result The fractional part of x as an SD59x18 number.\\nfunction frac(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() % uUNIT);\\n}\\n\\n/// @notice Calculates the geometric mean of x and y, i.e. $\\\\sqrt{x * y}$.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x * y must fit in SD59x18.\\n/// - x * y must not be negative, since complex numbers are not supported.\\n///\\n/// @param x The first operand as an SD59x18 number.\\n/// @param y The second operand as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction gm(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == 0 || yInt == 0) {\\n        return ZERO;\\n    }\\n\\n    unchecked {\\n        // Equivalent to `xy / x != y`. Checking for overflow this way is faster than letting Solidity do it.\\n        int256 xyInt = xInt * yInt;\\n        if (xyInt / xInt != yInt) {\\n            revert Errors.PRBMath_SD59x18_Gm_Overflow(x, y);\\n        }\\n\\n        // The product must not be negative, since complex numbers are not supported.\\n        if (xyInt < 0) {\\n            revert Errors.PRBMath_SD59x18_Gm_NegativeProduct(x, y);\\n        }\\n\\n        // We don't need to multiply the result by `UNIT` here because the x*y product picked up a factor of `UNIT`\\n        // during multiplication. See the comments in {Common.sqrt}.\\n        uint256 resultUint = Common.sqrt(uint256(xyInt));\\n        result = wrap(int256(resultUint));\\n    }\\n}\\n\\n/// @notice Calculates the inverse of x.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must not be zero.\\n///\\n/// @param x The SD59x18 number for which to calculate the inverse.\\n/// @return result The inverse as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction inv(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(uUNIT_SQUARED / x.unwrap());\\n}\\n\\n/// @notice Calculates the natural logarithm of x using the following formula:\\n///\\n/// $$\\n/// ln{x} = log_2{x} / log_2{e}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n/// - The precision isn't sufficiently fine-grained to return exactly `UNIT` when the input is `E`.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The SD59x18 number for which to calculate the natural logarithm.\\n/// @return result The natural logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ln(SD59x18 x) pure returns (SD59x18 result) {\\n    // Inline the fixed-point multiplication to save gas. This is overflow-safe because the maximum value that\\n    // {log2} can return is ~195_205294292027477728.\\n    result = wrap(log2(x).unwrap() * uUNIT / uLOG2_E);\\n}\\n\\n/// @notice Calculates the common logarithm of x using the following formula:\\n///\\n/// $$\\n/// log_{10}{x} = log_2{x} / log_2{10}\\n/// $$\\n///\\n/// However, if x is an exact power of ten, a hard coded value is returned.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The SD59x18 number for which to calculate the common logarithm.\\n/// @return result The common logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log10(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        revert Errors.PRBMath_SD59x18_Log_InputTooSmall(x);\\n    }\\n\\n    // Note that the `mul` in this block is the standard multiplication operation, not {SD59x18.mul}.\\n    // prettier-ignore\\n    assembly (\\\"memory-safe\\\") {\\n        switch x\\n        case 1 { result := mul(uUNIT, sub(0, 18)) }\\n        case 10 { result := mul(uUNIT, sub(1, 18)) }\\n        case 100 { result := mul(uUNIT, sub(2, 18)) }\\n        case 1000 { result := mul(uUNIT, sub(3, 18)) }\\n        case 10000 { result := mul(uUNIT, sub(4, 18)) }\\n        case 100000 { result := mul(uUNIT, sub(5, 18)) }\\n        case 1000000 { result := mul(uUNIT, sub(6, 18)) }\\n        case 10000000 { result := mul(uUNIT, sub(7, 18)) }\\n        case 100000000 { result := mul(uUNIT, sub(8, 18)) }\\n        case 1000000000 { result := mul(uUNIT, sub(9, 18)) }\\n        case 10000000000 { result := mul(uUNIT, sub(10, 18)) }\\n        case 100000000000 { result := mul(uUNIT, sub(11, 18)) }\\n        case 1000000000000 { result := mul(uUNIT, sub(12, 18)) }\\n        case 10000000000000 { result := mul(uUNIT, sub(13, 18)) }\\n        case 100000000000000 { result := mul(uUNIT, sub(14, 18)) }\\n        case 1000000000000000 { result := mul(uUNIT, sub(15, 18)) }\\n        case 10000000000000000 { result := mul(uUNIT, sub(16, 18)) }\\n        case 100000000000000000 { result := mul(uUNIT, sub(17, 18)) }\\n        case 1000000000000000000 { result := 0 }\\n        case 10000000000000000000 { result := uUNIT }\\n        case 100000000000000000000 { result := mul(uUNIT, 2) }\\n        case 1000000000000000000000 { result := mul(uUNIT, 3) }\\n        case 10000000000000000000000 { result := mul(uUNIT, 4) }\\n        case 100000000000000000000000 { result := mul(uUNIT, 5) }\\n        case 1000000000000000000000000 { result := mul(uUNIT, 6) }\\n        case 10000000000000000000000000 { result := mul(uUNIT, 7) }\\n        case 100000000000000000000000000 { result := mul(uUNIT, 8) }\\n        case 1000000000000000000000000000 { result := mul(uUNIT, 9) }\\n        case 10000000000000000000000000000 { result := mul(uUNIT, 10) }\\n        case 100000000000000000000000000000 { result := mul(uUNIT, 11) }\\n        case 1000000000000000000000000000000 { result := mul(uUNIT, 12) }\\n        case 10000000000000000000000000000000 { result := mul(uUNIT, 13) }\\n        case 100000000000000000000000000000000 { result := mul(uUNIT, 14) }\\n        case 1000000000000000000000000000000000 { result := mul(uUNIT, 15) }\\n        case 10000000000000000000000000000000000 { result := mul(uUNIT, 16) }\\n        case 100000000000000000000000000000000000 { result := mul(uUNIT, 17) }\\n        case 1000000000000000000000000000000000000 { result := mul(uUNIT, 18) }\\n        case 10000000000000000000000000000000000000 { result := mul(uUNIT, 19) }\\n        case 100000000000000000000000000000000000000 { result := mul(uUNIT, 20) }\\n        case 1000000000000000000000000000000000000000 { result := mul(uUNIT, 21) }\\n        case 10000000000000000000000000000000000000000 { result := mul(uUNIT, 22) }\\n        case 100000000000000000000000000000000000000000 { result := mul(uUNIT, 23) }\\n        case 1000000000000000000000000000000000000000000 { result := mul(uUNIT, 24) }\\n        case 10000000000000000000000000000000000000000000 { result := mul(uUNIT, 25) }\\n        case 100000000000000000000000000000000000000000000 { result := mul(uUNIT, 26) }\\n        case 1000000000000000000000000000000000000000000000 { result := mul(uUNIT, 27) }\\n        case 10000000000000000000000000000000000000000000000 { result := mul(uUNIT, 28) }\\n        case 100000000000000000000000000000000000000000000000 { result := mul(uUNIT, 29) }\\n        case 1000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 30) }\\n        case 10000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 31) }\\n        case 100000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 32) }\\n        case 1000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 33) }\\n        case 10000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 34) }\\n        case 100000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 35) }\\n        case 1000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 36) }\\n        case 10000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 37) }\\n        case 100000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 38) }\\n        case 1000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 39) }\\n        case 10000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 40) }\\n        case 100000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 41) }\\n        case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 42) }\\n        case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 43) }\\n        case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 44) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 45) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 46) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 47) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 48) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 49) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 50) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 51) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 52) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 53) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 54) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 55) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 56) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 57) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 58) }\\n        default { result := uMAX_SD59x18 }\\n    }\\n\\n    if (result.unwrap() == uMAX_SD59x18) {\\n        unchecked {\\n            // Inline the fixed-point division to save gas.\\n            result = wrap(log2(x).unwrap() * uUNIT / uLOG2_10);\\n        }\\n    }\\n}\\n\\n/// @notice Calculates the binary logarithm of x using the iterative approximation algorithm:\\n///\\n/// $$\\n/// log_2{x} = n + log_2{y}, \\\\text{ where } y = x*2^{-n}, \\\\ y \\\\in [1, 2)\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, the input is inverted:\\n///\\n/// $$\\n/// log_2{x} = -log_2{\\\\frac{1}{x}}\\n/// $$\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation.\\n///\\n/// Notes:\\n/// - Due to the lossy precision of the iterative approximation, the results are not perfectly accurate to the last decimal.\\n///\\n/// Requirements:\\n/// - x must be greater than zero.\\n///\\n/// @param x The SD59x18 number for which to calculate the binary logarithm.\\n/// @return result The binary logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log2(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt <= 0) {\\n        revert Errors.PRBMath_SD59x18_Log_InputTooSmall(x);\\n    }\\n\\n    unchecked {\\n        int256 sign;\\n        if (xInt >= uUNIT) {\\n            sign = 1;\\n        } else {\\n            sign = -1;\\n            // Inline the fixed-point inversion to save gas.\\n            xInt = uUNIT_SQUARED / xInt;\\n        }\\n\\n        // Calculate the integer part of the logarithm.\\n        uint256 n = Common.msb(uint256(xInt / uUNIT));\\n\\n        // This is the integer part of the logarithm as an SD59x18 number. The operation can't overflow\\n        // because n is at most 255, `UNIT` is 1e18, and the sign is either 1 or -1.\\n        int256 resultInt = int256(n) * uUNIT;\\n\\n        // Calculate $y = x * 2^{-n}$.\\n        int256 y = xInt >> n;\\n\\n        // If y is the unit number, the fractional part is zero.\\n        if (y == uUNIT) {\\n            return wrap(resultInt * sign);\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The `delta >>= 1` part is equivalent to `delta /= 2`, but shifting bits is more gas efficient.\\n        int256 DOUBLE_UNIT = 2e18;\\n        for (int256 delta = uHALF_UNIT; delta > 0; delta >>= 1) {\\n            y = (y * y) / uUNIT;\\n\\n            // Is y^2 >= 2e18 and so in the range [2e18, 4e18)?\\n            if (y >= DOUBLE_UNIT) {\\n                // Add the 2^{-m} factor to the logarithm.\\n                resultInt = resultInt + delta;\\n\\n                // Halve y, which corresponds to z/2 in the Wikipedia article.\\n                y >>= 1;\\n            }\\n        }\\n        resultInt *= sign;\\n        result = wrap(resultInt);\\n    }\\n}\\n\\n/// @notice Multiplies two SD59x18 numbers together, returning a new SD59x18 number.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv18}.\\n/// - None of the inputs can be `MIN_SD59x18`.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The multiplicand as an SD59x18 number.\\n/// @param y The multiplier as an SD59x18 number.\\n/// @return result The product as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mul(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == uMIN_SD59x18 || yInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Mul_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x and y.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    unchecked {\\n        xAbs = xInt < 0 ? uint256(-xInt) : uint256(xInt);\\n        yAbs = yInt < 0 ? uint256(-yInt) : uint256(yInt);\\n    }\\n\\n    // Compute the absolute value (x*y\\u00f7UNIT). The resulting value must fit in SD59x18.\\n    uint256 resultAbs = Common.mulDiv18(xAbs, yAbs);\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Mul_Overflow(x, y);\\n    }\\n\\n    // Check if x and y have the same sign using two's complement representation. The left-most bit represents the sign (1 for\\n    // negative, 0 for positive or zero).\\n    bool sameSign = (xInt ^ yInt) > -1;\\n\\n    // If the inputs have the same sign, the result should be positive. Otherwise, it should be negative.\\n    unchecked {\\n        result = wrap(sameSign ? int256(resultAbs) : -int256(resultAbs));\\n    }\\n}\\n\\n/// @notice Raises x to the power of y using the following formula:\\n///\\n/// $$\\n/// x^y = 2^{log_2{x} * y}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {exp2}, {log2}, and {mul}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}, {log2}, and {mul}.\\n///\\n/// @param x The base as an SD59x18 number.\\n/// @param y Exponent to raise x to, as an SD59x18 number\\n/// @return result x raised to power y, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction pow(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n\\n    // If both x and y are zero, the result is `UNIT`. If just x is zero, the result is always zero.\\n    if (xInt == 0) {\\n        return yInt == 0 ? UNIT : ZERO;\\n    }\\n    // If x is `UNIT`, the result is always `UNIT`.\\n    else if (xInt == uUNIT) {\\n        return UNIT;\\n    }\\n\\n    // If y is zero, the result is always `UNIT`.\\n    if (yInt == 0) {\\n        return UNIT;\\n    }\\n    // If y is `UNIT`, the result is always x.\\n    else if (yInt == uUNIT) {\\n        return x;\\n    }\\n\\n    // Calculate the result using the formula.\\n    result = exp2(mul(log2(x), y));\\n}\\n\\n/// @notice Raises x (an SD59x18 number) to the power y (an unsigned basic integer) using the well-known\\n/// algorithm \\\"exponentiation by squaring\\\".\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {abs} and {Common.mulDiv18}.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The base as an SD59x18 number.\\n/// @param y The exponent as a uint256.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction powu(SD59x18 x, uint256 y) pure returns (SD59x18 result) {\\n    uint256 xAbs = uint256(abs(x).unwrap());\\n\\n    // Calculate the first iteration of the loop in advance.\\n    uint256 resultAbs = y & 1 > 0 ? xAbs : uint256(uUNIT);\\n\\n    // Equivalent to `for(y /= 2; y > 0; y /= 2)`.\\n    uint256 yAux = y;\\n    for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n        xAbs = Common.mulDiv18(xAbs, xAbs);\\n\\n        // Equivalent to `y % 2 == 1`.\\n        if (yAux & 1 > 0) {\\n            resultAbs = Common.mulDiv18(resultAbs, xAbs);\\n        }\\n    }\\n\\n    // The result must fit in SD59x18.\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Powu_Overflow(x, y);\\n    }\\n\\n    unchecked {\\n        // Is the base negative and the exponent odd? If yes, the result should be negative.\\n        int256 resultInt = int256(resultAbs);\\n        bool isNegative = x.unwrap() < 0 && y & 1 == 1;\\n        if (isNegative) {\\n            resultInt = -resultInt;\\n        }\\n        result = wrap(resultInt);\\n    }\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - Only the positive root is returned.\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x cannot be negative, since complex numbers are not supported.\\n/// - x must be less than `MAX_SD59x18 / UNIT`.\\n///\\n/// @param x The SD59x18 number for which to calculate the square root.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        revert Errors.PRBMath_SD59x18_Sqrt_NegativeInput(x);\\n    }\\n    if (xInt > uMAX_SD59x18 / uUNIT) {\\n        revert Errors.PRBMath_SD59x18_Sqrt_Overflow(x);\\n    }\\n\\n    unchecked {\\n        // Multiply x by `UNIT` to account for the factor of `UNIT` picked up when multiplying two SD59x18 numbers.\\n        // In this case, the two numbers are both the square root.\\n        uint256 resultUint = Common.sqrt(uint256(xInt * uUNIT));\\n        result = wrap(int256(resultUint));\\n    }\\n}\\n\",\"keccak256\":\"0xedd0635769176ab99878a91ce267cee2ca107b30e6b0db10736573ff4d102868\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\nimport \\\"./Helpers.sol\\\" as Helpers;\\nimport \\\"./Math.sol\\\" as Math;\\n\\n/// @notice The signed 59.18-decimal fixed-point number representation, which can have up to 59 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type int256.\\ntype SD59x18 is int256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoInt256,\\n    Casting.intoSD1x18,\\n    Casting.intoUD2x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Math.abs,\\n    Math.avg,\\n    Math.ceil,\\n    Math.div,\\n    Math.exp,\\n    Math.exp2,\\n    Math.floor,\\n    Math.frac,\\n    Math.gm,\\n    Math.inv,\\n    Math.log10,\\n    Math.log2,\\n    Math.ln,\\n    Math.mul,\\n    Math.pow,\\n    Math.powu,\\n    Math.sqrt\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                HELPER FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Helpers.add,\\n    Helpers.and,\\n    Helpers.eq,\\n    Helpers.gt,\\n    Helpers.gte,\\n    Helpers.isZero,\\n    Helpers.lshift,\\n    Helpers.lt,\\n    Helpers.lte,\\n    Helpers.mod,\\n    Helpers.neq,\\n    Helpers.not,\\n    Helpers.or,\\n    Helpers.rshift,\\n    Helpers.sub,\\n    Helpers.uncheckedAdd,\\n    Helpers.uncheckedSub,\\n    Helpers.uncheckedUnary,\\n    Helpers.xor\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    OPERATORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes it possible to use these operators on the SD59x18 type.\\nusing {\\n    Helpers.add as +,\\n    Helpers.and2 as &,\\n    Math.div as /,\\n    Helpers.eq as ==,\\n    Helpers.gt as >,\\n    Helpers.gte as >=,\\n    Helpers.lt as <,\\n    Helpers.lte as <=,\\n    Helpers.mod as %,\\n    Math.mul as *,\\n    Helpers.neq as !=,\\n    Helpers.not as ~,\\n    Helpers.or as |,\\n    Helpers.sub as -,\\n    Helpers.unary as -,\\n    Helpers.xor as ^\\n} for SD59x18 global;\\n\",\"keccak256\":\"0xe03112d145dcd5863aff24e5f381debaae29d446acd5666f3d640e3d9af738d7\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport { uMAX_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts a UD2x18 number into SD1x18.\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(UD2x18 x) pure returns (SD1x18 result) {\\n    uint64 xUint = UD2x18.unwrap(x);\\n    if (xUint > uint64(uMAX_SD1x18)) {\\n        revert Errors.PRBMath_UD2x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(xUint));\\n}\\n\\n/// @notice Casts a UD2x18 number into SD59x18.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of SD59x18.\\nfunction intoSD59x18(UD2x18 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(int256(uint256(UD2x18.unwrap(x))));\\n}\\n\\n/// @notice Casts a UD2x18 number into UD60x18.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of UD60x18.\\nfunction intoUD60x18(UD2x18 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint128.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of uint128.\\nfunction intoUint128(UD2x18 x) pure returns (uint128 result) {\\n    result = uint128(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint256.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of uint256.\\nfunction intoUint256(UD2x18 x) pure returns (uint256 result) {\\n    result = uint256(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(UD2x18 x) pure returns (uint40 result) {\\n    uint64 xUint = UD2x18.unwrap(x);\\n    if (xUint > uint64(Common.MAX_UINT40)) {\\n        revert Errors.PRBMath_UD2x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(xUint);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud2x18(uint64 x) pure returns (UD2x18 result) {\\n    result = UD2x18.wrap(x);\\n}\\n\\n/// @notice Unwrap a UD2x18 number into uint64.\\nfunction unwrap(UD2x18 x) pure returns (uint64 result) {\\n    result = UD2x18.unwrap(x);\\n}\\n\\n/// @notice Wraps a uint64 number into UD2x18.\\nfunction wrap(uint64 x) pure returns (UD2x18 result) {\\n    result = UD2x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x07ec9a8adddfe6bf37f0d9ce7702c5620a6215340889701da0525ed190ccc099\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as a UD2x18 number.\\nUD2x18 constant E = UD2x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum value a UD2x18 number can have.\\nuint64 constant uMAX_UD2x18 = 18_446744073709551615;\\nUD2x18 constant MAX_UD2x18 = UD2x18.wrap(uMAX_UD2x18);\\n\\n/// @dev PI as a UD2x18 number.\\nUD2x18 constant PI = UD2x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of UD2x18.\\nuint256 constant uUNIT = 1e18;\\nUD2x18 constant UNIT = UD2x18.wrap(1e18);\\n\",\"keccak256\":\"0xbd11da8ad79ffc8b7b8244c82632b0ca31970e190a8877ba1a69b4b8065dcea5\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when trying to cast a UD2x18 number that doesn't fit in SD1x18.\\nerror PRBMath_UD2x18_IntoSD1x18_Overflow(UD2x18 x);\\n\\n/// @notice Thrown when trying to cast a UD2x18 number that doesn't fit in uint40.\\nerror PRBMath_UD2x18_IntoUint40_Overflow(UD2x18 x);\\n\",\"keccak256\":\"0xdf1e22f0b4c8032bcc8b7f63fe3984e1387f3dc7b2e9ab381822249f75376d33\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\n\\n/// @notice The unsigned 2.18-decimal fixed-point number representation, which can have up to 2 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type uint64. This is useful when end users want to use uint64 to save gas, e.g. with tight variable packing in contract\\n/// storage.\\ntype UD2x18 is uint64;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD1x18,\\n    Casting.intoSD59x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for UD2x18 global;\\n\",\"keccak256\":\"0x2802edc9869db116a0b5c490cc5f8554742f747183fa30ac5e9c80bb967e61a1\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { MAX_UINT128, MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { uMAX_SD59x18 } from \\\"../sd59x18/Constants.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { uMAX_UD2x18 } from \\\"../ud2x18/Constants.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts a UD60x18 number into SD1x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(UD60x18 x) pure returns (SD1x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uint256(int256(uMAX_SD1x18))) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(uint64(xUint)));\\n}\\n\\n/// @notice Casts a UD60x18 number into UD2x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_UD2x18`.\\nfunction intoUD2x18(UD60x18 x) pure returns (UD2x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uMAX_UD2x18) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUD2x18_Overflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(xUint));\\n}\\n\\n/// @notice Casts a UD60x18 number into SD59x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_SD59x18`.\\nfunction intoSD59x18(UD60x18 x) pure returns (SD59x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uint256(uMAX_SD59x18)) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoSD59x18_Overflow(x);\\n    }\\n    result = SD59x18.wrap(int256(xUint));\\n}\\n\\n/// @notice Casts a UD60x18 number into uint128.\\n/// @dev This is basically an alias for {unwrap}.\\nfunction intoUint256(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x);\\n}\\n\\n/// @notice Casts a UD60x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT128`.\\nfunction intoUint128(UD60x18 x) pure returns (uint128 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > MAX_UINT128) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUint128_Overflow(x);\\n    }\\n    result = uint128(xUint);\\n}\\n\\n/// @notice Casts a UD60x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(UD60x18 x) pure returns (uint40 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > MAX_UINT40) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(xUint);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud60x18(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\\n/// @notice Unwraps a UD60x18 number into uint256.\\nfunction unwrap(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x);\\n}\\n\\n/// @notice Wraps a uint256 number into the UD60x18 value type.\\nfunction wrap(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x5bb532da36921cbdac64d1f16de5d366ef1f664502e3b7c07d0ad06917551f85\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n// NOTICE: the \\\"u\\\" prefix stands for \\\"unwrapped\\\".\\n\\n/// @dev Euler's number as a UD60x18 number.\\nUD60x18 constant E = UD60x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum input permitted in {exp}.\\nuint256 constant uEXP_MAX_INPUT = 133_084258667509499440;\\nUD60x18 constant EXP_MAX_INPUT = UD60x18.wrap(uEXP_MAX_INPUT);\\n\\n/// @dev The maximum input permitted in {exp2}.\\nuint256 constant uEXP2_MAX_INPUT = 192e18 - 1;\\nUD60x18 constant EXP2_MAX_INPUT = UD60x18.wrap(uEXP2_MAX_INPUT);\\n\\n/// @dev Half the UNIT number.\\nuint256 constant uHALF_UNIT = 0.5e18;\\nUD60x18 constant HALF_UNIT = UD60x18.wrap(uHALF_UNIT);\\n\\n/// @dev $log_2(10)$ as a UD60x18 number.\\nuint256 constant uLOG2_10 = 3_321928094887362347;\\nUD60x18 constant LOG2_10 = UD60x18.wrap(uLOG2_10);\\n\\n/// @dev $log_2(e)$ as a UD60x18 number.\\nuint256 constant uLOG2_E = 1_442695040888963407;\\nUD60x18 constant LOG2_E = UD60x18.wrap(uLOG2_E);\\n\\n/// @dev The maximum value a UD60x18 number can have.\\nuint256 constant uMAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\nUD60x18 constant MAX_UD60x18 = UD60x18.wrap(uMAX_UD60x18);\\n\\n/// @dev The maximum whole value a UD60x18 number can have.\\nuint256 constant uMAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\nUD60x18 constant MAX_WHOLE_UD60x18 = UD60x18.wrap(uMAX_WHOLE_UD60x18);\\n\\n/// @dev PI as a UD60x18 number.\\nUD60x18 constant PI = UD60x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of UD60x18.\\nuint256 constant uUNIT = 1e18;\\nUD60x18 constant UNIT = UD60x18.wrap(uUNIT);\\n\\n/// @dev The unit number squared.\\nuint256 constant uUNIT_SQUARED = 1e36;\\nUD60x18 constant UNIT_SQUARED = UD60x18.wrap(uUNIT_SQUARED);\\n\\n/// @dev Zero as a UD60x18 number.\\nUD60x18 constant ZERO = UD60x18.wrap(0);\\n\",\"keccak256\":\"0x2b80d26153d3fdcfb3a9ca772d9309d31ed1275f5b8b54c3ffb54d3652b37d90\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when ceiling a number overflows UD60x18.\\nerror PRBMath_UD60x18_Ceil_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format overflows UD60x18.\\nerror PRBMath_UD60x18_Convert_Overflow(uint256 x);\\n\\n/// @notice Thrown when taking the natural exponent of a base greater than 133_084258667509499441.\\nerror PRBMath_UD60x18_Exp_InputTooBig(UD60x18 x);\\n\\n/// @notice Thrown when taking the binary exponent of a base greater than 192e18.\\nerror PRBMath_UD60x18_Exp2_InputTooBig(UD60x18 x);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and multiplying them overflows UD60x18.\\nerror PRBMath_UD60x18_Gm_Overflow(UD60x18 x, UD60x18 y);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_UD60x18_IntoSD1x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD59x18.\\nerror PRBMath_UD60x18_IntoSD59x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_UD60x18_IntoUD2x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_UD60x18_IntoUint128_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_UD60x18_IntoUint40_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when taking the logarithm of a number less than 1.\\nerror PRBMath_UD60x18_Log_InputTooSmall(UD60x18 x);\\n\\n/// @notice Thrown when calculating the square root overflows UD60x18.\\nerror PRBMath_UD60x18_Sqrt_Overflow(UD60x18 x);\\n\",\"keccak256\":\"0xa8c60d4066248df22c49c882873efbc017344107edabc48c52209abbc39cb1e3\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Implements the checked addition operation (+) in the UD60x18 type.\\nfunction add(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() + y.unwrap());\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the UD60x18 type.\\nfunction and(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() & bits);\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the UD60x18 type.\\nfunction and2(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() & y.unwrap());\\n}\\n\\n/// @notice Implements the equal operation (==) in the UD60x18 type.\\nfunction eq(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() == y.unwrap();\\n}\\n\\n/// @notice Implements the greater than operation (>) in the UD60x18 type.\\nfunction gt(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() > y.unwrap();\\n}\\n\\n/// @notice Implements the greater than or equal to operation (>=) in the UD60x18 type.\\nfunction gte(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() >= y.unwrap();\\n}\\n\\n/// @notice Implements a zero comparison check function in the UD60x18 type.\\nfunction isZero(UD60x18 x) pure returns (bool result) {\\n    // This wouldn't work if x could be negative.\\n    result = x.unwrap() == 0;\\n}\\n\\n/// @notice Implements the left shift operation (<<) in the UD60x18 type.\\nfunction lshift(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() << bits);\\n}\\n\\n/// @notice Implements the lower than operation (<) in the UD60x18 type.\\nfunction lt(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() < y.unwrap();\\n}\\n\\n/// @notice Implements the lower than or equal to operation (<=) in the UD60x18 type.\\nfunction lte(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() <= y.unwrap();\\n}\\n\\n/// @notice Implements the checked modulo operation (%) in the UD60x18 type.\\nfunction mod(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() % y.unwrap());\\n}\\n\\n/// @notice Implements the not equal operation (!=) in the UD60x18 type.\\nfunction neq(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() != y.unwrap();\\n}\\n\\n/// @notice Implements the NOT (~) bitwise operation in the UD60x18 type.\\nfunction not(UD60x18 x) pure returns (UD60x18 result) {\\n    result = wrap(~x.unwrap());\\n}\\n\\n/// @notice Implements the OR (|) bitwise operation in the UD60x18 type.\\nfunction or(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() | y.unwrap());\\n}\\n\\n/// @notice Implements the right shift operation (>>) in the UD60x18 type.\\nfunction rshift(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() >> bits);\\n}\\n\\n/// @notice Implements the checked subtraction operation (-) in the UD60x18 type.\\nfunction sub(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() - y.unwrap());\\n}\\n\\n/// @notice Implements the unchecked addition operation (+) in the UD60x18 type.\\nfunction uncheckedAdd(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() + y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked subtraction operation (-) in the UD60x18 type.\\nfunction uncheckedSub(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() - y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the XOR (^) bitwise operation in the UD60x18 type.\\nfunction xor(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() ^ y.unwrap());\\n}\\n\",\"keccak256\":\"0xf5faff881391d2c060029499a666cc5f0bea90a213150bb476fae8f02a5df268\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport {\\n    uEXP_MAX_INPUT,\\n    uEXP2_MAX_INPUT,\\n    uHALF_UNIT,\\n    uLOG2_10,\\n    uLOG2_E,\\n    uMAX_UD60x18,\\n    uMAX_WHOLE_UD60x18,\\n    UNIT,\\n    uUNIT,\\n    uUNIT_SQUARED,\\n    ZERO\\n} from \\\"./Constants.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Calculates the arithmetic average of x and y using the following formula:\\n///\\n/// $$\\n/// avg(x, y) = (x & y) + ((xUint ^ yUint) / 2)\\n/// $$\\n//\\n/// In English, this is what this formula does:\\n///\\n/// 1. AND x and y.\\n/// 2. Calculate half of XOR x and y.\\n/// 3. Add the two results together.\\n///\\n/// This technique is known as SWAR, which stands for \\\"SIMD within a register\\\". You can read more about it here:\\n/// https://devblogs.microsoft.com/oldnewthing/20220207-00/?p=106223\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// @param x The first operand as a UD60x18 number.\\n/// @param y The second operand as a UD60x18 number.\\n/// @return result The arithmetic average as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction avg(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n    unchecked {\\n        result = wrap((xUint & yUint) + ((xUint ^ yUint) >> 1));\\n    }\\n}\\n\\n/// @notice Yields the smallest whole number greater than or equal to x.\\n///\\n/// @dev This is optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional\\n/// counterparts. See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be less than or equal to `MAX_WHOLE_UD60x18`.\\n///\\n/// @param x The UD60x18 number to ceil.\\n/// @param result The smallest whole number greater than or equal to x, as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ceil(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    if (xUint > uMAX_WHOLE_UD60x18) {\\n        revert Errors.PRBMath_UD60x18_Ceil_Overflow(x);\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n        // Equivalent to `x % UNIT`.\\n        let remainder := mod(x, uUNIT)\\n\\n        // Equivalent to `UNIT - remainder`.\\n        let delta := sub(uUNIT, remainder)\\n\\n        // Equivalent to `x + remainder > 0 ? delta : 0`.\\n        result := add(x, mul(delta, gt(remainder, 0)))\\n    }\\n}\\n\\n/// @notice Divides two UD60x18 numbers, returning a new UD60x18 number.\\n///\\n/// @dev Uses {Common.mulDiv} to enable overflow-safe multiplication and division.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n///\\n/// @param x The numerator as a UD60x18 number.\\n/// @param y The denominator as a UD60x18 number.\\n/// @param result The quotient as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction div(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(Common.mulDiv(x.unwrap(), uUNIT, y.unwrap()));\\n}\\n\\n/// @notice Calculates the natural exponent of x using the following formula:\\n///\\n/// $$\\n/// e^x = 2^{x * log_2{e}}\\n/// $$\\n///\\n/// @dev Requirements:\\n/// - x must be less than 133_084258667509499441.\\n///\\n/// @param x The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    // This check prevents values greater than 192e18 from being passed to {exp2}.\\n    if (xUint > uEXP_MAX_INPUT) {\\n        revert Errors.PRBMath_UD60x18_Exp_InputTooBig(x);\\n    }\\n\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas.\\n        uint256 doubleUnitProduct = xUint * uLOG2_E;\\n        result = exp2(wrap(doubleUnitProduct / uUNIT));\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n///\\n/// @dev See https://ethereum.stackexchange.com/q/79903/24693\\n///\\n/// Requirements:\\n/// - x must be less than 192e18.\\n/// - The result must fit in UD60x18.\\n///\\n/// @param x The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    // Numbers greater than or equal to 192e18 don't fit in the 192.64-bit format.\\n    if (xUint > uEXP2_MAX_INPUT) {\\n        revert Errors.PRBMath_UD60x18_Exp2_InputTooBig(x);\\n    }\\n\\n    // Convert x to the 192.64-bit fixed-point format.\\n    uint256 x_192x64 = (xUint << 64) / uUNIT;\\n\\n    // Pass x to the {Common.exp2} function, which uses the 192.64-bit fixed-point number representation.\\n    result = wrap(Common.exp2(x_192x64));\\n}\\n\\n/// @notice Yields the greatest whole number less than or equal to x.\\n/// @dev Optimized for fractional value inputs, because every whole value has (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n/// @param x The UD60x18 number to floor.\\n/// @param result The greatest whole number less than or equal to x, as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction floor(UD60x18 x) pure returns (UD60x18 result) {\\n    assembly (\\\"memory-safe\\\") {\\n        // Equivalent to `x % UNIT`.\\n        let remainder := mod(x, uUNIT)\\n\\n        // Equivalent to `x - remainder > 0 ? remainder : 0)`.\\n        result := sub(x, mul(remainder, gt(remainder, 0)))\\n    }\\n}\\n\\n/// @notice Yields the excess beyond the floor of x using the odd function definition.\\n/// @dev See https://en.wikipedia.org/wiki/Fractional_part.\\n/// @param x The UD60x18 number to get the fractional part of.\\n/// @param result The fractional part of x as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction frac(UD60x18 x) pure returns (UD60x18 result) {\\n    assembly (\\\"memory-safe\\\") {\\n        result := mod(x, uUNIT)\\n    }\\n}\\n\\n/// @notice Calculates the geometric mean of x and y, i.e. $\\\\sqrt{x * y}$, rounding down.\\n///\\n/// @dev Requirements:\\n/// - x * y must fit in UD60x18.\\n///\\n/// @param x The first operand as a UD60x18 number.\\n/// @param y The second operand as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction gm(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n    if (xUint == 0 || yUint == 0) {\\n        return ZERO;\\n    }\\n\\n    unchecked {\\n        // Checking for overflow this way is faster than letting Solidity do it.\\n        uint256 xyUint = xUint * yUint;\\n        if (xyUint / xUint != yUint) {\\n            revert Errors.PRBMath_UD60x18_Gm_Overflow(x, y);\\n        }\\n\\n        // We don't need to multiply the result by `UNIT` here because the x*y product picked up a factor of `UNIT`\\n        // during multiplication. See the comments in {Common.sqrt}.\\n        result = wrap(Common.sqrt(xyUint));\\n    }\\n}\\n\\n/// @notice Calculates the inverse of x.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must not be zero.\\n///\\n/// @param x The UD60x18 number for which to calculate the inverse.\\n/// @return result The inverse as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction inv(UD60x18 x) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(uUNIT_SQUARED / x.unwrap());\\n    }\\n}\\n\\n/// @notice Calculates the natural logarithm of x using the following formula:\\n///\\n/// $$\\n/// ln{x} = log_2{x} / log_2{e}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n/// - The precision isn't sufficiently fine-grained to return exactly `UNIT` when the input is `E`.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The UD60x18 number for which to calculate the natural logarithm.\\n/// @return result The natural logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ln(UD60x18 x) pure returns (UD60x18 result) {\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas. This is overflow-safe because the maximum value that\\n        // {log2} can return is ~196_205294292027477728.\\n        result = wrap(log2(x).unwrap() * uUNIT / uLOG2_E);\\n    }\\n}\\n\\n/// @notice Calculates the common logarithm of x using the following formula:\\n///\\n/// $$\\n/// log_{10}{x} = log_2{x} / log_2{10}\\n/// $$\\n///\\n/// However, if x is an exact power of ten, a hard coded value is returned.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The UD60x18 number for which to calculate the common logarithm.\\n/// @return result The common logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log10(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    if (xUint < uUNIT) {\\n        revert Errors.PRBMath_UD60x18_Log_InputTooSmall(x);\\n    }\\n\\n    // Note that the `mul` in this assembly block is the standard multiplication operation, not {UD60x18.mul}.\\n    // prettier-ignore\\n    assembly (\\\"memory-safe\\\") {\\n        switch x\\n        case 1 { result := mul(uUNIT, sub(0, 18)) }\\n        case 10 { result := mul(uUNIT, sub(1, 18)) }\\n        case 100 { result := mul(uUNIT, sub(2, 18)) }\\n        case 1000 { result := mul(uUNIT, sub(3, 18)) }\\n        case 10000 { result := mul(uUNIT, sub(4, 18)) }\\n        case 100000 { result := mul(uUNIT, sub(5, 18)) }\\n        case 1000000 { result := mul(uUNIT, sub(6, 18)) }\\n        case 10000000 { result := mul(uUNIT, sub(7, 18)) }\\n        case 100000000 { result := mul(uUNIT, sub(8, 18)) }\\n        case 1000000000 { result := mul(uUNIT, sub(9, 18)) }\\n        case 10000000000 { result := mul(uUNIT, sub(10, 18)) }\\n        case 100000000000 { result := mul(uUNIT, sub(11, 18)) }\\n        case 1000000000000 { result := mul(uUNIT, sub(12, 18)) }\\n        case 10000000000000 { result := mul(uUNIT, sub(13, 18)) }\\n        case 100000000000000 { result := mul(uUNIT, sub(14, 18)) }\\n        case 1000000000000000 { result := mul(uUNIT, sub(15, 18)) }\\n        case 10000000000000000 { result := mul(uUNIT, sub(16, 18)) }\\n        case 100000000000000000 { result := mul(uUNIT, sub(17, 18)) }\\n        case 1000000000000000000 { result := 0 }\\n        case 10000000000000000000 { result := uUNIT }\\n        case 100000000000000000000 { result := mul(uUNIT, 2) }\\n        case 1000000000000000000000 { result := mul(uUNIT, 3) }\\n        case 10000000000000000000000 { result := mul(uUNIT, 4) }\\n        case 100000000000000000000000 { result := mul(uUNIT, 5) }\\n        case 1000000000000000000000000 { result := mul(uUNIT, 6) }\\n        case 10000000000000000000000000 { result := mul(uUNIT, 7) }\\n        case 100000000000000000000000000 { result := mul(uUNIT, 8) }\\n        case 1000000000000000000000000000 { result := mul(uUNIT, 9) }\\n        case 10000000000000000000000000000 { result := mul(uUNIT, 10) }\\n        case 100000000000000000000000000000 { result := mul(uUNIT, 11) }\\n        case 1000000000000000000000000000000 { result := mul(uUNIT, 12) }\\n        case 10000000000000000000000000000000 { result := mul(uUNIT, 13) }\\n        case 100000000000000000000000000000000 { result := mul(uUNIT, 14) }\\n        case 1000000000000000000000000000000000 { result := mul(uUNIT, 15) }\\n        case 10000000000000000000000000000000000 { result := mul(uUNIT, 16) }\\n        case 100000000000000000000000000000000000 { result := mul(uUNIT, 17) }\\n        case 1000000000000000000000000000000000000 { result := mul(uUNIT, 18) }\\n        case 10000000000000000000000000000000000000 { result := mul(uUNIT, 19) }\\n        case 100000000000000000000000000000000000000 { result := mul(uUNIT, 20) }\\n        case 1000000000000000000000000000000000000000 { result := mul(uUNIT, 21) }\\n        case 10000000000000000000000000000000000000000 { result := mul(uUNIT, 22) }\\n        case 100000000000000000000000000000000000000000 { result := mul(uUNIT, 23) }\\n        case 1000000000000000000000000000000000000000000 { result := mul(uUNIT, 24) }\\n        case 10000000000000000000000000000000000000000000 { result := mul(uUNIT, 25) }\\n        case 100000000000000000000000000000000000000000000 { result := mul(uUNIT, 26) }\\n        case 1000000000000000000000000000000000000000000000 { result := mul(uUNIT, 27) }\\n        case 10000000000000000000000000000000000000000000000 { result := mul(uUNIT, 28) }\\n        case 100000000000000000000000000000000000000000000000 { result := mul(uUNIT, 29) }\\n        case 1000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 30) }\\n        case 10000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 31) }\\n        case 100000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 32) }\\n        case 1000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 33) }\\n        case 10000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 34) }\\n        case 100000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 35) }\\n        case 1000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 36) }\\n        case 10000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 37) }\\n        case 100000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 38) }\\n        case 1000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 39) }\\n        case 10000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 40) }\\n        case 100000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 41) }\\n        case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 42) }\\n        case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 43) }\\n        case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 44) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 45) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 46) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 47) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 48) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 49) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 50) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 51) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 52) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 53) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 54) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 55) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 56) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 57) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 58) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 59) }\\n        default { result := uMAX_UD60x18 }\\n    }\\n\\n    if (result.unwrap() == uMAX_UD60x18) {\\n        unchecked {\\n            // Inline the fixed-point division to save gas.\\n            result = wrap(log2(x).unwrap() * uUNIT / uLOG2_10);\\n        }\\n    }\\n}\\n\\n/// @notice Calculates the binary logarithm of x using the iterative approximation algorithm:\\n///\\n/// $$\\n/// log_2{x} = n + log_2{y}, \\\\text{ where } y = x*2^{-n}, \\\\ y \\\\in [1, 2)\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, the input is inverted:\\n///\\n/// $$\\n/// log_2{x} = -log_2{\\\\frac{1}{x}}\\n/// $$\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n///\\n/// Notes:\\n/// - Due to the lossy precision of the iterative approximation, the results are not perfectly accurate to the last decimal.\\n///\\n/// Requirements:\\n/// - x must be greater than zero.\\n///\\n/// @param x The UD60x18 number for which to calculate the binary logarithm.\\n/// @return result The binary logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log2(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    if (xUint < uUNIT) {\\n        revert Errors.PRBMath_UD60x18_Log_InputTooSmall(x);\\n    }\\n\\n    unchecked {\\n        // Calculate the integer part of the logarithm.\\n        uint256 n = Common.msb(xUint / uUNIT);\\n\\n        // This is the integer part of the logarithm as a UD60x18 number. The operation can't overflow because n\\n        // n is at most 255 and UNIT is 1e18.\\n        uint256 resultUint = n * uUNIT;\\n\\n        // Calculate $y = x * 2^{-n}$.\\n        uint256 y = xUint >> n;\\n\\n        // If y is the unit number, the fractional part is zero.\\n        if (y == uUNIT) {\\n            return wrap(resultUint);\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The `delta >>= 1` part is equivalent to `delta /= 2`, but shifting bits is more gas efficient.\\n        uint256 DOUBLE_UNIT = 2e18;\\n        for (uint256 delta = uHALF_UNIT; delta > 0; delta >>= 1) {\\n            y = (y * y) / uUNIT;\\n\\n            // Is y^2 >= 2e18 and so in the range [2e18, 4e18)?\\n            if (y >= DOUBLE_UNIT) {\\n                // Add the 2^{-m} factor to the logarithm.\\n                resultUint += delta;\\n\\n                // Halve y, which corresponds to z/2 in the Wikipedia article.\\n                y >>= 1;\\n            }\\n        }\\n        result = wrap(resultUint);\\n    }\\n}\\n\\n/// @notice Multiplies two UD60x18 numbers together, returning a new UD60x18 number.\\n///\\n/// @dev Uses {Common.mulDiv} to enable overflow-safe multiplication and division.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n///\\n/// @dev See the documentation in {Common.mulDiv18}.\\n/// @param x The multiplicand as a UD60x18 number.\\n/// @param y The multiplier as a UD60x18 number.\\n/// @return result The product as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mul(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(Common.mulDiv18(x.unwrap(), y.unwrap()));\\n}\\n\\n/// @notice Raises x to the power of y.\\n///\\n/// For $1 \\\\leq x \\\\leq \\\\infty$, the following standard formula is used:\\n///\\n/// $$\\n/// x^y = 2^{log_2{x} * y}\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, since the unsigned {log2} is undefined, an equivalent formula is used:\\n///\\n/// $$\\n/// i = \\\\frac{1}{x}\\n/// w = 2^{log_2{i} * y}\\n/// x^y = \\\\frac{1}{w}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2} and {mul}.\\n/// - Returns `UNIT` for 0^0.\\n/// - It may not perform well with very small values of x. Consider using SD59x18 as an alternative.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}, {log2}, and {mul}.\\n///\\n/// @param x The base as a UD60x18 number.\\n/// @param y The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction pow(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n\\n    // If both x and y are zero, the result is `UNIT`. If just x is zero, the result is always zero.\\n    if (xUint == 0) {\\n        return yUint == 0 ? UNIT : ZERO;\\n    }\\n    // If x is `UNIT`, the result is always `UNIT`.\\n    else if (xUint == uUNIT) {\\n        return UNIT;\\n    }\\n\\n    // If y is zero, the result is always `UNIT`.\\n    if (yUint == 0) {\\n        return UNIT;\\n    }\\n    // If y is `UNIT`, the result is always x.\\n    else if (yUint == uUNIT) {\\n        return x;\\n    }\\n\\n    // If x is greater than `UNIT`, use the standard formula.\\n    if (xUint > uUNIT) {\\n        result = exp2(mul(log2(x), y));\\n    }\\n    // Conversely, if x is less than `UNIT`, use the equivalent formula.\\n    else {\\n        UD60x18 i = wrap(uUNIT_SQUARED / xUint);\\n        UD60x18 w = exp2(mul(log2(i), y));\\n        result = wrap(uUNIT_SQUARED / w.unwrap());\\n    }\\n}\\n\\n/// @notice Raises x (a UD60x18 number) to the power y (an unsigned basic integer) using the well-known\\n/// algorithm \\\"exponentiation by squaring\\\".\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - The result must fit in UD60x18.\\n///\\n/// @param x The base as a UD60x18 number.\\n/// @param y The exponent as a uint256.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction powu(UD60x18 x, uint256 y) pure returns (UD60x18 result) {\\n    // Calculate the first iteration of the loop in advance.\\n    uint256 xUint = x.unwrap();\\n    uint256 resultUint = y & 1 > 0 ? xUint : uUNIT;\\n\\n    // Equivalent to `for(y /= 2; y > 0; y /= 2)`.\\n    for (y >>= 1; y > 0; y >>= 1) {\\n        xUint = Common.mulDiv18(xUint, xUint);\\n\\n        // Equivalent to `y % 2 == 1`.\\n        if (y & 1 > 0) {\\n            resultUint = Common.mulDiv18(resultUint, xUint);\\n        }\\n    }\\n    result = wrap(resultUint);\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must be less than `MAX_UD60x18 / UNIT`.\\n///\\n/// @param x The UD60x18 number for which to calculate the square root.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    unchecked {\\n        if (xUint > uMAX_UD60x18 / uUNIT) {\\n            revert Errors.PRBMath_UD60x18_Sqrt_Overflow(x);\\n        }\\n        // Multiply x by `UNIT` to account for the factor of `UNIT` picked up when multiplying two UD60x18 numbers.\\n        // In this case, the two numbers are both the square root.\\n        result = wrap(Common.sqrt(xUint * uUNIT));\\n    }\\n}\\n\",\"keccak256\":\"0xafe12d658b5bb495226df1841cbfbcb25e9fc443c6d41a85b5ac6aa7ec79ea29\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\nimport \\\"./Helpers.sol\\\" as Helpers;\\nimport \\\"./Math.sol\\\" as Math;\\n\\n/// @notice The unsigned 60.18-decimal fixed-point number representation, which can have up to 60 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the Solidity type uint256.\\n/// @dev The value type is defined here so it can be imported in all other files.\\ntype UD60x18 is uint256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD1x18,\\n    Casting.intoUD2x18,\\n    Casting.intoSD59x18,\\n    Casting.intoUint128,\\n    Casting.intoUint256,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes the functions in this library callable on the UD60x18 type.\\nusing {\\n    Math.avg,\\n    Math.ceil,\\n    Math.div,\\n    Math.exp,\\n    Math.exp2,\\n    Math.floor,\\n    Math.frac,\\n    Math.gm,\\n    Math.inv,\\n    Math.ln,\\n    Math.log10,\\n    Math.log2,\\n    Math.mul,\\n    Math.pow,\\n    Math.powu,\\n    Math.sqrt\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                HELPER FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes the functions in this library callable on the UD60x18 type.\\nusing {\\n    Helpers.add,\\n    Helpers.and,\\n    Helpers.eq,\\n    Helpers.gt,\\n    Helpers.gte,\\n    Helpers.isZero,\\n    Helpers.lshift,\\n    Helpers.lt,\\n    Helpers.lte,\\n    Helpers.mod,\\n    Helpers.neq,\\n    Helpers.not,\\n    Helpers.or,\\n    Helpers.rshift,\\n    Helpers.sub,\\n    Helpers.uncheckedAdd,\\n    Helpers.uncheckedSub,\\n    Helpers.xor\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    OPERATORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes it possible to use these operators on the UD60x18 type.\\nusing {\\n    Helpers.add as +,\\n    Helpers.and2 as &,\\n    Math.div as /,\\n    Helpers.eq as ==,\\n    Helpers.gt as >,\\n    Helpers.gte as >=,\\n    Helpers.lt as <,\\n    Helpers.lte as <=,\\n    Helpers.or as |,\\n    Helpers.mod as %,\\n    Math.mul as *,\\n    Helpers.neq as !=,\\n    Helpers.not as ~,\\n    Helpers.sub as -,\\n    Helpers.xor as ^\\n} for UD60x18 global;\\n\",\"keccak256\":\"0xdd873b5124180d9b71498b3a7fe93b1c08c368bec741f7d5f8e17f78a0b70f31\",\"license\":\"MIT\"},\"@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Neutral Labs Inc.\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <info@neutralx.com>\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SD59x18, sd, intoUint256} from \\\"@prb/math/src/SD59x18.sol\\\";\\n\\nimport {IFeeCalculator, FeeDistribution} from \\\"./interfaces/IFeeCalculator.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport {VintageData, ITCO2} from \\\"./interfaces/ITCO2.sol\\\";\\n\\n/// @title FeeCalculator\\n/// @author Neutral Labs Inc.\\n/// @notice This contract calculates deposit and redemption fees for a given pool.\\n/// @dev It implements the IFeeCalculator interface.\\ncontract FeeCalculator is IFeeCalculator, Ownable {\\n    SD59x18 private zero = sd(0);\\n    SD59x18 private one = sd(1e18);\\n\\n    SD59x18 public depositFeeScale = sd(0.15 * 1e18);\\n    SD59x18 public depositFeeRatioScale = sd(1.25 * 1e18);\\n    SD59x18 public singleAssetDepositRelativeFee = sd(0.1 * 1e18);\\n\\n    SD59x18 public redemptionFeeScale = sd(0.3 * 1e18);\\n    SD59x18 public redemptionFeeShift = sd(0.1 * 1e18); //-log10(0+0.1)=1 -> 10^-1\\n\\n    function redemptionFeeConstant() public view returns (SD59x18) {\\n        return redemptionFeeScale * (one + redemptionFeeShift).log10(); //0.0413926851582251=log10(1+0.1)\\n    }\\n\\n    SD59x18 public singleAssetRedemptionRelativeFee = sd(0.1 * 1e18);\\n    SD59x18 public dustAssetRedemptionRelativeFee = sd(0.3 * 1e18);\\n\\n    address[] private _recipients;\\n    uint256[] private _shares;\\n\\n    event DepositFeeScaleUpdated(int256 depositFeeScale);\\n    event DepositFeeRatioUpdated(int256 depositFeeRatioScale);\\n    event SingleAssetDepositRelativeFeeUpdated(int256 singleAssetDepositRelativeFee);\\n    event RedemptionFeeScaleUpdated(int256 redemptionFeeScale);\\n    event RedemptionFeeShift(int256 redemptionFeeShift);\\n    event SingleAssetRedemptionRelativeFeeUpdated(int256 singleAssetRedemptionRelativeFee);\\n    event DustAssetRedemptionRelativeFeeUpdated(int256 dustAssetRedemptionRelativeFee);\\n    event FeeSetup(address[] recipients, uint256[] shares);\\n\\n    constructor() Ownable() {}\\n\\n    /// @notice Sets the deposit fee scale.\\n    /// @dev Can only be called by the current owner.\\n    /// @param _depositFeeScale The new deposit fee scale.\\n    function setDepositFeeScale(int256 _depositFeeScale) external onlyOwner {\\n        SD59x18 depositFeeScaleSD = sd(_depositFeeScale);\\n        require(depositFeeScaleSD >= zero && depositFeeScaleSD <= one, \\\"Deposit fee scale must be between 0 and 1\\\");\\n        depositFeeScale = depositFeeScaleSD;\\n        emit DepositFeeScaleUpdated(_depositFeeScale);\\n    }\\n\\n    /// @notice Sets the deposit fee ratio scale.\\n    /// @dev Can only be called by the current owner.\\n    /// @param _depositFeeRatioScale The new deposit fee ratio scale.\\n    function setDepositFeeRatioScale(int256 _depositFeeRatioScale) external onlyOwner {\\n        SD59x18 depositFeeRatioScaleSD = sd(_depositFeeRatioScale);\\n        require(depositFeeRatioScaleSD >= zero, \\\"Deposit fee ratio scale must be above 0\\\");\\n        depositFeeRatioScale = depositFeeRatioScaleSD;\\n        emit DepositFeeRatioUpdated(_depositFeeRatioScale);\\n    }\\n\\n    /// @notice Sets the single asset deposit relative fee.\\n    /// @dev Can only be called by the current owner.\\n    /// @param _singleAssetDepositRelativeFee The new single asset deposit relative fee.\\n    function setSingleAssetDepositRelativeFee(int256 _singleAssetDepositRelativeFee) external onlyOwner {\\n        SD59x18 singleAssetDepositRelativeFeeSD = sd(_singleAssetDepositRelativeFee);\\n        require(\\n            singleAssetDepositRelativeFeeSD >= zero && singleAssetDepositRelativeFeeSD <= one,\\n            \\\"Single asset deposit relative fee must be between 0 and 1\\\"\\n        );\\n        singleAssetDepositRelativeFee = singleAssetDepositRelativeFeeSD;\\n        emit SingleAssetDepositRelativeFeeUpdated(_singleAssetDepositRelativeFee);\\n    }\\n\\n    /// @notice Sets the redemption fee scale.\\n    /// @dev Can only be called by the current owner.\\n    /// @param _redemptionFeeScale The new redemption fee scale.\\n    function setRedemptionFeeScale(int256 _redemptionFeeScale) external onlyOwner {\\n        SD59x18 redemptionFeeScaleSD = sd(_redemptionFeeScale);\\n        require(\\n            redemptionFeeScaleSD >= zero && redemptionFeeScaleSD <= one, \\\"Redemption fee scale must be between 0 and 1\\\"\\n        );\\n        redemptionFeeScale = redemptionFeeScaleSD;\\n        emit RedemptionFeeScaleUpdated(_redemptionFeeScale);\\n    }\\n\\n    /// @notice Sets the redemption fee shift.\\n    /// @dev Can only be called by the current owner.\\n    /// @param _redemptionFeeShift The new redemption fee shift.\\n    function setRedemptionFeeShift(int256 _redemptionFeeShift) external onlyOwner {\\n        SD59x18 redemptionFeeShiftSD = sd(_redemptionFeeShift);\\n        require(\\n            redemptionFeeShiftSD >= zero && redemptionFeeShiftSD <= one, \\\"Redemption fee shift must be between 0 and 1\\\"\\n        );\\n        redemptionFeeShift = redemptionFeeShiftSD;\\n        emit RedemptionFeeShift(_redemptionFeeShift);\\n    }\\n\\n    /// @notice Sets the single asset redemption relative fee.\\n    /// @dev Can only be called by the current owner.\\n    /// @param _singleAssetRedemptionRelativeFee The new single asset redemption relative fee.\\n    function setSingleAssetRedemptionRelativeFee(int256 _singleAssetRedemptionRelativeFee) external onlyOwner {\\n        SD59x18 singleAssetRedemptionRelativeFeeSD = sd(_singleAssetRedemptionRelativeFee);\\n        require(\\n            singleAssetRedemptionRelativeFeeSD >= zero && singleAssetRedemptionRelativeFeeSD <= one,\\n            \\\"Single asset redemption relative fee must be between 0 and 1\\\"\\n        );\\n        singleAssetRedemptionRelativeFee = singleAssetRedemptionRelativeFeeSD;\\n        emit SingleAssetRedemptionRelativeFeeUpdated(_singleAssetRedemptionRelativeFee);\\n    }\\n\\n    /// @notice Sets the dust asset redemption relative fee.\\n    /// @dev Can only be called by the current owner.\\n    /// @param _dustAssetRedemptionRelativeFee The new dust asset redemption relative fee.\\n    function setDustAssetRedemptionRelativeFee(int256 _dustAssetRedemptionRelativeFee) external onlyOwner {\\n        SD59x18 dustAssetRedemptionRelativeFeeSD = sd(_dustAssetRedemptionRelativeFee);\\n        require(\\n            dustAssetRedemptionRelativeFeeSD >= zero && dustAssetRedemptionRelativeFeeSD <= one,\\n            \\\"Dust asset redemption relative fee must be between 0 and 1\\\"\\n        );\\n        dustAssetRedemptionRelativeFee = dustAssetRedemptionRelativeFeeSD;\\n        emit DustAssetRedemptionRelativeFeeUpdated(_dustAssetRedemptionRelativeFee);\\n    }\\n\\n    /// @notice Sets up the fee distribution among recipients.\\n    /// @dev Can only be called by the current owner.\\n    /// @param recipients The addresses of the fee recipients.\\n    /// @param shares The share of the fee each recipient should receive.\\n    function feeSetup(address[] memory recipients, uint256[] memory shares) external onlyOwner {\\n        require(recipients.length == shares.length, \\\"Recipients and shares arrays must have the same length\\\");\\n\\n        uint256 totalShares = 0;\\n        for (uint256 i = 0; i < shares.length; i++) {\\n            totalShares += shares[i];\\n        }\\n        require(totalShares == 100, \\\"Total shares must equal 100\\\");\\n\\n        _recipients = recipients;\\n        _shares = shares;\\n        emit FeeSetup(recipients, shares);\\n    }\\n\\n    /// @notice Calculates the deposit fee for a given amount.\\n    /// @param pool The address of the pool.\\n    /// @param tco2 The address of the TCO2 token.\\n    /// @param depositAmount The amount to be deposited.\\n    /// @return feeDistribution How the fee is meant to be\\n    /// distributed among the fee recipients.\\n    function calculateDepositFees(address pool, address tco2, uint256 depositAmount)\\n        external\\n        view\\n        override\\n        returns (FeeDistribution memory feeDistribution)\\n    {\\n        require(depositAmount > 0, \\\"depositAmount must be > 0\\\");\\n\\n        uint256 feeAmount = getDepositFee(depositAmount, getProjectSupply(pool, tco2), getTotalSupply(pool));\\n\\n        require(feeAmount <= depositAmount, \\\"Fee must be lower or equal to deposit amount\\\");\\n        require(feeAmount > 0, \\\"Fee must be greater than 0\\\");\\n        feeDistribution = calculateFeeShares(feeAmount);\\n    }\\n\\n    /// @notice Calculates the fee shares and recipients based on the total fee.\\n    /// @param totalFee The total fee to be distributed.\\n    /// @return feeDistribution The recipients and the amount of fees each\\n    /// recipient should receive.\\n    function calculateFeeShares(uint256 totalFee) internal view returns (FeeDistribution memory feeDistribution) {\\n        uint256[] memory shares = new uint256[](_recipients.length);\\n\\n        uint256 restFee = totalFee;\\n\\n        for (uint256 i = 0; i < _recipients.length; i++) {\\n            shares[i] = (totalFee * _shares[i]) / 100;\\n            restFee -= shares[i];\\n        }\\n\\n        // If any fee is left, it is distributed to the first recipient.\\n        // This may happen if any of the shares of the fee to be distributed\\n        // has leftover from the division by 100 above.\\n        shares[0] += restFee;\\n\\n        feeDistribution.recipients = _recipients;\\n        feeDistribution.shares = shares;\\n    }\\n\\n    /// @notice Calculates the redemption fees for a given amount.\\n    /// @param pool The address of the pool.\\n    /// @param tco2s The addresses of the TCO2 token.\\n    /// @param redemptionAmounts The amounts to be redeemed.\\n    /// @return feeDistribution How the fee is meant to be\\n    /// distributed among the fee recipients.\\n    function calculateRedemptionFees(address pool, address[] calldata tco2s, uint256[] calldata redemptionAmounts)\\n        external\\n        view\\n        override\\n        returns (FeeDistribution memory feeDistribution)\\n    {\\n        require(tco2s.length == redemptionAmounts.length, \\\"length mismatch\\\");\\n        require(tco2s.length == 1, \\\"only one\\\");\\n        address tco2 = tco2s[0];\\n        uint256 redemptionAmount = redemptionAmounts[0];\\n\\n        require(redemptionAmount > 0, \\\"redemptionAmount must be > 0\\\");\\n\\n        uint256 feeAmount = getRedemptionFee(redemptionAmount, getProjectSupply(pool, tco2), getTotalSupply(pool));\\n\\n        require(feeAmount <= redemptionAmount, \\\"Fee must be lower or equal to redemption amount\\\");\\n        require(feeAmount > 0, \\\"Fee must be greater than 0\\\");\\n        feeDistribution = calculateFeeShares(feeAmount);\\n    }\\n\\n    /// @notice Gets the total supply of a given pool.\\n    /// @param pool The address of the pool.\\n    /// @return The total supply of the pool.\\n    function getTotalSupply(address pool) private view returns (uint256) {\\n        uint256 totalSupply = IPool(pool).totalTCO2Supply();\\n        return totalSupply;\\n    }\\n\\n    /// @notice Gets the total supply of a project in the pool.\\n    /// @param pool The address of the pool.\\n    /// @return The total supply of the pool.\\n    function getProjectSupply(address pool, address tco2) private view returns (uint256) {\\n        VintageData memory vData = ITCO2(tco2).getVintageData();\\n        uint256 projectSupply = IPool(pool).totalPerProjectTCO2Supply(vData.projectTokenId);\\n        return projectSupply;\\n    }\\n\\n    /// @notice Calculates the ratios for deposit fee calculation.\\n    /// @param amount The amount to be deposited.\\n    /// @param current The current balance of the pool.\\n    /// @param total The total supply of the pool.\\n    /// @return The current and resulting ratios of the asset in the pool\\n    /// before and after the deposit.\\n    function getRatiosDeposit(SD59x18 amount, SD59x18 current, SD59x18 total) private view returns (SD59x18, SD59x18) {\\n        SD59x18 currentRatio = total == zero ? zero : current / total;\\n        SD59x18 resultingRatio = (current + amount) / (total + amount);\\n\\n        return (currentRatio, resultingRatio);\\n    }\\n\\n    /// @notice Calculates the ratios for redemption fee calculation.\\n    /// @param amount The amount to be redeemed.\\n    /// @param current The current balance of the pool.\\n    /// @param total The total supply of the pool.\\n    /// @return The current and resulting ratios of the asset in the pool\\n    /// before and after the redemption.\\n    function getRatiosRedemption(SD59x18 amount, SD59x18 current, SD59x18 total)\\n        private\\n        view\\n        returns (SD59x18, SD59x18)\\n    {\\n        SD59x18 currentRatio = total == zero ? zero : current / total;\\n        SD59x18 resultingRatio = (total - amount) == zero ? zero : (current - amount) / (total - amount);\\n\\n        return (currentRatio, resultingRatio);\\n    }\\n\\n    /// @notice Calculates the deposit fee for a given amount.\\n    /// @param amount The amount to be deposited.\\n    /// @param current The current balance of the pool.\\n    /// @param total The total supply of the pool.\\n    /// @return The calculated deposit fee.\\n    function getDepositFee(uint256 amount, uint256 current, uint256 total) private view returns (uint256) {\\n        require(\\n            total >= current,\\n            \\\"The total volume in the pool must be greater than or equal to the volume for an individual asset\\\"\\n        );\\n\\n        SD59x18 amountSD = sd(int256(amount));\\n\\n        if (\\n            current == total //single asset (or no assets) special case\\n        ) {\\n            return intoUint256(amountSD * singleAssetDepositRelativeFee);\\n        }\\n\\n        SD59x18 currentSD = sd(int256(current));\\n        SD59x18 resultingSD = currentSD + amountSD;\\n\\n        (SD59x18 currentRatio, SD59x18 resultingRatio) = getRatiosDeposit(amountSD, currentSD, sd(int256(total)));\\n\\n        require(resultingRatio * depositFeeRatioScale < one, \\\"Deposit outside range\\\");\\n\\n        SD59x18 currentLog = currentSD * (one - currentRatio * depositFeeRatioScale).log10();\\n        SD59x18 resultingLog = resultingSD * (one - resultingRatio * depositFeeRatioScale).log10();\\n\\n        SD59x18 feeSD = depositFeeScale * (currentLog - resultingLog);\\n\\n        uint256 fee = intoUint256(feeSD);\\n        return fee;\\n    }\\n\\n    /// @notice Calculates the redemption fee for a given amount.\\n    /// @param amount The amount to be redeemed.\\n    /// @param current The current balance of the pool.\\n    /// @param total The total supply of the pool.\\n    /// @return The calculated redemption fee.\\n    function getRedemptionFee(uint256 amount, uint256 current, uint256 total) private view returns (uint256) {\\n        require(\\n            total >= current,\\n            \\\"The total volume in the pool must be greater than or equal to the volume for an individual asset\\\"\\n        );\\n        require(amount <= current, \\\"The amount to be redeemed cannot exceed the current balance of the pool\\\");\\n\\n        SD59x18 amountSD = sd(int256(amount));\\n\\n        if (\\n            current == total //single asset (or no assets) special case\\n        ) {\\n            uint256 fee = intoUint256(amountSD * (singleAssetRedemptionRelativeFee));\\n            return fee;\\n        }\\n\\n        SD59x18 currentSD = sd(int256(current));\\n        SD59x18 resultingSD = currentSD - amountSD;\\n\\n        (SD59x18 currentRatio, SD59x18 resultingRatio) = getRatiosRedemption(amountSD, currentSD, sd(int256(total)));\\n\\n        //redemption_fee = scale * (resultingSD * log10(b+shift) - currentSD * log10(a+shift)) + constant*amount;\\n        SD59x18 currentLog = currentSD * (currentRatio + redemptionFeeShift).log10();\\n        SD59x18 resultingLog = resultingSD * (resultingRatio + redemptionFeeShift).log10();\\n        SD59x18 feeSD = redemptionFeeScale * (resultingLog - currentLog) + redemptionFeeConstant() * amountSD;\\n\\n        /*\\n        @dev\\n             The fee becomes negative if the amount is too small in comparison to the pool's size.\\n             In such cases, we apply the dustAssetRedemptionRelativeFee, which is currently set at 30%.\\n             This represents the maximum fee for the redemption function.\\n             This measure protects against scenarios where the sum of multiple extremely small redemptions could deplete the pool at a discounted rate.\\n\\n             Case exists only if asset pool domination is > 90% and amount is ~1e-18 of that asset in the pool\\n        */\\n        if (feeSD < zero) {\\n            return intoUint256(amountSD * dustAssetRedemptionRelativeFee);\\n        }\\n\\n        return intoUint256(feeSD);\\n    }\\n\\n    /// @notice Returns the current fee setup.\\n    /// @return recipients shares The fee recipients and their share of the total fee.\\n    function getFeeSetup() external view returns (address[] memory recipients, uint256[] memory shares) {\\n        recipients = _recipients;\\n        shares = _shares;\\n    }\\n}\\n\",\"keccak256\":\"0xe86ca6e78fe6d1021c3a2aa0e9055994cd90ccfc7c2f0df94cc9104446b0b344\",\"license\":\"UNLICENSED\"},\"@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Neutral Labs Inc.\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <info@neutralx.com>\\npragma solidity ^0.8.13;\\n\\nstruct FeeDistribution {\\n    address[] recipients;\\n    uint256[] shares;\\n}\\n\\n/// @title IFeeCalculator\\n/// @author Neutral Labs Inc.\\n/// @notice This interface defines methods for calculating fees.\\ninterface IFeeCalculator {\\n    /// @notice Calculates the deposit fee for a given amount.\\n    /// @param pool The address of the pool.\\n    /// @param tco2 The address of the TCO2 token.\\n    /// @param depositAmount The amount to be deposited.\\n    /// @return feeDistribution How the fee is meant to be\\n    /// distributed among the fee recipients.\\n    function calculateDepositFees(address pool, address tco2, uint256 depositAmount)\\n        external\\n        view\\n        returns (FeeDistribution memory feeDistribution);\\n\\n    /// @notice Calculates the redemption fees for a given amount.\\n    /// @param pool The address of the pool.\\n    /// @param tco2s The addresses of the TCO2 token.\\n    /// @param redemptionAmounts The amounts to be redeemed.\\n    /// @return feeDistribution How the fee is meant to be\\n    /// distributed among the fee recipients.\\n    function calculateRedemptionFees(address pool, address[] calldata tco2s, uint256[] calldata redemptionAmounts)\\n        external\\n        view\\n        returns (FeeDistribution memory feeDistribution);\\n}\\n\",\"keccak256\":\"0xd6a5ad002205c25a3965e976b6459ba8b43ba9168e03539b2134fa99938e9453\",\"license\":\"UNLICENSED\"},\"@toucanprotocol/dynamic-fee-pools/src/interfaces/IPool.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Neutral Labs Inc.\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <info@neutralx.com>\\npragma solidity ^0.8.13;\\n\\n/// @title IPool\\n/// @author Neutral Labs Inc.\\n/// @notice This interface defines methods exposed by the Pool\\ninterface IPool {\\n    /// @notice Exposes the total TCO2 supply, tracked as the aggregation of deposit,\\n    /// redemption and bridge actions\\n    /// @return supply Current supply\\n    function totalTCO2Supply() external view returns (uint256 supply);\\n\\n    /// @notice Exposes the total TCO2 supply of a project in a pool,\\n    /// tracked as the aggregation of deposit, redemmption and bridge actions\\n    /// @param projectTokenId The token id of the project as it's tracked\\n    /// in the CarbonProjects contract\\n    /// @return supply Current supply of a project in the pool\\n    function totalPerProjectTCO2Supply(uint256 projectTokenId) external view returns (uint256 supply);\\n}\\n\",\"keccak256\":\"0xcc9949538a1d1331b6975ce2e72b2681f35c62f6a3997bfa03cfd9d0820b616a\",\"license\":\"UNLICENSED\"},\"@toucanprotocol/dynamic-fee-pools/src/interfaces/ITCO2.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2024 Neutral Labs Inc.\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <info@neutralx.com>\\npragma solidity ^0.8.13;\\n\\nstruct VintageData {\\n    /// @dev A human-readable string which differentiates this from other vintages in\\n    /// the same project, and helps build the corresponding TCO2 name and symbol.\\n    string name;\\n    uint64 startTime; // UNIX timestamp\\n    uint64 endTime; // UNIX timestamp\\n    uint256 projectTokenId;\\n    uint64 totalVintageQuantity;\\n    bool isCorsiaCompliant;\\n    bool isCCPcompliant;\\n    string coBenefits;\\n    string correspAdjustment;\\n    string additionalCertification;\\n    string uri;\\n    string registry;\\n}\\n\\n/// @title ITCO2\\n/// @notice This interface defines methods exposed by the TCO2\\ninterface ITCO2 {\\n    /// @notice Get the vintage data for the TCO2\\n    /// @return vintageData Vintage data of the TCO2\\n    function getVintageData() external view returns (VintageData memory vintageData);\\n}\\n\",\"keccak256\":\"0xc75f5c557acfe9d032b5d2aa837231323d9eb6e992d22bac511e93536ede9284\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040526000600155670de0b6b3a7640000600255670214e8348c4f0000600355671158e460913d000060045567016345785d8a0000600555670429d069189e000060065567016345785d8a000060075567016345785d8a0000600855670429d069189e000060095534801561007557600080fd5b5061007f33610084565b6100d4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6130a180620000e46000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063abb064ca1161007c578063abb064ca14610264578063bf1204341461026c578063dd05ce6b14610282578063e28164731461028b578063eba466d314610294578063f2fde38b146102a757600080fd5b80638da5cb5b14610211578063974eda351461022c5780639db35c25146102355780639ef3009d1461023e578063a5bd84c21461025157600080fd5b8063661253d91161010a578063661253d9146101b1578063697f9899146101c45780636a1e618d146101d75780636fa1dc0b146101e0578063715018a6146101e95780638925ba9f146101f157600080fd5b80630f996f481461014757806332a278451461015c5780633716d4061461016f578063508cde861461018257806357d46b3214610195575b600080fd5b61015a61015536600461281d565b6102ba565b005b61015a61016a36600461281d565b6103b7565b61015a61017d36600461281d565b61047a565b61015a61019036600461281d565b610566565b61019e60095481565b6040519081526020015b60405180910390f35b61015a6101bf36600461281d565b610652565b61015a6101d236600461281d565b61072d565b61019e60045481565b61019e60085481565b61015a610808565b6102046101ff366004612852565b61083e565b6040516101a8919061288e565b6000546040516001600160a01b0390911681526020016101a8565b61019e60065481565b61019e60055481565b61015a61024c366004612a2c565b610989565b61020461025f366004612b38565b610b20565b61019e610d38565b610274610d60565b6040516101a8929190612bb9565b61019e60035481565b61019e60075481565b61015a6102a236600461281d565b610e17565b61015a6102b5366004612c3d565b610eef565b6000546001600160a01b031633146102ed5760405162461bcd60e51b81526004016102e490612c58565b60405180910390fd5b60015481908112158015610308575061030881600254121590565b61037a5760405162461bcd60e51b815260206004820152603c60248201527f53696e676c6520617373657420726564656d7074696f6e2072656c617469766560448201527f20666565206d757374206265206265747765656e203020616e6420310000000060648201526084016102e4565b60088190556040518281527f5af12456349aaae1c9dc69375e338430841f6a6f05105e501d56fc2514418a31906020015b60405180910390a15050565b6000546001600160a01b031633146103e15760405162461bcd60e51b81526004016102e490612c58565b60015481908112156104455760405162461bcd60e51b815260206004820152602760248201527f4465706f7369742066656520726174696f207363616c65206d75737420626520604482015266061626f766520360cc1b60648201526084016102e4565b60048190556040518281527f4f9680849c43eb85eb1b0142482e79a26890e877524f261a0ed86ea7be8f20ca906020016103ab565b6000546001600160a01b031633146104a45760405162461bcd60e51b81526004016102e490612c58565b600154819081121580156104bf57506104bf81600254121590565b6105315760405162461bcd60e51b815260206004820152603a60248201527f4475737420617373657420726564656d7074696f6e2072656c6174697665206660448201527f6565206d757374206265206265747765656e203020616e64203100000000000060648201526084016102e4565b60098190556040518281527f180d823d0bc54fe541a2bb335828cf366ab7293da838f29df39361808cd9c758906020016103ab565b6000546001600160a01b031633146105905760405162461bcd60e51b81526004016102e490612c58565b600154819081121580156105ab57506105ab81600254121590565b61061d5760405162461bcd60e51b815260206004820152603960248201527f53696e676c65206173736574206465706f7369742072656c617469766520666560448201527f65206d757374206265206265747765656e203020616e6420310000000000000060648201526084016102e4565b60058190556040518281527f04c04e3eb445b86958478734ef25a95fac6ef0d376acd23d287df8c9d7efb8e5906020016103ab565b6000546001600160a01b0316331461067c5760405162461bcd60e51b81526004016102e490612c58565b60015481908112158015610697575061069781600254121590565b6106f85760405162461bcd60e51b815260206004820152602c60248201527f526564656d7074696f6e20666565207368696674206d7573742062652062657460448201526b7765656e203020616e64203160a01b60648201526084016102e4565b60078190556040518281527fe312553748dac9766e2f27b24aba2f69b130f19142b9389c429eecb4f8cfb463906020016103ab565b6000546001600160a01b031633146107575760405162461bcd60e51b81526004016102e490612c58565b60015481908112158015610772575061077281600254121590565b6107d35760405162461bcd60e51b815260206004820152602c60248201527f526564656d7074696f6e20666565207363616c65206d7573742062652062657460448201526b7765656e203020616e64203160a01b60648201526084016102e4565b60068190556040518281527fa2661aa8404d9caaaf68a5791d6c5bd8763f88835b5ec034e5a663467b5ecc5a906020016103ab565b6000546001600160a01b031633146108325760405162461bcd60e51b81526004016102e490612c58565b61083c6000610f8d565b565b6040805180820190915260608082526020820152600082116108a25760405162461bcd60e51b815260206004820152601960248201527f6465706f736974416d6f756e74206d757374206265203e20300000000000000060448201526064016102e4565b60006108c0836108b28787610fdd565b6108bb886110c8565b611134565b9050828111156109275760405162461bcd60e51b815260206004820152602c60248201527f466565206d757374206265206c6f776572206f7220657175616c20746f20646560448201526b1c1bdcda5d08185b5bdd5b9d60a21b60648201526084016102e4565b600081116109775760405162461bcd60e51b815260206004820152601a60248201527f466565206d7573742062652067726561746572207468616e203000000000000060448201526064016102e4565b61098081611264565b95945050505050565b6000546001600160a01b031633146109b35760405162461bcd60e51b81526004016102e490612c58565b8051825114610a235760405162461bcd60e51b815260206004820152603660248201527f526563697069656e747320616e642073686172657320617272617973206d75736044820152750e840d0c2ecca40e8d0ca40e6c2daca40d8cadccee8d60531b60648201526084016102e4565b6000805b8251811015610a6957828181518110610a4257610a42612c8d565b602002602001015182610a559190612cb9565b915080610a6181612ccc565b915050610a27565b5080606414610aba5760405162461bcd60e51b815260206004820152601b60248201527f546f74616c20736861726573206d75737420657175616c20313030000000000060448201526064016102e4565b8251610acd90600a906020860190612768565b508151610ae190600b9060208501906127cd565b507f919670197286461f736c76f6283ed050bb2801865950326d8f151b1fcd64a4a28383604051610b13929190612bb9565b60405180910390a1505050565b6040805180820190915260608082526020820152838214610b755760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60448201526064016102e4565b60018414610bb05760405162461bcd60e51b81526020600482015260086024820152676f6e6c79206f6e6560c01b60448201526064016102e4565b600085856000818110610bc557610bc5612c8d565b9050602002016020810190610bda9190612c3d565b9050600084846000818110610bf157610bf1612c8d565b90506020020135905060008111610c4a5760405162461bcd60e51b815260206004820152601c60248201527f726564656d7074696f6e416d6f756e74206d757374206265203e20300000000060448201526064016102e4565b6000610c6882610c5a8b86610fdd565b610c638c6110c8565b6113ee565b905081811115610cd25760405162461bcd60e51b815260206004820152602f60248201527f466565206d757374206265206c6f776572206f7220657175616c20746f20726560448201526e19195b5c1d1a5bdb88185b5bdd5b9d608a1b60648201526084016102e4565b60008111610d225760405162461bcd60e51b815260206004820152601a60248201527f466565206d7573742062652067726561746572207468616e203000000000000060448201526064016102e4565b610d2b81611264565b9998505050505050505050565b6000610d5b600654610d56610d5160025460075461157c565b61158b565b612206565b905090565b606080600a805480602002602001604051908101604052809291908181526020018280548015610db957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d9b575b50505050509150600b805480602002602001604051908101604052809291908181526020018280548015610e0c57602002820191906000526020600020905b815481526020019060010190808311610df8575b505050505090509091565b6000546001600160a01b03163314610e415760405162461bcd60e51b81526004016102e490612c58565b60015481908112158015610e5c5750610e5c81600254121590565b610eba5760405162461bcd60e51b815260206004820152602960248201527f4465706f73697420666565207363616c65206d757374206265206265747765656044820152686e203020616e64203160b81b60648201526084016102e4565b60038190556040518281527fbbb80ad78751d961ce06ab36f0d4e24d4935c3fc5f68322593c089c704537e0b906020016103ab565b6000546001600160a01b03163314610f195760405162461bcd60e51b81526004016102e490612c58565b6001600160a01b038116610f7e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e4565b610f8781610f8d565b50565b90565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b0316633633f35f6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561101e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110469190810190612d92565b90506000846001600160a01b031663875bf3b583606001516040518263ffffffff1660e01b815260040161107c91815260200190565b602060405180830381865afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd9190612f1d565b925050505b92915050565b600080826001600160a01b031663562182a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112d9190612f1d565b9392505050565b6000828210156111565760405162461bcd60e51b81526004016102e490612f36565b8382840361117a5761117261116d82600554612206565b6122c4565b91505061112d565b836000611187828461157c565b90506000806111978585896122eb565b915091506111b16111aa82600454612206565b6002541390565b6111f55760405162461bcd60e51b81526020600482015260156024820152744465706f736974206f7574736964652072616e676560581b60448201526064016102e4565b600061121585610d56610d5160025461121088600454612206565b612340565b9050600061123285610d56610d5160025461121088600454612206565b90506000611246600354610d568585612340565b90506000611253826122c4565b9d9c50505050505050505050505050565b6040805180820190915260608082526020820152600a5460009067ffffffffffffffff8111156112965761129661292c565b6040519080825280602002602001820160405280156112bf578160200160208202803683370190505b5090508260005b600a5481101561135c576064600b82815481106112e5576112e5612c8d565b9060005260206000200154866112fb9190612fba565b6113059190612fe7565b83828151811061131757611317612c8d565b60200260200101818152505082818151811061133557611335612c8d565b6020026020010151826113489190613009565b91508061135481612ccc565b9150506112c6565b50808260008151811061137157611371612c8d565b602002602001018181516113859190612cb9565b905250600a8054604080516020808402820181019092528281529291908301828280156113db57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113bd575b5050509185525050506020820152919050565b6000828210156114105760405162461bcd60e51b81526004016102e490612f36565b828411156114965760405162461bcd60e51b815260206004820152604760248201527f54686520616d6f756e7420746f2062652072656465656d65642063616e6e6f7460448201527f20657863656564207468652063757272656e742062616c616e6365206f6620746064820152661a19481c1bdbdb60ca1b608482015260a4016102e4565b838284036114b95760006114af61116d83600854612206565b925061112d915050565b8360006114c68284612340565b90506000806114d685858961234f565b9150915060006114ef85610d56610d518660075461157c565b9050600061150685610d56610d518660075461157c565b9050600061153361151d600654610d568587612340565b61152e611528610d38565b8b612206565b61157c565b9050611540816001541390565b156115635761155461116d89600954612206565b9850505050505050505061112d565b61156c816122c4565b9c9b505050505050505050505050565b600061112d610f8a838561301c565b600081818112156115b25760405163059b101b60e01b8152600481018490526024016102e4565b8260018114611cbc57600a8114611ccd5760648114611cde576103e88114611cef576127108114611d0057620186a08114611d1157620f42408114611d2257629896808114611d33576305f5e1008114611d4457633b9aca008114611d55576402540be4008114611d665764174876e8008114611d775764e8d4a510008114611d88576509184e72a0008114611d9957655af3107a40008114611daa5766038d7ea4c680008114611dbb57662386f26fc100008114611dcc5767016345785d8a00008114611ddd57670de0b6b3a76400008114611dee57678ac7230489e800008114611df75768056bc75e2d631000008114611e0757683635c9adc5dea000008114611e175769021e19e0c9bab24000008114611e275769152d02c7e14af68000008114611e375769d3c21bcecceda10000008114611e47576a084595161401484a0000008114611e57576a52b7d2dcc80cd2e40000008114611e67576b033b2e3c9fd0803ce80000008114611e77576b204fce5e3e250261100000008114611e87576c01431e0fae6d7217caa00000008114611e97576c0c9f2c9cd04674edea400000008114611ea7576c7e37be2022c0914b26800000008114611eb7576d04ee2d6d415b85acef81000000008114611ec7576d314dc6448d9338c15b0a000000008114611ed7576e01ed09bead87c0378d8e64000000008114611ee7576e13426172c74d822b878fe8000000008114611ef7576ec097ce7bc90715b34b9f10000000008114611f07576f0785ee10d5da46d900f436a0000000008114611f17576f4b3b4ca85a86c47a098a2240000000008114611f28577002f050fe938943acc45f655680000000008114611f3957701d6329f1c35ca4bfabb9f56100000000008114611f4a57710125dfa371a19e6f7cb54395ca00000000008114611f5b57710b7abc627050305adf14a3d9e400000000008114611f6c577172cb5bd86321e38cb6ce6682e800000000008114611f7d5772047bf19673df52e37f2410011d1000000000008114611f8e57722cd76fe086b93ce2f768a00b22a000000000008114611f9f577301c06a5ec5433c60ddaa16406f5a4000000000008114611fb05773118427b3b4a05bc8a8a4de8459868000000000008114611fc15773af298d050e4395d69670b12b7f410000000000008114611fd2577406d79f82328ea3da61e066ebb2f88a0000000000008114611fe35774446c3b15f9926687d2c40534fdb5640000000000008114611ff4577502ac3a4edbbfb8014e3ba83411e915e8000000000000811461200557751aba4714957d300d0e549208b31adb1000000000000081146120165776010b46c6cdd6e3e0828f4db456ff0c8ea0000000000000811461202757760a70c3c40a64e6c51999090b65f67d9240000000000000811461203857766867a5a867f103b2fffa5a71fba0e7b6800000000000008114612049577704140c78940f6a24fdffc78873d4490d2100000000000000811461205a577728c87cb5c89a2571ebfdcb54864ada834a00000000000000811461206b57780197d4df19d605767337e9f14d3eec8920e400000000000000811461207c57780fee50b7025c36a0802f236d04753d5b48e800000000000000811461208d57789f4f2726179a224501d762422c946590d91000000000000000811461209e5779063917877cec0556b21269d695bdcbf7a87aa00000000000000081146120af57793e3aeb4ae1383562f4b82261d969f7ac94ca400000000000000081146120c0577a026e4d30eccc3215dd8f3157d27e23acbdcfe6800000000000000081146120d1577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000081146120e2577af316271c7fc3908a8bef464e3945ef7a25360a000000000000000081146120f3577b097edd871cfda3a5697758bf0e3cbb5ac5741c6400000000000000008114612104577b5ef4a74721e864761ea977768e5f518bb6891be800000000000000008114612115577c03b58e88c75313ec9d329eaaa18fb92f75215b171000000000000000008114612126577c25179157c93ec73e23fa32aa4f9d3bda934d8ee6a000000000000000008114612137577d0172ebad6ddc73c86d67c5faa71c245689c10795024000000000000000008114612148577d0e7d34c64a9c85d4460dbbca87196b61618a4bd2168000000000000000008114612159577d90e40fbeea1d3a4abc8955e946fe31cdcf66f634e1000000000000000000811461216a577e05a8e89d75252446eb5d5d5b1cc5edf20a1a059e10ca000000000000000000811461217b577e3899162693736ac531a5a58f1fbb4b746504382ca7e4000000000000000000811461218c577546bf5bb0385045767e0f0ef2e7aa1e517e454637d1dd604b1b811461219d577f161bcca7119915b50764b4abe86529797775a5f171951000000000000000000081146121ae576001600160ff1b0392506121bb565b67f9ccd8a1c507ffff1992506121bb565b67ebec21ee1da3ffff1992506121bb565b67de0b6b3a763fffff1992506121bb565b67d02ab486cedbffff1992506121bb565b67c249fdd32777ffff1992506121bb565b67b469471f8013ffff1992506121bb565b67a688906bd8afffff1992506121bb565b6798a7d9b8314bffff1992506121bb565b678ac7230489e7ffff1992506121bb565b677ce66c50e283ffff1992506121bb565b676f05b59d3b1fffff1992506121bb565b676124fee993bbffff1992506121bb565b6753444835ec57ffff1992506121bb565b674563918244f3ffff1992506121bb565b673782dace9d8fffff1992506121bb565b6729a2241af62bffff1992506121bb565b671bc16d674ec7ffff1992506121bb565b670de0b6b3a763ffff1992506121bb565b600092506121bb565b670de0b6b3a764000092506121bb565b671bc16d674ec8000092506121bb565b6729a2241af62c000092506121bb565b673782dace9d90000092506121bb565b674563918244f4000092506121bb565b6753444835ec58000092506121bb565b676124fee993bc000092506121bb565b676f05b59d3b20000092506121bb565b677ce66c50e284000092506121bb565b678ac7230489e8000092506121bb565b6798a7d9b8314c000092506121bb565b67a688906bd8b0000092506121bb565b67b469471f8014000092506121bb565b67c249fdd32778000092506121bb565b67d02ab486cedc000092506121bb565b67de0b6b3a7640000092506121bb565b67ebec21ee1da4000092506121bb565b67f9ccd8a1c508000092506121bb565b680107ad8f556c6c000092506121bb565b6801158e460913d0000092506121bb565b6801236efcbcbb34000092506121bb565b6801314fb3706298000092506121bb565b68013f306a2409fc000092506121bb565b68014d1120d7b160000092506121bb565b68015af1d78b58c4000092506121bb565b680168d28e3f0028000092506121bb565b680176b344f2a78c000092506121bb565b68018493fba64ef0000092506121bb565b68019274b259f654000092506121bb565b6801a055690d9db8000092506121bb565b6801ae361fc1451c000092506121bb565b6801bc16d674ec80000092506121bb565b6801c9f78d2893e4000092506121bb565b6801d7d843dc3b48000092506121bb565b6801e5b8fa8fe2ac000092506121bb565b6801f399b1438a10000092506121bb565b6802017a67f73174000092506121bb565b68020f5b1eaad8d8000092506121bb565b68021d3bd55e803c000092506121bb565b68022b1c8c1227a0000092506121bb565b680238fd42c5cf04000092506121bb565b680246ddf9797668000092506121bb565b680254beb02d1dcc000092506121bb565b6802629f66e0c530000092506121bb565b680270801d946c94000092506121bb565b68027e60d44813f8000092506121bb565b68028c418afbbb5c000092506121bb565b68029a2241af62c0000092506121bb565b6802a802f8630a24000092506121bb565b6802b5e3af16b188000092506121bb565b6802c3c465ca58ec000092506121bb565b6802d1a51c7e0050000092506121bb565b6802df85d331a7b4000092506121bb565b6802ed6689e54f18000092506121bb565b6802fb474098f67c000092506121bb565b68030927f74c9de0000092506121bb565b68031708ae004544000092506121bb565b680324e964b3eca8000092505b506001600160ff1b038203612200576121fd672e19dc008126bf2b670de0b6b3a76400006121eb610f8a876123be565b02816121f9576121f9612fd1565b0590565b91505b50919050565b60008282600160ff1b82148061221f5750600160ff1b81145b1561223d5760405163a6070c2560e01b815260040160405180910390fd5b6000806000841261224e5783612253565b836000035b9150600083126122635782612268565b826000035b905060006122768383612531565b90506001600160ff1b038111156122aa5760405163120b5b4360e01b815260048101899052602481018890526044016102e4565b60001985851813610d2b816122c0578260000390565b8290565b600081818112156110c257604051632463f3d560e01b8152600481018490526024016102e4565b60008060006122fb846001541490565b61230e5761230985856125e7565b612312565b6001545b90506000612332612323878961157c565b61232d878a61157c565b6125e7565b919791965090945050505050565b600061112d610f8a8385613044565b600080600061235f846001541490565b6123725761236d85856125e7565b612376565b6001545b9050600061238e6123878689612340565b6001541490565b6123ae576123a961239f8789612340565b61232d878a612340565b612332565b5060015490969095509350505050565b6000818181136123e45760405163059b101b60e01b8152600481018490526024016102e4565b6000670de0b6b3a764000082126123fd57506001612423565b50600019816ec097ce7bc90715b34b9f10000000008161241f5761241f612fd1565b0591505b60006124af670de0b6b3a7640000840560016fffffffffffffffffffffffffffffffff821160071b91821c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211871b91821c969096119490961792909217171791909117919091171790565b9050670de0b6b3a7640000810283821d670de0b6b3a763ffff1981016124dc575091909102949350505050565b671bc16d674ec800006706f05b59d3b200005b600081131561252257670de0b6b3a764000083800205925081831261251a579283019260019290921d915b60011d6124ef565b50505091909102949350505050565b60008080600019848609848602925082811083820303915050806000036125655750670de0b6b3a7640000900490506110c2565b670de0b6b3a7640000811061259757604051635173648d60e01b815260048101869052602481018590526044016102e4565b6000670de0b6b3a764000085870962040000818503049310909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690291505092915050565b60008282600160ff1b8214806126005750600160ff1b81145b1561261e576040516309fe2b4560e41b815260040160405180910390fd5b6000806000841261262f5783612634565b836000035b9150600083126126445782612649565b826000035b9050600061266083670de0b6b3a764000084612694565b90506001600160ff1b038111156122aa5760405163d49c26b360e01b815260048101899052602481018890526044016102e4565b60008080600019858709858702925082811083820303915050806000036126ce578382816126c4576126c4612fd1565b049250505061112d565b8381106126ff57604051630c740aef60e31b81526004810187905260248101869052604481018590526064016102e4565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b8280548282559060005260206000209081019282156127bd579160200282015b828111156127bd57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612788565b506127c9929150612808565b5090565b8280548282559060005260206000209081019282156127bd579160200282015b828111156127bd5782518255916020019190600101906127ed565b5b808211156127c95760008155600101612809565b60006020828403121561282f57600080fd5b5035919050565b80356001600160a01b038116811461284d57600080fd5b919050565b60008060006060848603121561286757600080fd5b61287084612836565b925061287e60208501612836565b9150604084013590509250925092565b6020808252825160408383015280516060840181905260009291820190839060808601905b808310156128dc5783516001600160a01b031682529284019260019290920191908401906128b3565b5086840151868203601f190160408801528051808352908501935090840191506000905b808210156129205783518352928401929184019160019190910190612900565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156129665761296661292c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156129955761299561292c565b604052919050565b600067ffffffffffffffff8211156129b7576129b761292c565b5060051b60200190565b600082601f8301126129d257600080fd5b813560206129e76129e28361299d565b61296c565b82815260059290921b84018101918181019086841115612a0657600080fd5b8286015b84811015612a215780358352918301918301612a0a565b509695505050505050565b60008060408385031215612a3f57600080fd5b823567ffffffffffffffff80821115612a5757600080fd5b818501915085601f830112612a6b57600080fd5b81356020612a7b6129e28361299d565b82815260059290921b84018101918181019089841115612a9a57600080fd5b948201945b83861015612abf57612ab086612836565b82529482019490820190612a9f565b96505086013592505080821115612ad557600080fd5b50612ae2858286016129c1565b9150509250929050565b60008083601f840112612afe57600080fd5b50813567ffffffffffffffff811115612b1657600080fd5b6020830191508360208260051b8501011115612b3157600080fd5b9250929050565b600080600080600060608688031215612b5057600080fd5b612b5986612836565b9450602086013567ffffffffffffffff80821115612b7657600080fd5b612b8289838a01612aec565b90965094506040880135915080821115612b9b57600080fd5b50612ba888828901612aec565b969995985093965092949392505050565b604080825283519082018190526000906020906060840190828701845b82811015612bfb5781516001600160a01b031684529284019290840190600101612bd6565b5050508381038285015284518082528583019183019060005b81811015612c3057835183529284019291840191600101612c14565b5090979650505050505050565b600060208284031215612c4f57600080fd5b61112d82612836565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156110c2576110c2612ca3565b600060018201612cde57612cde612ca3565b5060010190565b600082601f830112612cf657600080fd5b815167ffffffffffffffff811115612d1057612d1061292c565b6020612d24601f8301601f1916820161296c565b8281528582848701011115612d3857600080fd5b60005b83811015612d56578581018301518282018401528201612d3b565b506000928101909101919091529392505050565b805167ffffffffffffffff8116811461284d57600080fd5b8051801515811461284d57600080fd5b600060208284031215612da457600080fd5b815167ffffffffffffffff80821115612dbc57600080fd5b908301906101808286031215612dd157600080fd5b612dd9612942565b825182811115612de857600080fd5b612df487828601612ce5565b825250612e0360208401612d6a565b6020820152612e1460408401612d6a565b604082015260608301516060820152612e2f60808401612d6a565b6080820152612e4060a08401612d82565b60a0820152612e5160c08401612d82565b60c082015260e083015182811115612e6857600080fd5b612e7487828601612ce5565b60e0830152506101008084015183811115612e8e57600080fd5b612e9a88828701612ce5565b8284015250506101208084015183811115612eb457600080fd5b612ec088828701612ce5565b8284015250506101408084015183811115612eda57600080fd5b612ee688828701612ce5565b8284015250506101608084015183811115612f0057600080fd5b612f0c88828701612ce5565b918301919091525095945050505050565b600060208284031215612f2f57600080fd5b5051919050565b602080825260609082018190527f54686520746f74616c20766f6c756d6520696e2074686520706f6f6c206d757360408301527f742062652067726561746572207468616e206f7220657175616c20746f207468908201527f6520766f6c756d6520666f7220616e20696e646976696475616c206173736574608082015260a00190565b80820281158282048414176110c2576110c2612ca3565b634e487b7160e01b600052601260045260246000fd5b60008261300457634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156110c2576110c2612ca3565b808201828112600083128015821682158216171561303c5761303c612ca3565b505092915050565b818103600083128015838313168383128216171561306457613064612ca3565b509291505056fea2646970667358221220bbba3d1351e607b0a6788c5bd3e40c680678c60355e5987c6f71d6a562e7715164736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063abb064ca1161007c578063abb064ca14610264578063bf1204341461026c578063dd05ce6b14610282578063e28164731461028b578063eba466d314610294578063f2fde38b146102a757600080fd5b80638da5cb5b14610211578063974eda351461022c5780639db35c25146102355780639ef3009d1461023e578063a5bd84c21461025157600080fd5b8063661253d91161010a578063661253d9146101b1578063697f9899146101c45780636a1e618d146101d75780636fa1dc0b146101e0578063715018a6146101e95780638925ba9f146101f157600080fd5b80630f996f481461014757806332a278451461015c5780633716d4061461016f578063508cde861461018257806357d46b3214610195575b600080fd5b61015a61015536600461281d565b6102ba565b005b61015a61016a36600461281d565b6103b7565b61015a61017d36600461281d565b61047a565b61015a61019036600461281d565b610566565b61019e60095481565b6040519081526020015b60405180910390f35b61015a6101bf36600461281d565b610652565b61015a6101d236600461281d565b61072d565b61019e60045481565b61019e60085481565b61015a610808565b6102046101ff366004612852565b61083e565b6040516101a8919061288e565b6000546040516001600160a01b0390911681526020016101a8565b61019e60065481565b61019e60055481565b61015a61024c366004612a2c565b610989565b61020461025f366004612b38565b610b20565b61019e610d38565b610274610d60565b6040516101a8929190612bb9565b61019e60035481565b61019e60075481565b61015a6102a236600461281d565b610e17565b61015a6102b5366004612c3d565b610eef565b6000546001600160a01b031633146102ed5760405162461bcd60e51b81526004016102e490612c58565b60405180910390fd5b60015481908112158015610308575061030881600254121590565b61037a5760405162461bcd60e51b815260206004820152603c60248201527f53696e676c6520617373657420726564656d7074696f6e2072656c617469766560448201527f20666565206d757374206265206265747765656e203020616e6420310000000060648201526084016102e4565b60088190556040518281527f5af12456349aaae1c9dc69375e338430841f6a6f05105e501d56fc2514418a31906020015b60405180910390a15050565b6000546001600160a01b031633146103e15760405162461bcd60e51b81526004016102e490612c58565b60015481908112156104455760405162461bcd60e51b815260206004820152602760248201527f4465706f7369742066656520726174696f207363616c65206d75737420626520604482015266061626f766520360cc1b60648201526084016102e4565b60048190556040518281527f4f9680849c43eb85eb1b0142482e79a26890e877524f261a0ed86ea7be8f20ca906020016103ab565b6000546001600160a01b031633146104a45760405162461bcd60e51b81526004016102e490612c58565b600154819081121580156104bf57506104bf81600254121590565b6105315760405162461bcd60e51b815260206004820152603a60248201527f4475737420617373657420726564656d7074696f6e2072656c6174697665206660448201527f6565206d757374206265206265747765656e203020616e64203100000000000060648201526084016102e4565b60098190556040518281527f180d823d0bc54fe541a2bb335828cf366ab7293da838f29df39361808cd9c758906020016103ab565b6000546001600160a01b031633146105905760405162461bcd60e51b81526004016102e490612c58565b600154819081121580156105ab57506105ab81600254121590565b61061d5760405162461bcd60e51b815260206004820152603960248201527f53696e676c65206173736574206465706f7369742072656c617469766520666560448201527f65206d757374206265206265747765656e203020616e6420310000000000000060648201526084016102e4565b60058190556040518281527f04c04e3eb445b86958478734ef25a95fac6ef0d376acd23d287df8c9d7efb8e5906020016103ab565b6000546001600160a01b0316331461067c5760405162461bcd60e51b81526004016102e490612c58565b60015481908112158015610697575061069781600254121590565b6106f85760405162461bcd60e51b815260206004820152602c60248201527f526564656d7074696f6e20666565207368696674206d7573742062652062657460448201526b7765656e203020616e64203160a01b60648201526084016102e4565b60078190556040518281527fe312553748dac9766e2f27b24aba2f69b130f19142b9389c429eecb4f8cfb463906020016103ab565b6000546001600160a01b031633146107575760405162461bcd60e51b81526004016102e490612c58565b60015481908112158015610772575061077281600254121590565b6107d35760405162461bcd60e51b815260206004820152602c60248201527f526564656d7074696f6e20666565207363616c65206d7573742062652062657460448201526b7765656e203020616e64203160a01b60648201526084016102e4565b60068190556040518281527fa2661aa8404d9caaaf68a5791d6c5bd8763f88835b5ec034e5a663467b5ecc5a906020016103ab565b6000546001600160a01b031633146108325760405162461bcd60e51b81526004016102e490612c58565b61083c6000610f8d565b565b6040805180820190915260608082526020820152600082116108a25760405162461bcd60e51b815260206004820152601960248201527f6465706f736974416d6f756e74206d757374206265203e20300000000000000060448201526064016102e4565b60006108c0836108b28787610fdd565b6108bb886110c8565b611134565b9050828111156109275760405162461bcd60e51b815260206004820152602c60248201527f466565206d757374206265206c6f776572206f7220657175616c20746f20646560448201526b1c1bdcda5d08185b5bdd5b9d60a21b60648201526084016102e4565b600081116109775760405162461bcd60e51b815260206004820152601a60248201527f466565206d7573742062652067726561746572207468616e203000000000000060448201526064016102e4565b61098081611264565b95945050505050565b6000546001600160a01b031633146109b35760405162461bcd60e51b81526004016102e490612c58565b8051825114610a235760405162461bcd60e51b815260206004820152603660248201527f526563697069656e747320616e642073686172657320617272617973206d75736044820152750e840d0c2ecca40e8d0ca40e6c2daca40d8cadccee8d60531b60648201526084016102e4565b6000805b8251811015610a6957828181518110610a4257610a42612c8d565b602002602001015182610a559190612cb9565b915080610a6181612ccc565b915050610a27565b5080606414610aba5760405162461bcd60e51b815260206004820152601b60248201527f546f74616c20736861726573206d75737420657175616c20313030000000000060448201526064016102e4565b8251610acd90600a906020860190612768565b508151610ae190600b9060208501906127cd565b507f919670197286461f736c76f6283ed050bb2801865950326d8f151b1fcd64a4a28383604051610b13929190612bb9565b60405180910390a1505050565b6040805180820190915260608082526020820152838214610b755760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60448201526064016102e4565b60018414610bb05760405162461bcd60e51b81526020600482015260086024820152676f6e6c79206f6e6560c01b60448201526064016102e4565b600085856000818110610bc557610bc5612c8d565b9050602002016020810190610bda9190612c3d565b9050600084846000818110610bf157610bf1612c8d565b90506020020135905060008111610c4a5760405162461bcd60e51b815260206004820152601c60248201527f726564656d7074696f6e416d6f756e74206d757374206265203e20300000000060448201526064016102e4565b6000610c6882610c5a8b86610fdd565b610c638c6110c8565b6113ee565b905081811115610cd25760405162461bcd60e51b815260206004820152602f60248201527f466565206d757374206265206c6f776572206f7220657175616c20746f20726560448201526e19195b5c1d1a5bdb88185b5bdd5b9d608a1b60648201526084016102e4565b60008111610d225760405162461bcd60e51b815260206004820152601a60248201527f466565206d7573742062652067726561746572207468616e203000000000000060448201526064016102e4565b610d2b81611264565b9998505050505050505050565b6000610d5b600654610d56610d5160025460075461157c565b61158b565b612206565b905090565b606080600a805480602002602001604051908101604052809291908181526020018280548015610db957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d9b575b50505050509150600b805480602002602001604051908101604052809291908181526020018280548015610e0c57602002820191906000526020600020905b815481526020019060010190808311610df8575b505050505090509091565b6000546001600160a01b03163314610e415760405162461bcd60e51b81526004016102e490612c58565b60015481908112158015610e5c5750610e5c81600254121590565b610eba5760405162461bcd60e51b815260206004820152602960248201527f4465706f73697420666565207363616c65206d757374206265206265747765656044820152686e203020616e64203160b81b60648201526084016102e4565b60038190556040518281527fbbb80ad78751d961ce06ab36f0d4e24d4935c3fc5f68322593c089c704537e0b906020016103ab565b6000546001600160a01b03163314610f195760405162461bcd60e51b81526004016102e490612c58565b6001600160a01b038116610f7e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e4565b610f8781610f8d565b50565b90565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826001600160a01b0316633633f35f6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561101e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110469190810190612d92565b90506000846001600160a01b031663875bf3b583606001516040518263ffffffff1660e01b815260040161107c91815260200190565b602060405180830381865afa158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd9190612f1d565b925050505b92915050565b600080826001600160a01b031663562182a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015611109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112d9190612f1d565b9392505050565b6000828210156111565760405162461bcd60e51b81526004016102e490612f36565b8382840361117a5761117261116d82600554612206565b6122c4565b91505061112d565b836000611187828461157c565b90506000806111978585896122eb565b915091506111b16111aa82600454612206565b6002541390565b6111f55760405162461bcd60e51b81526020600482015260156024820152744465706f736974206f7574736964652072616e676560581b60448201526064016102e4565b600061121585610d56610d5160025461121088600454612206565b612340565b9050600061123285610d56610d5160025461121088600454612206565b90506000611246600354610d568585612340565b90506000611253826122c4565b9d9c50505050505050505050505050565b6040805180820190915260608082526020820152600a5460009067ffffffffffffffff8111156112965761129661292c565b6040519080825280602002602001820160405280156112bf578160200160208202803683370190505b5090508260005b600a5481101561135c576064600b82815481106112e5576112e5612c8d565b9060005260206000200154866112fb9190612fba565b6113059190612fe7565b83828151811061131757611317612c8d565b60200260200101818152505082818151811061133557611335612c8d565b6020026020010151826113489190613009565b91508061135481612ccc565b9150506112c6565b50808260008151811061137157611371612c8d565b602002602001018181516113859190612cb9565b905250600a8054604080516020808402820181019092528281529291908301828280156113db57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116113bd575b5050509185525050506020820152919050565b6000828210156114105760405162461bcd60e51b81526004016102e490612f36565b828411156114965760405162461bcd60e51b815260206004820152604760248201527f54686520616d6f756e7420746f2062652072656465656d65642063616e6e6f7460448201527f20657863656564207468652063757272656e742062616c616e6365206f6620746064820152661a19481c1bdbdb60ca1b608482015260a4016102e4565b838284036114b95760006114af61116d83600854612206565b925061112d915050565b8360006114c68284612340565b90506000806114d685858961234f565b9150915060006114ef85610d56610d518660075461157c565b9050600061150685610d56610d518660075461157c565b9050600061153361151d600654610d568587612340565b61152e611528610d38565b8b612206565b61157c565b9050611540816001541390565b156115635761155461116d89600954612206565b9850505050505050505061112d565b61156c816122c4565b9c9b505050505050505050505050565b600061112d610f8a838561301c565b600081818112156115b25760405163059b101b60e01b8152600481018490526024016102e4565b8260018114611cbc57600a8114611ccd5760648114611cde576103e88114611cef576127108114611d0057620186a08114611d1157620f42408114611d2257629896808114611d33576305f5e1008114611d4457633b9aca008114611d55576402540be4008114611d665764174876e8008114611d775764e8d4a510008114611d88576509184e72a0008114611d9957655af3107a40008114611daa5766038d7ea4c680008114611dbb57662386f26fc100008114611dcc5767016345785d8a00008114611ddd57670de0b6b3a76400008114611dee57678ac7230489e800008114611df75768056bc75e2d631000008114611e0757683635c9adc5dea000008114611e175769021e19e0c9bab24000008114611e275769152d02c7e14af68000008114611e375769d3c21bcecceda10000008114611e47576a084595161401484a0000008114611e57576a52b7d2dcc80cd2e40000008114611e67576b033b2e3c9fd0803ce80000008114611e77576b204fce5e3e250261100000008114611e87576c01431e0fae6d7217caa00000008114611e97576c0c9f2c9cd04674edea400000008114611ea7576c7e37be2022c0914b26800000008114611eb7576d04ee2d6d415b85acef81000000008114611ec7576d314dc6448d9338c15b0a000000008114611ed7576e01ed09bead87c0378d8e64000000008114611ee7576e13426172c74d822b878fe8000000008114611ef7576ec097ce7bc90715b34b9f10000000008114611f07576f0785ee10d5da46d900f436a0000000008114611f17576f4b3b4ca85a86c47a098a2240000000008114611f28577002f050fe938943acc45f655680000000008114611f3957701d6329f1c35ca4bfabb9f56100000000008114611f4a57710125dfa371a19e6f7cb54395ca00000000008114611f5b57710b7abc627050305adf14a3d9e400000000008114611f6c577172cb5bd86321e38cb6ce6682e800000000008114611f7d5772047bf19673df52e37f2410011d1000000000008114611f8e57722cd76fe086b93ce2f768a00b22a000000000008114611f9f577301c06a5ec5433c60ddaa16406f5a4000000000008114611fb05773118427b3b4a05bc8a8a4de8459868000000000008114611fc15773af298d050e4395d69670b12b7f410000000000008114611fd2577406d79f82328ea3da61e066ebb2f88a0000000000008114611fe35774446c3b15f9926687d2c40534fdb5640000000000008114611ff4577502ac3a4edbbfb8014e3ba83411e915e8000000000000811461200557751aba4714957d300d0e549208b31adb1000000000000081146120165776010b46c6cdd6e3e0828f4db456ff0c8ea0000000000000811461202757760a70c3c40a64e6c51999090b65f67d9240000000000000811461203857766867a5a867f103b2fffa5a71fba0e7b6800000000000008114612049577704140c78940f6a24fdffc78873d4490d2100000000000000811461205a577728c87cb5c89a2571ebfdcb54864ada834a00000000000000811461206b57780197d4df19d605767337e9f14d3eec8920e400000000000000811461207c57780fee50b7025c36a0802f236d04753d5b48e800000000000000811461208d57789f4f2726179a224501d762422c946590d91000000000000000811461209e5779063917877cec0556b21269d695bdcbf7a87aa00000000000000081146120af57793e3aeb4ae1383562f4b82261d969f7ac94ca400000000000000081146120c0577a026e4d30eccc3215dd8f3157d27e23acbdcfe6800000000000000081146120d1577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000081146120e2577af316271c7fc3908a8bef464e3945ef7a25360a000000000000000081146120f3577b097edd871cfda3a5697758bf0e3cbb5ac5741c6400000000000000008114612104577b5ef4a74721e864761ea977768e5f518bb6891be800000000000000008114612115577c03b58e88c75313ec9d329eaaa18fb92f75215b171000000000000000008114612126577c25179157c93ec73e23fa32aa4f9d3bda934d8ee6a000000000000000008114612137577d0172ebad6ddc73c86d67c5faa71c245689c10795024000000000000000008114612148577d0e7d34c64a9c85d4460dbbca87196b61618a4bd2168000000000000000008114612159577d90e40fbeea1d3a4abc8955e946fe31cdcf66f634e1000000000000000000811461216a577e05a8e89d75252446eb5d5d5b1cc5edf20a1a059e10ca000000000000000000811461217b577e3899162693736ac531a5a58f1fbb4b746504382ca7e4000000000000000000811461218c577546bf5bb0385045767e0f0ef2e7aa1e517e454637d1dd604b1b811461219d577f161bcca7119915b50764b4abe86529797775a5f171951000000000000000000081146121ae576001600160ff1b0392506121bb565b67f9ccd8a1c507ffff1992506121bb565b67ebec21ee1da3ffff1992506121bb565b67de0b6b3a763fffff1992506121bb565b67d02ab486cedbffff1992506121bb565b67c249fdd32777ffff1992506121bb565b67b469471f8013ffff1992506121bb565b67a688906bd8afffff1992506121bb565b6798a7d9b8314bffff1992506121bb565b678ac7230489e7ffff1992506121bb565b677ce66c50e283ffff1992506121bb565b676f05b59d3b1fffff1992506121bb565b676124fee993bbffff1992506121bb565b6753444835ec57ffff1992506121bb565b674563918244f3ffff1992506121bb565b673782dace9d8fffff1992506121bb565b6729a2241af62bffff1992506121bb565b671bc16d674ec7ffff1992506121bb565b670de0b6b3a763ffff1992506121bb565b600092506121bb565b670de0b6b3a764000092506121bb565b671bc16d674ec8000092506121bb565b6729a2241af62c000092506121bb565b673782dace9d90000092506121bb565b674563918244f4000092506121bb565b6753444835ec58000092506121bb565b676124fee993bc000092506121bb565b676f05b59d3b20000092506121bb565b677ce66c50e284000092506121bb565b678ac7230489e8000092506121bb565b6798a7d9b8314c000092506121bb565b67a688906bd8b0000092506121bb565b67b469471f8014000092506121bb565b67c249fdd32778000092506121bb565b67d02ab486cedc000092506121bb565b67de0b6b3a7640000092506121bb565b67ebec21ee1da4000092506121bb565b67f9ccd8a1c508000092506121bb565b680107ad8f556c6c000092506121bb565b6801158e460913d0000092506121bb565b6801236efcbcbb34000092506121bb565b6801314fb3706298000092506121bb565b68013f306a2409fc000092506121bb565b68014d1120d7b160000092506121bb565b68015af1d78b58c4000092506121bb565b680168d28e3f0028000092506121bb565b680176b344f2a78c000092506121bb565b68018493fba64ef0000092506121bb565b68019274b259f654000092506121bb565b6801a055690d9db8000092506121bb565b6801ae361fc1451c000092506121bb565b6801bc16d674ec80000092506121bb565b6801c9f78d2893e4000092506121bb565b6801d7d843dc3b48000092506121bb565b6801e5b8fa8fe2ac000092506121bb565b6801f399b1438a10000092506121bb565b6802017a67f73174000092506121bb565b68020f5b1eaad8d8000092506121bb565b68021d3bd55e803c000092506121bb565b68022b1c8c1227a0000092506121bb565b680238fd42c5cf04000092506121bb565b680246ddf9797668000092506121bb565b680254beb02d1dcc000092506121bb565b6802629f66e0c530000092506121bb565b680270801d946c94000092506121bb565b68027e60d44813f8000092506121bb565b68028c418afbbb5c000092506121bb565b68029a2241af62c0000092506121bb565b6802a802f8630a24000092506121bb565b6802b5e3af16b188000092506121bb565b6802c3c465ca58ec000092506121bb565b6802d1a51c7e0050000092506121bb565b6802df85d331a7b4000092506121bb565b6802ed6689e54f18000092506121bb565b6802fb474098f67c000092506121bb565b68030927f74c9de0000092506121bb565b68031708ae004544000092506121bb565b680324e964b3eca8000092505b506001600160ff1b038203612200576121fd672e19dc008126bf2b670de0b6b3a76400006121eb610f8a876123be565b02816121f9576121f9612fd1565b0590565b91505b50919050565b60008282600160ff1b82148061221f5750600160ff1b81145b1561223d5760405163a6070c2560e01b815260040160405180910390fd5b6000806000841261224e5783612253565b836000035b9150600083126122635782612268565b826000035b905060006122768383612531565b90506001600160ff1b038111156122aa5760405163120b5b4360e01b815260048101899052602481018890526044016102e4565b60001985851813610d2b816122c0578260000390565b8290565b600081818112156110c257604051632463f3d560e01b8152600481018490526024016102e4565b60008060006122fb846001541490565b61230e5761230985856125e7565b612312565b6001545b90506000612332612323878961157c565b61232d878a61157c565b6125e7565b919791965090945050505050565b600061112d610f8a8385613044565b600080600061235f846001541490565b6123725761236d85856125e7565b612376565b6001545b9050600061238e6123878689612340565b6001541490565b6123ae576123a961239f8789612340565b61232d878a612340565b612332565b5060015490969095509350505050565b6000818181136123e45760405163059b101b60e01b8152600481018490526024016102e4565b6000670de0b6b3a764000082126123fd57506001612423565b50600019816ec097ce7bc90715b34b9f10000000008161241f5761241f612fd1565b0591505b60006124af670de0b6b3a7640000840560016fffffffffffffffffffffffffffffffff821160071b91821c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211871b91821c969096119490961792909217171791909117919091171790565b9050670de0b6b3a7640000810283821d670de0b6b3a763ffff1981016124dc575091909102949350505050565b671bc16d674ec800006706f05b59d3b200005b600081131561252257670de0b6b3a764000083800205925081831261251a579283019260019290921d915b60011d6124ef565b50505091909102949350505050565b60008080600019848609848602925082811083820303915050806000036125655750670de0b6b3a7640000900490506110c2565b670de0b6b3a7640000811061259757604051635173648d60e01b815260048101869052602481018590526044016102e4565b6000670de0b6b3a764000085870962040000818503049310909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690291505092915050565b60008282600160ff1b8214806126005750600160ff1b81145b1561261e576040516309fe2b4560e41b815260040160405180910390fd5b6000806000841261262f5783612634565b836000035b9150600083126126445782612649565b826000035b9050600061266083670de0b6b3a764000084612694565b90506001600160ff1b038111156122aa5760405163d49c26b360e01b815260048101899052602481018890526044016102e4565b60008080600019858709858702925082811083820303915050806000036126ce578382816126c4576126c4612fd1565b049250505061112d565b8381106126ff57604051630c740aef60e31b81526004810187905260248101869052604481018590526064016102e4565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b8280548282559060005260206000209081019282156127bd579160200282015b828111156127bd57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612788565b506127c9929150612808565b5090565b8280548282559060005260206000209081019282156127bd579160200282015b828111156127bd5782518255916020019190600101906127ed565b5b808211156127c95760008155600101612809565b60006020828403121561282f57600080fd5b5035919050565b80356001600160a01b038116811461284d57600080fd5b919050565b60008060006060848603121561286757600080fd5b61287084612836565b925061287e60208501612836565b9150604084013590509250925092565b6020808252825160408383015280516060840181905260009291820190839060808601905b808310156128dc5783516001600160a01b031682529284019260019290920191908401906128b3565b5086840151868203601f190160408801528051808352908501935090840191506000905b808210156129205783518352928401929184019160019190910190612900565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156129665761296661292c565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156129955761299561292c565b604052919050565b600067ffffffffffffffff8211156129b7576129b761292c565b5060051b60200190565b600082601f8301126129d257600080fd5b813560206129e76129e28361299d565b61296c565b82815260059290921b84018101918181019086841115612a0657600080fd5b8286015b84811015612a215780358352918301918301612a0a565b509695505050505050565b60008060408385031215612a3f57600080fd5b823567ffffffffffffffff80821115612a5757600080fd5b818501915085601f830112612a6b57600080fd5b81356020612a7b6129e28361299d565b82815260059290921b84018101918181019089841115612a9a57600080fd5b948201945b83861015612abf57612ab086612836565b82529482019490820190612a9f565b96505086013592505080821115612ad557600080fd5b50612ae2858286016129c1565b9150509250929050565b60008083601f840112612afe57600080fd5b50813567ffffffffffffffff811115612b1657600080fd5b6020830191508360208260051b8501011115612b3157600080fd5b9250929050565b600080600080600060608688031215612b5057600080fd5b612b5986612836565b9450602086013567ffffffffffffffff80821115612b7657600080fd5b612b8289838a01612aec565b90965094506040880135915080821115612b9b57600080fd5b50612ba888828901612aec565b969995985093965092949392505050565b604080825283519082018190526000906020906060840190828701845b82811015612bfb5781516001600160a01b031684529284019290840190600101612bd6565b5050508381038285015284518082528583019183019060005b81811015612c3057835183529284019291840191600101612c14565b5090979650505050505050565b600060208284031215612c4f57600080fd5b61112d82612836565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156110c2576110c2612ca3565b600060018201612cde57612cde612ca3565b5060010190565b600082601f830112612cf657600080fd5b815167ffffffffffffffff811115612d1057612d1061292c565b6020612d24601f8301601f1916820161296c565b8281528582848701011115612d3857600080fd5b60005b83811015612d56578581018301518282018401528201612d3b565b506000928101909101919091529392505050565b805167ffffffffffffffff8116811461284d57600080fd5b8051801515811461284d57600080fd5b600060208284031215612da457600080fd5b815167ffffffffffffffff80821115612dbc57600080fd5b908301906101808286031215612dd157600080fd5b612dd9612942565b825182811115612de857600080fd5b612df487828601612ce5565b825250612e0360208401612d6a565b6020820152612e1460408401612d6a565b604082015260608301516060820152612e2f60808401612d6a565b6080820152612e4060a08401612d82565b60a0820152612e5160c08401612d82565b60c082015260e083015182811115612e6857600080fd5b612e7487828601612ce5565b60e0830152506101008084015183811115612e8e57600080fd5b612e9a88828701612ce5565b8284015250506101208084015183811115612eb457600080fd5b612ec088828701612ce5565b8284015250506101408084015183811115612eda57600080fd5b612ee688828701612ce5565b8284015250506101608084015183811115612f0057600080fd5b612f0c88828701612ce5565b918301919091525095945050505050565b600060208284031215612f2f57600080fd5b5051919050565b602080825260609082018190527f54686520746f74616c20766f6c756d6520696e2074686520706f6f6c206d757360408301527f742062652067726561746572207468616e206f7220657175616c20746f207468908201527f6520766f6c756d6520666f7220616e20696e646976696475616c206173736574608082015260a00190565b80820281158282048414176110c2576110c2612ca3565b634e487b7160e01b600052601260045260246000fd5b60008261300457634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156110c2576110c2612ca3565b808201828112600083128015821682158216171561303c5761303c612ca3565b505092915050565b818103600083128015838313168383128216171561306457613064612ca3565b509291505056fea2646970667358221220bbba3d1351e607b0a6788c5bd3e40c680678c60355e5987c6f71d6a562e7715164736f6c63430008130033",
  "devdoc": {
    "author": "Neutral Labs Inc.",
    "details": "It implements the IFeeCalculator interface.",
    "kind": "dev",
    "methods": {
      "calculateDepositFees(address,address,uint256)": {
        "params": {
          "depositAmount": "The amount to be deposited.",
          "pool": "The address of the pool.",
          "tco2": "The address of the TCO2 token."
        },
        "returns": {
          "feeDistribution": "How the fee is meant to be distributed among the fee recipients."
        }
      },
      "calculateRedemptionFees(address,address[],uint256[])": {
        "params": {
          "pool": "The address of the pool.",
          "redemptionAmounts": "The amounts to be redeemed.",
          "tco2s": "The addresses of the TCO2 token."
        },
        "returns": {
          "feeDistribution": "How the fee is meant to be distributed among the fee recipients."
        }
      },
      "feeSetup(address[],uint256[])": {
        "details": "Can only be called by the current owner.",
        "params": {
          "recipients": "The addresses of the fee recipients.",
          "shares": "The share of the fee each recipient should receive."
        }
      },
      "getFeeSetup()": {
        "returns": {
          "recipients": "shares The fee recipients and their share of the total fee."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDepositFeeRatioScale(int256)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "_depositFeeRatioScale": "The new deposit fee ratio scale."
        }
      },
      "setDepositFeeScale(int256)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "_depositFeeScale": "The new deposit fee scale."
        }
      },
      "setDustAssetRedemptionRelativeFee(int256)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "_dustAssetRedemptionRelativeFee": "The new dust asset redemption relative fee."
        }
      },
      "setRedemptionFeeScale(int256)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "_redemptionFeeScale": "The new redemption fee scale."
        }
      },
      "setRedemptionFeeShift(int256)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "_redemptionFeeShift": "The new redemption fee shift."
        }
      },
      "setSingleAssetDepositRelativeFee(int256)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "_singleAssetDepositRelativeFee": "The new single asset deposit relative fee."
        }
      },
      "setSingleAssetRedemptionRelativeFee(int256)": {
        "details": "Can only be called by the current owner.",
        "params": {
          "_singleAssetRedemptionRelativeFee": "The new single asset redemption relative fee."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "FeeCalculator",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath_MulDiv18_Overflow(uint256,uint256)": [
        {
          "notice": "Thrown when the resultant value in {mulDiv18} overflows uint256."
        }
      ],
      "PRBMath_MulDiv_Overflow(uint256,uint256,uint256)": [
        {
          "notice": "Thrown when the resultant value in {mulDiv} overflows uint256."
        }
      ],
      "PRBMath_SD59x18_Div_InputTooSmall()": [
        {
          "notice": "Thrown when dividing two numbers and one of them is `MIN_SD59x18`."
        }
      ],
      "PRBMath_SD59x18_Div_Overflow(int256,int256)": [
        {
          "notice": "Thrown when dividing two numbers and one of the intermediary unsigned results overflows SD59x18."
        }
      ],
      "PRBMath_SD59x18_IntoUint256_Underflow(int256)": [
        {
          "notice": "Thrown when trying to cast a UD60x18 number that doesn't fit in uint256."
        }
      ],
      "PRBMath_SD59x18_Log_InputTooSmall(int256)": [
        {
          "notice": "Thrown when taking the logarithm of a number less than or equal to zero."
        }
      ],
      "PRBMath_SD59x18_Mul_InputTooSmall()": [
        {
          "notice": "Thrown when multiplying two numbers and one of the inputs is `MIN_SD59x18`."
        }
      ],
      "PRBMath_SD59x18_Mul_Overflow(int256,int256)": [
        {
          "notice": "Thrown when multiplying two numbers and the intermediary absolute result overflows SD59x18."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "calculateDepositFees(address,address,uint256)": {
        "notice": "Calculates the deposit fee for a given amount."
      },
      "calculateRedemptionFees(address,address[],uint256[])": {
        "notice": "Calculates the redemption fees for a given amount."
      },
      "feeSetup(address[],uint256[])": {
        "notice": "Sets up the fee distribution among recipients."
      },
      "getFeeSetup()": {
        "notice": "Returns the current fee setup."
      },
      "setDepositFeeRatioScale(int256)": {
        "notice": "Sets the deposit fee ratio scale."
      },
      "setDepositFeeScale(int256)": {
        "notice": "Sets the deposit fee scale."
      },
      "setDustAssetRedemptionRelativeFee(int256)": {
        "notice": "Sets the dust asset redemption relative fee."
      },
      "setRedemptionFeeScale(int256)": {
        "notice": "Sets the redemption fee scale."
      },
      "setRedemptionFeeShift(int256)": {
        "notice": "Sets the redemption fee shift."
      },
      "setSingleAssetDepositRelativeFee(int256)": {
        "notice": "Sets the single asset deposit relative fee."
      },
      "setSingleAssetRedemptionRelativeFee(int256)": {
        "notice": "Sets the single asset redemption relative fee."
      }
    },
    "notice": "This contract calculates deposit and redemption fees for a given pool.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5822,
        "contract": "@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol:FeeCalculator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16034,
        "contract": "@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol:FeeCalculator",
        "label": "zero",
        "offset": 0,
        "slot": "1",
        "type": "t_userDefinedValueType(SD59x18)13824"
      },
      {
        "astId": 16040,
        "contract": "@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol:FeeCalculator",
        "label": "one",
        "offset": 0,
        "slot": "2",
        "type": "t_userDefinedValueType(SD59x18)13824"
      },
      {
        "astId": 16048,
        "contract": "@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol:FeeCalculator",
        "label": "depositFeeScale",
        "offset": 0,
        "slot": "3",
        "type": "t_userDefinedValueType(SD59x18)13824"
      },
      {
        "astId": 16056,
        "contract": "@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol:FeeCalculator",
        "label": "depositFeeRatioScale",
        "offset": 0,
        "slot": "4",
        "type": "t_userDefinedValueType(SD59x18)13824"
      },
      {
        "astId": 16064,
        "contract": "@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol:FeeCalculator",
        "label": "singleAssetDepositRelativeFee",
        "offset": 0,
        "slot": "5",
        "type": "t_userDefinedValueType(SD59x18)13824"
      },
      {
        "astId": 16072,
        "contract": "@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol:FeeCalculator",
        "label": "redemptionFeeScale",
        "offset": 0,
        "slot": "6",
        "type": "t_userDefinedValueType(SD59x18)13824"
      },
      {
        "astId": 16080,
        "contract": "@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol:FeeCalculator",
        "label": "redemptionFeeShift",
        "offset": 0,
        "slot": "7",
        "type": "t_userDefinedValueType(SD59x18)13824"
      },
      {
        "astId": 16104,
        "contract": "@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol:FeeCalculator",
        "label": "singleAssetRedemptionRelativeFee",
        "offset": 0,
        "slot": "8",
        "type": "t_userDefinedValueType(SD59x18)13824"
      },
      {
        "astId": 16112,
        "contract": "@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol:FeeCalculator",
        "label": "dustAssetRedemptionRelativeFee",
        "offset": 0,
        "slot": "9",
        "type": "t_userDefinedValueType(SD59x18)13824"
      },
      {
        "astId": 16115,
        "contract": "@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol:FeeCalculator",
        "label": "_recipients",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 16118,
        "contract": "@toucanprotocol/dynamic-fee-pools/src/FeeCalculator.sol:FeeCalculator",
        "label": "_shares",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_userDefinedValueType(SD59x18)13824": {
        "encoding": "inplace",
        "label": "SD59x18",
        "numberOfBytes": "32"
      }
    }
  }
}