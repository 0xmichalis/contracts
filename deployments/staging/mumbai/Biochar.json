{
  "address": "0xD4998eD8d82b58089d141F4095bA50483b320a7b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tco2",
          "type": "address"
        }
      ],
      "name": "AddFeeExemptedTCO2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "DepositFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20Addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCalculator",
          "type": "address"
        }
      ],
      "name": "FeeCalculatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "filter",
          "type": "address"
        }
      ],
      "name": "FilterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeBp",
          "type": "uint256"
        }
      ],
      "name": "RedeemBurnFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "RedeemFeeBurnAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeBurnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exemptedUser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isExempted",
          "type": "bool"
        }
      ],
      "name": "RedeemFeeExempted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "RedeemFeeReceiverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeBp",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeBp",
          "type": "uint256"
        }
      ],
      "name": "RedeemRetireFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tco2",
          "type": "address"
        }
      ],
      "name": "RemoveFeeExemptedTCO2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "RouterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "SupplyCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tco2",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TCO2Bridged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        }
      ],
      "name": "TCO2ScoringUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_RELEASE_CANDIDATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addRedeemFeeExemptedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tco2",
          "type": "address"
        }
      ],
      "name": "addRedeemFeeExemptedTCO2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "bridgeBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "bridgeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "bridgeTCO2s",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "toRetire",
          "type": "bool"
        }
      ],
      "name": "calculateRedemptionFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Addr",
          "type": "address"
        }
      ],
      "name": "checkEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        }
      ],
      "name": "distributeRedemptionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCalculator",
      "outputs": [
        {
          "internalType": "contract IFeeCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRedeemBurnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRedeemBurnPercentageInBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRedeemDivider",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRedeemPercentageInBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRedeemReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRedeemRetirePercentageInBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "filter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getScoredTCO2s",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "methodology",
          "type": "string"
        }
      ],
      "name": "methodologies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVintageStartTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "quoteBridgeTCO2sFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tco2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemAndBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "redeemAndRetireMany",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "retirementIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "redeemedAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemAuto",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemAuto2",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemFeeExemptedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemFeeExemptedTCO2s",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "redeemMany",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "redeemedAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "region",
          "type": "string"
        }
      ],
      "name": "regions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeRedeemFeeExemptedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tco2",
          "type": "address"
        }
      ],
      "name": "removeRedeemFeeExemptedTCO2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "scoredTCO2s",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCalculator",
          "type": "address"
        }
      ],
      "name": "setFeeCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRedeemBurnAddress",
          "type": "address"
        }
      ],
      "name": "setFeeRedeemBurnAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRedeemBurnPercentageInBase",
          "type": "uint256"
        }
      ],
      "name": "setFeeRedeemBurnPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeBp",
          "type": "uint256"
        }
      ],
      "name": "setFeeRedeemPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRedeemReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeRedeemReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeBp",
          "type": "uint256"
        }
      ],
      "name": "setFeeRedeemRetirePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_filter",
          "type": "address"
        }
      ],
      "name": "setFilter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setSupplyCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tco2s",
          "type": "address[]"
        }
      ],
      "name": "setTCO2Scoring",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "standard",
          "type": "string"
        }
      ],
      "name": "standards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tco2",
          "type": "address"
        }
      ],
      "name": "tokenBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "1b10ec530debbefe63d37e0d8798c654",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tco2\",\"type\":\"address\"}],\"name\":\"AddFeeExemptedTCO2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"DepositFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCalculator\",\"type\":\"address\"}],\"name\":\"FeeCalculatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"}],\"name\":\"FilterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBp\",\"type\":\"uint256\"}],\"name\":\"RedeemBurnFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"RedeemFeeBurnAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exemptedUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExempted\",\"type\":\"bool\"}],\"name\":\"RedeemFeeExempted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"RedeemFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"RedeemFeeReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBp\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBp\",\"type\":\"uint256\"}],\"name\":\"RedeemRetireFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tco2\",\"type\":\"address\"}],\"name\":\"RemoveFeeExemptedTCO2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"SupplyCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tco2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TCO2Bridged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"}],\"name\":\"TCO2ScoringUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_RELEASE_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addRedeemFeeExemptedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tco2\",\"type\":\"address\"}],\"name\":\"addRedeemFeeExemptedTCO2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bridgeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"bridgeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bridgeTCO2s\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"toRetire\",\"type\":\"bool\"}],\"name\":\"calculateRedemptionFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"}],\"name\":\"checkEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"distributeRedemptionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCalculator\",\"outputs\":[{\"internalType\":\"contract IFeeCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRedeemBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRedeemBurnPercentageInBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRedeemDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRedeemPercentageInBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRedeemReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRedeemRetirePercentageInBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScoredTCO2s\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"methodology\",\"type\":\"string\"}],\"name\":\"methodologies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVintageStartTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"quoteBridgeTCO2sFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tco2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"redeemAndRetireMany\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"retirementIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"redeemedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemAuto\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemAuto2\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemFeeExemptedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemFeeExemptedTCO2s\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"redeemMany\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"redeemedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"regions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeRedeemFeeExemptedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tco2\",\"type\":\"address\"}],\"name\":\"removeRedeemFeeExemptedTCO2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scoredTCO2s\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCalculator\",\"type\":\"address\"}],\"name\":\"setFeeCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRedeemBurnAddress\",\"type\":\"address\"}],\"name\":\"setFeeRedeemBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRedeemBurnPercentageInBase\",\"type\":\"uint256\"}],\"name\":\"setFeeRedeemBurnPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBp\",\"type\":\"uint256\"}],\"name\":\"setFeeRedeemPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRedeemReceiver\",\"type\":\"address\"}],\"name\":\"setFeeRedeemReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBp\",\"type\":\"uint256\"}],\"name\":\"setFeeRedeemRetirePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_filter\",\"type\":\"address\"}],\"name\":\"setFilter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tco2s\",\"type\":\"address[]\"}],\"name\":\"setTCO2Scoring\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"standard\",\"type\":\"string\"}],\"name\":\"standards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tco2\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRedeemFeeExemptedAddress(address)\":{\"params\":{\"_address\":\"address to be exempted on redeem fees\"}},\"addRedeemFeeExemptedTCO2(address)\":{\"params\":{\"_tco2\":\"TCO2 to be exempted on redeem fees\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"bridgeBurn(address,uint256)\":{\"details\":\"invoked only by the ToucanCrosschainMessenger (Router)\",\"params\":{\"_account\":\"account that will be burned with corss-chain bridged tokens\",\"_amount\":\"amount of tokens that will be burned\"}},\"bridgeMint(address,uint256)\":{\"details\":\"invoked only by the ToucanCrosschainMessenger (Router)\",\"params\":{\"_account\":\"account that will be minted with corss-chain bridged tokens\",\"_amount\":\"amount of tokens that will be minted\"}},\"bridgeTCO2s(uint32,address[],uint256[])\":{\"params\":{\"amounts\":\"The amounts of TCO2s to bridge\",\"destinationDomain\":\"The domain to bridge TCO2s to\",\"tco2s\":\"The TCO2s to bridge\"}},\"calculateRedemptionFees(address[],uint256[],bool)\":{\"details\":\"User specifies in front-end the addresses and amounts they want\",\"params\":{\"amounts\":\"Array of amounts to redeem for each tco2s\",\"tco2s\":\"Array of TCO2 contract addresses\",\"toRetire\":\"Whether the TCO2s will be retired atomically with the redemption. It may be that lower fees will be charged in this case.\"},\"returns\":{\"totalFee\":\"Total fees amount\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(address,uint256)\":{\"details\":\"Eligibility is checked via `checkEligible`, balances are tracked for each TCO2 separately\",\"params\":{\"erc20Addr\":\"ERC20 contract address to be deposited, requires approve\"},\"returns\":{\"_0\":\"Amount of pool tokens minted to the caller\"}},\"getRemaining()\":{\"details\":\"Returns the remaining space in pool before hitting the cap\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"wraps _pause(), only Admin\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"quoteBridgeTCO2sFee(uint32,address[],uint256[])\":{\"params\":{\"amounts\":\"The amounts of TCO2s to bridge\",\"destinationDomain\":\"The domain to bridge TCO2s to\",\"tco2s\":\"The TCO2s to bridge\"},\"returns\":{\"fee\":\"The fee amount to be paid\"}},\"redeemAndBurn(address,uint256)\":{\"details\":\"User needs to approve the pool contract in the TCO2 contract for the amount to be burnt before executing this function.\",\"params\":{\"amount\":\"Amount to redeem and burn\",\"tco2\":\"TCO2 to redeem and burn\"}},\"redeemAndRetireMany(address[],uint256[])\":{\"params\":{\"amounts\":\"Array of amounts to redeem and retire for each tco2s\",\"tco2s\":\"Array of TCO2 contract addresses\"},\"returns\":{\"redeemedAmounts\":\"The amounts of the TCO2s that were redeemed\",\"retirementIds\":\"The retirements ids that were produced\"}},\"redeemAuto(uint256)\":{\"details\":\"Pool tokens in user's wallet get burned\",\"params\":{\"amount\":\"Total amount to be redeemed\"},\"returns\":{\"tco2s\":\"amounts The addresses and amounts of the TCO2s that were automatically redeemed\"}},\"redeemAuto2(uint256)\":{\"params\":{\"amount\":\"Total amount to be redeemed\"},\"returns\":{\"tco2s\":\"amounts The addresses and amounts of the TCO2s that were automatically redeemed\"}},\"redeemMany(address[],uint256[])\":{\"params\":{\"amounts\":\"Array of amounts to redeem for each tco2s Pool token in user's wallet get burned\",\"tco2s\":\"Array of TCO2 contract addresses\"},\"returns\":{\"redeemedAmounts\":\"The amounts of the TCO2s that were redeemed\"}},\"removeRedeemFeeExemptedAddress(address)\":{\"params\":{\"_address\":\"address to be removed from exemption\"}},\"removeRedeemFeeExemptedTCO2(address)\":{\"params\":{\"_tco2\":\"TCO2 to be removed from exemption\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setFeeCalculator(address)\":{\"params\":{\"_feeCalculator\":\"Fee module contract address\"}},\"setFeeRedeemBurnAddress(address)\":{\"params\":{\"_feeRedeemBurnAddress\":\"address to transfer the fees to burn\"}},\"setFeeRedeemBurnPercentage(uint256)\":{\"params\":{\"_feeRedeemBurnPercentageInBase\":\"percentage of fee in base\"}},\"setFeeRedeemPercentage(uint256)\":{\"params\":{\"_feeBp\":\"percentage of fee in basis points\"}},\"setFeeRedeemReceiver(address)\":{\"params\":{\"_feeRedeemReceiver\":\"address to transfer the fees\"}},\"setFeeRedeemRetirePercentage(uint256)\":{\"params\":{\"_feeBp\":\"percentage of fee in basis points\"}},\"setFilter(address)\":{\"params\":{\"_filter\":\"Filter contract address\"}},\"setRouter(address)\":{\"details\":\"use this method to set router address\",\"params\":{\"_router\":\"address of ToucanCrosschainMessenger\"}},\"setSupplyCap(uint256)\":{\"details\":\"supplyCap is initially set to 0 and must be increased before deposits\"},\"setTCO2Scoring(address[])\":{\"params\":{\"tco2s\":\"array of ordered TCO2 addresses\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause the system, wraps _unpause(), only Admin\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"VERSION\":{\"details\":\"Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRedeemFeeExemptedAddress(address)\":{\"notice\":\"Adds a new address for redeem fees exemption\"},\"addRedeemFeeExemptedTCO2(address)\":{\"notice\":\"Adds a new TCO2 for redeem fees exemption\"},\"bridgeBurn(address,uint256)\":{\"notice\":\"burn tokens from account to be cross-chain bridged\"},\"bridgeMint(address,uint256)\":{\"notice\":\"mint tokens to receiver account that were cross-chain bridged\"},\"bridgeTCO2s(uint32,address[],uint256[])\":{\"notice\":\"Allows MANAGER or the owner to bridge TCO2s into another domain.\"},\"calculateRedemptionFees(address[],uint256[],bool)\":{\"notice\":\"View function to calculate fees pre-execution\"},\"checkEligible(address)\":{\"notice\":\"Checks if token to be deposited is eligible for this pool\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit function for pool that accepts TCO2s and mints pool token 1:1\"},\"feeCalculator()\":{\"notice\":\"module to calculate fees for the pool\"},\"feeRedeemRetirePercentageInBase()\":{\"notice\":\"fee percentage in basis points charged for selective redemptions that also retire the credits in the same transaction\"},\"methodologies(string)\":{\"notice\":\"Checks if methodology is eligible for this pool\"},\"minimumVintageStartTime()\":{\"notice\":\"Returns minimum vintage start time for this pool\"},\"pause()\":{\"notice\":\"Emergency function to disable contract's core functionality\"},\"quoteBridgeTCO2sFee(uint32,address[],uint256[])\":{\"notice\":\"Get the fee needed to bridge TCO2s into the destination domain.\"},\"redeemAndBurn(address,uint256)\":{\"notice\":\"Redeem a whitelisted TCO2 without paying any fees and burn the TCO2. Initially added to burn HFC-23 credits, can be used in the future to dispose of any other whitelisted credits.\"},\"redeemAndRetireMany(address[],uint256[])\":{\"notice\":\"Redeems pool tokens for multiple underlying TCO2s 1:1 minus fees The redeemed TCO2s are retired in the same go in order to allow charging a lower fee vs selective redemptions that do not retire the TCO2s.\"},\"redeemAuto(uint256)\":{\"notice\":\"Automatically redeems an amount of Pool tokens for underlying TCO2s from an array of ranked TCO2 contracts starting from contract at index 0 until amount is satisfied\"},\"redeemAuto2(uint256)\":{\"notice\":\"Automatically redeems an amount of Pool tokens for underlying TCO2s from an array of ranked TCO2 contracts starting from contract at index 0 until amount is satisfied.\"},\"redeemFeeExemptedAddresses(address)\":{\"notice\":\"End users exempted from redeem fees\"},\"redeemFeeExemptedTCO2s(address)\":{\"notice\":\"TCO2s exempted from redeem fees\"},\"redeemMany(address[],uint256[])\":{\"notice\":\"Redeems pool tokens for multiple underlying TCO2s 1:1 minus fees\"},\"regions(string)\":{\"notice\":\"Checks if region is eligible for this pool\"},\"removeRedeemFeeExemptedAddress(address)\":{\"notice\":\"Removes an address from redeem fees exemption\"},\"removeRedeemFeeExemptedTCO2(address)\":{\"notice\":\"Removes a TCO2 from redeem fees exemption\"},\"router()\":{\"notice\":\"bridge router who has access to the bridgeMint & bridgeBurn functions which mint/burn pool tokens for cross chain messenges\"},\"scoredTCO2s(uint256)\":{\"notice\":\"array used to read from when redeeming TCO2s automatically\"},\"setFeeCalculator(address)\":{\"notice\":\"Update the address of the fee module contract\"},\"setFeeRedeemBurnAddress(address)\":{\"notice\":\"Update the fee redeem burn address\"},\"setFeeRedeemBurnPercentage(uint256)\":{\"notice\":\"Update the fee redeem burn percentage\"},\"setFeeRedeemPercentage(uint256)\":{\"notice\":\"Update the fee redeem percentage\"},\"setFeeRedeemReceiver(address)\":{\"notice\":\"Update the fee redeem receiver\"},\"setFeeRedeemRetirePercentage(uint256)\":{\"notice\":\"Update the fee percentage charged in redeemManyAndRetire\"},\"setFilter(address)\":{\"notice\":\"Update the address of the filter contract\"},\"setRouter(address)\":{\"notice\":\"method to set router address\"},\"setSupplyCap(uint256)\":{\"notice\":\"Function to limit the maximum pool supply\"},\"setTCO2Scoring(address[])\":{\"notice\":\"Allows MANAGERs or the owner to pass an array to hold TCO2 contract addesses that are ordered by some form of scoring mechanism\"},\"standards(string)\":{\"notice\":\"Checks if standard is eligible for this pool\"},\"supplyCap()\":{\"notice\":\"The supply cap is used as a measure to guard deposits in the pool. It is meant to minimize the impact a potential compromise in the source registry (eg. Verra) can have to the pool.\"},\"tokenBalances(address)\":{\"notice\":\"Returns the balance of the TCO2 found in the pool\"}},\"notice\":\"Biochar pool contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/Biochar.sol\":\"Biochar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/CarbonProjectTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\n/// @dev CarbonProject related data and attributes\\nstruct ProjectData {\\n    string projectId;\\n    string standard;\\n    string methodology;\\n    string region;\\n    string storageMethod;\\n    string method;\\n    string emissionType;\\n    string category;\\n    string uri;\\n    address beneficiary;\\n}\\n\",\"keccak256\":\"0x01ef59ad96e26a2ab791ba600413c5a4bde90c66535b30f322a1a01407be6879\",\"license\":\"UNLICENSED\"},\"contracts/CarbonProjectVintageTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct VintageData {\\n    /// @dev A human-readable string which differentiates this from other vintages in\\n    /// the same project, and helps build the corresponding TCO2 name and symbol.\\n    string name;\\n    uint64 startTime; // UNIX timestamp\\n    uint64 endTime; // UNIX timestamp\\n    uint256 projectTokenId;\\n    uint64 totalVintageQuantity;\\n    bool isCorsiaCompliant;\\n    bool isCCPcompliant;\\n    string coBenefits;\\n    string correspAdjustment;\\n    string additionalCertification;\\n    string uri;\\n    string registry;\\n}\\n\",\"keccak256\":\"0x5be4a7578aa12ae4d9e06e53672c46198c5c0c524065cec87fbc8cb1826619f6\",\"license\":\"UNLICENSED\"},\"contracts/bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct CreateRetirementRequestParams {\\n    uint256[] tokenIds;\\n    uint256 amount;\\n    string retiringEntityString;\\n    address beneficiary;\\n    string beneficiaryString;\\n    string retirementMessage;\\n    string beneficiaryLocation;\\n    string consumptionCountryCode;\\n    uint256 consumptionPeriodStart;\\n    uint256 consumptionPeriodEnd;\\n}\\n\",\"keccak256\":\"0xc7702b775ffda42d217c4671b846d93f691f8271cae9537dbd2b15930dbe582e\",\"license\":\"UNLICENSED\"},\"contracts/cross-chain/ToucanCrosschainMessengerStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earthz\\npragma solidity 0.8.14;\\n\\nstruct RemoteTokenInformation {\\n    /// @notice address of the token in the remote chain\\n    address tokenAddress;\\n    /// @notice timer keeps track of when the token pair\\n    /// was created in order to disallow updates to the\\n    /// pair after a specific amount of time elapses\\n    uint256 timer;\\n}\\n\\n/// @dev Separate storage contract to improve upgrade safety\\nabstract contract ToucanCrosschainMessengerStorageV1 {\\n    enum BridgeRequestType {\\n        NOT_REGISTERED, // 0\\n        SENT, // 1\\n        RECEIVED // 2\\n    }\\n\\n    enum MessageTypes {\\n        MINT\\n    }\\n\\n    struct BridgeRequest {\\n        bool isReverted; // this state is added for future addition of revert functionality\\n        uint256 timestamp;\\n        BridgeRequestType requestType;\\n        MessageTypes messageType;\\n    }\\n\\n    /// @dev nonce is used to serialize requests executed\\n    /// by the source chain in order to avoid duplicates\\n    /// from being processed in the remote chain\\n    uint256 public nonce;\\n    //slither-disable-next-line constable-states\\n    bytes32 private DEPRECATED_DOMAIN_SEPARATOR;\\n    /// @dev requests keeps track of a hash of the request\\n    /// to the request info in order to avoid duplicates\\n    /// from being processed in the remote chain\\n    mapping(bytes32 => BridgeRequest) public requests;\\n    /// @notice remoteTokens maps a token (address) in the source\\n    /// chain to the domain id of the remote chain (uint32)\\n    /// to info about the token in the remote chain (RemoteTokenInformation)\\n    mapping(address => mapping(uint32 => RemoteTokenInformation))\\n        internal remoteTokens_;\\n}\\n\\nabstract contract ToucanCrosschainMessengerStorage is\\n    ToucanCrosschainMessengerStorageV1\\n{}\\n\",\"keccak256\":\"0x5ef5c604c5bfa7d60c892e2b7aa7e532d79b11553e1dcf2a81bbac16542a5dc6\",\"license\":\"UNLICENSED\"},\"contracts/cross-chain/interfaces/IToucanCrosschainMessenger.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {RemoteTokenInformation} from '../ToucanCrosschainMessengerStorage.sol';\\n\\ninterface IToucanCrosschainMessenger {\\n    function transferTokens(\\n        uint32 destinationDomain,\\n        address token,\\n        uint256 amount\\n    ) external payable;\\n\\n    function transferTokensToRecipient(\\n        uint32 destinationDomain,\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external payable;\\n\\n    function remoteTokens(address _token, uint32 _destinationDomain)\\n        external\\n        view\\n        returns (RemoteTokenInformation memory);\\n\\n    function quoteTokenTransferFee(\\n        uint32 destinationDomain,\\n        address token,\\n        uint256 amount,\\n        address recipient\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x320dd58971f8d85781c172835a7af6f55bf4cb20e22e4b48500b12a49573701f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPoolFilter.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IPoolFilter {\\n    function checkEligible(address erc20Addr) external view returns (bool);\\n\\n    function minimumVintageStartTime() external view returns (uint64);\\n\\n    function regions(string calldata region) external view returns (bool);\\n\\n    function standards(string calldata standard) external view returns (bool);\\n\\n    function methodologies(string calldata methodology)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x09e7aca3984909a5e25e4e80845cf4b9f3a7b4ff308eb1d0ceaad59855db6b36\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanCarbonOffsets.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '../CarbonProjectVintageTypes.sol';\\nimport '../CarbonProjectTypes.sol';\\nimport '../bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol';\\n\\ninterface IToucanCarbonOffsets {\\n    function retireFrom(address account, uint256 amount)\\n        external\\n        returns (uint256 retirementEventId);\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function getAttributes()\\n        external\\n        view\\n        returns (ProjectData memory, VintageData memory);\\n\\n    function standardRegistry() external view returns (string memory);\\n\\n    function retireAndMintCertificate(\\n        string calldata retiringEntityString,\\n        address beneficiary,\\n        string calldata beneficiaryString,\\n        string calldata retirementMessage,\\n        uint256 amount\\n    ) external;\\n\\n    function retireAndMintCertificateForEntity(\\n        address retiringEntity,\\n        CreateRetirementRequestParams calldata params\\n    ) external;\\n\\n    function projectVintageTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfe0dd284d1e03ebafb3e04d29ae3056050123104001a194d0f9d1fb85691014b\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts of the Toucan protocol\\n * @dev Inspired by the AAVE error library:\\n * https://github.com/aave/protocol-v2/blob/5df59ec74a0c635d877dc1c5ee4a165d41488352/contracts/protocol/libraries/helpers/Errors.sol\\n * Error messages prefix glossary:\\n *  - CP = CarbonPool\\n *  - COB = CarbonOffsetBatches\\n */\\nlibrary Errors {\\n    // User is not authorized\\n    string public constant CP_UNAUTHORIZED = '1';\\n    // Empty array provided as input\\n    string public constant CP_EMPTY_ARRAY = '2';\\n    // Pool is full of TCO2s\\n    string public constant CP_FULL_POOL = '3';\\n    // ERC20 is blacklisted in the pool. This error\\n    // is returned for TCO2s that have been blacklisted\\n    // like the HFC-23 project.\\n    string public constant CP_BLACKLISTED = '4';\\n    // ERC20 is not whitelisted in the pool\\n    // This error is returned in case the ERC20 is\\n    // not a TCO2 in which case it has to be manually\\n    // whitelisted in order to be allowed in the pool.\\n    string public constant CP_NOT_WHITELISTED = '5';\\n    // Vintage start time of a TCO2 is too old\\n    string public constant CP_START_TIME_TOO_OLD = '6';\\n    string public constant CP_REGION_NOT_ACCEPTED = '7';\\n    string public constant CP_STANDARD_NOT_ACCEPTED = '8';\\n    string public constant CP_METHODOLOGY_NOT_ACCEPTED = '9';\\n    // Provided fee is invalid, not in a basis points format: [0,10000)\\n    string public constant CP_INVALID_FEE = '10';\\n    // Provided address needs to be non-zero\\n    string public constant CP_EMPTY_ADDRESS = '11';\\n    // Validation check to ensure array lengths match\\n    string public constant CP_LENGTH_MISMATCH = '12';\\n    // TCO2 not exempted from redeem fees\\n    string public constant CP_NOT_EXEMPTED = '13';\\n    // A contract has been paused\\n    string public constant CP_PAUSED_CONTRACT = '14';\\n    // Redemption has leftover unredeemed value\\n    string public constant CP_NON_ZERO_REMAINING = '15';\\n    // Redemption exceeds deposited TCO2 supply\\n    string public constant CP_EXCEEDS_TCO2_SUPPLY = '16';\\n    // User must be a router\\n    string public constant CP_ONLY_ROUTER = '17';\\n    // User must be the owner\\n    string public constant CP_ONLY_OWNER = '18';\\n    // Zero destination address is invalid for pool token transfers\\n    string public constant CP_INVALID_DESTINATION_ZERO = '19';\\n    // Self destination address is invalid for pool token transfers\\n    string public constant CP_INVALID_DESTINATION_SELF = '20';\\n    // Zero amount provided as an input (eg., in redemptions) in invalid\\n    string public constant CP_ZERO_AMOUNT = '21';\\n    // ERC20 is not eligible to be pooled\\n    string public constant CP_NOT_ELIGIBLE = '22';\\n    // Carbon registry is already supported in COB\\n    string public constant COB_ALREADY_SUPPORTED = '23';\\n    // The caller is not granted the VERIFIER_ROLE in COB\\n    string public constant COB_NOT_VERIFIER = '24';\\n    // The caller does not own the provided batch\\n    string public constant COB_NOT_BATCH_OWNER = '25';\\n    // The caller is not a valid batch owner (not a TCO2 contract or verifier)\\n    string public constant COB_INVALID_BATCH_OWNER = '26';\\n    // The batch is not in Confirmed status\\n    string public constant COB_NOT_CONFIRMED = '27';\\n    // The batch is not in a requested status (DetokenizationRequested or RetirementRequested)\\n    string public constant COB_NOT_REQUESTED_STATUS = '28';\\n    // The batch does not exist\\n    string public constant COB_NOT_EXISTS = '29';\\n    // The batch has an invalid status based on the action requested\\n    string public constant COB_INVALID_STATUS = '30';\\n    // The batch is missing an associated project vintage\\n    string public constant COB_MISSING_VINTAGE = '31';\\n    // The serial number in the batch is already approved\\n    string public constant COB_ALREADY_APPROVED = '32';\\n    // The batch is not in Pending status\\n    string public constant COB_NOT_PENDING = '33';\\n    // The batch is already fractionalized\\n    string public constant COB_ALREADY_FRACTIONALIZED = '34';\\n    // The batch is not in Rejected status\\n    string public constant COB_NOT_REJECTED = '35';\\n    // The project vintage is already set in the batch\\n    string public constant COB_VINTAGE_ALREADY_SET = '36';\\n    // The transfer is not approved\\n    string public constant COB_TRANSFER_NOT_APPROVED = '37';\\n    // The COB contract is paused\\n    string public constant COB_PAUSED_CONTRACT = '38';\\n    // The caller is invalid\\n    string public constant COB_INVALID_CALLER = '39';\\n    // The TCO2 for the batch is not found\\n    string public constant COB_TCO2_NOT_FOUND = '40';\\n    // The registry for the provided vintage is not supported\\n    string public constant COB_REGISTRY_NOT_SUPPORTED = '41';\\n    // No TCO2 was minted as part of tokenization\\n    string public constant COB_NO_TCO2_MINTED = '42';\\n    // Only mints are supported for the batch contract to receive an NFT\\n    string public constant COB_ONLY_MINTS = '43';\\n    // New batch status is invalid\\n    string public constant COB_INVALID_NEW_STATUS = '44';\\n    // The TCO2 batch amount has a mismatch\\n    string public constant TCO2_BATCH_AMT_MISMATCH = '45';\\n    // The TCO2 batch amount approval has failed\\n    string public constant TCO2_APPROVAL_AMT_FAILED = '46';\\n    // The TCO2 batch not confirmed\\n    string public constant TCO2_BATCH_NOT_CONFIRMED = '47';\\n    // The TCO2 batch not whitelisted\\n    string public constant TCO2_BATCH_NOT_WHITELISTED = '48';\\n    // The TCO2 is non matching NFT\\n    string public constant TCO2_NON_MATCHING_NFT = '49';\\n    // The TCO2 Quantity in batch is higher than total vintages\\n    string public constant TCO2_QTY_HIGHER = '50';\\n}\\n\",\"keccak256\":\"0x0f6657f419cc374c3cada8f2773185760f515e56d9c5c333d08cc8f3239f6402\",\"license\":\"UNLICENSED\"},\"contracts/pools/Biochar.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport './Pool.sol';\\n\\n/// @notice Biochar pool contract\\ncontract Biochar is Pool {\\n    // ----------------------------------------\\n    //      Constants\\n    // ----------------------------------------\\n\\n    /// @dev Version-related parameters. VERSION keeps track of production\\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\\n    /// of a VERSION in our staging environment.\\n    string public constant VERSION = '1.0.0';\\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\\n\\n    // ----------------------------------------\\n    //      Upgradable related functions\\n    // ----------------------------------------\\n\\n    function initialize() external virtual initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20_init_unchained('Biochar', 'CHAR');\\n        __AccessControl_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n\\n        // TODO: set the roles based on calldata\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xf6cf39ffc70bc80356ab85e8643ff199e1a2286b2ae7253391501ee4eb0b2e48\",\"license\":\"UNLICENSED\"},\"contracts/pools/Pool.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\nimport '../cross-chain/interfaces/IToucanCrosschainMessenger.sol';\\nimport '../interfaces/IPoolFilter.sol';\\nimport '../interfaces/IToucanCarbonOffsets.sol';\\nimport '../libraries/Errors.sol';\\nimport './PoolStorage.sol';\\n\\n/// @notice Pool template contract\\n/// ERC20 compliant token that acts as a pool for TCO2 tokens\\nabstract contract Pool is\\n    ContextUpgradeable,\\n    ERC20Upgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    AccessControlUpgradeable,\\n    UUPSUpgradeable,\\n    PoolStorage\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // ----------------------------------------\\n    //      Constants\\n    // ----------------------------------------\\n\\n    /// @dev All roles related to accessing this contract\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\\n\\n    /// @dev divider to calculate fees in basis points\\n    uint256 public constant feeRedeemDivider = 1e4;\\n\\n    // ----------------------------------------\\n    //      Events\\n    // ----------------------------------------\\n\\n    event Deposited(address erc20Addr, uint256 amount);\\n    event Redeemed(address account, address erc20, uint256 amount);\\n    event DepositFeePaid(address depositor, uint256 fees);\\n    event RedeemFeePaid(address redeemer, uint256 fees);\\n    event RedeemFeeBurnt(address redeemer, uint256 fees);\\n    event RedeemFeeUpdated(uint256 feeBp);\\n    event RedeemBurnFeeUpdated(uint256 feeBp);\\n    event RedeemFeeReceiverUpdated(address receiver);\\n    event RedeemFeeBurnAddressUpdated(address receiver);\\n    event RedeemFeeExempted(address exemptedUser, bool isExempted);\\n    event RedeemRetireFeeUpdated(uint256 feeBp);\\n    event SupplyCapUpdated(uint256 newCap);\\n    event FeeCalculatorUpdated(address feeCalculator);\\n    event FilterUpdated(address filter);\\n    event TCO2ScoringUpdated(address[] tco2s);\\n    event AddFeeExemptedTCO2(address tco2);\\n    event RemoveFeeExemptedTCO2(address tco2);\\n    event RouterUpdated(address router);\\n    event TCO2Bridged(\\n        uint32 indexed destinationDomain,\\n        address indexed tco2,\\n        uint256 amount\\n    );\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ----------------------------------------\\n    //      Upgradable related functions\\n    // ----------------------------------------\\n\\n    function _authorizeUpgrade(address) internal virtual override {\\n        onlyPoolOwner();\\n    }\\n\\n    // ------------------------\\n    // Poor person's modifiers\\n    // ------------------------\\n\\n    /// @dev function that checks whether the caller is the\\n    /// contract owner\\n    function onlyPoolOwner() internal view virtual {\\n        require(owner() == msg.sender, Errors.CP_ONLY_OWNER);\\n    }\\n\\n    /// @dev function that only lets the contract's owner and granted role to execute\\n    function onlyWithRole(bytes32 role) internal view virtual {\\n        require(\\n            hasRole(role, msg.sender) || owner() == msg.sender,\\n            Errors.CP_UNAUTHORIZED\\n        );\\n    }\\n\\n    /// @dev function that checks whether the contract is paused\\n    function onlyUnpaused() internal view {\\n        require(!paused(), Errors.CP_PAUSED_CONTRACT);\\n    }\\n\\n    // ------------------------\\n    // Admin functions\\n    // ------------------------\\n\\n    /// @notice Emergency function to disable contract's core functionality\\n    /// @dev wraps _pause(), only Admin\\n    function pause() external virtual {\\n        onlyWithRole(PAUSER_ROLE);\\n        _pause();\\n    }\\n\\n    /// @dev Unpause the system, wraps _unpause(), only Admin\\n    function unpause() external virtual {\\n        onlyWithRole(PAUSER_ROLE);\\n        _unpause();\\n    }\\n\\n    /// @notice Update the fee redeem percentage\\n    /// @param _feeBp percentage of fee in basis points\\n    function setFeeRedeemPercentage(uint256 _feeBp) external virtual {\\n        onlyWithRole(MANAGER_ROLE);\\n        require(_feeBp < feeRedeemDivider, Errors.CP_INVALID_FEE);\\n        feeRedeemPercentageInBase = _feeBp;\\n        emit RedeemFeeUpdated(_feeBp);\\n    }\\n\\n    /// @notice Update the fee percentage charged in redeemManyAndRetire\\n    /// @param _feeBp percentage of fee in basis points\\n    function setFeeRedeemRetirePercentage(uint256 _feeBp) external virtual {\\n        onlyWithRole(MANAGER_ROLE);\\n        require(_feeBp < feeRedeemDivider, Errors.CP_INVALID_FEE);\\n        feeRedeemRetirePercentageInBase = _feeBp;\\n        emit RedeemRetireFeeUpdated(_feeBp);\\n    }\\n\\n    /// @notice Update the fee redeem receiver\\n    /// @param _feeRedeemReceiver address to transfer the fees\\n    function setFeeRedeemReceiver(address _feeRedeemReceiver) external virtual {\\n        onlyPoolOwner();\\n        require(_feeRedeemReceiver != address(0), Errors.CP_EMPTY_ADDRESS);\\n        feeRedeemReceiver = _feeRedeemReceiver;\\n        emit RedeemFeeReceiverUpdated(_feeRedeemReceiver);\\n    }\\n\\n    /// @notice Update the fee redeem burn percentage\\n    /// @param _feeRedeemBurnPercentageInBase percentage of fee in base\\n    function setFeeRedeemBurnPercentage(uint256 _feeRedeemBurnPercentageInBase)\\n        external\\n        virtual\\n    {\\n        onlyPoolOwner();\\n        require(\\n            _feeRedeemBurnPercentageInBase < feeRedeemDivider,\\n            Errors.CP_INVALID_FEE\\n        );\\n        feeRedeemBurnPercentageInBase = _feeRedeemBurnPercentageInBase;\\n        emit RedeemBurnFeeUpdated(_feeRedeemBurnPercentageInBase);\\n    }\\n\\n    /// @notice Update the fee redeem burn address\\n    /// @param _feeRedeemBurnAddress address to transfer the fees to burn\\n    function setFeeRedeemBurnAddress(address _feeRedeemBurnAddress)\\n        external\\n        virtual\\n    {\\n        onlyPoolOwner();\\n        require(_feeRedeemBurnAddress != address(0), Errors.CP_EMPTY_ADDRESS);\\n        feeRedeemBurnAddress = _feeRedeemBurnAddress;\\n        emit RedeemFeeBurnAddressUpdated(_feeRedeemBurnAddress);\\n    }\\n\\n    /// @notice Adds a new address for redeem fees exemption\\n    /// @param _address address to be exempted on redeem fees\\n    function addRedeemFeeExemptedAddress(address _address) external virtual {\\n        onlyPoolOwner();\\n        redeemFeeExemptedAddresses[_address] = true;\\n        emit RedeemFeeExempted(_address, true);\\n    }\\n\\n    /// @notice Removes an address from redeem fees exemption\\n    /// @param _address address to be removed from exemption\\n    function removeRedeemFeeExemptedAddress(address _address) external virtual {\\n        onlyPoolOwner();\\n        redeemFeeExemptedAddresses[_address] = false;\\n        emit RedeemFeeExempted(_address, false);\\n    }\\n\\n    /// @notice Adds a new TCO2 for redeem fees exemption\\n    /// @param _tco2 TCO2 to be exempted on redeem fees\\n    function addRedeemFeeExemptedTCO2(address _tco2) external virtual {\\n        onlyPoolOwner();\\n        redeemFeeExemptedTCO2s[_tco2] = true;\\n        emit AddFeeExemptedTCO2(_tco2);\\n    }\\n\\n    /// @notice Removes a TCO2 from redeem fees exemption\\n    /// @param _tco2 TCO2 to be removed from exemption\\n    function removeRedeemFeeExemptedTCO2(address _tco2) external virtual {\\n        onlyPoolOwner();\\n        redeemFeeExemptedTCO2s[_tco2] = false;\\n        emit RemoveFeeExemptedTCO2(_tco2);\\n    }\\n\\n    /// @notice Function to limit the maximum pool supply\\n    /// @dev supplyCap is initially set to 0 and must be increased before deposits\\n    function setSupplyCap(uint256 newCap) external virtual {\\n        onlyPoolOwner();\\n        supplyCap = newCap;\\n        emit SupplyCapUpdated(newCap);\\n    }\\n\\n    /// @notice Update the address of the filter contract\\n    /// @param _filter Filter contract address\\n    function setFilter(address _filter) external virtual {\\n        onlyPoolOwner();\\n        filter = _filter;\\n        emit FilterUpdated(_filter);\\n    }\\n\\n    /// @notice Update the address of the fee module contract\\n    /// @param _feeCalculator Fee module contract address\\n    function setFeeCalculator(address _feeCalculator) external {\\n        onlyPoolOwner();\\n        feeCalculator = IFeeCalculator(_feeCalculator);\\n        emit FeeCalculatorUpdated(_feeCalculator);\\n    }\\n\\n    /// @notice Allows MANAGERs or the owner to pass an array to hold TCO2 contract addesses that are\\n    /// ordered by some form of scoring mechanism\\n    /// @param tco2s array of ordered TCO2 addresses\\n    function setTCO2Scoring(address[] calldata tco2s) external {\\n        onlyWithRole(MANAGER_ROLE);\\n        require(tco2s.length != 0, Errors.CP_EMPTY_ARRAY);\\n        scoredTCO2s = tco2s;\\n        emit TCO2ScoringUpdated(tco2s);\\n    }\\n\\n    // -------------------------------------\\n    //   ToucanCrosschainMessenger functions\\n    // -------------------------------------\\n\\n    function onlyRouter() internal view {\\n        require(msg.sender == router, Errors.CP_ONLY_ROUTER);\\n    }\\n\\n    /// @notice method to set router address\\n    /// @dev use this method to set router address\\n    /// @param _router address of ToucanCrosschainMessenger\\n    function setRouter(address _router) external {\\n        onlyPoolOwner();\\n        // router address can be set to zero to make bridgeMint and bridgeBurn unusable\\n        router = _router;\\n        emit RouterUpdated(_router);\\n    }\\n\\n    /// @notice mint tokens to receiver account that were cross-chain bridged\\n    /// @dev invoked only by the ToucanCrosschainMessenger (Router)\\n    /// @param _account account that will be minted with corss-chain bridged tokens\\n    /// @param _amount amount of tokens that will be minted\\n    function bridgeMint(address _account, uint256 _amount) external {\\n        onlyRouter();\\n        _mint(_account, _amount);\\n    }\\n\\n    /// @notice burn tokens from account to be cross-chain bridged\\n    /// @dev invoked only by the ToucanCrosschainMessenger (Router)\\n    /// @param _account account that will be burned with corss-chain bridged tokens\\n    /// @param _amount amount of tokens that will be burned\\n    function bridgeBurn(address _account, uint256 _amount) external {\\n        onlyRouter();\\n        _burn(_account, _amount);\\n    }\\n\\n    function _getRemotePoolAddress(address tcm, uint32 destinationDomain)\\n        internal\\n        view\\n        returns (address recipient)\\n    {\\n        RemoteTokenInformation memory remoteInfo = IToucanCrosschainMessenger(\\n            tcm\\n        ).remoteTokens(address(this), destinationDomain);\\n        recipient = remoteInfo.tokenAddress;\\n        require(recipient != address(0), Errors.CP_EMPTY_ADDRESS);\\n    }\\n\\n    /// @notice Get the fee needed to bridge TCO2s into the destination domain.\\n    /// @param destinationDomain The domain to bridge TCO2s to\\n    /// @param tco2s The TCO2s to bridge\\n    /// @param amounts The amounts of TCO2s to bridge\\n    /// @return fee The fee amount to be paid\\n    function quoteBridgeTCO2sFee(\\n        uint32 destinationDomain,\\n        address[] calldata tco2s,\\n        uint256[] calldata amounts\\n    ) external view returns (uint256 fee) {\\n        uint256 tco2Length = tco2s.length;\\n        require(tco2Length == amounts.length, Errors.CP_LENGTH_MISMATCH);\\n\\n        address tcm = router;\\n        address recipient = _getRemotePoolAddress(tcm, destinationDomain);\\n\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < tco2Length; ++i) {\\n            fee += IToucanCrosschainMessenger(tcm).quoteTokenTransferFee(\\n                destinationDomain,\\n                tco2s[i],\\n                amounts[i],\\n                recipient\\n            );\\n        }\\n    }\\n\\n    /// @notice Allows MANAGER or the owner to bridge TCO2s into\\n    /// another domain.\\n    /// @param destinationDomain The domain to bridge TCO2s to\\n    /// @param tco2s The TCO2s to bridge\\n    /// @param amounts The amounts of TCO2s to bridge\\n    function bridgeTCO2s(\\n        uint32 destinationDomain,\\n        address[] calldata tco2s,\\n        uint256[] calldata amounts\\n    ) external payable {\\n        onlyWithRole(MANAGER_ROLE);\\n        uint256 tco2Length = tco2s.length;\\n        require(tco2Length != 0, Errors.CP_EMPTY_ARRAY);\\n        require(tco2Length == amounts.length, Errors.CP_LENGTH_MISMATCH);\\n\\n        // TODO: Disallow bridging more TCO2s than an amount that\\n        // would bring the pool to imbalance, ie., end up with more\\n        // pool tokens than TCO2s in the pool in the source chain.\\n\\n        // Read the address of the remote pool from ToucanCrosschainMessenger\\n        // and set that as a recipient in our cross-chain messages.\\n        address tcm = router;\\n        address recipient = _getRemotePoolAddress(tcm, destinationDomain);\\n\\n        uint256 payment = msg.value / tco2Length;\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < tco2Length; ++i) {\\n            IToucanCrosschainMessenger(tcm).transferTokensToRecipient{\\n                value: payment\\n            }(destinationDomain, tco2s[i], amounts[i], recipient);\\n            emit TCO2Bridged(destinationDomain, tco2s[i], amounts[i]);\\n        }\\n    }\\n\\n    // ----------------------------\\n    //   Permissionless functions\\n    // ----------------------------\\n\\n    /// @notice Deposit function for pool that accepts TCO2s and mints pool token 1:1\\n    /// @param erc20Addr ERC20 contract address to be deposited, requires approve\\n    /// @dev Eligibility is checked via `checkEligible`, balances are tracked\\n    /// for each TCO2 separately\\n    /// @return Amount of pool tokens minted to the caller\\n    function deposit(address erc20Addr, uint256 amount)\\n        external\\n        virtual\\n        returns (uint256)\\n    {\\n        onlyUnpaused();\\n\\n        // Ensure the TCO2 is eligible to be deposited\\n        require(checkEligible(erc20Addr), Errors.CP_NOT_ELIGIBLE);\\n\\n        // Ensure there is space in the pool\\n        uint256 remainingSpace = getRemaining();\\n        require(remainingSpace != 0, Errors.CP_FULL_POOL);\\n\\n        // If the amount to be deposited exceeds the remaining space, deposit\\n        // the maximum amount possible up to the cap instead of failing.\\n        if (amount > remainingSpace) amount = remainingSpace;\\n\\n        // If a fee module is configured, use it to calculate the minting fees\\n        uint256 feeAmount = 0;\\n        uint256 depositedAmount = amount;\\n        if (feeCalculator != IFeeCalculator(address(0))) {\\n            feeAmount = feeCalculator.calculateDepositFees(\\n                erc20Addr,\\n                address(this),\\n                depositedAmount\\n            );\\n            depositedAmount -= feeAmount;\\n        }\\n\\n        // Mint pool tokens to the user\\n        _mint(msg.sender, depositedAmount);\\n        emit Deposited(erc20Addr, amount);\\n\\n        // If fees need to be paid, it means the fee module is configured. In that\\n        // case mint the fees to the fee recipients.\\n        if (feeAmount != 0) {\\n            (address[] memory recipients, uint256[] memory fees) = feeCalculator\\n                .calculateFeeAmongShares(feeAmount);\\n            for (uint256 i = 0; i < recipients.length; ++i) {\\n                _mint(recipients[i], fees[i]);\\n            }\\n            emit DepositFeePaid(msg.sender, feeAmount);\\n        }\\n\\n        // Transfer the TCO2 to the pool\\n        IERC20Upgradeable(erc20Addr).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n\\n        return depositedAmount;\\n    }\\n\\n    /// @notice Checks if token to be deposited is eligible for this pool\\n    function checkEligible(address erc20Addr)\\n        public\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return IPoolFilter(filter).checkEligible(erc20Addr);\\n    }\\n\\n    /// @notice Returns minimum vintage start time for this pool\\n    function minimumVintageStartTime() external view returns (uint64) {\\n        return IPoolFilter(filter).minimumVintageStartTime();\\n    }\\n\\n    /// @notice Checks if region is eligible for this pool\\n    function regions(string calldata region) external view returns (bool) {\\n        return IPoolFilter(filter).regions(region);\\n    }\\n\\n    /// @notice Checks if standard is eligible for this pool\\n    function standards(string calldata standard) external view returns (bool) {\\n        return IPoolFilter(filter).standards(standard);\\n    }\\n\\n    /// @notice Checks if methodology is eligible for this pool\\n    function methodologies(string calldata methodology)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return IPoolFilter(filter).methodologies(methodology);\\n    }\\n\\n    /// @notice View function to calculate fees pre-execution\\n    /// @dev User specifies in front-end the addresses and amounts they want\\n    /// @param tco2s Array of TCO2 contract addresses\\n    /// @param amounts Array of amounts to redeem for each tco2s\\n    /// @param toRetire Whether the TCO2s will be retired atomically\\n    /// with the redemption. It may be that lower fees will be charged\\n    /// in this case.\\n    /// @return totalFee Total fees amount\\n    function calculateRedemptionFees(\\n        address[] memory tco2s,\\n        uint256[] memory amounts,\\n        bool toRetire\\n    ) public view virtual returns (uint256 totalFee) {\\n        onlyUnpaused();\\n\\n        // Exempted addresses pay no fees\\n        if (redeemFeeExemptedAddresses[msg.sender]) {\\n            return 0;\\n        }\\n\\n        uint256 tco2Length = tco2s.length;\\n        require(tco2Length == amounts.length, Errors.CP_LENGTH_MISMATCH);\\n\\n        for (uint256 i = 0; i < tco2Length; ++i) {\\n            totalFee += calculateRedemptionFee(tco2s[i], amounts[i], toRetire);\\n        }\\n    }\\n\\n    function calculateRedemptionFee(\\n        address tco2,\\n        uint256 amount,\\n        bool toRetire\\n    ) internal view returns (uint256) {\\n        if (feeCalculator == IFeeCalculator(address(0))) {\\n            // Fall back to fixed fee if a fee module is not configured\\n            return getFixedRedemptionFee(amount, toRetire);\\n        }\\n\\n        // Use the fee module if one is configured\\n        return\\n            feeCalculator.calculateRedemptionFees(tco2, address(this), amount);\\n    }\\n\\n    function getFixedRedemptionFee(uint256 amount, bool toRetire)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Use appropriate fee bp to charge\\n        uint256 feeBp = 0;\\n        if (toRetire) {\\n            feeBp = feeRedeemRetirePercentageInBase;\\n        } else {\\n            feeBp = feeRedeemPercentageInBase;\\n        }\\n        // Calculate fee\\n        return (amount * feeBp) / feeRedeemDivider;\\n    }\\n\\n    /// @notice Redeem a whitelisted TCO2 without paying any fees and burn\\n    /// the TCO2. Initially added to burn HFC-23 credits, can be used in the\\n    /// future to dispose of any other whitelisted credits.\\n    /// @dev User needs to approve the pool contract in the TCO2 contract for\\n    /// the amount to be burnt before executing this function.\\n    /// @param tco2 TCO2 to redeem and burn\\n    /// @param amount Amount to redeem and burn\\n    function redeemAndBurn(address tco2, uint256 amount) external {\\n        onlyUnpaused();\\n        require(redeemFeeExemptedTCO2s[tco2], Errors.CP_NOT_EXEMPTED);\\n        redeemSingle(tco2, amount);\\n        // User has to approve the pool contract in the TCO2 contract\\n        // in order for this function to successfully burn the tokens\\n        IToucanCarbonOffsets(tco2).burnFrom(msg.sender, amount);\\n    }\\n\\n    /// @notice Redeems pool tokens for multiple underlying TCO2s 1:1 minus fees\\n    /// The redeemed TCO2s are retired in the same go in order to allow charging\\n    /// a lower fee vs selective redemptions that do not retire the TCO2s.\\n    /// @param tco2s Array of TCO2 contract addresses\\n    /// @param amounts Array of amounts to redeem and retire for each tco2s\\n    /// @return retirementIds The retirements ids that were produced\\n    /// @return redeemedAmounts The amounts of the TCO2s that were redeemed\\n    function redeemAndRetireMany(\\n        address[] memory tco2s,\\n        uint256[] memory amounts\\n    )\\n        external\\n        virtual\\n        returns (\\n            uint256[] memory retirementIds,\\n            uint256[] memory redeemedAmounts\\n        )\\n    {\\n        (retirementIds, redeemedAmounts) = redeemManyInternal(\\n            tco2s,\\n            amounts,\\n            true\\n        );\\n    }\\n\\n    /// @notice Redeems pool tokens for multiple underlying TCO2s 1:1 minus fees\\n    /// @param tco2s Array of TCO2 contract addresses\\n    /// @param amounts Array of amounts to redeem for each tco2s\\n    /// Pool token in user's wallet get burned\\n    /// @return redeemedAmounts The amounts of the TCO2s that were redeemed\\n    function redeemMany(address[] memory tco2s, uint256[] memory amounts)\\n        external\\n        virtual\\n        returns (uint256[] memory redeemedAmounts)\\n    {\\n        (, redeemedAmounts) = redeemManyInternal(tco2s, amounts, false);\\n    }\\n\\n    function redeemManyInternal(\\n        address[] memory tco2s,\\n        uint256[] memory amounts,\\n        bool toRetire\\n    )\\n        internal\\n        returns (\\n            uint256[] memory retirementIds,\\n            uint256[] memory redeemedAmounts\\n        )\\n    {\\n        onlyUnpaused();\\n        uint256 tco2Length = tco2s.length;\\n        require(tco2Length == amounts.length, Errors.CP_LENGTH_MISMATCH);\\n\\n        // Initialize return arrays\\n        redeemedAmounts = new uint256[](tco2Length);\\n        if (toRetire) {\\n            retirementIds = new uint256[](tco2Length);\\n        }\\n\\n        // Total fee to be paid by the user\\n        uint256 totalFee = 0;\\n        // Exempted addresses pay no fees\\n        bool isExempted = redeemFeeExemptedAddresses[msg.sender];\\n\\n        // Execute redemptions\\n        for (uint256 i = 0; i < tco2Length; ++i) {\\n            require(checkEligible(tco2s[i]), Errors.CP_NOT_ELIGIBLE);\\n\\n            // Calculate the fee to be paid for the current TCO2 redemption\\n            uint256 feeAmount = 0;\\n            if (!isExempted) {\\n                feeAmount = calculateRedemptionFee(\\n                    tco2s[i],\\n                    amounts[i],\\n                    toRetire\\n                );\\n                totalFee += feeAmount;\\n            }\\n\\n            // Redeem the amount minus the fee\\n            uint256 amountToRedeem = amounts[i] - feeAmount;\\n            redeemSingle(tco2s[i], amountToRedeem);\\n\\n            // If requested, retire the TCO2s in one go. Callers should\\n            // first approve the pool in order for the pool to retire\\n            // on behalf of them\\n            if (toRetire) {\\n                retirementIds[i] = IToucanCarbonOffsets(tco2s[i]).retireFrom(\\n                    msg.sender,\\n                    amountToRedeem\\n                );\\n            }\\n            redeemedAmounts[i] = amountToRedeem;\\n        }\\n\\n        // Distribute any fees\\n        if (totalFee != 0) {\\n            distributeRedemptionFee(totalFee);\\n        }\\n    }\\n\\n    function distributeRedemptionFee(uint256 totalFee) public {\\n        // Get the fee recipients and amounts\\n        (\\n            address[] memory recipients,\\n            uint256[] memory fees\\n        ) = getRedemptionFeeRecipients(totalFee);\\n\\n        // Distribute the fees between the recipients\\n        for (uint256 i = 0; i < recipients.length; ++i) {\\n            uint256 fee = fees[i];\\n            uint256 burnAmount = (fee * feeRedeemBurnPercentageInBase) /\\n                feeRedeemDivider;\\n            fee -= burnAmount;\\n            transfer(recipients[i], fee);\\n            emit RedeemFeePaid(msg.sender, totalFee);\\n            if (burnAmount > 0) {\\n                transfer(feeRedeemBurnAddress, burnAmount);\\n                emit RedeemFeeBurnt(msg.sender, burnAmount);\\n            }\\n        }\\n    }\\n\\n    function getRedemptionFeeRecipients(uint256 totalFee)\\n        internal\\n        view\\n        virtual\\n        returns (address[] memory recipients, uint256[] memory fees)\\n    {\\n        // Use the fee module if one is configured\\n        if (feeCalculator != IFeeCalculator(address(0))) {\\n            return feeCalculator.calculateFeeAmongShares(totalFee);\\n        }\\n\\n        // Fall back to fixed fee if a fee module is not configured\\n        recipients = new address[](1);\\n        fees = new uint256[](1);\\n        recipients[0] = feeRedeemReceiver;\\n        fees[0] = totalFee;\\n        return (recipients, fees);\\n    }\\n\\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\\n    /// TCO2s from an array of ranked TCO2 contracts\\n    /// starting from contract at index 0 until amount is satisfied\\n    /// @param amount Total amount to be redeemed\\n    /// @dev Pool tokens in user's wallet get burned\\n    /// @return tco2s amounts The addresses and amounts of the TCO2s that were\\n    /// automatically redeemed\\n    function redeemAuto(uint256 amount)\\n        external\\n        virtual\\n        returns (address[] memory tco2s, uint256[] memory amounts)\\n    {\\n        return redeemAuto2(amount);\\n    }\\n\\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\\n    /// TCO2s from an array of ranked TCO2 contracts starting from contract at\\n    /// index 0 until amount is satisfied.\\n    /// @param amount Total amount to be redeemed\\n    /// @return tco2s amounts The addresses and amounts of the TCO2s that were\\n    /// automatically redeemed\\n    function redeemAuto2(uint256 amount)\\n        public\\n        virtual\\n        returns (address[] memory tco2s, uint256[] memory amounts)\\n    {\\n        onlyUnpaused();\\n        require(amount != 0, Errors.CP_ZERO_AMOUNT);\\n        //slither-disable-next-line uninitialized-local\\n        uint256 i;\\n        // Non-zero count tracks TCO2s with a balance\\n        //slither-disable-next-line uninitialized-local\\n        uint256 nonZeroCount;\\n\\n        uint256 scoredTCO2Len = scoredTCO2s.length;\\n        while (amount > 0 && i < scoredTCO2Len) {\\n            address tco2 = scoredTCO2s[i];\\n            uint256 balance = tokenBalances(tco2);\\n            //slither-disable-next-line uninitialized-local\\n            uint256 amountToRedeem;\\n\\n            // Only TCO2s with a balance should be included for a redemption.\\n            if (balance != 0) {\\n                amountToRedeem = amount > balance ? balance : amount;\\n                amount -= amountToRedeem;\\n                unchecked {\\n                    ++nonZeroCount;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n\\n            // Create return arrays statically since Solidity does not\\n            // support dynamic arrays or mappings in-memory (EIP-1153).\\n            // Do it here to avoid having to fill out the last indexes\\n            // during the second iteration.\\n            //slither-disable-next-line incorrect-equality\\n            if (amount == 0) {\\n                tco2s = new address[](nonZeroCount);\\n                amounts = new uint256[](nonZeroCount);\\n\\n                tco2s[nonZeroCount - 1] = tco2;\\n                amounts[nonZeroCount - 1] = amountToRedeem;\\n                redeemSingle(tco2, amountToRedeem);\\n            }\\n        }\\n\\n        require(amount == 0, Errors.CP_NON_ZERO_REMAINING);\\n\\n        // Execute the second iteration by avoiding to run the last index\\n        // since we have already executed that in the first iteration.\\n        nonZeroCount = 0;\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 j; j < i - 1; ++j) {\\n            address tco2 = scoredTCO2s[j];\\n            // This second loop only gets called when the `amount` is larger\\n            // than the first tco2 balance in the array. Here, in every iteration the\\n            // tco2 balance is smaller than the remaining amount while the last bit of\\n            // the `amount` which is smaller than the tco2 balance, got redeemed\\n            // in the first loop.\\n            uint256 balance = tokenBalances(tco2);\\n\\n            // Ignore empty balances so we don't generate redundant transactions.\\n            //slither-disable-next-line incorrect-equality\\n            if (balance == 0) continue;\\n\\n            tco2s[nonZeroCount] = tco2;\\n            amounts[nonZeroCount] = balance;\\n            redeemSingle(tco2, balance);\\n            unchecked {\\n                ++nonZeroCount;\\n            }\\n        }\\n    }\\n\\n    /// @dev Internal function that redeems a single underlying token\\n    function redeemSingle(address erc20, uint256 amount) internal virtual {\\n        _burn(msg.sender, amount);\\n        IERC20Upgradeable(erc20).safeTransfer(msg.sender, amount);\\n        emit Redeemed(msg.sender, erc20, amount);\\n    }\\n\\n    /// @dev Implemented in order to disable transfers when paused\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        onlyUnpaused();\\n    }\\n\\n    /// @dev Returns the remaining space in pool before hitting the cap\\n    function getRemaining() public view returns (uint256) {\\n        return (supplyCap - totalSupply());\\n    }\\n\\n    /// @notice Returns the balance of the TCO2 found in the pool\\n    function tokenBalances(address tco2) public view returns (uint256) {\\n        return IERC20Upgradeable(tco2).balanceOf(address(this));\\n    }\\n\\n    // -----------------------------\\n    //      Locked ERC20 safety\\n    // -----------------------------\\n\\n    /// @dev Function to disallowing sending tokens to either the 0-address\\n    /// or this contract itself\\n    function validDestination(address to) internal view {\\n        require(to != address(0x0), Errors.CP_INVALID_DESTINATION_ZERO);\\n        require(to != address(this), Errors.CP_INVALID_DESTINATION_SELF);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        validDestination(recipient);\\n        super.transfer(recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        validDestination(recipient);\\n        super.transferFrom(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function getScoredTCO2s() external view returns (address[] memory) {\\n        return scoredTCO2s;\\n    }\\n}\\n\",\"keccak256\":\"0x3b29577e13ad79695042a39a002123a9a39d52d11ab6064784ac08480ed497db\",\"license\":\"UNLICENSED\"},\"contracts/pools/PoolStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {IFeeCalculator} from './interfaces/IFeeCalculator.sol';\\n\\nabstract contract PoolStorageV1 {\\n    /// @notice The supply cap is used as a measure to guard deposits\\n    /// in the pool. It is meant to minimize the impact a potential\\n    /// compromise in the source registry (eg. Verra) can have to the pool.\\n    uint256 public supplyCap;\\n    //slither-disable-next-line constable-states\\n    mapping(address => uint256) private DEPRECATED_tokenBalances;\\n    //slither-disable-next-line constable-states\\n    address private DEPRECATED_contractRegistry;\\n\\n    /// @notice array used to read from when redeeming TCO2s automatically\\n    address[] public scoredTCO2s;\\n\\n    /// @dev Mappings for attributes that can be included or excluded\\n    /// if set to `false`, attribute-values are blacklisted/rejected\\n    /// if set to `true`, attribute-values are whitelisted/accepted\\n    //slither-disable-next-line constable-states\\n    mapping(string => bool) private DEPRECATED_regions;\\n    //slither-disable-next-line constable-states\\n    mapping(string => bool) private DEPRECATED_standards;\\n    //slither-disable-next-line constable-states\\n    mapping(string => bool) private DEPRECATED_methodologies;\\n\\n    /// @dev mapping to whitelist external non-TCO2 contracts by address\\n    //slither-disable-next-line constable-states\\n    mapping(address => bool) private DEPRECATED_externalWhiteList;\\n\\n    /// @dev mapping to include certain TCO2 contracts by address,\\n    /// overriding attribute matching checks\\n    //slither-disable-next-line constable-states\\n    mapping(address => bool) private DEPRECATED_internalWhiteList;\\n\\n    /// @dev mapping to exclude certain TCO2 contracts by address,\\n    /// even if the attribute matching would pass\\n    //slither-disable-next-line constable-states\\n    mapping(address => bool) private DEPRECATED_internalBlackList;\\n\\n    /// @dev fees redeem receiver address\\n    address public feeRedeemReceiver;\\n\\n    uint256 public feeRedeemPercentageInBase;\\n\\n    /// @dev fees redeem burn address\\n    address public feeRedeemBurnAddress;\\n\\n    /// @dev fees redeem burn percentage with 2 fixed decimals precision\\n    uint256 public feeRedeemBurnPercentageInBase;\\n\\n    /// @dev repacked smaller variables here so new bools can be added below\\n    //slither-disable-next-line constable-states\\n    uint64 private DEPRECATED_minimumVintageStartTime;\\n    //slither-disable-next-line constable-states\\n    bool private DEPRECATED_seedMode;\\n    //slither-disable-next-line constable-states\\n    bool private DEPRECATED_regionsIsAcceptedMapping;\\n    //slither-disable-next-line constable-states\\n    bool private DEPRECATED_standardsIsAcceptedMapping;\\n    //slither-disable-next-line constable-states\\n    bool private DEPRECATED_methodologiesIsAcceptedMapping;\\n}\\n\\nabstract contract PoolStorageV1_1 {\\n    /// @notice End users exempted from redeem fees\\n    mapping(address => bool) public redeemFeeExemptedAddresses;\\n}\\n\\nabstract contract PoolStorageV1_2 {\\n    /// @notice TCO2s exempted from redeem fees\\n    mapping(address => bool) public redeemFeeExemptedTCO2s;\\n}\\n\\nabstract contract PoolStorageV1_3 {\\n    /// @notice bridge router who has access to the bridgeMint & bridgeBurn functions which\\n    /// mint/burn pool tokens for cross chain messenges\\n    address public router;\\n}\\n\\nabstract contract PoolStorageV1_4 {\\n    /// @notice fee percentage in basis points charged for selective\\n    /// redemptions that also retire the credits in the same transaction\\n    uint256 public feeRedeemRetirePercentageInBase;\\n    address public filter;\\n}\\n\\nabstract contract PoolStorageV1_5 {\\n    /// @notice module to calculate fees for the pool\\n    IFeeCalculator public feeCalculator;\\n}\\n\\nabstract contract PoolStorage is\\n    PoolStorageV1,\\n    PoolStorageV1_1,\\n    PoolStorageV1_2,\\n    PoolStorageV1_3,\\n    PoolStorageV1_4,\\n    PoolStorageV1_5\\n{}\\n\",\"keccak256\":\"0x989687af50a91acab8d476bc670dfb469abf1e720dff58738fd98b05fe19d883\",\"license\":\"UNLICENSED\"},\"contracts/pools/interfaces/IFeeCalculator.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Neutral Labs Inc.\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <info@neutralx.com>\\npragma solidity ^0.8.13;\\n\\n/// @title IFeeCalculator\\n/// @author Neutral Labs Inc.\\n/// @notice This interface defines methods for calculating fees.\\ninterface IFeeCalculator {\\n    /// @notice Calculates the deposit fee for a given amount.\\n    /// @param tco2 The address of the TCO2 token.\\n    /// @param pool The address of the pool.\\n    /// @param depositAmount The amount to be deposited.\\n    /// @return feeAmount The fee to be charged in pool\\n    /// tokens for this deposit.\\n    function calculateDepositFees(\\n        address tco2,\\n        address pool,\\n        uint256 depositAmount\\n    ) external view returns (uint256 feeAmount);\\n\\n    /// @notice Calculates the redemption fees for a given amount.\\n    /// @param tco2 The address of the TCO2 token.\\n    /// @param pool The address of the pool.\\n    /// @param redemptionAmount The amount to be redeemed.\\n    /// @return feeAmount The fee to be charged in pool\\n    /// tokens for this redemption.\\n    function calculateRedemptionFees(\\n        address tco2,\\n        address pool,\\n        uint256 redemptionAmount\\n    ) external view returns (uint256 feeAmount);\\n\\n    /// @notice Calculates the total fee among the recipients according to their shares.\\n    /// @param totalFee The total fee to be distributed.\\n    /// @return recipients The addresses of the fee recipients.\\n    /// @return feesDenominatedInPoolTokens The amount of fees each recipient should receive.\\n    function calculateFeeAmongShares(uint256 totalFee)\\n        external\\n        view\\n        returns (\\n            address[] memory recipients,\\n            uint256[] memory feesDenominatedInPoolTokens\\n        );\\n}\\n\",\"keccak256\":\"0xe45c97f0a3d5354e850882a4fc5dd74ae69f7bf2ba16715f64150bff59f86f5d\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b62000156565b6200003260ff62000035565b50565b60008054610100900460ff1615620000ce578160ff1660011480156200006e57506200006c306200014760201b62002b881760201c565b155b620000c65760405162461bcd60e51b815260206004820152602e60248201526000805160206200542e83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106200012d5760405162461bcd60e51b815260206004820152602e60248201526000805160206200542e83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000bd565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b6080516152a06200018e600039600081816112b0015281816112f001528181611c5c01528181611c9c0152611d9601526152a06000f3fe6080604052600436106104685760003560e01c80638129fc1c1161024a578063bbe669eb11610139578063e07f744c116100b6578063f2fde38b1161007a578063f2fde38b14610dbe578063f3edb9ec14610dde578063f75991cd14610dfe578063f887ea4014610e1e578063ffa1ad7414610e3f57600080fd5b8063e07f744c14610d12578063e0d7cad914610d32578063e63ab1e914610d48578063e9d131ad14610d7c578063ec87621c14610d9c57600080fd5b8063d6a022b8116100fd578063d6a022b814610c86578063d80e05aa14610c9b578063dc5f560e14610cbb578063dd62ed3e14610cdb578063dff0f52314610cfb57600080fd5b8063bbe669eb14610bd6578063bf2f870f14610bf6578063c0d7865514610c18578063cd7325f614610c38578063d547741f14610c6657600080fd5b8063963ff55e116101c7578063a9059cbb1161018b578063a9059cbb14610b3e578063aa61cb2714610b5e578063b00eb9fe14610b75578063b516f8cf14610b96578063b6a3f59a14610bb657600080fd5b8063963ff55e14610aa5578063a1631e4b14610ac5578063a217fddf14610af2578063a457c2d714610b07578063a7381a6414610b2757600080fd5b80638c66d04f1161020e5780638c66d04f14610a1b5780638da5cb5b14610a3b5780638f770ad014610a5957806391d1485414610a7057806395d89b4114610a9057600080fd5b80638129fc1c146109915780638456cb59146109a65780638662522f146109bb57806389022e2e146109db5780638c2a993e146109fb57600080fd5b80633a9a77ee11610366578063539eee37116102e357806370a08231116102a757806370a08231146108e6578063715018a61461091c57806374f4f5471461093157806379255ddd146109515780637c0ab3671461097157600080fd5b8063539eee37146108585780635c975abb146108785780635fadcc1e146108905780636ca0b0d7146108b15780636dbb3102146108c657600080fd5b806347e7ef241161032a57806347e7ef24146107d05780634c02cad1146107f05780634f1ef28614610810578063523fba7f1461082357806352d1902d1461084357600080fd5b80633a9a77ee146107475780633d2afced146107685780633ebc2df11461077b5780633f4ba83a1461079b5780634642547b146107b057600080fd5b806323b872dd116103f45780632f2ff15d116103b85780632f2ff15d146106ab578063313ce567146106cb57806336568abe146106e75780633659cfe614610707578063395093511461072757600080fd5b806323b872dd146105c4578063248a9ca3146105e457806324adbf4d146106145780632b540f191461064d5780632b5541421461067e57600080fd5b80630b7d28c71161043b5780630b7d28c7146105065780630e2d15ab1461052657806318160ddd146105575780631e1fa3bd1461057657806320b167f91461059657600080fd5b806301ffc9a71461046d57806306fdde03146104a2578063095ea7b3146104c45780630ae6ed8f146104e4575b600080fd5b34801561047957600080fd5b5061048d61048836600461461a565b610e70565b60405190151581526020015b60405180910390f35b3480156104ae57600080fd5b506104b7610ea7565b6040516104999190614670565b3480156104d057600080fd5b5061048d6104df3660046146b8565b610f39565b3480156104f057600080fd5b506105046104ff3660046146e4565b610f51565b005b34801561051257600080fd5b506105046105213660046146fd565b610fea565b34801561053257600080fd5b5061048d6105413660046146fd565b6101a06020526000908152604090205460ff1681565b34801561056357600080fd5b506035545b604051908152602001610499565b34801561058257600080fd5b50610568610591366004614765565b61104e565b3480156105a257600080fd5b506105b66105b13660046146e4565b6111b0565b604051610499929190614864565b3480156105d057600080fd5b5061048d6105df366004614889565b6111c5565b3480156105f057600080fd5b506105686105ff3660046146e4565b600090815260fb602052604090206001015490565b34801561062057600080fd5b5061019b54610635906001600160a01b031681565b6040516001600160a01b039091168152602001610499565b34801561065957600080fd5b5061048d6106683660046146fd565b6101a16020526000908152604090205460ff1681565b34801561068a57600080fd5b5061069e610699366004614a02565b6111e8565b6040516104999190614a65565b3480156106b757600080fd5b506105046106c6366004614a78565b6111fe565b3480156106d757600080fd5b5060405160128152602001610499565b3480156106f357600080fd5b50610504610702366004614a78565b611228565b34801561071357600080fd5b506105046107223660046146fd565b6112a6565b34801561073357600080fd5b5061048d6107423660046146b8565b611385565b34801561075357600080fd5b5061019d54610635906001600160a01b031681565b610504610776366004614765565b6113a7565b34801561078757600080fd5b506105046107963660046146fd565b6115cf565b3480156107a757600080fd5b50610504611626565b3480156107bc57600080fd5b506105046107cb3660046146fd565b611659565b3480156107dc57600080fd5b506105686107eb3660046146b8565b6116b9565b3480156107fc57600080fd5b506105b661080b3660046146e4565b611972565b61050461081e366004614aa8565b611c52565b34801561082f57600080fd5b5061056861083e3660046146fd565b611d1e565b34801561084f57600080fd5b50610568611d89565b34801561086457600080fd5b50610568610873366004614b5d565b611e3c565b34801561088457600080fd5b5060975460ff1661048d565b34801561089c57600080fd5b506101a454610635906001600160a01b031681565b3480156108bd57600080fd5b50610568600181565b3480156108d257600080fd5b506105046108e13660046146fd565b611f12565b3480156108f257600080fd5b506105686109013660046146fd565b6001600160a01b031660009081526033602052604090205490565b34801561092857600080fd5b50610504611f6f565b34801561093d57600080fd5b5061050461094c3660046146b8565b611fd3565b34801561095d57600080fd5b5061050461096c3660046146e4565b611fe5565b34801561097d57600080fd5b5061050461098c3660046146e4565b61205f565b34801561099d57600080fd5b50610504612193565b3480156109b257600080fd5b50610504612271565b3480156109c757600080fd5b5061048d6109d6366004614bd4565b6122a2565b3480156109e757600080fd5b506105046109f63660046146b8565b612317565b348015610a0757600080fd5b50610504610a163660046146b8565b6123e5565b348015610a2757600080fd5b50610504610a363660046146fd565b6123f7565b348015610a4757600080fd5b506065546001600160a01b0316610635565b348015610a6557600080fd5b506105686101915481565b348015610a7c57600080fd5b5061048d610a8b366004614a78565b61244e565b348015610a9c57600080fd5b506104b7612479565b348015610ab157600080fd5b50610635610ac03660046146e4565b612488565b348015610ad157600080fd5b50610ada6124b3565b6040516001600160401b039091168152602001610499565b348015610afe57600080fd5b50610568600081565b348015610b1357600080fd5b5061048d610b223660046146b8565b612527565b348015610b3357600080fd5b5061056861019e5481565b348015610b4a57600080fd5b5061048d610b593660046146b8565b6125ad565b348015610b6a57600080fd5b506105686101a35481565b348015610b8157600080fd5b506101a554610635906001600160a01b031681565b348015610ba257600080fd5b50610504610bb13660046146fd565b6125c2565b348015610bc257600080fd5b50610504610bd13660046146e4565b61265a565b348015610be257600080fd5b50610504610bf1366004614c45565b612698565b348015610c0257600080fd5b50610c0b612731565b6040516104999190614c86565b348015610c2457600080fd5b50610504610c333660046146fd565b612793565b348015610c4457600080fd5b50610c58610c53366004614a02565b6127ea565b604051610499929190614c99565b348015610c7257600080fd5b50610504610c81366004614a78565b612804565b348015610c9257600080fd5b50610568612829565b348015610ca757600080fd5b50610504610cb63660046146fd565b612842565b348015610cc757600080fd5b5061048d610cd63660046146fd565b61289c565b348015610ce757600080fd5b50610568610cf6366004614cac565b61290c565b348015610d0757600080fd5b5061056861019c5481565b348015610d1e57600080fd5b50610504610d2d3660046146fd565b612937565b348015610d3e57600080fd5b5061056861271081565b348015610d5457600080fd5b506105687f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610d8857600080fd5b50610504610d973660046146e4565b6129cf565b348015610da857600080fd5b5061056860008051602061522483398151915281565b348015610dca57600080fd5b50610504610dd93660046146fd565b612a58565b348015610dea57600080fd5b5061048d610df9366004614bd4565b612b20565b348015610e0a57600080fd5b5061048d610e19366004614bd4565b612b54565b348015610e2a57600080fd5b506101a254610635906001600160a01b031681565b348015610e4b57600080fd5b506104b7604051806040016040528060058152602001640312e302e360dc1b81525081565b60006001600160e01b03198216637965db0b60e01b1480610ea157506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060368054610eb690614cda565b80601f0160208091040260200160405190810160405280929190818152602001828054610ee290614cda565b8015610f2f5780601f10610f0457610100808354040283529160200191610f2f565b820191906000526020600020905b815481529060010190602001808311610f1257829003601f168201915b5050505050905090565b600033610f47818585612b97565b5060019392505050565b610f68600080516020615224833981519152612cbb565b604080518082019091526002815261031360f41b60208201526127108210610fac5760405162461bcd60e51b8152600401610fa39190614670565b60405180910390fd5b506101a38190556040518181527ff43ba0ebbfc97d9bed5cedfa0a1d81593cf263c533088e44268900db87ae4ef8906020015b60405180910390a150565b610ff2612d21565b6001600160a01b03811660008181526101a06020908152604091829020805460ff191660019081179091558251938452908301527f9243c023afac8831ce7d7574176d51e9cbdff271c07285080839f677ff57a6b49101610fdf565b604080518082019091526002815261189960f11b6020820152600090849083821461108c5760405162461bcd60e51b8152600401610fa39190614670565b506101a2546001600160a01b031660006110a6828a612d77565b905060005b838110156111a357826001600160a01b031663d9e7e0b78b8b8b858181106110d5576110d5614d14565b90506020020160208101906110ea91906146fd565b8a8a868181106110fc576110fc614d14565b6040516001600160e01b031960e088901b16815263ffffffff9590951660048601526001600160a01b039384166024860152602002919091013560448401525085166064820152608401602060405180830381865afa158015611163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111879190614d2a565b6111919086614d59565b945061119c81614d71565b90506110ab565b5050505095945050505050565b6060806111bc83611972565b91509150915091565b60006111d083612e3f565b6111db848484612ec2565b50600190505b9392505050565b60606111f683836000612edb565b949350505050565b600082815260fb6020526040902060010154611219816131cd565b61122383836131d7565b505050565b6001600160a01b03811633146112985760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610fa3565b6112a2828261325d565b5050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036112ee5760405162461bcd60e51b8152600401610fa390614d8a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611337600080516020615204833981519152546001600160a01b031690565b6001600160a01b03161461135d5760405162461bcd60e51b8152600401610fa390614dd6565b611366816132c4565b60408051600080825260208201909252611382918391906132cc565b50565b600033610f47818585611398838361290c565b6113a29190614d59565b612b97565b6113be600080516020615224833981519152612cbb565b6040805180820190915260018152601960f91b60208201528390816113f65760405162461bcd60e51b8152600401610fa39190614670565b50604080518082019091526002815261189960f11b60208201528183146114305760405162461bcd60e51b8152600401610fa39190614670565b506101a2546001600160a01b0316600061144a8289612d77565b905060006114588434614e22565b905060005b848110156115c357836001600160a01b031663d3f6c4f1838c8c8c8681811061148857611488614d14565b905060200201602081019061149d91906146fd565b8b8b878181106114af576114af614d14565b6040516001600160e01b031960e089901b16815263ffffffff9590951660048601526001600160a01b0393841660248601526020029190910135604484015250871660648201526084016000604051808303818588803b15801561151257600080fd5b505af1158015611526573d6000803e3d6000fd5b505050505088888281811061153d5761153d614d14565b905060200201602081019061155291906146fd565b6001600160a01b03168a63ffffffff167f36d0f926f9bce41fb6e90938955b971cee6bbdfbce772aadd3d6c824f037279789898581811061159557611595614d14565b905060200201356040516115ab91815260200190565b60405180910390a36115bc81614d71565b905061145d565b50505050505050505050565b6115d7612d21565b6101a480546001600160a01b0319166001600160a01b0383169081179091556040519081527fcc693712a2055d921e821f24fea7e18faff35a4e741d180badc0b05a0c275e6a90602001610fdf565b61164f7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a612cbb565b611657613437565b565b611661612d21565b6001600160a01b03811660008181526101a060209081526040808320805460ff191690558051938452908301919091527f9243c023afac8831ce7d7574176d51e9cbdff271c07285080839f677ff57a6b49101610fdf565b60006116c36134ca565b6116cc8361289c565b60405180604001604052806002815260200161191960f11b815250906117055760405162461bcd60e51b8152600401610fa39190614670565b506000611710612829565b6040805180820190915260018152603360f81b6020820152909150816117495760405162461bcd60e51b8152600401610fa39190614670565b5080831115611756578092505b6101a55460009084906001600160a01b0316156117f2576101a554604051638925ba9f60e01b81526001600160a01b0390911690638925ba9f906117a290899030908690600401614e44565b602060405180830381865afa1580156117bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e39190614d2a565b91506117ef8282614e68565b90505b6117fc338261350a565b604080516001600160a01b0388168152602081018790527f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4910160405180910390a18115611954576101a55460405163345127f160e11b81526004810184905260009182916001600160a01b03909116906368a24fe290602401600060405180830381865afa158015611893573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118bb9190810190614eda565b9150915060005b8251811015611917576119078382815181106118e0576118e0614d14565b60200260200101518383815181106118fa576118fa614d14565b602002602001015161350a565b61191081614d71565b90506118c2565b5060408051338152602081018690527f4658b473764413b8a15e16e464adf1ee318894b37e86cf2fd44a70bca04f6502910160405180910390a150505b6119696001600160a01b0387163330886135f5565b95945050505050565b60608061197d6134ca565b604080518082019091526002815261323160f01b6020820152836119b45760405162461bcd60e51b8152600401610fa39190614670565b506101945460009081905b6000861180156119ce57508083105b15611b3c57600061019484815481106119e9576119e9614d14565b60009182526020822001546001600160a01b03169150611a0882611d1e565b905060008115611a3657818911611a1f5788611a21565b815b9050611a2d818a614e68565b98508460010194505b85600101955088600003611b3457846001600160401b03811115611a5c57611a5c6148ca565b604051908082528060200260200182016040528015611a85578160200160208202803683370190505b509750846001600160401b03811115611aa057611aa06148ca565b604051908082528060200260200182016040528015611ac9578160200160208202803683370190505b5096508288611ad9600188614e68565b81518110611ae957611ae9614d14565b6001600160a01b03909216602092830291909101909101528087611b0e600188614e68565b81518110611b1e57611b1e614d14565b602002602001018181525050611b34838261364d565b5050506119bf565b604080518082019091526002815261313560f01b60208201528615611b745760405162461bcd60e51b8152600401610fa39190614670565b506000915060005b611b87600185614e68565b811015611c495760006101948281548110611ba457611ba4614d14565b60009182526020822001546001600160a01b03169150611bc382611d1e565b905080600003611bd4575050611c39565b81888681518110611be757611be7614d14565b60200260200101906001600160a01b031690816001600160a01b03168152505080878681518110611c1a57611c1a614d14565b602002602001018181525050611c30828261364d565b84600101945050505b611c4281614d71565b9050611b7c565b50505050915091565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003611c9a5760405162461bcd60e51b8152600401610fa390614d8a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611ce3600080516020615204833981519152546001600160a01b031690565b6001600160a01b031614611d095760405162461bcd60e51b8152600401610fa390614dd6565b611d12826132c4565b6112a2828260016132cc565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015611d65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea19190614d2a565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611e295760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610fa3565b5060008051602061520483398151915290565b6000611e466134ca565b3360009081526101a0602052604090205460ff1615611e67575060006111e1565b83518351604080518082019091526002815261189960f11b6020820152908214611ea45760405162461bcd60e51b8152600401610fa39190614670565b5060005b81811015611f0957611eed868281518110611ec557611ec5614d14565b6020026020010151868381518110611edf57611edf614d14565b60200260200101518661369e565b611ef79084614d59565b9250611f0281614d71565b9050611ea8565b50509392505050565b611f1a612d21565b6001600160a01b03811660008181526101a16020908152604091829020805460ff1916600117905590519182527fbfe78aa03afab7296923112293cb902a2fe6df5a6d3d81e1933c652c4cf860f49101610fdf565b6065546001600160a01b03163314611fc95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610fa3565b6116576000613739565b611fdb61378b565b6112a282826137d1565b611fed612d21565b604080518082019091526002815261031360f41b602082015261271082106120285760405162461bcd60e51b8152600401610fa39190614670565b5061019e8190556040518181527fb53960c69c6a03b9c2457d50976610ab54438aea64f693512228035729dde0e990602001610fdf565b60008061206b8361392b565b9150915060005b825181101561218d57600082828151811061208f5761208f614d14565b60200260200101519050600061271061019e54836120ad9190614f94565b6120b79190614e22565b90506120c38183614e68565b91506120e88584815181106120da576120da614d14565b6020026020010151836125ad565b5060408051338152602081018890527f3f89e1d936a29a8de9ae9040436992721a00bc63bbe3ca55692b95f0311640b2910160405180910390a1801561217a5761019d5461213f906001600160a01b0316826125ad565b5060408051338152602081018390527f932bd968974f0b6fa1cb59bf961f81d2e57b39332d311b413dceae17966387db910160405180910390a15b50508061218690614d71565b9050612072565b50505050565b600061219f6001613a5a565b905080156121b7576000805461ff0019166101001790555b6121bf613ae2565b6121c7613b09565b6121cf613b39565b612214604051806040016040528060078152602001662134b7b1b430b960c91b8152506040518060400160405280600481526020016321a420a960e11b815250613b6c565b61221c613ae2565b612224613ae2565b61222f6000336131d7565b8015611382576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610fdf565b61229a7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a612cbb565b611657613bba565b6101a454604051638662522f60e01b81526000916001600160a01b031690638662522f906122d69086908690600401614fb3565b602060405180830381865afa1580156122f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e19190614fe2565b61231f6134ca565b6001600160a01b03821660009081526101a160209081526040918290205482518084019093526002835261313360f01b9183019190915260ff166123765760405162461bcd60e51b8152600401610fa39190614670565b50612381828261364d565b60405163079cc67960e41b8152336004820152602481018290526001600160a01b038316906379cc679090604401600060405180830381600087803b1580156123c957600080fd5b505af11580156123dd573d6000803e3d6000fd5b505050505050565b6123ed61378b565b6112a2828261350a565b6123ff612d21565b6101a580546001600160a01b0319166001600160a01b0383169081179091556040519081527f3e762c7e655633ce63121393b9694f9ca1883d14d18f48f1be55e5dc7a9fb6c190602001610fdf565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060378054610eb690614cda565b610194818154811061249957600080fd5b6000918252602090912001546001600160a01b0316905081565b6101a4546040805163a1631e4b60e01b815290516000926001600160a01b03169163a1631e4b9160048083019260209291908290030181865afa1580156124fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125229190614fff565b905090565b60003381612535828661290c565b9050838110156125955760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610fa3565b6125a28286868403612b97565b506001949350505050565b60006125b883612e3f565b610f478383613c35565b6125ca612d21565b604080518082019091526002815261313160f01b60208201526001600160a01b03821661260a5760405162461bcd60e51b8152600401610fa39190614670565b5061019b80546001600160a01b0319166001600160a01b0383169081179091556040519081527fae73ff4cda09edd20b6cbc88f93ee196b1baa53fb59fffc5686744f4435d828090602001610fdf565b612662612d21565b6101918190556040518181527f4e44c8be34d12f1b7f56b13b4bbe97e64ca37a91916f86c73412da80c21748e290602001610fdf565b6126af600080516020615224833981519152612cbb565b6040805180820190915260018152601960f91b6020820152816126e55760405162461bcd60e51b8152600401610fa39190614670565b506126f3610194838361452e565b507f9204d457ace303c5dbbeaa6966e5ec65661a390007a367c6645e52b4ef4b528e8282604051612725929190615028565b60405180910390a15050565b6060610194805480602002602001604051908101604052809291908181526020018280548015610f2f57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161276c575050505050905090565b61279b612d21565b6101a280546001600160a01b0319166001600160a01b0383169081179091556040519081527f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc8090602001610fdf565b6060806127f984846001612edb565b909590945092505050565b600082815260fb602052604090206001015461281f816131cd565b611223838361325d565b600061283460355490565b610191546125229190614e68565b61284a612d21565b6001600160a01b03811660008181526101a16020908152604091829020805460ff1916905590519182527fd1fc9d8986829d0ba9df2bc201a2c76327e0f71567b5a2fb82ba464bf4a03f449101610fdf565b6101a454604051636e2fab0760e11b81526001600160a01b038381166004830152600092169063dc5f560e90602401602060405180830381865afa1580156128e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea19190614fe2565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b61293f612d21565b604080518082019091526002815261313160f01b60208201526001600160a01b03821661297f5760405162461bcd60e51b8152600401610fa39190614670565b5061019d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fe45e1256d720bfcb8dfcc82308efc5ad34e89a7ca19cc500b5c657fcc3359e5590602001610fdf565b6129e6600080516020615224833981519152612cbb565b604080518082019091526002815261031360f41b60208201526127108210612a215760405162461bcd60e51b8152600401610fa39190614670565b5061019c8190556040518181527fd6c7508d6658ccee36b7b7d7fd72e5cbaeefb40c64eff24e9ae7470e846304ee90602001610fdf565b6065546001600160a01b03163314612ab25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610fa3565b6001600160a01b038116612b175760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610fa3565b61138281613739565b6101a454604051633cfb6e7b60e21b81526000916001600160a01b03169063f3edb9ec906122d69086908690600401614fb3565b6101a45460405163f75991cd60e01b81526000916001600160a01b03169063f75991cd906122d69086908690600401614fb3565b6001600160a01b03163b151590565b6001600160a01b038316612bf95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610fa3565b6001600160a01b038216612c5a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610fa3565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b612cc5813361244e565b80612ce9575033612cde6065546001600160a01b031690565b6001600160a01b0316145b604051806040016040528060018152602001603160f81b815250906112a25760405162461bcd60e51b8152600401610fa39190614670565b33612d346065546001600160a01b031690565b6001600160a01b03161460405180604001604052806002815260200161062760f31b815250906113825760405162461bcd60e51b8152600401610fa39190614670565b604051635ed6513d60e11b815230600482015263ffffffff8216602482015260009081906001600160a01b0385169063bdaca27a906044016040805180830381865afa158015612dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612def919061506b565b8051604080518082019091526002815261313160f01b60208201529093509091506001600160a01b038316612e375760405162461bcd60e51b8152600401610fa39190614670565b505092915050565b604080518082019091526002815261313960f01b60208201526001600160a01b038216612e7f5760405162461bcd60e51b8152600401610fa39190614670565b50604080518082019091526002815261032360f41b60208201526001600160a01b03821630036112a25760405162461bcd60e51b8152600401610fa39190614670565b600033612ed0858285613c43565b6125a2858585613cb7565b606080612ee66134ca565b84518451604080518082019091526002815261189960f11b6020820152908214612f235760405162461bcd60e51b8152600401610fa39190614670565b50806001600160401b03811115612f3c57612f3c6148ca565b604051908082528060200260200182016040528015612f65578160200160208202803683370190505b5091508315612fb357806001600160401b03811115612f8657612f866148ca565b604051908082528060200260200182016040528015612faf578160200160208202803683370190505b5092505b3360009081526101a0602052604081205460ff16815b838110156131b257612ff3898281518110612fe657612fe6614d14565b602002602001015161289c565b60405180604001604052806002815260200161191960f11b8152509061302c5760405162461bcd60e51b8152600401610fa39190614670565b50600082613080576130718a838151811061304957613049614d14565b60200260200101518a848151811061306357613063614d14565b60200260200101518a61369e565b905061307d8185614d59565b93505b6000818a848151811061309557613095614d14565b60200260200101516130a79190614e68565b90506130cc8b84815181106130be576130be614d14565b60200260200101518261364d565b8815613180578a83815181106130e4576130e4614d14565b60209081029190910101516040516335927feb60e11b8152336004820152602481018390526001600160a01b0390911690636b24ffd6906044016020604051808303816000875af115801561313d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131619190614d2a565b88848151811061317357613173614d14565b6020026020010181815250505b8087848151811061319357613193614d14565b6020026020010181815250505050806131ab90614d71565b9050612fc9565b5081156131c2576131c28261205f565b505050935093915050565b6113828133613e90565b6131e1828261244e565b6112a257600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556132193390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b613267828261244e565b156112a257600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611382612d21565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156132ff5761122383613ef4565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613359575060408051601f3d908101601f1916820190925261335691810190614d2a565b60015b6133bc5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610fa3565b600080516020615204833981519152811461342b5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610fa3565b50611223838383613f90565b60975460ff166134805760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610fa3565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60975460ff1615604051806040016040528060028152602001610c4d60f21b815250906113825760405162461bcd60e51b8152600401610fa39190614670565b6001600160a01b0382166135605760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610fa3565b61356c60008383613fb5565b806035600082825461357e9190614d59565b90915550506001600160a01b038216600090815260336020526040812080548392906135ab908490614d59565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b61218d846323b872dd60e01b85858560405160240161361693929190614e44565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613fbd565b61365733826137d1565b61366b6001600160a01b038316338361408f565b7f27d4634c833b7622a0acddbf7f746183625f105945e95c723ad1d5a9f2a0b6fc33838360405161272593929190614e44565b6101a5546000906001600160a01b03166136c3576136bc83836140bf565b90506111e1565b6101a55460405163743c8ef760e01b81526001600160a01b039091169063743c8ef7906136f890879030908890600401614e44565b602060405180830381865afa158015613715573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f69190614d2a565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6101a254604080518082019091526002815261313760f01b6020820152906001600160a01b031633146113825760405162461bcd60e51b8152600401610fa39190614670565b6001600160a01b0382166138315760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610fa3565b61383d82600083613fb5565b6001600160a01b038216600090815260336020526040902054818110156138b15760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610fa3565b6001600160a01b03831660009081526033602052604081208383039055603580548492906138e0908490614e68565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6101a55460609081906001600160a01b0316156139b4576101a55460405163345127f160e11b8152600481018590526001600160a01b03909116906368a24fe290602401600060405180830381865afa15801561398c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111bc9190810190614eda565b60408051600180825281830190925290602080830190803683375050604080516001808252818301909252929450905060208083019080368337505061019b5484519293506001600160a01b031691849150600090613a1557613a15614d14565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600081518110613a4957613a49614d14565b602002602001018181525050915091565b60008054610100900460ff1615613aa1578160ff166001148015613a7d5750303b155b613a995760405162461bcd60e51b8152600401610fa3906150c2565b506000919050565b60005460ff808416911610613ac85760405162461bcd60e51b8152600401610fa3906150c2565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166116575760405162461bcd60e51b8152600401610fa390615110565b600054610100900460ff16613b305760405162461bcd60e51b8152600401610fa390615110565b61165733613739565b600054610100900460ff16613b605760405162461bcd60e51b8152600401610fa390615110565b6097805460ff19169055565b600054610100900460ff16613b935760405162461bcd60e51b8152600401610fa390615110565b8151613ba6906036906020850190614591565b508051611223906037906020840190614591565b60975460ff1615613c005760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610fa3565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586134ad3390565b600033610f47818585613cb7565b6000613c4f848461290c565b9050600019811461218d5781811015613caa5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610fa3565b61218d8484848403612b97565b6001600160a01b038316613d1b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610fa3565b6001600160a01b038216613d7d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610fa3565b613d88838383613fb5565b6001600160a01b03831660009081526033602052604090205481811015613e005760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610fa3565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290613e37908490614d59565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051613e8391815260200190565b60405180910390a361218d565b613e9a828261244e565b6112a257613eb2816001600160a01b031660146140ef565b613ebd8360206140ef565b604051602001613ece92919061515b565b60408051601f198184030181529082905262461bcd60e51b8252610fa391600401614670565b6001600160a01b0381163b613f615760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610fa3565b60008051602061520483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613f998361428a565b600082511180613fa65750805b156112235761218d83836142ca565b6112236134ca565b6000614012826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166143b59092919063ffffffff16565b80519091501561122357808060200190518101906140309190614fe2565b6112235760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610fa3565b6040516001600160a01b03831660248201526044810182905261122390849063a9059cbb60e01b90606401613616565b60008082156140d257506101a3546140d8565b5061019c545b6127106140e58286614f94565b6111f69190614e22565b606060006140fe836002614f94565b614109906002614d59565b6001600160401b03811115614120576141206148ca565b6040519080825280601f01601f19166020018201604052801561414a576020820181803683370190505b509050600360fc1b8160008151811061416557614165614d14565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061419457614194614d14565b60200101906001600160f81b031916908160001a90535060006141b8846002614f94565b6141c3906001614d59565b90505b600181111561423b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106141f7576141f7614d14565b1a60f81b82828151811061420d5761420d614d14565b60200101906001600160f81b031916908160001a90535060049490941c93614234816151d0565b90506141c6565b5083156111e15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610fa3565b61429381613ef4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6143325760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610fa3565b600080846001600160a01b03168460405161434d91906151e7565b600060405180830381855af49150503d8060008114614388576040519150601f19603f3d011682016040523d82523d6000602084013e61438d565b606091505b50915091506119698282604051806060016040528060278152602001615244602791396143c4565b60606111f684846000856143fd565b606083156143d35750816111e1565b8251156143e35782518084602001fd5b8160405162461bcd60e51b8152600401610fa39190614670565b60608247101561445e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610fa3565b6001600160a01b0385163b6144b55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610fa3565b600080866001600160a01b031685876040516144d191906151e7565b60006040518083038185875af1925050503d806000811461450e576040519150601f19603f3d011682016040523d82523d6000602084013e614513565b606091505b50915091506145238282866143c4565b979650505050505050565b828054828255906000526020600020908101928215614581579160200282015b828111156145815781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019061454e565b5061458d929150614605565b5090565b82805461459d90614cda565b90600052602060002090601f0160209004810192826145bf5760008555614581565b82601f106145d857805160ff1916838001178555614581565b82800160010185558215614581579182015b828111156145815782518255916020019190600101906145ea565b5b8082111561458d5760008155600101614606565b60006020828403121561462c57600080fd5b81356001600160e01b0319811681146111e157600080fd5b60005b8381101561465f578181015183820152602001614647565b8381111561218d5750506000910152565b602081526000825180602084015261468f816040850160208701614644565b601f01601f19169190910160400192915050565b6001600160a01b038116811461138257600080fd5b600080604083850312156146cb57600080fd5b82356146d6816146a3565b946020939093013593505050565b6000602082840312156146f657600080fd5b5035919050565b60006020828403121561470f57600080fd5b81356111e1816146a3565b60008083601f84011261472c57600080fd5b5081356001600160401b0381111561474357600080fd5b6020830191508360208260051b850101111561475e57600080fd5b9250929050565b60008060008060006060868803121561477d57600080fd5b853563ffffffff8116811461479157600080fd5b945060208601356001600160401b03808211156147ad57600080fd5b6147b989838a0161471a565b909650945060408801359150808211156147d257600080fd5b506147df8882890161471a565b969995985093965092949392505050565b600081518084526020808501945080840160005b838110156148295781516001600160a01b031687529582019590820190600101614804565b509495945050505050565b600081518084526020808501945080840160005b8381101561482957815187529582019590820190600101614848565b60408152600061487760408301856147f0565b82810360208401526119698185614834565b60008060006060848603121561489e57600080fd5b83356148a9816146a3565b925060208401356148b9816146a3565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614908576149086148ca565b604052919050565b60006001600160401b03821115614929576149296148ca565b5060051b60200190565b600082601f83011261494457600080fd5b8135602061495961495483614910565b6148e0565b82815260059290921b8401810191818101908684111561497857600080fd5b8286015b8481101561499c57803561498f816146a3565b835291830191830161497c565b509695505050505050565b600082601f8301126149b857600080fd5b813560206149c861495483614910565b82815260059290921b840181019181810190868411156149e757600080fd5b8286015b8481101561499c57803583529183019183016149eb565b60008060408385031215614a1557600080fd5b82356001600160401b0380821115614a2c57600080fd5b614a3886838701614933565b93506020850135915080821115614a4e57600080fd5b50614a5b858286016149a7565b9150509250929050565b6020815260006111e16020830184614834565b60008060408385031215614a8b57600080fd5b823591506020830135614a9d816146a3565b809150509250929050565b60008060408385031215614abb57600080fd5b8235614ac6816146a3565b91506020838101356001600160401b0380821115614ae357600080fd5b818601915086601f830112614af757600080fd5b813581811115614b0957614b096148ca565b614b1b601f8201601f191685016148e0565b91508082528784828501011115614b3157600080fd5b80848401858401376000848284010152508093505050509250929050565b801515811461138257600080fd5b600080600060608486031215614b7257600080fd5b83356001600160401b0380821115614b8957600080fd5b614b9587838801614933565b94506020860135915080821115614bab57600080fd5b50614bb8868287016149a7565b9250506040840135614bc981614b4f565b809150509250925092565b60008060208385031215614be757600080fd5b82356001600160401b0380821115614bfe57600080fd5b818501915085601f830112614c1257600080fd5b813581811115614c2157600080fd5b866020828501011115614c3357600080fd5b60209290920196919550909350505050565b60008060208385031215614c5857600080fd5b82356001600160401b03811115614c6e57600080fd5b614c7a8582860161471a565b90969095509350505050565b6020815260006111e160208301846147f0565b6040815260006148776040830185614834565b60008060408385031215614cbf57600080fd5b8235614cca816146a3565b91506020830135614a9d816146a3565b600181811c90821680614cee57607f821691505b602082108103614d0e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215614d3c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115614d6c57614d6c614d43565b500190565b600060018201614d8357614d83614d43565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600082614e3f57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600082821015614e7a57614e7a614d43565b500390565b600082601f830112614e9057600080fd5b81516020614ea061495483614910565b82815260059290921b84018101918181019086841115614ebf57600080fd5b8286015b8481101561499c5780518352918301918301614ec3565b60008060408385031215614eed57600080fd5b82516001600160401b0380821115614f0457600080fd5b818501915085601f830112614f1857600080fd5b81516020614f2861495483614910565b82815260059290921b84018101918181019089841115614f4757600080fd5b948201945b83861015614f6e578551614f5f816146a3565b82529482019490820190614f4c565b91880151919650909350505080821115614f8757600080fd5b50614a5b85828601614e7f565b6000816000190483118215151615614fae57614fae614d43565b500290565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215614ff457600080fd5b81516111e181614b4f565b60006020828403121561501157600080fd5b81516001600160401b03811681146111e157600080fd5b60208082528181018390526000908460408401835b8681101561499c578235615050816146a3565b6001600160a01b03168252918301919083019060010161503d565b60006040828403121561507d57600080fd5b604051604081018181106001600160401b038211171561509f5761509f6148ca565b60405282516150ad816146a3565b81526020928301519281019290925250919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615193816017850160208801614644565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516151c4816028840160208801614644565b01602801949350505050565b6000816151df576151df614d43565b506000190190565b600082516151f9818460208701614644565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b08416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d7414360a068be2452be7717f5285e8ebc69817836a9508ff72607b615e5b08c64736f6c634300080e0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRedeemFeeExemptedAddress(address)": {
        "params": {
          "_address": "address to be exempted on redeem fees"
        }
      },
      "addRedeemFeeExemptedTCO2(address)": {
        "params": {
          "_tco2": "TCO2 to be exempted on redeem fees"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "bridgeBurn(address,uint256)": {
        "details": "invoked only by the ToucanCrosschainMessenger (Router)",
        "params": {
          "_account": "account that will be burned with corss-chain bridged tokens",
          "_amount": "amount of tokens that will be burned"
        }
      },
      "bridgeMint(address,uint256)": {
        "details": "invoked only by the ToucanCrosschainMessenger (Router)",
        "params": {
          "_account": "account that will be minted with corss-chain bridged tokens",
          "_amount": "amount of tokens that will be minted"
        }
      },
      "bridgeTCO2s(uint32,address[],uint256[])": {
        "params": {
          "amounts": "The amounts of TCO2s to bridge",
          "destinationDomain": "The domain to bridge TCO2s to",
          "tco2s": "The TCO2s to bridge"
        }
      },
      "calculateRedemptionFees(address[],uint256[],bool)": {
        "details": "User specifies in front-end the addresses and amounts they want",
        "params": {
          "amounts": "Array of amounts to redeem for each tco2s",
          "tco2s": "Array of TCO2 contract addresses",
          "toRetire": "Whether the TCO2s will be retired atomically with the redemption. It may be that lower fees will be charged in this case."
        },
        "returns": {
          "totalFee": "Total fees amount"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(address,uint256)": {
        "details": "Eligibility is checked via `checkEligible`, balances are tracked for each TCO2 separately",
        "params": {
          "erc20Addr": "ERC20 contract address to be deposited, requires approve"
        },
        "returns": {
          "_0": "Amount of pool tokens minted to the caller"
        }
      },
      "getRemaining()": {
        "details": "Returns the remaining space in pool before hitting the cap"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "wraps _pause(), only Admin"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "quoteBridgeTCO2sFee(uint32,address[],uint256[])": {
        "params": {
          "amounts": "The amounts of TCO2s to bridge",
          "destinationDomain": "The domain to bridge TCO2s to",
          "tco2s": "The TCO2s to bridge"
        },
        "returns": {
          "fee": "The fee amount to be paid"
        }
      },
      "redeemAndBurn(address,uint256)": {
        "details": "User needs to approve the pool contract in the TCO2 contract for the amount to be burnt before executing this function.",
        "params": {
          "amount": "Amount to redeem and burn",
          "tco2": "TCO2 to redeem and burn"
        }
      },
      "redeemAndRetireMany(address[],uint256[])": {
        "params": {
          "amounts": "Array of amounts to redeem and retire for each tco2s",
          "tco2s": "Array of TCO2 contract addresses"
        },
        "returns": {
          "redeemedAmounts": "The amounts of the TCO2s that were redeemed",
          "retirementIds": "The retirements ids that were produced"
        }
      },
      "redeemAuto(uint256)": {
        "details": "Pool tokens in user's wallet get burned",
        "params": {
          "amount": "Total amount to be redeemed"
        },
        "returns": {
          "tco2s": "amounts The addresses and amounts of the TCO2s that were automatically redeemed"
        }
      },
      "redeemAuto2(uint256)": {
        "params": {
          "amount": "Total amount to be redeemed"
        },
        "returns": {
          "tco2s": "amounts The addresses and amounts of the TCO2s that were automatically redeemed"
        }
      },
      "redeemMany(address[],uint256[])": {
        "params": {
          "amounts": "Array of amounts to redeem for each tco2s Pool token in user's wallet get burned",
          "tco2s": "Array of TCO2 contract addresses"
        },
        "returns": {
          "redeemedAmounts": "The amounts of the TCO2s that were redeemed"
        }
      },
      "removeRedeemFeeExemptedAddress(address)": {
        "params": {
          "_address": "address to be removed from exemption"
        }
      },
      "removeRedeemFeeExemptedTCO2(address)": {
        "params": {
          "_tco2": "TCO2 to be removed from exemption"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setFeeCalculator(address)": {
        "params": {
          "_feeCalculator": "Fee module contract address"
        }
      },
      "setFeeRedeemBurnAddress(address)": {
        "params": {
          "_feeRedeemBurnAddress": "address to transfer the fees to burn"
        }
      },
      "setFeeRedeemBurnPercentage(uint256)": {
        "params": {
          "_feeRedeemBurnPercentageInBase": "percentage of fee in base"
        }
      },
      "setFeeRedeemPercentage(uint256)": {
        "params": {
          "_feeBp": "percentage of fee in basis points"
        }
      },
      "setFeeRedeemReceiver(address)": {
        "params": {
          "_feeRedeemReceiver": "address to transfer the fees"
        }
      },
      "setFeeRedeemRetirePercentage(uint256)": {
        "params": {
          "_feeBp": "percentage of fee in basis points"
        }
      },
      "setFilter(address)": {
        "params": {
          "_filter": "Filter contract address"
        }
      },
      "setRouter(address)": {
        "details": "use this method to set router address",
        "params": {
          "_router": "address of ToucanCrosschainMessenger"
        }
      },
      "setSupplyCap(uint256)": {
        "details": "supplyCap is initially set to 0 and must be increased before deposits"
      },
      "setTCO2Scoring(address[])": {
        "params": {
          "tco2s": "array of ordered TCO2 addresses"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause the system, wraps _unpause(), only Admin"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "VERSION": {
        "details": "Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRedeemFeeExemptedAddress(address)": {
        "notice": "Adds a new address for redeem fees exemption"
      },
      "addRedeemFeeExemptedTCO2(address)": {
        "notice": "Adds a new TCO2 for redeem fees exemption"
      },
      "bridgeBurn(address,uint256)": {
        "notice": "burn tokens from account to be cross-chain bridged"
      },
      "bridgeMint(address,uint256)": {
        "notice": "mint tokens to receiver account that were cross-chain bridged"
      },
      "bridgeTCO2s(uint32,address[],uint256[])": {
        "notice": "Allows MANAGER or the owner to bridge TCO2s into another domain."
      },
      "calculateRedemptionFees(address[],uint256[],bool)": {
        "notice": "View function to calculate fees pre-execution"
      },
      "checkEligible(address)": {
        "notice": "Checks if token to be deposited is eligible for this pool"
      },
      "deposit(address,uint256)": {
        "notice": "Deposit function for pool that accepts TCO2s and mints pool token 1:1"
      },
      "feeCalculator()": {
        "notice": "module to calculate fees for the pool"
      },
      "feeRedeemRetirePercentageInBase()": {
        "notice": "fee percentage in basis points charged for selective redemptions that also retire the credits in the same transaction"
      },
      "methodologies(string)": {
        "notice": "Checks if methodology is eligible for this pool"
      },
      "minimumVintageStartTime()": {
        "notice": "Returns minimum vintage start time for this pool"
      },
      "pause()": {
        "notice": "Emergency function to disable contract's core functionality"
      },
      "quoteBridgeTCO2sFee(uint32,address[],uint256[])": {
        "notice": "Get the fee needed to bridge TCO2s into the destination domain."
      },
      "redeemAndBurn(address,uint256)": {
        "notice": "Redeem a whitelisted TCO2 without paying any fees and burn the TCO2. Initially added to burn HFC-23 credits, can be used in the future to dispose of any other whitelisted credits."
      },
      "redeemAndRetireMany(address[],uint256[])": {
        "notice": "Redeems pool tokens for multiple underlying TCO2s 1:1 minus fees The redeemed TCO2s are retired in the same go in order to allow charging a lower fee vs selective redemptions that do not retire the TCO2s."
      },
      "redeemAuto(uint256)": {
        "notice": "Automatically redeems an amount of Pool tokens for underlying TCO2s from an array of ranked TCO2 contracts starting from contract at index 0 until amount is satisfied"
      },
      "redeemAuto2(uint256)": {
        "notice": "Automatically redeems an amount of Pool tokens for underlying TCO2s from an array of ranked TCO2 contracts starting from contract at index 0 until amount is satisfied."
      },
      "redeemFeeExemptedAddresses(address)": {
        "notice": "End users exempted from redeem fees"
      },
      "redeemFeeExemptedTCO2s(address)": {
        "notice": "TCO2s exempted from redeem fees"
      },
      "redeemMany(address[],uint256[])": {
        "notice": "Redeems pool tokens for multiple underlying TCO2s 1:1 minus fees"
      },
      "regions(string)": {
        "notice": "Checks if region is eligible for this pool"
      },
      "removeRedeemFeeExemptedAddress(address)": {
        "notice": "Removes an address from redeem fees exemption"
      },
      "removeRedeemFeeExemptedTCO2(address)": {
        "notice": "Removes a TCO2 from redeem fees exemption"
      },
      "router()": {
        "notice": "bridge router who has access to the bridgeMint & bridgeBurn functions which mint/burn pool tokens for cross chain messenges"
      },
      "scoredTCO2s(uint256)": {
        "notice": "array used to read from when redeeming TCO2s automatically"
      },
      "setFeeCalculator(address)": {
        "notice": "Update the address of the fee module contract"
      },
      "setFeeRedeemBurnAddress(address)": {
        "notice": "Update the fee redeem burn address"
      },
      "setFeeRedeemBurnPercentage(uint256)": {
        "notice": "Update the fee redeem burn percentage"
      },
      "setFeeRedeemPercentage(uint256)": {
        "notice": "Update the fee redeem percentage"
      },
      "setFeeRedeemReceiver(address)": {
        "notice": "Update the fee redeem receiver"
      },
      "setFeeRedeemRetirePercentage(uint256)": {
        "notice": "Update the fee percentage charged in redeemManyAndRetire"
      },
      "setFilter(address)": {
        "notice": "Update the address of the filter contract"
      },
      "setRouter(address)": {
        "notice": "method to set router address"
      },
      "setSupplyCap(uint256)": {
        "notice": "Function to limit the maximum pool supply"
      },
      "setTCO2Scoring(address[])": {
        "notice": "Allows MANAGERs or the owner to pass an array to hold TCO2 contract addesses that are ordered by some form of scoring mechanism"
      },
      "standards(string)": {
        "notice": "Checks if standard is eligible for this pool"
      },
      "supplyCap()": {
        "notice": "The supply cap is used as a measure to guard deposits in the pool. It is meant to minimize the impact a potential compromise in the source registry (eg. Verra) can have to the pool."
      },
      "tokenBalances(address)": {
        "notice": "Returns the balance of the TCO2 found in the pool"
      }
    },
    "notice": "Biochar pool contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2390,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2393,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5494,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2850,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2856,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2858,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 2860,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 2862,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 3441,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 1881,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 1993,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2682,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 2771,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5801,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1497,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1492_storage)"
      },
      {
        "astId": 1796,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2372,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2660,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 22857,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "supplyCap",
        "offset": 0,
        "slot": "401",
        "type": "t_uint256"
      },
      {
        "astId": 22861,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_tokenBalances",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22863,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_contractRegistry",
        "offset": 0,
        "slot": "403",
        "type": "t_address"
      },
      {
        "astId": 22867,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "scoredTCO2s",
        "offset": 0,
        "slot": "404",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 22872,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_regions",
        "offset": 0,
        "slot": "405",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 22876,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_standards",
        "offset": 0,
        "slot": "406",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 22880,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_methodologies",
        "offset": 0,
        "slot": "407",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 22885,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_externalWhiteList",
        "offset": 0,
        "slot": "408",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22890,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_internalWhiteList",
        "offset": 0,
        "slot": "409",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22895,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_internalBlackList",
        "offset": 0,
        "slot": "410",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22898,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "feeRedeemReceiver",
        "offset": 0,
        "slot": "411",
        "type": "t_address"
      },
      {
        "astId": 22900,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "feeRedeemPercentageInBase",
        "offset": 0,
        "slot": "412",
        "type": "t_uint256"
      },
      {
        "astId": 22903,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "feeRedeemBurnAddress",
        "offset": 0,
        "slot": "413",
        "type": "t_address"
      },
      {
        "astId": 22906,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "feeRedeemBurnPercentageInBase",
        "offset": 0,
        "slot": "414",
        "type": "t_uint256"
      },
      {
        "astId": 22909,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_minimumVintageStartTime",
        "offset": 0,
        "slot": "415",
        "type": "t_uint64"
      },
      {
        "astId": 22911,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_seedMode",
        "offset": 8,
        "slot": "415",
        "type": "t_bool"
      },
      {
        "astId": 22913,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_regionsIsAcceptedMapping",
        "offset": 9,
        "slot": "415",
        "type": "t_bool"
      },
      {
        "astId": 22915,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_standardsIsAcceptedMapping",
        "offset": 10,
        "slot": "415",
        "type": "t_bool"
      },
      {
        "astId": 22917,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "DEPRECATED_methodologiesIsAcceptedMapping",
        "offset": 11,
        "slot": "415",
        "type": "t_bool"
      },
      {
        "astId": 22923,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "redeemFeeExemptedAddresses",
        "offset": 0,
        "slot": "416",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22929,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "redeemFeeExemptedTCO2s",
        "offset": 0,
        "slot": "417",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 22933,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "router",
        "offset": 0,
        "slot": "418",
        "type": "t_address"
      },
      {
        "astId": 22937,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "feeRedeemRetirePercentageInBase",
        "offset": 0,
        "slot": "419",
        "type": "t_uint256"
      },
      {
        "astId": 22939,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "filter",
        "offset": 0,
        "slot": "420",
        "type": "t_address"
      },
      {
        "astId": 22944,
        "contract": "contracts/pools/Biochar.sol:Biochar",
        "label": "feeCalculator",
        "offset": 0,
        "slot": "421",
        "type": "t_contract(IFeeCalculator)22998"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IFeeCalculator)22998": {
        "encoding": "inplace",
        "label": "contract IFeeCalculator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1492_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1492_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)1492_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 1489,
            "contract": "contracts/pools/Biochar.sol:Biochar",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1491,
            "contract": "contracts/pools/Biochar.sol:Biochar",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}