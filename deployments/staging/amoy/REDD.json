{
  "address": "0x374C515f63f25FF460b445EA134364C4F73471F9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tco2",
          "type": "address"
        }
      ],
      "name": "AddFeeExemptedTCO2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "DepositFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc1155Addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC1155Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc1155Addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ERC1155Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeCalculator",
          "type": "address"
        }
      ],
      "name": "FeeCalculatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "filter",
          "type": "address"
        }
      ],
      "name": "FilterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeBp",
          "type": "uint256"
        }
      ],
      "name": "RedeemBurnFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "RedeemFeeBurnAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeBurnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exemptedUser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isExempted",
          "type": "bool"
        }
      ],
      "name": "RedeemFeeExempted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tco2",
          "type": "address"
        }
      ],
      "name": "RemoveFeeExemptedTCO2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc1155",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "ScoreUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "SupplyCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "UnderlyingDecimalsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_RELEASE_CANDIDATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addRedeemFeeExemptedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tco2",
          "type": "address"
        }
      ],
      "name": "addRedeemFeeExemptedTCO2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositAdjustedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "adjustedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeDistributionTotal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRedeemOutAdjustedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "adjustedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "calculateRedemptionInFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc1155s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "toRetire",
          "type": "bool"
        }
      ],
      "name": "calculateRedemptionOutFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeDistributionTotal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEligible",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxFee",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "mintedPoolTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCalculator",
      "outputs": [
        {
          "internalType": "contract IFeeCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRedeemDivider",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "filter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "methodology",
          "type": "string"
        }
      ],
      "name": "methodologies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVintageStartTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemFeeExemptedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemFeeExemptedTCO2s",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc1155s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "maxFee",
          "type": "uint256"
        }
      ],
      "name": "redeemOutMany",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolAmountSpent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "region",
          "type": "string"
        }
      ],
      "name": "regions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeRedeemFeeExemptedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tco2",
          "type": "address"
        }
      ],
      "name": "removeRedeemFeeExemptedTCO2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "scoredTCO2s",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "scores",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCalculator",
          "type": "address"
        }
      ],
      "name": "setFeeCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeRedeemBurnAddress_",
          "type": "address"
        }
      ],
      "name": "setFeeRedeemBurnAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "feeRedeemBurnPercentageInBase_",
          "type": "uint256"
        }
      ],
      "name": "setFeeRedeemBurnPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_filter",
          "type": "address"
        }
      ],
      "name": "setFilter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc1155s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newScores",
          "type": "uint256[]"
        }
      ],
      "name": "setScores",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setSupplyCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "underlyingDecimals_",
          "type": "uint8"
        }
      ],
      "name": "setUnderlyingDecimals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "standard",
          "type": "string"
        }
      ],
      "name": "standards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "totalPerProjectSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalProjectSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnderlyingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "5df3e9a8250ef30a40fa80a22582ca8e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tco2\",\"type\":\"address\"}],\"name\":\"AddFeeExemptedTCO2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"DepositFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc1155Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC1155Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc1155Addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC1155Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeCalculator\",\"type\":\"address\"}],\"name\":\"FeeCalculatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"filter\",\"type\":\"address\"}],\"name\":\"FilterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBp\",\"type\":\"uint256\"}],\"name\":\"RedeemBurnFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"RedeemFeeBurnAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exemptedUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExempted\",\"type\":\"bool\"}],\"name\":\"RedeemFeeExempted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"RedeemFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tco2\",\"type\":\"address\"}],\"name\":\"RemoveFeeExemptedTCO2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"ScoreUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"SupplyCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"UnderlyingDecimalsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_RELEASE_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addRedeemFeeExemptedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tco2\",\"type\":\"address\"}],\"name\":\"addRedeemFeeExemptedTCO2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositAdjustedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"adjustedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeDistributionTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemOutAdjustedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"adjustedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"calculateRedemptionInFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc1155s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"toRetire\",\"type\":\"bool\"}],\"name\":\"calculateRedemptionOutFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeDistributionTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEligible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedPoolTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCalculator\",\"outputs\":[{\"internalType\":\"contract IFeeCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRedeemDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"methodology\",\"type\":\"string\"}],\"name\":\"methodologies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVintageStartTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemFeeExemptedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemFeeExemptedTCO2s\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc1155s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"redeemOutMany\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountSpent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"regions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeRedeemFeeExemptedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tco2\",\"type\":\"address\"}],\"name\":\"removeRedeemFeeExemptedTCO2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"scoredTCO2s\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"scores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCalculator\",\"type\":\"address\"}],\"name\":\"setFeeCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRedeemBurnAddress_\",\"type\":\"address\"}],\"name\":\"setFeeRedeemBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeRedeemBurnPercentageInBase_\",\"type\":\"uint256\"}],\"name\":\"setFeeRedeemBurnPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_filter\",\"type\":\"address\"}],\"name\":\"setFilter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc1155s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newScores\",\"type\":\"uint256[]\"}],\"name\":\"setScores\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"underlyingDecimals_\",\"type\":\"uint8\"}],\"name\":\"setUnderlyingDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"standard\",\"type\":\"string\"}],\"name\":\"standards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"totalPerProjectSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalProjectSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnderlyingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRedeemFeeExemptedAddress(address)\":{\"params\":{\"_address\":\"address to be exempted on redeem fees\"}},\"addRedeemFeeExemptedTCO2(address)\":{\"params\":{\"_tco2\":\"TCO2 to be exempted on redeem fees\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"calculateDepositAdjustedAmount(address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of ERC-1155 tokens to deposit\",\"erc1155\":\"Address of the ERC-1155 contract\",\"tokenId\":\"ID of the ERC-1155 token\"},\"returns\":{\"adjustedAmount\":\"The amount of pool tokens minted to the user\"}},\"calculateDepositFees(address,uint256,uint256)\":{\"details\":\"User specifies in front-end the address and amount they want\",\"params\":{\"amount\":\"Amount of ERC-1155 tokens to deposit (0 decimals)\",\"erc1155\":\"ERC1155 contract address\",\"tokenId\":\"id representing the vintage\"},\"returns\":{\"feeDistributionTotal\":\"Total fee amount to be paid in pool tokens\"}},\"calculateRedeemOutAdjustedAmount(address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of ERC-1155 token to redeem\",\"erc1155\":\"Address of the ERC-1155 contract\",\"tokenId\":\"ID of the ERC-1155 token\"},\"returns\":{\"adjustedAmount\":\"The amount of pool tokens to be burnt by the caller\"}},\"calculateRedemptionOutFees(address[],uint256[],uint256[],bool)\":{\"params\":{\"amounts\":\"Array of ERC-1155 token amounts to redeem (0 decimals) The indexes of this array are matching 1:1 with the erc1155s array.\",\"erc1155s\":\"Array of ERC1155 contract addresses\",\"toRetire\":\"No-op\",\"tokenIds\":\"ids of the vintages of each project\"},\"returns\":{\"feeDistributionTotal\":\"Total fee amount to be paid in pool tokens\"}},\"checkEligible(address,uint256)\":{\"params\":{\"erc1155\":\"the ERC1155 contract to check\",\"tokenId\":\"the token id\"},\"returns\":{\"isEligible\":\"true if address is eligible and no other issues occur\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(address,uint256,uint256,uint256)\":{\"details\":\"Eligibility of the ERC1155 token to be deposited is checked via `checkEligible`\",\"params\":{\"amount\":\"Amount of ERC-1155 tokens to be deposited (0 decimals)\",\"erc1155\":\"ERC1155 contract address\",\"maxFee\":\"Maximum pool token fee to be paid for the deposit. This value cannot be zero. Use `calculateDepositFees(erc1155,tokenId,amount)` to determine the fee that will be charged given the state of the pool during this call. Add a buffer on top of the returned fee amount up to the maximum fee you are willing to pay. (18 decimals)\",\"tokenId\":\"id representing the vintage\"},\"returns\":{\"mintedPoolTokenAmount\":\"Amount of pool tokens minted to the caller\"}},\"getRemaining()\":{\"details\":\"Returns the remaining space in pool before hitting the cap\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"wraps _pause(), only Admin\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"redeemOutMany(address[],uint256[],uint256[],uint256)\":{\"params\":{\"amounts\":\"Array of ERC-1155 token amounts to redeem (0 decimals) The indexes of this array are matching 1:1 with the erc1155s array.\",\"erc1155s\":\"ERC1155 contract address\",\"maxFee\":\"Maximum pool token fee to be paid for the redemption. This value cannot be zero. Use `calculateRedemptionOutFees(erc1155,tokenIds,amounts,false)` to determine the fee that will be charged given the state of the pool during this call. Add a buffer on top of the returned fee amount up to the maximum fee you are willing to pay. (18 decimals)\",\"tokenIds\":\"id representing the vintage\"},\"returns\":{\"poolAmountSpent\":\"The amount of pool tokens spent by the caller\"}},\"removeRedeemFeeExemptedAddress(address)\":{\"params\":{\"_address\":\"address to be removed from exemption\"}},\"removeRedeemFeeExemptedTCO2(address)\":{\"params\":{\"_tco2\":\"TCO2 to be removed from exemption\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"scores(address,uint256)\":{\"params\":{\"erc1155\":\"Address of the ERC-1155 contract\",\"tokenId\":\"ID of the ERC-1155 token\"},\"returns\":{\"score\":\"The score of the ERC-1155 token\"}},\"setFeeCalculator(address)\":{\"params\":{\"_feeCalculator\":\"Fee module contract address\"}},\"setFeeRedeemBurnAddress(address)\":{\"params\":{\"feeRedeemBurnAddress_\":\"address to transfer the fees to burn\"}},\"setFeeRedeemBurnPercentage(uint256)\":{\"params\":{\"feeRedeemBurnPercentageInBase_\":\"percentage of fee in base\"}},\"setFilter(address)\":{\"params\":{\"_filter\":\"Filter contract address\"}},\"setScores(address[],uint256[],uint256[])\":{\"details\":\"Only executable by the pool owner\",\"params\":{\"erc1155s\":\"Array of ERC-1155 contracts\",\"newScores\":\"Array of scores to set\",\"tokenIds\":\"Array of ERC-1155 token IDs\"}},\"setSupplyCap(uint256)\":{\"details\":\"supplyCap is initially set to 0 and must be increased before deposits\",\"params\":{\"newCap\":\"New pool supply cap\"}},\"setUnderlyingDecimals(uint8)\":{\"details\":\"The underlying decimals are the number of decimals the ERC-1155 token uses to represent the underlying asset. For example, if the ERC-1155 token represents a tonne of carbon, then the underlying decimals would be 0. If it represents a kilogram of carbon, then the underlying decimals would be 3.\",\"params\":{\"underlyingDecimals_\":\"The number of decimals the ERC-1155 token uses to represent a tonne of carbon.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"tokenBalance(address,uint256)\":{\"params\":{\"erc1155\":\"ERC1155 contract address\",\"tokenId\":\"id representing the vintage\"},\"returns\":{\"balance\":\"pool balance\"}},\"totalPerProjectSupply(address,uint256)\":{\"returns\":{\"_0\":\"supply\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpause the system, wraps _unpause(), only Admin\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"VERSION\":{\"details\":\"Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRedeemFeeExemptedAddress(address)\":{\"notice\":\"Adds a new address for redeem fees exemption\"},\"addRedeemFeeExemptedTCO2(address)\":{\"notice\":\"Adds a new TCO2 for redeem fees exemption\"},\"calculateDepositAdjustedAmount(address,uint256,uint256)\":{\"notice\":\"Calculate the adjusted amount of pool tokens to mint for a deposit of the provided amount of the ERC-1155 token.\"},\"calculateDepositFees(address,uint256,uint256)\":{\"notice\":\"View function to calculate deposit fees pre-execution\"},\"calculateRedeemOutAdjustedAmount(address,uint256,uint256)\":{\"notice\":\"Calculate the amounts of pool tokens needed in order to redeem the provided amount of the ERC-1155 token.\"},\"calculateRedemptionInFees(address[],uint256[],uint256[],bool)\":{\"notice\":\"View function to calculate redemption fees pre-execution, according to the amounts of pool tokens to be spent. NOTE: This function is not supported yet\"},\"calculateRedemptionOutFees(address[],uint256[],uint256[],bool)\":{\"notice\":\"View function to calculate redemption fees pre-execution, according to the amounts of underlying tokens to be redeemed.\"},\"checkEligible(address,uint256)\":{\"notice\":\"Checks if token to be deposited is eligible for this pool. Reverts if not. Beware that the revert reason might depend on the underlying implementation of IPoolFilter.checkEligible\"},\"deposit(address,uint256,uint256,uint256)\":{\"notice\":\"Deposit function for pool that accepts ERC1155 vintages and mints pool token 1:1\"},\"feeCalculator()\":{\"notice\":\"module to calculate fees for the pool\"},\"methodologies(string)\":{\"notice\":\"Checks if methodology is eligible for this pool\"},\"minimumVintageStartTime()\":{\"notice\":\"Returns minimum vintage start time for this pool\"},\"pause()\":{\"notice\":\"Emergency function to disable contract's core functionality\"},\"redeemFeeExemptedAddresses(address)\":{\"notice\":\"End users exempted from redeem fees\"},\"redeemFeeExemptedTCO2s(address)\":{\"notice\":\"TCO2s exempted from redeem fees\"},\"redeemOutMany(address[],uint256[],uint256[],uint256)\":{\"notice\":\"Redeem ERC1155 vintages for pool tokens 1:1 minus fees The amounts provided are the exact amounts of ERC1155 vintages to be redeemed.\"},\"regions(string)\":{\"notice\":\"Checks if region is eligible for this pool\"},\"removeRedeemFeeExemptedAddress(address)\":{\"notice\":\"Removes an address from redeem fees exemption\"},\"removeRedeemFeeExemptedTCO2(address)\":{\"notice\":\"Removes a TCO2 from redeem fees exemption\"},\"router()\":{\"notice\":\"bridge router who has access to the bridgeMint & bridgeBurn functions which mint/burn pool tokens for cross chain messenges\"},\"scoredTCO2s(uint256)\":{\"notice\":\"array used to read from when redeeming TCO2s automatically\"},\"scores(address,uint256)\":{\"notice\":\"Get the score of an ERC-1155 token\"},\"setFeeCalculator(address)\":{\"notice\":\"Update the address of the fee module contract\"},\"setFeeRedeemBurnAddress(address)\":{\"notice\":\"Update the fee redeem burn address\"},\"setFeeRedeemBurnPercentage(uint256)\":{\"notice\":\"Update the fee redeem burn percentage\"},\"setFilter(address)\":{\"notice\":\"Update the address of the filter contract\"},\"setScores(address[],uint256[],uint256[])\":{\"notice\":\"Set scores for ERC-1155 tokens\"},\"setSupplyCap(uint256)\":{\"notice\":\"Function to limit the maximum pool supply\"},\"setUnderlyingDecimals(uint8)\":{\"notice\":\"Set the underlying decimals for ERC-1155 tokens.\"},\"standards(string)\":{\"notice\":\"Checks if standard is eligible for this pool\"},\"supplyCap()\":{\"notice\":\"The supply cap is used as a measure to guard deposits in the pool. It is meant to minimize the impact a potential compromise in the source registry (eg. Verra) can have to the pool.\"},\"tokenBalance(address,uint256)\":{\"notice\":\"Returns the balance of the carbon offset found in the pool\"},\"totalPerProjectSupply(address,uint256)\":{\"notice\":\"Return the total supply of the project for the given ERC1155 token.\"},\"totalProjectSupply(uint256)\":{\"notice\":\"Project token id to total supply of the project in the pool. Supply amounts are kept in the underlying's native precision regardless of whether underlying is an ERC-20 or ERC-1155 token.\"},\"totalUnderlyingSupply()\":{\"notice\":\"Total supply of underlying collateral in the pool.  Supply amounts are kept in the underlying's native precision regardless of whether underlying is an ERC-20 or ERC-1155 token.\"},\"underlyingDecimals()\":{\"notice\":\"Underlying decimals for ERC-1155 tokens. 0 decimals means that the smallest denomination the ERC-1155 token can represent is a tonne, 3 decimals means a kilogram, etc.\"}},\"notice\":\"REDD pool contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/REDD.sol\":\"REDD\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2024 Toucan Protocol\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <info@neutralx.com>\\npragma solidity ^0.8.13;\\n\\nstruct FeeDistribution {\\n    address[] recipients;\\n    uint256[] shares;\\n}\\n\\n/// @title IFeeCalculator\\n/// @author Neutral Labs Inc.\\n/// @notice This interface defines methods for calculating fees.\\ninterface IFeeCalculator {\\n    /// @notice Calculates the deposit fee for a given amount.\\n    /// @param pool The address of the pool.\\n    /// @param tco2 The address of the TCO2 token.\\n    /// @param depositAmount The amount to be deposited.\\n    /// @return feeDistribution How the fee is meant to be\\n    /// distributed among the fee recipients.\\n    function calculateDepositFees(address pool, address tco2, uint256 depositAmount)\\n        external\\n        view\\n        returns (FeeDistribution memory feeDistribution);\\n\\n    /// @notice Calculates the redemption fees for a given amount.\\n    /// @param pool The address of the pool.\\n    /// @param tco2s The addresses of the TCO2 token.\\n    /// @param redemptionAmounts The amounts to be redeemed.\\n    /// @return feeDistribution How the fee is meant to be\\n    /// distributed among the fee recipients.\\n    function calculateRedemptionFees(address pool, address[] calldata tco2s, uint256[] calldata redemptionAmounts)\\n        external\\n        view\\n        returns (FeeDistribution memory feeDistribution);\\n\\n    /// @notice Calculates the deposit fee for a given amount of an ERC1155 project.\\n    /// @param pool The address of the pool.\\n    /// @param erc1155 The address of the ERC1155 project\\n    /// @param tokenId The tokenId of the vintage.\\n    /// @param depositAmount The amount to be deposited.\\n    /// @return feeDistribution How the fee is meant to be\\n    /// distributed among the fee recipients.\\n    function calculateDepositFees(address pool, address erc1155, uint256 tokenId, uint256 depositAmount)\\n        external\\n        view\\n        returns (FeeDistribution memory feeDistribution);\\n\\n    /// @notice Calculates the redemption fees for a given amount on ERC1155 projects.\\n    /// @param pool The address of the pool.\\n    /// @param erc1155s The addresses of the ERC1155 projects.\\n    /// @param tokenIds The tokenIds of the project vintages.\\n    /// @param redemptionAmounts The amounts to be redeemed.\\n    /// @return feeDistribution How the fee is meant to be\\n    /// distributed among the fee recipients.\\n    function calculateRedemptionFees(\\n        address pool,\\n        address[] calldata erc1155s,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata redemptionAmounts\\n    ) external view returns (FeeDistribution memory feeDistribution);\\n}\\n\",\"keccak256\":\"0x0296da64fa291f4809fc3e04b176bd9c0bc2c87ea302f0a82b478bc970baf404\",\"license\":\"UNLICENSED\"},\"contracts/CarbonProjectTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\n/// @dev CarbonProject related data and attributes\\nstruct ProjectData {\\n    string projectId;\\n    string standard;\\n    string methodology;\\n    string region;\\n    string storageMethod;\\n    string method;\\n    string emissionType;\\n    string category;\\n    string uri;\\n    address beneficiary;\\n}\\n\",\"keccak256\":\"0x01ef59ad96e26a2ab791ba600413c5a4bde90c66535b30f322a1a01407be6879\",\"license\":\"UNLICENSED\"},\"contracts/CarbonProjectVintageTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct VintageData {\\n    /// @dev A human-readable string which differentiates this from other vintages in\\n    /// the same project, and helps build the corresponding TCO2 name and symbol.\\n    string name;\\n    uint64 startTime; // UNIX timestamp\\n    uint64 endTime; // UNIX timestamp\\n    uint256 projectTokenId;\\n    uint64 totalVintageQuantity;\\n    bool isCorsiaCompliant;\\n    bool isCCPcompliant;\\n    string coBenefits;\\n    string correspAdjustment;\\n    string additionalCertification;\\n    string uri;\\n    string registry;\\n}\\n\",\"keccak256\":\"0x5be4a7578aa12ae4d9e06e53672c46198c5c0c524065cec87fbc8cb1826619f6\",\"license\":\"UNLICENSED\"},\"contracts/bases/RoleInitializer.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\nabstract contract RoleInitializer is AccessControlUpgradeable {\\n    function __RoleInitializer_init_unchained(\\n        address[] calldata accounts,\\n        bytes32[] calldata roles\\n    ) internal {\\n        require(accounts.length == roles.length, 'Array length mismatch');\\n\\n        __AccessControl_init_unchained();\\n\\n        bool hasDefaultAdmin = false;\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            _grantRole(roles[i], accounts[i]);\\n            if (roles[i] == DEFAULT_ADMIN_ROLE) hasDefaultAdmin = true;\\n        }\\n        require(hasDefaultAdmin, 'No admin specified');\\n    }\\n}\\n\",\"keccak256\":\"0x72276b98471db1c8cfe18d4a1244c3986514c8b8d72e578517daae4973fd8b06\",\"license\":\"UNLICENSED\"},\"contracts/bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct CreateRetirementRequestParams {\\n    uint256[] tokenIds;\\n    uint256 amount;\\n    string retiringEntityString;\\n    address beneficiary;\\n    string beneficiaryString;\\n    string retirementMessage;\\n    string beneficiaryLocation;\\n    string consumptionCountryCode;\\n    uint256 consumptionPeriodStart;\\n    uint256 consumptionPeriodEnd;\\n}\\n\",\"keccak256\":\"0xc7702b775ffda42d217c4671b846d93f691f8271cae9537dbd2b15930dbe582e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IEcoCarbonCredit.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2024 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IEcoCarbonCredit {\\n    function projectId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x14fa3d296208345333b7ffc4903f1015ef2c9e2b61fc591be4402a8b90fac7e5\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPoolFilter.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IPoolFilter {\\n    function checkEligible(address erc20Addr)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function checkERC1155Eligible(address token, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function minimumVintageStartTime() external view returns (uint64);\\n\\n    function regions(string calldata region) external view returns (bool);\\n\\n    function standards(string calldata standard) external view returns (bool);\\n\\n    function methodologies(string calldata methodology)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xfc6c8836822360f3679c7a19e74a82c6ab740e567477003f6a97eafc10e37a16\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanCarbonOffsets.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {VintageData} from '../CarbonProjectVintageTypes.sol';\\nimport {ProjectData} from '../CarbonProjectTypes.sol';\\nimport {CreateRetirementRequestParams} from '../bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol';\\n\\ninterface IToucanCarbonOffsets {\\n    function retireFrom(address account, uint256 amount)\\n        external\\n        returns (uint256 retirementEventId);\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function getAttributes()\\n        external\\n        view\\n        returns (ProjectData memory, VintageData memory);\\n\\n    /// @notice Get the vintage data of the TCO2\\n    function getVintageData()\\n        external\\n        view\\n        returns (VintageData memory vintageData);\\n\\n    function standardRegistry() external view returns (string memory);\\n\\n    function retireAndMintCertificate(\\n        string calldata retiringEntityString,\\n        address beneficiary,\\n        string calldata beneficiaryString,\\n        string calldata retirementMessage,\\n        uint256 amount\\n    ) external;\\n\\n    function retireAndMintCertificateForEntity(\\n        address retiringEntity,\\n        CreateRetirementRequestParams calldata params\\n    ) external;\\n\\n    function projectVintageTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2aa8807a01eefdff9a79985ffad737b324f6fc59e4c416b3124a315d055a3b6e\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts of the Toucan protocol\\n * @dev Inspired by the AAVE error library:\\n * https://github.com/aave/protocol-v2/blob/5df59ec74a0c635d877dc1c5ee4a165d41488352/contracts/protocol/libraries/helpers/Errors.sol\\n * Error messages prefix glossary:\\n *  - CP = CarbonPool\\n *  - COB = CarbonOffsetBatches\\n *  - TCO2 = TCO2\\n */\\nlibrary Errors {\\n    // User is not authorized\\n    string public constant CP_UNAUTHORIZED = '1';\\n    // Empty array provided as input\\n    string public constant CP_EMPTY_ARRAY = '2';\\n    // Pool is full of TCO2s\\n    string public constant CP_FULL_POOL = '3';\\n    // ERC20 is blocklisted in the pool. This error\\n    // is returned for TCO2s that have been blocklisted\\n    // like the HFC-23 project.\\n    string public constant CP_BLOCKLISTED = '4';\\n    // ERC20 is not allowlisted in the pool\\n    // This error is returned in case the ERC20 is\\n    // not a TCO2 in which case it has to be manually\\n    // allowlisted in order to be allowed in the pool.\\n    string public constant CP_NOT_ALLOWLISTED = '5';\\n    // Vintage start time of a TCO2 is too old\\n    string public constant CP_START_TIME_TOO_OLD = '6';\\n    string public constant CP_REGION_NOT_ACCEPTED = '7';\\n    string public constant CP_STANDARD_NOT_ACCEPTED = '8';\\n    string public constant CP_METHODOLOGY_NOT_ACCEPTED = '9';\\n    // Provided fee is invalid, not in a basis points format: [0,10000)\\n    string public constant CP_INVALID_FEE = '10';\\n    // Provided address needs to be non-zero\\n    string public constant CP_EMPTY_ADDRESS = '11';\\n    // Validation check to ensure array lengths match\\n    string public constant CP_LENGTH_MISMATCH = '12';\\n    // TCO2 not exempted from redeem fees\\n    string public constant CP_NOT_EXEMPTED = '13';\\n    // A contract has been paused\\n    string public constant CP_PAUSED_CONTRACT = '14';\\n    // Redemption has leftover unredeemed value\\n    string public constant CP_NON_ZERO_REMAINING = '15';\\n    // Redemption exceeds deposited TCO2 supply\\n    string public constant CP_EXCEEDS_TCO2_SUPPLY = '16';\\n    // User must be a router\\n    string public constant CP_ONLY_ROUTER = '17';\\n    // User must be the owner\\n    string public constant CP_ONLY_OWNER = '18';\\n    // Zero destination address is invalid for pool token transfers\\n    string public constant CP_INVALID_DESTINATION_ZERO = '19';\\n    // Self destination address is invalid for pool token transfers\\n    string public constant CP_INVALID_DESTINATION_SELF = '20';\\n    // Zero amount provided as an input (eg., in redemptions) in invalid\\n    string public constant CP_ZERO_AMOUNT = '21';\\n    // ERC20 is not eligible to be pooled\\n    string public constant CP_NOT_ELIGIBLE = '22';\\n    // Carbon registry is already supported in COB\\n    string public constant COB_ALREADY_SUPPORTED = '23';\\n    // The caller is not granted the VERIFIER_ROLE in COB\\n    string public constant COB_NOT_VERIFIER_OR_BATCH_OWNER = '24';\\n    // The caller does not own the provided batch\\n    string public constant COB_NOT_BATCH_OWNER = '25';\\n    // The owner of the batch is invalid (not a TCO2 contract)\\n    string public constant COB_INVALID_BATCH_OWNER = '26';\\n    // The batch is not in Confirmed status\\n    string public constant COB_NOT_CONFIRMED = '27';\\n    // The batch is not in a requested status (DetokenizationRequested or RetirementRequested)\\n    string public constant COB_NOT_REQUESTED_STATUS = '28';\\n    // The batch does not exist\\n    string public constant COB_NOT_EXISTS = '29';\\n    // The batch has an invalid status based on the action requested\\n    string public constant COB_INVALID_STATUS = '30';\\n    // The batch is missing an associated project vintage\\n    string public constant COB_MISSING_VINTAGE = '31';\\n    // The serial number in the batch is already approved\\n    string public constant COB_ALREADY_APPROVED = '32';\\n    // The batch is not in Pending status\\n    string public constant COB_NOT_PENDING = '33';\\n    // The batch is already fractionalized\\n    string public constant COB_ALREADY_FRACTIONALIZED = '34';\\n    // The batch is not in Rejected status\\n    string public constant COB_NOT_REJECTED = '35';\\n    // The project vintage is already set in the batch\\n    string public constant COB_VINTAGE_ALREADY_SET = '36';\\n    // The transfer is not approved\\n    string public constant COB_TRANSFER_NOT_APPROVED = '37';\\n    // The COB contract is paused\\n    string public constant COB_PAUSED_CONTRACT = '38';\\n    // The caller is invalid\\n    string public constant COB_INVALID_CALLER = '39';\\n    // The TCO2 for the batch is not found\\n    string public constant COB_TCO2_NOT_FOUND = '40';\\n    // The registry for the provided vintage is not supported\\n    string public constant COB_REGISTRY_NOT_SUPPORTED = '41';\\n    // No TCO2 was minted as part of tokenization\\n    string public constant COB_NO_TCO2_MINTED = '42';\\n    // Only mints are supported for the batch contract to receive an NFT\\n    string public constant COB_ONLY_MINTS = '43';\\n    // New batch status is invalid\\n    string public constant COB_INVALID_NEW_STATUS = '44';\\n    // The TCO2 batch amount is invalid\\n    string public constant TCO2_BATCH_AMT_INVALID = '45';\\n    // The TCO2 batch amount approval has failed\\n    string public constant TCO2_APPROVAL_AMT_FAILED = '46';\\n    // The TCO2 batch not confirmed\\n    string public constant TCO2_BATCH_NOT_CONFIRMED = '47';\\n    // The TCO2 batch not whitelisted\\n    string public constant TCO2_BATCH_NOT_WHITELISTED = '48';\\n    // The TCO2 is non matching NFT\\n    string public constant TCO2_NON_MATCHING_NFT = '49';\\n    // The TCO2 Quantity in batch is higher than total vintages\\n    string public constant TCO2_QTY_HIGHER = '50';\\n    // The fee to be charged is too high\\n    string public constant CP_FEE_TOO_HIGH = '51';\\n    // The max fee to be paid is invalid\\n    string public constant CP_INVALID_MAX_FEE = '52';\\n    // The pool feature is not supported\\n    string public constant CP_NOT_SUPPORTED = '53';\\n    // Used for instance to check for sub-tonnage retirement requests\\n    string public constant TCO2_INVALID_DECIMALS = '54';\\n    // The TCO2 Quantity in the batch is invalid\\n    string public constant COB_INVALID_QUANTITY = '55';\\n    // Splitting is required on detokenization/retirement finalization, but 2 new serial numbers\\n    // were not provided\\n    string public constant TCO2_MISSING_SERIALS = '56';\\n    // The score set for the ERC-1155 token in the pool is invalid\\n    string public constant INVALID_ERC1155_SCORE = '57';\\n    // The score of the ERC-1155 token in the pool is not set\\n    string public constant EMPTY_ERC155_SCORE = '58';\\n    // The underlying decimals are too high for the pool\\n    string public constant UNDERLYING_DECIMALS_TOO_HIGH = '59';\\n    // The provided supply cap is invalid and should match the underlying token decimals\\n    // eg., for an ERC-1155 token whose smallest denomination is tonnes, the pool supply\\n    // cap should not include decimals of lower fidelity than tonnes.\\n    string public constant INVALID_SUPPLY_CAP = '60';\\n}\\n\",\"keccak256\":\"0x52c89bbc5d78cfa6d74274ce692c46d661bec10d40bbeb33801813421bff218f\",\"license\":\"UNLICENSED\"},\"contracts/pools/Pool.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport {FeeDistribution, IFeeCalculator} from '@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol';\\n\\nimport '../bases/RoleInitializer.sol';\\nimport '../interfaces/IPoolFilter.sol';\\nimport '../interfaces/IToucanCarbonOffsets.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\nimport './PoolStorage.sol';\\n\\n/// @notice Pool template contract\\n/// ERC20 compliant token that acts as a pool for vintage tokens\\nabstract contract Pool is\\n    ContextUpgradeable,\\n    ERC20Upgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    RoleInitializer,\\n    UUPSUpgradeable,\\n    PoolStorage\\n{\\n    // ----------------------------------------\\n    //      Constants\\n    // ----------------------------------------\\n\\n    /// @dev All roles related to accessing this contract\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\\n\\n    /// @dev divider to calculate fees in basis points\\n    uint256 public constant feeRedeemDivider = 1e4;\\n\\n    // ----------------------------------------\\n    //      Events\\n    // ----------------------------------------\\n\\n    event DepositFeePaid(address depositor, uint256 fees);\\n    event RedeemFeePaid(address redeemer, uint256 fees);\\n    event RedeemFeeBurnt(address redeemer, uint256 fees);\\n    event RedeemBurnFeeUpdated(uint256 feeBp);\\n    event RedeemFeeBurnAddressUpdated(address receiver);\\n    event RedeemFeeExempted(address exemptedUser, bool isExempted);\\n    event SupplyCapUpdated(uint256 newCap);\\n    event FilterUpdated(address filter);\\n    event AddFeeExemptedTCO2(address tco2);\\n    event RemoveFeeExemptedTCO2(address tco2);\\n\\n    struct PoolVintageToken {\\n        // Address of the token contract. This can be either\\n        // an ERC-20 or an ERC-1155 token.\\n        address tokenAddress;\\n        // Token id for ERC-1155 tokens. For ERC-20 tokens,\\n        // this field should always be 0.\\n        uint256 erc1155VintageTokenId;\\n        // Token id to identify uniquely a project for a vintage\\n        // token in the pool. This id should be derived from the\\n        // combination of tokenAddress and erc1155VintageTokenId,\\n        // depending on the token type of the vintage.\\n        uint256 projectTokenId;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function __Pool_init_unchained(\\n        address[] calldata accounts,\\n        bytes32[] calldata roles\\n    ) internal {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n        __RoleInitializer_init_unchained(accounts, roles);\\n    }\\n\\n    // ----------------------------------------\\n    //                Abstract\\n    // ----------------------------------------\\n\\n    function _feeDistribution(PoolVintageToken memory vintage, uint256)\\n        internal\\n        view\\n        virtual\\n        returns (FeeDistribution memory);\\n\\n    function _transfer(\\n        PoolVintageToken memory vintage,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _retire(\\n        PoolVintageToken memory vintage,\\n        address from,\\n        uint256 amount\\n    ) internal virtual returns (uint256);\\n\\n    function _checkEligible(PoolVintageToken memory vintage)\\n        internal\\n        view\\n        virtual;\\n\\n    function _emitDepositedEvent(\\n        PoolVintageToken memory vintage,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function _emitRedeemedEvent(PoolVintageToken memory vintage, uint256 amount)\\n        internal\\n        virtual;\\n\\n    // ----------------------------------------\\n    //      Upgradable related functions\\n    // ----------------------------------------\\n\\n    function _authorizeUpgrade(address) internal virtual override {\\n        onlyPoolOwner();\\n    }\\n\\n    // ------------------------\\n    // Poor person's modifiers\\n    // ------------------------\\n\\n    /// @dev function that checks whether the caller is the\\n    /// contract owner\\n    function onlyPoolOwner() internal view virtual {\\n        require(owner() == msg.sender, Errors.CP_ONLY_OWNER);\\n    }\\n\\n    /// @dev function that only lets the contract's owner and granted role to execute\\n    function onlyWithRole(bytes32 role) internal view virtual {\\n        require(\\n            hasRole(role, msg.sender) || owner() == msg.sender,\\n            Errors.CP_UNAUTHORIZED\\n        );\\n    }\\n\\n    /// @dev function that checks whether the contract is paused\\n    function onlyUnpaused() internal view {\\n        require(!paused(), Errors.CP_PAUSED_CONTRACT);\\n    }\\n\\n    // ------------------------\\n    // Admin functions\\n    // ------------------------\\n\\n    /// @notice Emergency function to disable contract's core functionality\\n    /// @dev wraps _pause(), only Admin\\n    function pause() external virtual {\\n        onlyWithRole(PAUSER_ROLE);\\n        _pause();\\n    }\\n\\n    /// @dev Unpause the system, wraps _unpause(), only Admin\\n    function unpause() external virtual {\\n        onlyWithRole(PAUSER_ROLE);\\n        _unpause();\\n    }\\n\\n    /// @notice Update the fee redeem burn percentage\\n    /// @param feeRedeemBurnPercentageInBase_ percentage of fee in base\\n    function setFeeRedeemBurnPercentage(uint256 feeRedeemBurnPercentageInBase_)\\n        external\\n        virtual\\n    {\\n        onlyPoolOwner();\\n        require(\\n            feeRedeemBurnPercentageInBase_ < feeRedeemDivider,\\n            Errors.CP_INVALID_FEE\\n        );\\n        _feeRedeemBurnPercentageInBase = feeRedeemBurnPercentageInBase_;\\n        emit RedeemBurnFeeUpdated(feeRedeemBurnPercentageInBase_);\\n    }\\n\\n    /// @notice Update the fee redeem burn address\\n    /// @param feeRedeemBurnAddress_ address to transfer the fees to burn\\n    function setFeeRedeemBurnAddress(address feeRedeemBurnAddress_)\\n        external\\n        virtual\\n    {\\n        onlyPoolOwner();\\n        require(feeRedeemBurnAddress_ != address(0), Errors.CP_EMPTY_ADDRESS);\\n        _feeRedeemBurnAddress = feeRedeemBurnAddress_;\\n        emit RedeemFeeBurnAddressUpdated(feeRedeemBurnAddress_);\\n    }\\n\\n    /// @notice Adds a new address for redeem fees exemption\\n    /// @param _address address to be exempted on redeem fees\\n    function addRedeemFeeExemptedAddress(address _address) external virtual {\\n        onlyPoolOwner();\\n        redeemFeeExemptedAddresses[_address] = true;\\n        emit RedeemFeeExempted(_address, true);\\n    }\\n\\n    /// @notice Removes an address from redeem fees exemption\\n    /// @param _address address to be removed from exemption\\n    function removeRedeemFeeExemptedAddress(address _address) external virtual {\\n        onlyPoolOwner();\\n        redeemFeeExemptedAddresses[_address] = false;\\n        emit RedeemFeeExempted(_address, false);\\n    }\\n\\n    /// @notice Adds a new TCO2 for redeem fees exemption\\n    /// @param _tco2 TCO2 to be exempted on redeem fees\\n    function addRedeemFeeExemptedTCO2(address _tco2) external virtual {\\n        onlyPoolOwner();\\n        redeemFeeExemptedTCO2s[_tco2] = true;\\n        emit AddFeeExemptedTCO2(_tco2);\\n    }\\n\\n    /// @notice Removes a TCO2 from redeem fees exemption\\n    /// @param _tco2 TCO2 to be removed from exemption\\n    function removeRedeemFeeExemptedTCO2(address _tco2) external virtual {\\n        onlyPoolOwner();\\n        redeemFeeExemptedTCO2s[_tco2] = false;\\n        emit RemoveFeeExemptedTCO2(_tco2);\\n    }\\n\\n    /// @notice Function to limit the maximum pool supply\\n    /// @dev supplyCap is initially set to 0 and must be increased before deposits\\n    /// @param newCap New pool supply cap\\n    function setSupplyCap(uint256 newCap) external virtual {\\n        onlyPoolOwner();\\n        supplyCap = newCap;\\n        emit SupplyCapUpdated(newCap);\\n    }\\n\\n    /// @notice Update the address of the filter contract\\n    /// @param _filter Filter contract address\\n    function setFilter(address _filter) external virtual {\\n        onlyPoolOwner();\\n        filter = _filter;\\n        emit FilterUpdated(_filter);\\n    }\\n\\n    // ----------------------------\\n    //   Permissionless functions\\n    // ----------------------------\\n\\n    function _deposit(\\n        PoolVintageToken memory vintage,\\n        uint256 amountE18,\\n        uint256 maxFee\\n    ) internal returns (uint256 mintedPoolTokenAmount) {\\n        onlyUnpaused();\\n\\n        // Ensure the vintage token is eligible to be deposited\\n        _checkEligible(vintage);\\n\\n        // Ensure there is space in the pool\\n        uint256 remainingSpace = getRemaining();\\n        //slither-disable-next-line incorrect-equality\\n        if (remainingSpace == 0) {\\n            revert(Errors.CP_FULL_POOL);\\n        }\\n\\n        // If the amount to be deposited exceeds the remaining space, deposit\\n        // the maximum amount possible up to the cap instead of failing.\\n        if (amountE18 > remainingSpace) amountE18 = remainingSpace;\\n\\n        uint256 depositedAmount = amountE18;\\n        uint256 feeDistributionTotal = 0;\\n        if (feeCalculator != IFeeCalculator(address(0))) {\\n            // If a fee module is configured, use it to calculate the minting fees\\n            FeeDistribution memory feeDistribution = _feeDistribution(\\n                vintage,\\n                depositedAmount\\n            );\\n            feeDistributionTotal = getFeeDistributionTotal(feeDistribution);\\n            _checkMaxFee(maxFee, feeDistributionTotal);\\n            depositedAmount -= feeDistributionTotal;\\n\\n            // Distribute the fee between the recipients\\n            uint256 recipientLen = feeDistribution.recipients.length;\\n            for (uint256 i = 0; i < recipientLen; ++i) {\\n                _mint(feeDistribution.recipients[i], feeDistribution.shares[i]);\\n            }\\n            emit DepositFeePaid(msg.sender, feeDistributionTotal);\\n        }\\n\\n        // Mint pool tokens to the user based on the amount of the deposited\\n        // underlying token\\n        mintedPoolTokenAmount = _mint(\\n            msg.sender,\\n            depositedAmount,\\n            feeDistributionTotal,\\n            vintage\\n        );\\n\\n        // Update supply-related storage variables in the pool\\n        _changeSupply(vintage, int256(amountE18));\\n\\n        // Transfer the underlying token to the pool\\n        _transfer(vintage, msg.sender, address(this), amountE18);\\n\\n        _emitDepositedEvent(vintage, amountE18);\\n    }\\n\\n    /// @notice Function to mint pool tokens based on the amount of TCO2\\n    /// @dev This function enables the minting of pool tokens based on the amount and the vintage token\\n    /// @dev For generic Pool contract the minting is 1:1\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        uint256, /* fee */\\n        PoolVintageToken memory\\n    ) internal virtual returns (uint256) {\\n        super._mint(account, amount);\\n        return amount;\\n    }\\n\\n    /// @notice Function to burn pool tokens based on the amount of TCO2\\n    /// @dev This function enables the burning of pool tokens based on the amount and the vintage token\\n    /// @dev For generic Pool contract the burning is 1:1\\n    function _burn(\\n        address account,\\n        uint256 amount,\\n        PoolVintageToken memory\\n    ) internal virtual returns (uint256) {\\n        super._burn(account, amount);\\n        return amount;\\n    }\\n\\n    /// @notice Returns minimum vintage start time for this pool\\n    function minimumVintageStartTime() external view returns (uint64) {\\n        return IPoolFilter(filter).minimumVintageStartTime();\\n    }\\n\\n    /// @notice Checks if region is eligible for this pool\\n    function regions(string calldata region) external view returns (bool) {\\n        return IPoolFilter(filter).regions(region);\\n    }\\n\\n    /// @notice Checks if standard is eligible for this pool\\n    function standards(string calldata standard) external view returns (bool) {\\n        return IPoolFilter(filter).standards(standard);\\n    }\\n\\n    /// @notice Checks if methodology is eligible for this pool\\n    function methodologies(string calldata methodology)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return IPoolFilter(filter).methodologies(methodology);\\n    }\\n\\n    /// @dev Internal function to calculate redemption fees according to the\\n    /// amounts of pool tokens to be spent\\n    /// Made virtual so that each child contract can implement its own\\n    /// internal fee calculation logic that can be shared with the\\n    /// current Pool contract. Child contracts will most likely need\\n    /// to simply expose a public function that returns just the\\n    /// feeDistributionTotal which is the value that is useful to\\n    /// external clients who only care about the total fee amount and\\n    /// not how the fee is going to be distributed.\\n    function _calculateRedemptionInFees(\\n        PoolVintageToken[] memory vintages,\\n        uint256[] memory amounts,\\n        bool toRetire\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            uint256[] memory feeAmounts,\\n            FeeDistribution memory feeDistribution\\n        );\\n\\n    /// @dev Internal function to calculate redemption fees according to the\\n    /// amounts of TCO2 to be redeemed\\n    /// Made virtual so that each child contract can implement its own\\n    /// internal fee calculation logic that can be shared with the\\n    /// current Pool contract. Child contracts will most likely need\\n    /// to simply expose a public function that returns just the\\n    /// feeDistributionTotal which is the value that is useful to\\n    /// external clients who only care about the total fee amount and\\n    /// not how the fee is going to be distributed.\\n    function _calculateRedemptionOutFees(\\n        PoolVintageToken[] memory vintages,\\n        uint256[] memory amounts,\\n        bool toRetire\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            uint256 feeDistributionTotal,\\n            FeeDistribution memory feeDistribution\\n        );\\n\\n    function getFeeDistributionTotal(FeeDistribution memory feeDistribution)\\n        internal\\n        pure\\n        returns (uint256 feeAmount)\\n    {\\n        uint256 recipientLen = feeDistribution.recipients.length;\\n        _checkLength(recipientLen, feeDistribution.shares.length);\\n\\n        for (uint256 i = 0; i < recipientLen; ++i) {\\n            feeAmount += feeDistribution.shares[i];\\n        }\\n        return feeAmount;\\n    }\\n\\n    function _redeemInMany(\\n        PoolVintageToken[] memory vintages,\\n        uint256[] memory amounts,\\n        uint256 maxFee,\\n        bool toRetire\\n    )\\n        internal\\n        returns (\\n            uint256[] memory retirementIds,\\n            uint256[] memory redeemedAmounts\\n        )\\n    {\\n        onlyUnpaused();\\n        uint256 vintageLength = vintages.length;\\n        _checkLength(vintageLength, amounts.length);\\n        require(\\n            feeCalculator == IFeeCalculator(address(0)),\\n            Errors.CP_NOT_SUPPORTED\\n        );\\n\\n        // Initialize return arrays\\n        redeemedAmounts = new uint256[](vintageLength);\\n        if (toRetire) {\\n            retirementIds = new uint256[](vintageLength);\\n        }\\n\\n        // Calculate the fees to be paid for the vintage token redemptions\\n        (\\n            uint256[] memory feeAmounts,\\n            FeeDistribution memory feeDistribution\\n        ) = _calculateRedemptionInFees(vintages, amounts, toRetire);\\n\\n        // Execute redemptions\\n        uint256 totalFee = 0;\\n\\n        for (uint256 i = 0; i < vintageLength; ++i) {\\n            _checkEligible(vintages[i]);\\n\\n            uint256 amountToRedeem = amounts[i];\\n            amountToRedeem -= feeAmounts[i];\\n            totalFee += feeAmounts[i];\\n\\n            // Redeem the amount minus the fee\\n            //slither-disable-next-line unused-return\\n            _redeemSingle(vintages[i], amountToRedeem);\\n\\n            // If requested, retire the vintage tokens in one go. Callers should\\n            // first approve the pool in order for the pool to retire\\n            // on behalf of them\\n            if (toRetire) {\\n                retirementIds[i] = _retire(\\n                    vintages[i],\\n                    msg.sender,\\n                    amountToRedeem\\n                );\\n            }\\n\\n            // Keep track of redeemed amounts in return arguments\\n            // to make the function composable.\\n            redeemedAmounts[i] = amountToRedeem;\\n        }\\n\\n        _checkMaxFee(maxFee, totalFee);\\n\\n        // Distribute the fee between the recipients\\n        if (totalFee > 0) {\\n            _distributeRedemptionFee(\\n                feeDistribution.recipients,\\n                feeDistribution.shares\\n            );\\n        }\\n    }\\n\\n    function _checkMaxFee(uint256 maxFee, uint256 amount) internal pure {\\n        if (maxFee != 0) {\\n            // Protect caller against getting charged a higher fee than expected\\n            require(amount <= maxFee, Errors.CP_FEE_TOO_HIGH);\\n        }\\n    }\\n\\n    function _changeSupply(PoolVintageToken memory vintage, int256 delta)\\n        internal\\n        virtual\\n    {\\n        uint256 currentSupply = totalProjectSupply[vintage.projectTokenId];\\n        totalProjectSupply[vintage.projectTokenId] = uint256(\\n            int256(currentSupply) + delta\\n        );\\n        totalUnderlyingSupply = uint256(int256(totalUnderlyingSupply) + delta);\\n    }\\n\\n    function _redeemOutMany(\\n        PoolVintageToken[] memory vintages,\\n        uint256[] memory amountsE18,\\n        uint256 maxFee,\\n        bool toRetire\\n    )\\n        internal\\n        returns (uint256[] memory retirementIds, uint256 poolAmountSpent)\\n    {\\n        onlyUnpaused();\\n        uint256 vintageLength = vintages.length;\\n        _checkLength(vintageLength, amountsE18.length);\\n\\n        // Initialize return arrays\\n        if (toRetire) {\\n            retirementIds = new uint256[](vintageLength);\\n        }\\n\\n        // Calculate the fee to be paid for the vintage token redemptions\\n        (\\n            uint256 feeDistributionTotal,\\n            FeeDistribution memory feeDistribution\\n        ) = _calculateRedemptionOutFees(vintages, amountsE18, toRetire);\\n        _checkMaxFee(maxFee, feeDistributionTotal);\\n        poolAmountSpent += feeDistributionTotal;\\n\\n        // Distribute the fee between the recipients\\n        if (feeDistributionTotal != 0) {\\n            _distributeRedemptionFee(\\n                feeDistribution.recipients,\\n                feeDistribution.shares\\n            );\\n        }\\n\\n        // Execute redemptions\\n        for (uint256 i = 0; i < vintageLength; ++i) {\\n            _checkEligible(vintages[i]);\\n\\n            // Redeem the amount\\n            uint256 amountToRedeem = amountsE18[i];\\n            poolAmountSpent += _redeemSingle(vintages[i], amountToRedeem);\\n\\n            // If requested, retire the vintage tokens in one go. Callers should\\n            // first approve the pool in order for the pool to retire\\n            // on behalf of them\\n            if (toRetire) {\\n                retirementIds[i] = _retire(\\n                    vintages[i],\\n                    msg.sender,\\n                    amountToRedeem\\n                );\\n            }\\n        }\\n    }\\n\\n    // Distribute the fees between the recipients\\n    function _distributeRedemptionFee(\\n        address[] memory recipients,\\n        uint256[] memory fees\\n    ) internal {\\n        uint256 amountToBurn = 0;\\n        for (uint256 i = 0; i < recipients.length; ++i) {\\n            uint256 fee = fees[i];\\n            uint256 burnAmount = (fee * _feeRedeemBurnPercentageInBase) /\\n                feeRedeemDivider;\\n            fee -= burnAmount;\\n            amountToBurn += burnAmount;\\n            transfer(recipients[i], fee);\\n            emit RedeemFeePaid(msg.sender, fee);\\n        }\\n        if (amountToBurn > 0) {\\n            transfer(_feeRedeemBurnAddress, amountToBurn);\\n            emit RedeemFeeBurnt(msg.sender, amountToBurn);\\n        }\\n    }\\n\\n    /// @dev Internal function that redeems a single underlying token\\n    function _redeemSingle(PoolVintageToken memory vintage, uint256 amountE18)\\n        internal\\n        virtual\\n        returns (uint256 burntAmount)\\n    {\\n        // Burn pool tokens\\n        burntAmount = _burn(msg.sender, amountE18, vintage);\\n\\n        // Update supply-related storage variables in the pool\\n        _changeSupply(vintage, int256(amountE18) * -1);\\n\\n        // Transfer vintage token tokens to the caller\\n        _transfer(vintage, address(this), msg.sender, amountE18);\\n\\n        _emitRedeemedEvent(vintage, amountE18);\\n    }\\n\\n    /// @dev Implemented in order to disable transfers when paused\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        onlyUnpaused();\\n    }\\n\\n    function _checkLength(uint256 l1, uint256 l2) internal pure {\\n        if (l1 != l2) {\\n            revert(Errors.CP_LENGTH_MISMATCH);\\n        }\\n    }\\n\\n    /// @dev Returns the remaining space in pool before hitting the cap\\n    function getRemaining() public view returns (uint256) {\\n        return (supplyCap - totalSupply());\\n    }\\n\\n    // -----------------------------\\n    //      Locked ERC20 safety\\n    // -----------------------------\\n\\n    /// @dev Function to disallowing sending tokens to either the 0-address\\n    /// or this contract itself\\n    function validDestination(address to) internal view {\\n        require(to != address(0x0), Errors.CP_INVALID_DESTINATION_ZERO);\\n        require(to != address(this), Errors.CP_INVALID_DESTINATION_SELF);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        validDestination(recipient);\\n        super.transfer(recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        validDestination(recipient);\\n        super.transferFrom(sender, recipient, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1dd43ddc896d1a6094479ec0fc2aa7585017aa751354cb19aa1ecf3d190725f9\",\"license\":\"UNLICENSED\"},\"contracts/pools/PoolERC1155able.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2024 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport {FeeDistribution} from '@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol';\\n\\nimport {Pool} from './Pool.sol';\\nimport {IPoolFilter} from '../interfaces/IPoolFilter.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\n\\nabstract contract PoolERC1155able is Pool, ERC1155Holder {\\n    event ERC1155Deposited(\\n        address erc1155Addr,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n    event ERC1155Redeemed(\\n        address account,\\n        address erc1155Addr,\\n        uint256 tokenId,\\n        uint256 amount\\n    );\\n    event UnderlyingDecimalsUpdated(uint8 decimals);\\n\\n    /// @notice Set the underlying decimals for ERC-1155 tokens.\\n    /// @dev The underlying decimals are the number of decimals the ERC-1155\\n    /// token uses to represent the underlying asset. For example, if the\\n    /// ERC-1155 token represents a tonne of carbon, then the underlying\\n    /// decimals would be 0. If it represents a kilogram of carbon, then the\\n    /// underlying decimals would be 3.\\n    /// @param underlyingDecimals_ The number of decimals the ERC-1155 token\\n    /// uses to represent a tonne of carbon.\\n    function setUnderlyingDecimals(uint8 underlyingDecimals_) external {\\n        onlyPoolOwner();\\n        uint8 poolDecimals = decimals();\\n        // Underlying decimals cannot be higher than pool decimals, otherwise\\n        // the conversions in _poolTokenAmount and _underlyingAmount will fail.\\n        // Also if we allow a higher fidelity token to be deposited then the\\n        // difference in decimals will be unredeemable. In theory we could check\\n        // that low decimals in such deposits are not used but we don't have any\\n        // need to do that yet.\\n        if (underlyingDecimals_ > poolDecimals)\\n            revert(Errors.UNDERLYING_DECIMALS_TOO_HIGH);\\n        _underlyingDecimals = underlyingDecimals_;\\n        emit UnderlyingDecimalsUpdated(underlyingDecimals_);\\n    }\\n\\n    /// @notice Function to limit the maximum pool supply\\n    /// @dev supplyCap is initially set to 0 and must be increased before deposits\\n    /// @param newCap New pool supply cap\\n    function setSupplyCap(uint256 newCap) external override {\\n        onlyPoolOwner();\\n        // The supply cap must be of valid precision for the underlying token\\n        uint256 precision = 10**(decimals() - _underlyingDecimals);\\n        if (newCap % precision != 0) {\\n            revert(Errors.INVALID_SUPPLY_CAP);\\n        }\\n        supplyCap = newCap;\\n        emit SupplyCapUpdated(newCap);\\n    }\\n\\n    /// @notice Underlying decimals for ERC-1155 tokens. 0 decimals means\\n    /// that the smallest denomination the ERC-1155 token can represent is\\n    /// a tonne, 3 decimals means a kilogram, etc.\\n    function underlyingDecimals() external view returns (uint8) {\\n        return _underlyingDecimals;\\n    }\\n\\n    /// @notice Return the total supply of the project for the\\n    /// given ERC1155 token.\\n    /// @return supply\\n    function totalPerProjectSupply(address erc1155, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return totalProjectSupply[_projectTokenId(erc1155, tokenId)];\\n    }\\n\\n    /// @notice View function to calculate deposit fees pre-execution\\n    /// @dev User specifies in front-end the address and amount they want\\n    /// @param erc1155 ERC1155 contract address\\n    /// @param tokenId id representing the vintage\\n    /// @param amount Amount to redeem\\n    /// @return feeDistributionTotal Total fee amount to be paid\\n    function calculateDepositFees(\\n        address erc1155,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view virtual returns (uint256 feeDistributionTotal);\\n\\n    /// @notice View function to calculate redemption fees pre-execution,\\n    /// according to the amounts of pool tokens to be spent.\\n    /// @param erc1155s Array of ERC1155 contract addresses\\n    /// @param tokenIds ids of the vintages of each project\\n    /// @param amounts Array of pool token amounts to spend in order to redeem\\n    /// underlying tokens.\\n    /// @dev The indexes of all arrays should be matching 1:1.\\n    /// @param toRetire No-op, retirements of ERC-1155 tokens are not\\n    /// supported from within the pool yet and there are no immediate plans\\n    /// to add support.\\n    /// @return feeDistributionTotal Total fee amount to be paid\\n    function calculateRedemptionInFees(\\n        address[] memory erc1155s,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        bool toRetire\\n    ) external view virtual returns (uint256 feeDistributionTotal);\\n\\n    /// @notice View function to calculate redemption fees pre-execution,\\n    /// according to the amounts of underlying tokens to be redeemed.\\n    /// @param erc1155s Array of ERC1155 contract addresses\\n    /// @param tokenIds ids of the vintages of each project\\n    /// @param amounts Array of underlying token amounts to redeem.\\n    /// @dev The indexes of all arrays should be matching 1:1.\\n    /// @param toRetire No-op, retirements of ERC-1155 tokens are not\\n    /// supported from within the pool yet and there are no immediate plans\\n    /// to add support.\\n    /// @return feeDistributionTotal Total fee amount to be paid\\n    function calculateRedemptionOutFees(\\n        address[] memory erc1155s,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        bool toRetire\\n    ) external view virtual returns (uint256 feeDistributionTotal);\\n\\n    /// @notice Returns the balance of the carbon offset found in the pool\\n    /// @param erc1155 ERC1155 contract address\\n    /// @param tokenId id representing the vintage\\n    /// @return balance pool balance\\n    function tokenBalance(address erc1155, uint256 tokenId)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        return IERC1155(erc1155).balanceOf(address(this), tokenId);\\n    }\\n\\n    /// @notice Checks if token to be deposited is eligible for this pool.\\n    /// Reverts if not.\\n    /// Beware that the revert reason might depend on the underlying implementation\\n    /// of IPoolFilter.checkEligible\\n    /// @param erc1155 the ERC1155 contract to check\\n    /// @param tokenId the token id\\n    /// @return isEligible true if address is eligible and no other issues occur\\n    function checkEligible(address erc1155, uint256 tokenId)\\n        external\\n        view\\n        virtual\\n        returns (bool isEligible)\\n    {\\n        _checkEligible(_buildPoolVintageToken(erc1155, tokenId));\\n        return true;\\n    }\\n\\n    // Overrides\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC1155Receiver, AccessControlUpgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    // Internal\\n\\n    function _checkEligible(PoolVintageToken memory vintage)\\n        internal\\n        view\\n        override\\n    {\\n        string memory eligibilityError = IPoolFilter(filter)\\n            .checkERC1155Eligible(\\n                vintage.tokenAddress,\\n                vintage.erc1155VintageTokenId\\n            );\\n        if (bytes(eligibilityError).length > 0) {\\n            revert(eligibilityError);\\n        }\\n    }\\n\\n    function _changeSupply(PoolVintageToken memory vintage, int256 delta)\\n        internal\\n        override\\n    {\\n        super._changeSupply(vintage, _underlyingAmount(delta));\\n    }\\n\\n    function _emitDepositedEvent(\\n        PoolVintageToken memory vintage,\\n        uint256 amount\\n    ) internal override {\\n        emit ERC1155Deposited(\\n            vintage.tokenAddress,\\n            vintage.erc1155VintageTokenId,\\n            _underlyingAmount(amount)\\n        );\\n    }\\n\\n    function _emitRedeemedEvent(PoolVintageToken memory vintage, uint256 amount)\\n        internal\\n        override\\n    {\\n        emit ERC1155Redeemed(\\n            msg.sender,\\n            vintage.tokenAddress,\\n            vintage.erc1155VintageTokenId,\\n            _underlyingAmount(amount)\\n        );\\n    }\\n\\n    function _buildPoolVintageTokens(\\n        address[] memory erc1155s,\\n        uint256[] memory tokenIds\\n    ) internal view returns (PoolVintageToken[] memory vintageTokens) {\\n        uint256 length = erc1155s.length;\\n        vintageTokens = new PoolVintageToken[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            vintageTokens[i] = _buildPoolVintageToken(erc1155s[i], tokenIds[i]);\\n        }\\n    }\\n\\n    function _buildPoolVintageToken(address erc1155, uint256 tokenId)\\n        internal\\n        view\\n        returns (PoolVintageToken memory)\\n    {\\n        return\\n            PoolVintageToken(\\n                erc1155,\\n                tokenId,\\n                _projectTokenId(erc1155, tokenId)\\n            );\\n    }\\n\\n    function _feeDistribution(PoolVintageToken memory vintage, uint256 amount)\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (FeeDistribution memory)\\n    {\\n        return\\n            feeCalculator.calculateDepositFees(\\n                address(this),\\n                vintage.tokenAddress,\\n                vintage.erc1155VintageTokenId,\\n                amount\\n            );\\n    }\\n\\n    function _transfer(\\n        PoolVintageToken memory vintage,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        IERC1155(vintage.tokenAddress).safeTransferFrom(\\n            from,\\n            to,\\n            vintage.erc1155VintageTokenId,\\n            _underlyingAmount(amount),\\n            ''\\n        );\\n    }\\n\\n    function _retire(\\n        PoolVintageToken memory vintage,\\n        address from,\\n        uint256 amount\\n    ) internal override returns (uint256) {}\\n\\n    function _projectTokenId(address erc1155, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    /// @dev The underlying amount conversions are helpful to execute\\n    /// so internal logic can be kept simple by always operating on\\n    /// pool token decimals. For example, underlying token amounts are\\n    /// converted to pool token amounts internally so pool ops like\\n    /// charging fees can be performed.\\n    function _underlyingAmount(uint256 poolTokenAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint8 decimals = decimals();\\n        decimals -= _underlyingDecimals;\\n        return poolTokenAmount / (10**decimals);\\n    }\\n\\n    function _underlyingAmount(int256 poolTokenAmount)\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        uint8 decimals = decimals();\\n        decimals -= _underlyingDecimals;\\n        // The minimum decimals value that can overflow in the int256\\n        // conversion below is 78 so not anything to be worried about.\\n        return poolTokenAmount / int256(10**decimals);\\n    }\\n\\n    function _poolTokenAmount(uint256 underlyingAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint8 decimals = decimals();\\n        decimals -= _underlyingDecimals;\\n        return underlyingAmount * (10**decimals);\\n    }\\n\\n    function _poolTokenAmounts(uint256[] memory amounts)\\n        internal\\n        view\\n        returns (uint256[] memory poolTokenAmounts)\\n    {\\n        uint256 length = amounts.length;\\n        poolTokenAmounts = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            poolTokenAmounts[i] = _poolTokenAmount(amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2b8845c7d20f0524c855c35da313f09cea9216fe8a778e5788bf66830ada0651\",\"license\":\"UNLICENSED\"},\"contracts/pools/PoolStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {IFeeCalculator} from '@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol';\\n\\nabstract contract PoolStorageV1 {\\n    /// @notice The supply cap is used as a measure to guard deposits\\n    /// in the pool. It is meant to minimize the impact a potential\\n    /// compromise in the source registry (eg. Verra) can have to the pool.\\n    uint256 public supplyCap;\\n    //slither-disable-next-line constable-states\\n    mapping(address => uint256) private DEPRECATED_tokenBalances;\\n    //slither-disable-next-line constable-states\\n    address private DEPRECATED_contractRegistry;\\n\\n    /// @notice array used to read from when redeeming TCO2s automatically\\n    address[] public scoredTCO2s;\\n\\n    /// @dev Mappings for attributes that can be included or excluded\\n    /// if set to `false`, attribute-values are blacklisted/rejected\\n    /// if set to `true`, attribute-values are whitelisted/accepted\\n    //slither-disable-next-line constable-states\\n    mapping(string => bool) private DEPRECATED_regions;\\n    //slither-disable-next-line constable-states\\n    mapping(string => bool) private DEPRECATED_standards;\\n    //slither-disable-next-line constable-states\\n    mapping(string => bool) private DEPRECATED_methodologies;\\n\\n    /// @dev mapping to whitelist external non-TCO2 contracts by address\\n    //slither-disable-next-line constable-states\\n    mapping(address => bool) private DEPRECATED_externalWhiteList;\\n\\n    /// @dev mapping to include certain TCO2 contracts by address,\\n    /// overriding attribute matching checks\\n    //slither-disable-next-line constable-states\\n    mapping(address => bool) private DEPRECATED_internalWhiteList;\\n\\n    /// @dev mapping to exclude certain TCO2 contracts by address,\\n    /// even if the attribute matching would pass\\n    //slither-disable-next-line constable-states\\n    mapping(address => bool) private DEPRECATED_internalBlackList;\\n\\n    /// @dev fees redeem receiver address\\n    //slither-disable-next-line uninitialized-state,constable-states\\n    address internal _feeRedeemReceiver;\\n\\n    //slither-disable-next-line uninitialized-state,constable-states\\n    uint256 internal _feeRedeemPercentageInBase;\\n\\n    /// @dev fees redeem burn address\\n    address internal _feeRedeemBurnAddress;\\n\\n    /// @dev fees redeem burn percentage with 2 fixed decimals precision\\n    uint256 internal _feeRedeemBurnPercentageInBase;\\n\\n    /// @dev repacked smaller variables here so new bools can be added below\\n    //slither-disable-next-line constable-states\\n    uint64 private DEPRECATED_minimumVintageStartTime;\\n    //slither-disable-next-line constable-states\\n    bool private DEPRECATED_seedMode;\\n    //slither-disable-next-line constable-states\\n    bool private DEPRECATED_regionsIsAcceptedMapping;\\n    //slither-disable-next-line constable-states\\n    bool private DEPRECATED_standardsIsAcceptedMapping;\\n    //slither-disable-next-line constable-states\\n    bool private DEPRECATED_methodologiesIsAcceptedMapping;\\n}\\n\\nabstract contract PoolStorageV1_1 {\\n    /// @notice End users exempted from redeem fees\\n    mapping(address => bool) public redeemFeeExemptedAddresses;\\n}\\n\\nabstract contract PoolStorageV1_2 {\\n    /// @notice TCO2s exempted from redeem fees\\n    mapping(address => bool) public redeemFeeExemptedTCO2s;\\n}\\n\\nabstract contract PoolStorageV1_3 {\\n    /// @notice bridge router who has access to the bridgeMint & bridgeBurn functions which\\n    /// mint/burn pool tokens for cross chain messenges\\n    //slither-disable-next-line constable-states\\n    address public router;\\n}\\n\\nabstract contract PoolStorageV1_4 {\\n    /// @notice fee percentage in basis points charged for selective\\n    /// redemptions that also retire the credits in the same transaction\\n    //slither-disable-next-line uninitialized-state,constable-states\\n    uint256 internal _feeRedeemRetirePercentageInBase;\\n    address public filter;\\n}\\n\\nabstract contract PoolStorageV1_5 {\\n    /// @notice module to calculate fees for the pool\\n    //slither-disable-next-line uninitialized-state,constable-states\\n    IFeeCalculator public feeCalculator;\\n    /// @notice Total supply of underlying collateral in the pool.  Supply\\n    /// amounts are kept in the underlying's native precision regardless\\n    /// of whether underlying is an ERC-20 or ERC-1155 token.\\n    uint256 public totalUnderlyingSupply;\\n    /// @notice Project token id to total supply of the project\\n    /// in the pool. Supply amounts are kept in the underlying's native\\n    /// precision regardless of whether underlying is an ERC-20 or ERC-1155\\n    /// token.\\n    mapping(uint256 => uint256) public totalProjectSupply;\\n}\\n\\nabstract contract PoolStorageV1_6 {\\n    /// @notice Mapping to track scores for ERC-1155 tokens\\n    mapping(address => mapping(uint256 => uint256)) internal _scores;\\n\\n    mapping(address => mapping(uint256 => bool)) internal _vintageDeposited;\\n    /// @notice Underlying decimals for ERC-1155 tokens. 0 decimals means\\n    /// that the smallest denomination the ERC-1155 token can represent is\\n    /// a tonne, 3 decimals means a kilogram, etc.\\n    //slither-disable-next-line constable-states\\n    uint8 internal _underlyingDecimals;\\n}\\n\\nabstract contract PoolStorage is\\n    PoolStorageV1,\\n    PoolStorageV1_1,\\n    PoolStorageV1_2,\\n    PoolStorageV1_3,\\n    PoolStorageV1_4,\\n    PoolStorageV1_5,\\n    PoolStorageV1_6\\n{}\\n\",\"keccak256\":\"0x3087acb55559b0b894b7b11b8df6e7767f525fe42804ad9347fea2669295928d\",\"license\":\"UNLICENSED\"},\"contracts/pools/PoolWithAdjustingERC1155.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2024 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {Errors} from '../libraries/Errors.sol';\\nimport {PoolWithFeeCalculatorERC1155} from './PoolWithFeeCalculatorERC1155.sol';\\n\\n/// @notice Apply adjustments to the minting and burning of pool tokens.\\n/// Any pool for ERC-1155 tokens that inherits from this contract will be\\n/// able to control the amounts being minted and burned based on the scores\\n/// set for the ERC-1155 tokens.\\nabstract contract PoolWithAdjustingERC1155 is PoolWithFeeCalculatorERC1155 {\\n    // ----------------------------------------\\n    //      Events\\n    // ----------------------------------------\\n\\n    event ScoreUpdated(address erc1155, uint256 tokenId, uint256 score);\\n\\n    // ------------------------\\n    // Admin functions\\n    // ------------------------\\n\\n    /// @notice Set scores for ERC-1155 tokens\\n    /// @dev Only executable by the pool owner\\n    /// @param erc1155s Array of ERC-1155 contracts\\n    /// @param tokenIds Array of ERC-1155 token IDs\\n    /// @param newScores Array of scores to set\\n    function setScores(\\n        address[] calldata erc1155s,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata newScores\\n    ) external {\\n        onlyPoolOwner();\\n\\n        uint256 erc1155sLength = erc1155s.length;\\n        _checkLength(erc1155sLength, tokenIds.length);\\n        _checkLength(erc1155sLength, newScores.length);\\n\\n        for (uint256 i = 0; i < erc1155sLength; ++i) {\\n            address erc1155 = erc1155s[i];\\n            uint256 tokenId = tokenIds[i];\\n            uint256 score = newScores[i];\\n\\n            // Currently the smart contract does not provide logic to handle\\n            // score updates for already deposited tokens. This is problematic\\n            // because if the score of a deposited token is decreased, then it's\\n            // possible for redemptions to fail because there will not be enough\\n            // pool tokens held by the pool to burn. Until we implement this\\n            // missing logic, we disable score updates for already deposited\\n            // tokens altogether.\\n            require(\\n                _vintageDeposited[erc1155][tokenId] == false,\\n                'vintage already deposited'\\n            );\\n\\n            require(erc1155 != address(0), Errors.CP_EMPTY_ADDRESS);\\n            require(score <= 100, Errors.INVALID_ERC1155_SCORE);\\n\\n            _scores[erc1155][tokenId] = score;\\n\\n            emit ScoreUpdated(erc1155, tokenId, score);\\n        }\\n    }\\n\\n    // ----------------------------\\n    //   Permissionless functions\\n    // ----------------------------\\n\\n    /// @notice Get the score of an ERC-1155 token\\n    /// @param erc1155 Address of the ERC-1155 contract\\n    /// @param tokenId ID of the ERC-1155 token\\n    /// @return score The score of the ERC-1155 token\\n    function scores(address erc1155, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 score)\\n    {\\n        return _scores[erc1155][tokenId];\\n    }\\n\\n    /// @notice Calculate the adjusted amount of pool tokens to mint\\n    /// for a deposit of the provided amount of the ERC-1155 token.\\n    /// @param erc1155 Address of the ERC-1155 contract\\n    /// @param tokenId ID of the ERC-1155 token\\n    /// @param amount Amount of ERC-1155 tokens to deposit\\n    /// @return adjustedAmount The amount of pool tokens minted to the user\\n    function calculateDepositAdjustedAmount(\\n        address erc1155,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (uint256 adjustedAmount) {\\n        onlyUnpaused();\\n\\n        adjustedAmount = _calculateDepositAdjustedAmount(\\n            _buildPoolVintageToken(erc1155, tokenId),\\n            _poolTokenAmount(amount)\\n        );\\n    }\\n\\n    /// @notice Calculate the amounts of pool tokens needed in order to\\n    /// redeem the provided amount of the ERC-1155 token.\\n    /// @param erc1155 Address of the ERC-1155 contract\\n    /// @param tokenId ID of the ERC-1155 token\\n    /// @param amount Amount of ERC-1155 token to redeem\\n    /// @return adjustedAmount The amount of pool tokens to be burnt\\n    /// by the caller\\n    function calculateRedeemOutAdjustedAmount(\\n        address erc1155,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (uint256 adjustedAmount) {\\n        onlyUnpaused();\\n\\n        adjustedAmount = _calculateRedeemOutAdjustedAmount(\\n            _buildPoolVintageToken(erc1155, tokenId),\\n            _poolTokenAmount(amount)\\n        );\\n    }\\n\\n    /// @notice Mint pool tokens based on the amount and score of the\\n    /// ERC-1155 token.\\n    /// @dev caller gets minted an adjusted amount, based on the\\n    /// score of the token, and the rest gets minted to the pool.\\n    /// @param account Address of the user to mint tokens to\\n    /// @param amount Amount of pool tokens to mint to the user. Adjustments\\n    /// will be made by this function based on the score of the vintage.\\n    /// @param feeDistributionTotal Fee in pool tokens paid by the user\\n    /// @param vintage ERC-1155 token vintage to be deposited\\n    /// @return callerMintedAmount The amount of pool tokens minted\\n    /// to the caller\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        uint256 feeDistributionTotal,\\n        PoolVintageToken memory vintage\\n    ) internal override returns (uint256 callerMintedAmount) {\\n        _vintageDeposited[vintage.tokenAddress][\\n            vintage.erc1155VintageTokenId\\n        ] = true;\\n\\n        // The adjusted amount should be calculated based on the total minted pool tokens\\n        uint256 totalAmount = amount + feeDistributionTotal;\\n        uint256 adjustedAmount = _calculateDepositAdjustedAmount(\\n            vintage,\\n            totalAmount\\n        );\\n        callerMintedAmount = adjustedAmount - feeDistributionTotal;\\n\\n        // mint adjusted amount to the user\\n        _mint(account, callerMintedAmount);\\n\\n        // mint the remaining amount to the pool if an adjustment was made\\n        if (adjustedAmount < totalAmount)\\n            _mint(address(this), totalAmount - adjustedAmount);\\n    }\\n\\n    /// @notice Burn pool tokens based on the amount and score of the\\n    /// ERC-1155 token.\\n    /// @dev caller burns an adjusted amount, based on the\\n    /// score of the token, and the rest gets burnt from the pool\\n    /// @param account Address of the user to burn tokens from\\n    /// @param amountE18 Amount of pool tokens to burn from the caller.\\n    /// Adjustments will be made by this function based on the score\\n    /// of the vintage.\\n    /// @param vintage ERC-1155 token vintage to be redeemed\\n    /// @return burntAmount The amount of pool tokens burnt by the caller\\n    function _burn(\\n        address account,\\n        uint256 amountE18,\\n        PoolVintageToken memory vintage\\n    ) internal override returns (uint256 burntAmount) {\\n        burntAmount = _calculateRedeemOutAdjustedAmount(vintage, amountE18);\\n\\n        // burn the amount from user\\n        _burn(account, burntAmount);\\n\\n        // burn the remaining amount using excess tokens from the pool\\n        if (amountE18 > burntAmount)\\n            _burn(address(this), amountE18 - burntAmount);\\n    }\\n\\n    /// @notice Calculate the adjusted amount of pool tokens to mint\\n    /// for a deposit of the provided amount of the ERC-1155 token.\\n    /// @param vintage ERC-1155 token vintage to be deposited\\n    /// @param amountE18 Amount of ERC-1155 tokens to deposit, adjusted to\\n    /// 18 decimals\\n    /// @return The amount of pool tokens to be minted to the user\\n    function _calculateDepositAdjustedAmount(\\n        PoolVintageToken memory vintage,\\n        uint256 amountE18\\n    ) internal view returns (uint256) {\\n        uint256 score = _scores[vintage.tokenAddress][\\n            vintage.erc1155VintageTokenId\\n        ];\\n        require(score != 0, Errors.EMPTY_ERC155_SCORE);\\n\\n        return (amountE18 * score) / 100;\\n    }\\n\\n    /// @notice Calculate the amount of pool tokens to burn\\n    /// for a redemption of the provided amount of the ERC-1155 token.\\n    /// @param vintage ERC-1155 token vintage to be redeemed\\n    /// @param amountE18 Amount of ERC-1155 token to redeem, adjusted to 18 decimals\\n    /// @return The amount of pool tokens to be burnt\\n    function _calculateRedeemOutAdjustedAmount(\\n        PoolVintageToken memory vintage,\\n        uint256 amountE18\\n    ) internal view returns (uint256) {\\n        uint256 score = _scores[vintage.tokenAddress][\\n            vintage.erc1155VintageTokenId\\n        ];\\n        require(score != 0, Errors.EMPTY_ERC155_SCORE);\\n\\n        return (amountE18 * score) / 100;\\n    }\\n}\\n\",\"keccak256\":\"0x4fd7e7e2cd13a498cf5a0c1c5eb9667afeb5d2a368d13462b2e13d66ca30d654\",\"license\":\"UNLICENSED\"},\"contracts/pools/PoolWithFeeCalculatorERC1155.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2024 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {FeeDistribution, IFeeCalculator} from '@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol';\\n\\nimport {PoolERC1155able} from './PoolERC1155able.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\n\\n/// @notice Pool with fee calculator template contract\\n/// Any pool that inherits from this contract will be able to\\n// charge fees both on deposits and redemptions with the use\\n/// of a fee calculator contract.\\nabstract contract PoolWithFeeCalculatorERC1155 is PoolERC1155able {\\n    // ----------------------------------------\\n    //      Events\\n    // ----------------------------------------\\n\\n    event FeeCalculatorUpdated(address feeCalculator);\\n\\n    // ------------------------\\n    // Admin functions\\n    // ------------------------\\n\\n    /// @notice Update the address of the fee module contract\\n    /// @param _feeCalculator Fee module contract address\\n    function setFeeCalculator(address _feeCalculator) external {\\n        onlyPoolOwner();\\n        feeCalculator = IFeeCalculator(_feeCalculator);\\n        emit FeeCalculatorUpdated(_feeCalculator);\\n    }\\n\\n    // ----------------------------\\n    //   Permissionless functions\\n    // ----------------------------\\n\\n    /// @notice View function to calculate deposit fees pre-execution\\n    /// @dev User specifies in front-end the address and amount they want\\n    /// @param erc1155 ERC1155 contract address\\n    /// @param tokenId id representing the vintage\\n    /// @param amount Amount of ERC-1155 tokens to deposit (0 decimals)\\n    /// @return feeDistributionTotal Total fee amount to be paid in pool tokens\\n    function calculateDepositFees(\\n        address erc1155,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view virtual override returns (uint256 feeDistributionTotal) {\\n        onlyUnpaused();\\n\\n        // If the fee calculator is not configured, no fees are paid\\n        if (address(feeCalculator) == address(0)) {\\n            return 0;\\n        }\\n\\n        FeeDistribution memory feeDistribution = feeCalculator\\n            .calculateDepositFees(\\n                address(this),\\n                erc1155,\\n                tokenId,\\n                _poolTokenAmount(amount)\\n            );\\n        feeDistributionTotal = getFeeDistributionTotal(feeDistribution);\\n    }\\n\\n    /// @notice View function to calculate redemption fees pre-execution,\\n    /// according to the amounts of pool tokens to be spent.\\n    /// NOTE: This function is not supported yet\\n    function calculateRedemptionInFees(\\n        address[] memory,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bool\\n    ) external view virtual override returns (uint256) {\\n        revert(Errors.CP_NOT_SUPPORTED);\\n    }\\n\\n    function _calculateRedemptionInFees(\\n        PoolVintageToken[] memory, /* ERC1155 vintages */\\n        uint256[] memory, /* amounts */\\n        bool /* toRetire */\\n    )\\n        internal\\n        pure\\n        override\\n        returns (\\n            uint256[] memory, /* feeAmounts */\\n            FeeDistribution memory /* feeDistribution */\\n        )\\n    {\\n        revert(Errors.CP_NOT_SUPPORTED);\\n    }\\n\\n    /// @notice View function to calculate redemption fees pre-execution,\\n    /// according to the amounts of underlying tokens to be redeemed.\\n    /// @param erc1155s Array of ERC1155 contract addresses\\n    /// @param tokenIds ids of the vintages of each project\\n    /// @param amounts Array of ERC-1155 token amounts to redeem (0 decimals)\\n    /// The indexes of this array are matching 1:1 with the erc1155s array.\\n    /// @param toRetire No-op\\n    /// @return feeDistributionTotal Total fee amount to be paid in pool tokens\\n    function calculateRedemptionOutFees(\\n        address[] memory erc1155s,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        bool toRetire\\n    ) external view virtual override returns (uint256 feeDistributionTotal) {\\n        PoolVintageToken[] memory vintages = _buildPoolVintageTokens(\\n            erc1155s,\\n            tokenIds\\n        );\\n\\n        (feeDistributionTotal, ) = _calculateRedemptionOutFees(\\n            vintages,\\n            _poolTokenAmounts(amounts),\\n            toRetire\\n        );\\n    }\\n\\n    function _calculateRedemptionOutFees(\\n        PoolVintageToken[] memory vintages,\\n        uint256[] memory amountsE18,\\n        bool toRetire\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            uint256 feeDistributionTotal,\\n            FeeDistribution memory feeDistribution\\n        )\\n    {\\n        onlyUnpaused();\\n        // Calculating fees for retiring is not supported yet\\n        require(!toRetire, Errors.CP_NOT_SUPPORTED);\\n        // Calculating fees for multi-ERC1155 redemptions is not supported yet\\n        uint256 vintageLength = vintages.length;\\n        require(vintageLength == 1, Errors.CP_NOT_SUPPORTED);\\n        _checkLength(vintageLength, amountsE18.length);\\n\\n        // If the fee calculator is not configured or the caller is exempted, no fees are paid\\n        if (\\n            address(feeCalculator) == address(0) ||\\n            redeemFeeExemptedAddresses[msg.sender]\\n        ) {\\n            return (0, FeeDistribution(new address[](0), new uint256[](0)));\\n        }\\n\\n        address[] memory erc1155s = new address[](vintageLength);\\n        uint256[] memory tokenIds = new uint256[](vintageLength);\\n        for (uint256 i = 0; i < vintageLength; i++) {\\n            erc1155s[i] = vintages[i].tokenAddress;\\n            tokenIds[i] = vintages[i].erc1155VintageTokenId;\\n        }\\n\\n        feeDistribution = feeCalculator.calculateRedemptionFees(\\n            address(this),\\n            erc1155s,\\n            tokenIds,\\n            amountsE18\\n        );\\n        feeDistributionTotal = getFeeDistributionTotal(feeDistribution);\\n    }\\n\\n    /// @notice Deposit function for pool that accepts ERC1155 vintages and mints pool token 1:1\\n    /// @param erc1155 ERC1155 contract address\\n    /// @param tokenId id representing the vintage\\n    /// @param amount Amount of ERC-1155 tokens to be deposited (0 decimals)\\n    /// @param maxFee Maximum pool token fee to be paid for the deposit. This value cannot be zero.\\n    /// Use `calculateDepositFees(erc1155,tokenId,amount)` to determine the fee that will be charged\\n    /// given the state of the pool during this call. Add a buffer on top of the returned\\n    /// fee amount up to the maximum fee you are willing to pay. (18 decimals)\\n    /// @dev Eligibility of the ERC1155 token to be deposited is checked via `checkEligible`\\n    /// @return mintedPoolTokenAmount Amount of pool tokens minted to the caller\\n    function deposit(\\n        address erc1155,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint256 maxFee\\n    ) external returns (uint256 mintedPoolTokenAmount) {\\n        if (address(feeCalculator) != address(0)) {\\n            require(maxFee != 0, Errors.CP_INVALID_MAX_FEE);\\n        }\\n        PoolVintageToken memory pvToken = _buildPoolVintageToken(\\n            erc1155,\\n            tokenId\\n        );\\n        return _deposit(pvToken, _poolTokenAmount(amount), maxFee);\\n    }\\n\\n    /// @notice Redeem ERC1155 vintages for pool tokens 1:1 minus fees\\n    /// The amounts provided are the exact amounts of ERC1155 vintages to be redeemed.\\n    /// @param erc1155s ERC1155 contract address\\n    /// @param tokenIds id representing the vintage\\n    /// @param amounts Array of ERC-1155 token amounts to redeem (0 decimals)\\n    /// The indexes of this array are matching 1:1 with the erc1155s array.\\n    /// @param maxFee Maximum pool token fee to be paid for the redemption. This value cannot be zero.\\n    /// Use `calculateRedemptionOutFees(erc1155,tokenIds,amounts,false)` to determine the fee that will\\n    /// be charged given the state of the pool during this call. Add a buffer on top of the\\n    /// returned fee amount up to the maximum fee you are willing to pay. (18 decimals)\\n    /// @return poolAmountSpent The amount of pool tokens spent by the caller\\n    function redeemOutMany(\\n        address[] memory erc1155s,\\n        uint256[] memory tokenIds,\\n        uint256[] memory amounts,\\n        uint256 maxFee\\n    ) external virtual returns (uint256 poolAmountSpent) {\\n        if (address(feeCalculator) != address(0)) {\\n            require(maxFee != 0, Errors.CP_INVALID_MAX_FEE);\\n        }\\n        require(erc1155s.length == 1, Errors.CP_NOT_SUPPORTED);\\n        PoolVintageToken[] memory vintages = _buildPoolVintageTokens(\\n            erc1155s,\\n            tokenIds\\n        );\\n\\n        (, poolAmountSpent) = _redeemOutMany(\\n            vintages,\\n            _poolTokenAmounts(amounts),\\n            maxFee,\\n            false\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x97e6ca0918d5831abfd5b7ebd65450d60a8f4e29c03d5c5c31511fd66c3d4e28\",\"license\":\"UNLICENSED\"},\"contracts/pools/REDD.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2024 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {IEcoCarbonCredit} from '../interfaces/IEcoCarbonCredit.sol';\\nimport {PoolWithAdjustingERC1155} from './PoolWithAdjustingERC1155.sol';\\n\\n/// @notice REDD pool contract\\ncontract REDD is PoolWithAdjustingERC1155 {\\n    // ----------------------------------------\\n    //      Constants\\n    // ----------------------------------------\\n\\n    /// @dev Version-related parameters. VERSION keeps track of production\\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\\n    /// of a VERSION in our staging environment.\\n    string public constant VERSION = '1.0.0';\\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 2;\\n\\n    // ----------------------------------------\\n    //      Upgradable related functions\\n    // ----------------------------------------\\n\\n    function initialize(address[] calldata accounts, bytes32[] calldata roles)\\n        external\\n        virtual\\n        initializer\\n    {\\n        __Pool_init_unchained(accounts, roles);\\n        __ERC20_init_unchained('REDD', 'REDD');\\n    }\\n\\n    function _projectTokenId(address erc1155, uint256)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return IEcoCarbonCredit(erc1155).projectId();\\n    }\\n}\\n\",\"keccak256\":\"0xe701db7d60c1bc4e6b32aa1a4110a67135f07797f22ba206a5b5deb2169d0637\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b62000156565b6200003260ff62000035565b50565b60008054610100900460ff1615620000ce578160ff1660011480156200006e57506200006c306200014760201b620020501760201c565b155b620000c65760405162461bcd60e51b815260206004820152602e60248201526000805160206200548683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106200012d5760405162461bcd60e51b815260206004820152602e60248201526000805160206200548683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000bd565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b6080516152f86200018e60003960008181610fdd0152818161101d015281816112b0015281816112f0015261137f01526152f86000f3fe60806040526004361061041b5760003560e01c80638662522f1161021e578063ce88b43911610123578063e63ab1e9116100ab578063f2fde38b1161007a578063f2fde38b14610ce6578063f3edb9ec14610d06578063f75991cd14610d26578063f887ea4014610d46578063ffa1ad7414610d6757600080fd5b8063e63ab1e914610c32578063e77be52114610c66578063ec87621c14610c86578063f23a6e6114610cba57600080fd5b8063dd62ed3e116100f2578063dd62ed3e14610bbc578063e07f744c14610bdc578063e0d7cad914610bfc578063e472076b14610c12578063e6085b861461089257600080fd5b8063ce88b43914610b47578063d547741f14610b67578063d6a022b814610b87578063d80e05aa14610b9c57600080fd5b8063a217fddf116101a6578063b00eb9fe11610175578063b00eb9fe14610a81578063b6a3f59a14610aa2578063bab5adc314610ac2578063bc197c8114610ae2578063be46d0d514610b2757600080fd5b8063a217fddf14610a0c578063a457c2d714610a21578063a9059cbb14610a41578063ad17b00f14610a6157600080fd5b806391d14854116101ed57806391d148541461095c57806395d89b411461097c578063963ff55e1461099157806398010565146109b1578063a1631e4b146109df57600080fd5b80638662522f146108e75780638c66d04f146109075780638da5cb5b146109275780638f770ad01461094557600080fd5b8063366d1624116103245780635fadcc1e116102ac57806370a082311161027b57806370a0823114610847578063715018a61461087d5780637332d0361461089257806379255ddd146108b25780638456cb59146108d257600080fd5b80635fadcc1e146107b95780636a55fff5146107f25780636ca0b0d7146108125780636dbb31021461082757600080fd5b80634642547b116102f35780634642547b1461073957806348c21d56146107595780634f1ef2861461077957806352d1902d1461078c5780635c975abb146107a157600080fd5b8063366d1624146106c457806339509351146106e45780633ebc2df1146107045780633f4ba83a1461072457600080fd5b8063248a9ca3116103a75780632cddcdd5116103765780632cddcdd5146106305780632f2ff15d14610650578063313ce5671461067057806336568abe146106845780633659cfe6146106a457600080fd5b8063248a9ca31461056457806325a760c21461059457806327872012146105bb5780632b540f19146105ff57600080fd5b80630b9fbf45116103ee5780630b9fbf45146104b95780630e2d15ab146104d9578063143a08d41461050a57806318160ddd1461052f57806323b872dd1461054457600080fd5b806301ffc9a71461042057806306fdde0314610455578063095ea7b3146104775780630b7d28c714610497575b600080fd5b34801561042c57600080fd5b5061044061043b366004614213565b610d98565b60405190151581526020015b60405180910390f35b34801561046157600080fd5b5061046a610da9565b60405161044c9190614269565b34801561048357600080fd5b506104406104923660046142b1565b610e3b565b3480156104a357600080fd5b506104b76104b23660046142dd565b610e53565b005b3480156104c557600080fd5b506104406104d43660046142b1565b610ebe565b3480156104e557600080fd5b506104406104f43660046142dd565b6101a06020526000908152604090205460ff1681565b34801561051657600080fd5b506105216101a65481565b60405190815260200161044c565b34801561053b57600080fd5b50603554610521565b34801561055057600080fd5b5061044061055f3660046142fa565b610edb565b34801561057057600080fd5b5061052161057f36600461433b565b600090815260fb602052604090206001015490565b3480156105a057600080fd5b506101aa5460ff165b60405160ff909116815260200161044c565b3480156105c757600080fd5b506105216105d63660046142b1565b6001600160a01b039190911660009081526101a860209081526040808320938352929052205490565b34801561060b57600080fd5b5061044061061a3660046142dd565b6101a16020526000908152604090205460ff1681565b34801561063c57600080fd5b5061052161064b3660046142b1565b610efe565b34801561065c57600080fd5b506104b761066b366004614354565b610f26565b34801561067c57600080fd5b5060126105a9565b34801561069057600080fd5b506104b761069f366004614354565b610f50565b3480156106b057600080fd5b506104b76106bf3660046142dd565b610fd3565b3480156106d057600080fd5b506105216106df3660046144e7565b6110b2565b3480156106f057600080fd5b506104406106ff3660046142b1565b6110df565b34801561071057600080fd5b506104b761071f3660046142dd565b611101565b34801561073057600080fd5b506104b7611158565b34801561074557600080fd5b506104b76107543660046142dd565b61118b565b34801561076557600080fd5b50610521610774366004614581565b6111eb565b6104b7610787366004614688565b6112a6565b34801561079857600080fd5b50610521611372565b3480156107ad57600080fd5b5060975460ff16610440565b3480156107c557600080fd5b506101a4546107da906001600160a01b031681565b6040516001600160a01b03909116815260200161044c565b3480156107fe57600080fd5b5061052161080d3660046142b1565b611425565b34801561081e57600080fd5b50610521600281565b34801561083357600080fd5b506104b76108423660046142dd565b611495565b34801561085357600080fd5b506105216108623660046142dd565b6001600160a01b031660009081526033602052604090205490565b34801561088957600080fd5b506104b76114f2565b34801561089e57600080fd5b506105216108ad3660046146d7565b611556565b3480156108be57600080fd5b506104b76108cd36600461433b565b611583565b3480156108de57600080fd5b506104b76115fd565b3480156108f357600080fd5b5061044061090236600461470c565b61162e565b34801561091357600080fd5b506104b76109223660046142dd565b6116a3565b34801561093357600080fd5b506065546001600160a01b03166107da565b34801561095157600080fd5b506105216101915481565b34801561096857600080fd5b50610440610977366004614354565b6116fa565b34801561098857600080fd5b5061046a611725565b34801561099d57600080fd5b506107da6109ac36600461433b565b611734565b3480156109bd57600080fd5b506105216109cc36600461433b565b6101a76020526000908152604090205481565b3480156109eb57600080fd5b506109f461175f565b6040516001600160401b03909116815260200161044c565b348015610a1857600080fd5b50610521600081565b348015610a2d57600080fd5b50610440610a3c3660046142b1565b6117d3565b348015610a4d57600080fd5b50610440610a5c3660046142b1565b611859565b348015610a6d57600080fd5b50610521610a7c3660046146d7565b61186e565b348015610a8d57600080fd5b506101a5546107da906001600160a01b031681565b348015610aae57600080fd5b506104b7610abd36600461433b565b61192a565b348015610ace57600080fd5b506104b7610add3660046147c8565b6119d1565b348015610aee57600080fd5b50610b0e610afd366004614833565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161044c565b348015610b3357600080fd5b506104b7610b423660046148e0565b611a90565b348015610b5357600080fd5b50610521610b62366004614903565b611b18565b348015610b7357600080fd5b506104b7610b82366004614354565b611b91565b348015610b9357600080fd5b50610521611bb6565b348015610ba857600080fd5b506104b7610bb73660046142dd565b611bcf565b348015610bc857600080fd5b50610521610bd736600461493e565b611c29565b348015610be857600080fd5b506104b7610bf73660046142dd565b611c54565b348015610c0857600080fd5b5061052161271081565b348015610c1e57600080fd5b50610521610c2d3660046144e7565b611cec565b348015610c3e57600080fd5b506105217f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610c7257600080fd5b506104b7610c8136600461496c565b611d1e565b348015610c9257600080fd5b506105217f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b348015610cc657600080fd5b50610b0e610cd5366004614a05565b63f23a6e6160e01b95945050505050565b348015610cf257600080fd5b506104b7610d013660046142dd565b611f20565b348015610d1257600080fd5b50610440610d2136600461470c565b611fe8565b348015610d3257600080fd5b50610440610d4136600461470c565b61201c565b348015610d5257600080fd5b506101a2546107da906001600160a01b031681565b348015610d7357600080fd5b5061046a604051806040016040528060058152602001640312e302e360dc1b81525081565b6000610da38261205f565b92915050565b606060368054610db890614a6d565b80601f0160208091040260200160405190810160405280929190818152602001828054610de490614a6d565b8015610e315780601f10610e0657610100808354040283529160200191610e31565b820191906000526020600020905b815481529060010190602001808311610e1457829003601f168201915b5050505050905090565b600033610e49818585612094565b5060019392505050565b610e5b6121b8565b6001600160a01b03811660008181526101a06020908152604091829020805460ff191660019081179091558251938452908301527f9243c023afac8831ce7d7574176d51e9cbdff271c07285080839f677ff57a6b491015b60405180910390a150565b6000610ed2610ecd848461220e565b61226e565b50600192915050565b6000610ee683612322565b610ef18484846123a5565b50600190505b9392505050565b60006101a76000610f0f85856123be565b815260200190815260200160002054905092915050565b600082815260fb6020526040902060010154610f41816123fe565b610f4b8383612408565b505050565b6001600160a01b0381163314610fc55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610fcf828261248e565b5050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361101b5760405162461bcd60e51b8152600401610fbc90614aa7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661106460008051602061527c833981519152546001600160a01b031690565b6001600160a01b03161461108a5760405162461bcd60e51b8152600401610fbc90614af3565b611093816124f5565b604080516000808252602082019092526110af918391906124fd565b50565b6000806110bf8686612668565b90506110d4816110ce86612765565b85612811565b509695505050505050565b600033610e498185856110f28383611c29565b6110fc9190614b55565b612094565b6111096121b8565b6101a480546001600160a01b0319166001600160a01b0383169081179091556040519081527fcc693712a2055d921e821f24fea7e18faff35a4e741d180badc0b05a0c275e6a90602001610eb3565b6111817f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a612ae3565b611189612b49565b565b6111936121b8565b6001600160a01b03811660008181526101a060209081526040808320805460ff191690558051938452908301919091527f9243c023afac8831ce7d7574176d51e9cbdff271c07285080839f677ff57a6b49101610eb3565b6101a5546000906001600160a01b031615611239576040805180820190915260028152611a9960f11b6020820152826112375760405162461bcd60e51b8152600401610fbc9190614269565b505b845160011460405180604001604052806002815260200161353360f01b815250906112775760405162461bcd60e51b8152600401610fbc9190614269565b5060006112848686612668565b905061129b8161129386612765565b856000612bdc565b979650505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036112ee5760405162461bcd60e51b8152600401610fbc90614aa7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661133760008051602061527c833981519152546001600160a01b031690565b6001600160a01b03161461135d5760405162461bcd60e51b8152600401610fbc90614af3565b611366826124f5565b610fcf828260016124fd565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114125760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610fbc565b5060008051602061527c83398151915290565b604051627eeac760e11b8152306004820152602481018290526000906001600160a01b0384169062fdd58e90604401602060405180830381865afa158015611471573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef79190614b6d565b61149d6121b8565b6001600160a01b03811660008181526101a16020908152604091829020805460ff1916600117905590519182527fbfe78aa03afab7296923112293cb902a2fe6df5a6d3d81e1933c652c4cf860f49101610eb3565b6065546001600160a01b0316331461154c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610fbc565b6111896000612d5c565b6000611560612dae565b61157b61156d858561220e565b61157684612dee565b612e1c565b949350505050565b61158b6121b8565b604080518082019091526002815261031360f41b602082015261271082106115c65760405162461bcd60e51b8152600401610fbc9190614269565b5061019e8190556040518181527fb53960c69c6a03b9c2457d50976610ab54438aea64f693512228035729dde0e990602001610eb3565b6116267f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a612ae3565b611189612e93565b6101a454604051638662522f60e01b81526000916001600160a01b031690638662522f906116629086908690600401614b86565b602060405180830381865afa15801561167f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef79190614bb5565b6116ab6121b8565b6101a580546001600160a01b0319166001600160a01b0383169081179091556040519081527f3e762c7e655633ce63121393b9694f9ca1883d14d18f48f1be55e5dc7a9fb6c190602001610eb3565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060378054610db890614a6d565b610194818154811061174557600080fd5b6000918252602090912001546001600160a01b0316905081565b6101a4546040805163a1631e4b60e01b815290516000926001600160a01b03169163a1631e4b9160048083019260209291908290030181865afa1580156117aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ce9190614bd2565b905090565b600033816117e18286611c29565b9050838110156118415760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610fbc565b61184e8286868403612094565b506001949350505050565b600061186483612322565b610e498383612f0e565b6000611878612dae565b6101a5546001600160a01b031661189157506000610ef7565b6101a5546000906001600160a01b031663927542743087876118b288612dee565b6040518563ffffffff1660e01b81526004016118d19493929190614bfb565b600060405180830381865afa1580156118ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119169190810190614c7f565b905061192181612f1c565b95945050505050565b6119326121b8565b6101aa546000906119479060ff166012614d6c565b61195290600a614e73565b905061195e8183614e98565b15611993576040805180820182526002815261036360f41b6020820152905162461bcd60e51b8152610fbc9190600401614269565b6101918290556040518281527f4e44c8be34d12f1b7f56b13b4bbe97e64ca37a91916f86c73412da80c21748e2906020015b60405180910390a15050565b60006119dd6001612f7a565b905080156119f5576000805461ff0019166101001790555b611a0185858585612ffa565b611a43604051806040016040528060048152602001631491511160e21b815250604051806040016040528060048152602001631491511160e21b81525061302c565b8015611a89576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b611a986121b8565b601260ff8216811015611ad5576040805180820182526002815261353960f01b6020820152905162461bcd60e51b8152610fbc9190600401614269565b6101aa805460ff191660ff84169081179091556040519081527f28ef430cb4208d917fe1e0206ce3bd7c5a262f04fbcc60b7800af7ac8dce3db0906020016119c5565b6101a5546000906001600160a01b031615611b66576040805180820190915260028152611a9960f11b602082015282611b645760405162461bcd60e51b8152600401610fbc9190614269565b505b6000611b72868661220e565b9050611b8781611b8186612dee565b8561307a565b9695505050505050565b600082815260fb6020526040902060010154611bac816123fe565b610f4b838361248e565b6000611bc160355490565b610191546117ce9190614eac565b611bd76121b8565b6001600160a01b03811660008181526101a16020908152604091829020805460ff1916905590519182527fd1fc9d8986829d0ba9df2bc201a2c76327e0f71567b5a2fb82ba464bf4a03f449101610eb3565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b611c5c6121b8565b604080518082019091526002815261313160f01b60208201526001600160a01b038216611c9c5760405162461bcd60e51b8152600401610fbc9190614269565b5061019d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fe45e1256d720bfcb8dfcc82308efc5ad34e89a7ca19cc500b5c657fcc3359e5590602001610eb3565b6040805180820182526002815261353360f01b6020820152905162461bcd60e51b8152600091610fbc91600401614269565b611d266121b8565b84611d3181856131fa565b611d3b81836131fa565b60005b81811015611f16576000888883818110611d5a57611d5a614ec3565b9050602002016020810190611d6f91906142dd565b90506000878784818110611d8557611d85614ec3565b9050602002013590506000868685818110611da257611da2614ec3565b6001600160a01b03861660009081526101a9602090815260408083208884528252909120549102929092013592505060ff1615611e215760405162461bcd60e51b815260206004820152601960248201527f76696e7461676520616c7265616479206465706f7369746564000000000000006044820152606401610fbc565b604080518082019091526002815261313160f01b60208201526001600160a01b038416611e615760405162461bcd60e51b8152600401610fbc9190614269565b50604080518082019091526002815261353760f01b60208201526064821115611e9d5760405162461bcd60e51b8152600401610fbc9190614269565b506001600160a01b03831660008181526101a8602090815260408083208684528252918290208490558151928352820184905281018290527f91878448ef87c3db4aeb83e60e7deb1240ecae3fd04975ec93547398514cb4ed9060600160405180910390a150505080611f0f90614ed9565b9050611d3e565b5050505050505050565b6065546001600160a01b03163314611f7a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610fbc565b6001600160a01b038116611fdf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610fbc565b6110af81612d5c565b6101a454604051633cfb6e7b60e21b81526000916001600160a01b03169063f3edb9ec906116629086908690600401614b86565b6101a45460405163f75991cd60e01b81526000916001600160a01b03169063f75991cd906116629086908690600401614b86565b6001600160a01b03163b151590565b60006001600160e01b03198216630271189760e51b1480610da357506301ffc9a760e01b6001600160e01b0319831614610da3565b6001600160a01b0383166120f65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610fbc565b6001600160a01b0382166121575760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610fbc565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b336121cb6065546001600160a01b031690565b6001600160a01b03161460405180604001604052806002815260200161062760f31b815250906110af5760405162461bcd60e51b8152600401610fbc9190614269565b61223b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6040518060600160405280846001600160a01b0316815260200183815260200161226585856123be565b90529392505050565b6101a45481516020830151604051635eb2324760e11b81526000936001600160a01b03169263bd64648e926122b9926004016001600160a01b03929092168252602082015260400190565b600060405180830381865afa1580156122d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122fe9190810190614ef2565b805190915015610fcf578060405162461bcd60e51b8152600401610fbc9190614269565b604080518082019091526002815261313960f01b60208201526001600160a01b0382166123625760405162461bcd60e51b8152600401610fbc9190614269565b50604080518082019091526002815261032360f41b60208201526001600160a01b0382163003610fcf5760405162461bcd60e51b8152600401610fbc9190614269565b6000336123b3858285613231565b61184e8585856132a5565b6000826001600160a01b0316633fafa1276040518163ffffffff1660e01b8152600401602060405180830381865afa158015611471573d6000803e3d6000fd5b6110af813361347e565b61241282826116fa565b610fcf57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561244a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61249882826116fa565b15610fcf57600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6110af6121b8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561253057610f4b836134e2565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561258a575060408051601f3d908101601f1916820190925261258791810190614b6d565b60015b6125ed5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610fbc565b60008051602061527c833981519152811461265c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610fbc565b50610f4b83838361357e565b8151606090806001600160401b0381111561268557612685614384565b6040519080825280602002602001820160405280156126e357816020015b6126d0604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816126a35790505b50915060005b8181101561275d5761272d85828151811061270657612706614ec3565b602002602001015185838151811061272057612720614ec3565b602002602001015161220e565b83828151811061273f5761273f614ec3565b6020026020010181905250808061275590614ed9565b9150506126e9565b505092915050565b8051606090806001600160401b0381111561278257612782614384565b6040519080825280602002602001820160405280156127ab578160200160208202803683370190505b50915060005b8181101561280a576127db8482815181106127ce576127ce614ec3565b6020026020010151612dee565b8382815181106127ed576127ed614ec3565b60209081029190910101528061280281614ed9565b9150506127b1565b5050919050565b6000612830604051806040016040528060608152602001606081525090565b612838612dae565b604080518082019091526002815261353360f01b602082015283156128705760405162461bcd60e51b8152600401610fbc9190614269565b508451604080518082019091526002815261353360f01b6020820152600182146128ad5760405162461bcd60e51b8152600401610fbc9190614269565b506128b98186516131fa565b6101a5546001600160a01b031615806128e257503360009081526101a0602052604090205460ff165b1561291957505060408051600081830181815260608301845282528251818152602080820190945292820192909252909150612adb565b6000816001600160401b0381111561293357612933614384565b60405190808252806020026020018201604052801561295c578160200160208202803683370190505b5090506000826001600160401b0381111561297957612979614384565b6040519080825280602002602001820160405280156129a2578160200160208202803683370190505b50905060005b83811015612a4d578881815181106129c2576129c2614ec3565b6020026020010151600001518382815181106129e0576129e0614ec3565b60200260200101906001600160a01b031690816001600160a01b031681525050888181518110612a1257612a12614ec3565b602002602001015160200151828281518110612a3057612a30614ec3565b602090810291909101015280612a4581614ed9565b9150506129a8565b506101a5546040516339089a4b60e11b81526001600160a01b0390911690637211349690612a85903090869086908d90600401614f9a565b600060405180830381865afa158015612aa2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612aca9190810190614c7f565b9350612ad584612f1c565b94505050505b935093915050565b612aed81336116fa565b80612b11575033612b066065546001600160a01b031690565b6001600160a01b0316145b604051806040016040528060018152602001603160f81b81525090610fcf5760405162461bcd60e51b8152600401610fbc9190614269565b60975460ff16612b925760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610fbc565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60606000612be8612dae565b85518551612bf79082906131fa565b8315612c4257806001600160401b03811115612c1557612c15614384565b604051908082528060200260200182016040528015612c3e578160200160208202803683370190505b5092505b600080612c50898988612811565b91509150612c5e87836135a3565b612c688285614b55565b93508115612c8257612c82816000015182602001516135e3565b60005b83811015612d4f57612caf8a8281518110612ca257612ca2614ec3565b602002602001015161226e565b6000898281518110612cc357612cc3614ec3565b60200260200101519050612cf08b8381518110612ce257612ce2614ec3565b602002602001015182613713565b612cfa9087614b55565b95508715612d3e57612d1f8b8381518110612d1757612d17614ec3565b506000919050565b878381518110612d3157612d31614ec3565b6020026020010181815250505b50612d4881614ed9565b9050612c85565b5050505094509492505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff1615604051806040016040528060028152602001610c4d60f21b815250906110af5760405162461bcd60e51b8152600401610fbc9190614269565b6101aa54600090601290612e059060ff1682614d6c565b9050612e1281600a614e73565b610ef79084615013565b81516001600160a01b031660009081526101a8602090815260408083208286015184528252808320548151808301909252600282526106a760f31b9282019290925281612e7c5760405162461bcd60e51b8152600401610fbc9190614269565b506064612e898285615013565b61157b9190615032565b60975460ff1615612ed95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610fbc565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612bbf3390565b600033610e498185856132a5565b80515160208201515160009190612f349082906131fa565b60005b8181101561280a5783602001518181518110612f5557612f55614ec3565b602002602001015183612f689190614b55565b9250612f7381614ed9565b9050612f37565b60008054610100900460ff1615612fb9578160ff166001148015612f9d5750303b155b612d175760405162461bcd60e51b8152600401610fbc90615046565b60005460ff808416911610612fe05760405162461bcd60e51b8152600401610fbc90615046565b506000805460ff191660ff92909216919091179055600190565b61300261374d565b61300a613774565b6130126137a4565b61301a61374d565b613026848484846137d7565b50505050565b600054610100900460ff166130535760405162461bcd60e51b8152600401610fbc90615094565b815161306690603690602085019061417a565b508051610f4b90603790602084019061417a565b6000613084612dae565b61308d8461226e565b6000613097611bb6565b9050806000036130d05760408051808201825260018152603360f81b6020820152905162461bcd60e51b8152610fbc9190600401614269565b808411156130dc578093505b6101a55484906000906001600160a01b0316156131c25760006130ff88846138f2565b905061310a81612f1c565b915061311686836135a3565b6131208284614eac565b81515190935060005b81811015613185576131758360000151828151811061314a5761314a614ec3565b60200260200101518460200151838151811061316857613168614ec3565b6020026020010151613985565b61317e81614ed9565b9050613129565b5060408051338152602081018590527f4658b473764413b8a15e16e464adf1ee318894b37e86cf2fd44a70bca04f6502910160405180910390a150505b6131ce3383838a613a70565b93506131da8787613af9565b6131e687333089613b0b565b6131f08787613ba4565b5050509392505050565b808214610fcf576040805180820182526002815261189960f11b6020820152905162461bcd60e51b8152610fbc9190600401614269565b600061323d8484611c29565b9050600019811461302657818110156132985760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610fbc565b6130268484848403612094565b6001600160a01b0383166133095760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610fbc565b6001600160a01b03821661336b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610fbc565b613376838383613bfd565b6001600160a01b038316600090815260336020526040902054818110156133ee5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610fbc565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290613425908490614b55565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161347191815260200190565b60405180910390a3613026565b61348882826116fa565b610fcf576134a0816001600160a01b03166014613c05565b6134ab836020613c05565b6040516020016134bc9291906150df565b60408051601f198184030181529082905262461bcd60e51b8252610fbc91600401614269565b6001600160a01b0381163b61354f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610fbc565b60008051602061527c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61358783613da0565b6000825111806135945750805b15610f4b576130268383613de0565b8115610fcf57604080518082019091526002815261353160f01b602082015282821115610f4b5760405162461bcd60e51b8152600401610fbc9190614269565b6000805b83518110156136b657600083828151811061360457613604614ec3565b60200260200101519050600061271061019e54836136229190615013565b61362c9190615032565b90506136388183614eac565b91506136448185614b55565b935061366986848151811061365b5761365b614ec3565b602002602001015183611859565b5060408051338152602081018490527f3f89e1d936a29a8de9ae9040436992721a00bc63bbe3ca55692b95f0311640b2910160405180910390a15050806136af90614ed9565b90506135e7565b508015610f4b5761019d546136d4906001600160a01b031682611859565b5060408051338152602081018390527f932bd968974f0b6fa1cb59bf961f81d2e57b39332d311b413dceae17966387db910160405180910390a1505050565b6000613720338385613ecb565b90506137378361373284600019615154565b613af9565b61374383303385613b0b565b610da38383613efe565b600054610100900460ff166111895760405162461bcd60e51b8152600401610fbc90615094565b600054610100900460ff1661379b5760405162461bcd60e51b8152600401610fbc90615094565b61118933612d5c565b600054610100900460ff166137cb5760405162461bcd60e51b8152600401610fbc90615094565b6097805460ff19169055565b82811461381e5760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606401610fbc565b61382661374d565b6000805b848110156138af5761387a84848381811061384757613847614ec3565b9050602002013587878481811061386057613860614ec3565b905060200201602081019061387591906142dd565b612408565b600084848381811061388e5761388e614ec3565b905060200201350361389f57600191505b6138a881614ed9565b905061382a565b5080611a895760405162461bcd60e51b8152602060048201526012602482015271139bc818591b5a5b881cdc1958da599a595960721b6044820152606401610fbc565b60408051808201909152606080825260208201526101a5548351602085015160405163249d509d60e21b81526001600160a01b03909316926392754274926139409230928890600401614bfb565b600060405180830381865afa15801561395d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ef79190810190614c7f565b6001600160a01b0382166139db5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610fbc565b6139e760008383613bfd565b80603560008282546139f99190614b55565b90915550506001600160a01b03821660009081526033602052604081208054839290613a26908490614b55565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b80516001600160a01b031660009081526101a9602090815260408083208285015184529091528120805460ff1916600117905580613aae8486614b55565b90506000613abc8483612e1c565b9050613ac88582614eac565b9250613ad48784613985565b81811015613aef57613aef30613aea8385614eac565b613985565b5050949350505050565b610fcf82613b0683613f43565b613f71565b83600001516001600160a01b031663f242432a84848760200151613b2e86613fb9565b6040516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260a06084820152600060a482015260c401600060405180830381600087803b158015613b9057600080fd5b505af1158015611f16573d6000803e3d6000fd5b7f42fa234691156c87ff89ed9ae178d78cb7d8e64c828f7fa7e3892aa2a1a3ebef82600001518360200151613bd884613fb9565b604080516001600160a01b0390941684526020840192909252908201526060016119c5565b610f4b612dae565b60606000613c14836002615013565b613c1f906002614b55565b6001600160401b03811115613c3657613c36614384565b6040519080825280601f01601f191660200182016040528015613c60576020820181803683370190505b509050600360fc1b81600081518110613c7b57613c7b614ec3565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613caa57613caa614ec3565b60200101906001600160f81b031916908160001a9053506000613cce846002615013565b613cd9906001614b55565b90505b6001811115613d51576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613d0d57613d0d614ec3565b1a60f81b828281518110613d2357613d23614ec3565b60200101906001600160f81b031916908160001a90535060049490941c93613d4a816151d9565b9050613cdc565b508315610ef75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610fbc565b613da9816134e2565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613e485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610fbc565b600080846001600160a01b031684604051613e6391906151f0565b600060405180830381855af49150503d8060008114613e9e576040519150601f19603f3d011682016040523d82523d6000602084013e613ea3565b606091505b5091509150611921828260405180606001604052806027815260200161529c60279139613fe7565b6000613ed78284612e1c565b9050613ee38482614020565b80831115610ef757610ef730613ef98386614eac565b614020565b7fb404e45f295d886798376935d5d46a49070234b42fd1699345e9444fcdbf9db43383600001518460200151613f3385613fb9565b6040516119c59493929190614bfb565b6101aa54600090601290613f5a9060ff1682614d6c565b9050613f6781600a614e73565b610ef7908461520c565b60408083015160009081526101a76020522054613f8e828261523a565b60408085015160009081526101a760205220556101a654613fb090839061523a565b6101a655505050565b6101aa54600090601290613fd09060ff1682614d6c565b9050613fdd81600a614e73565b610ef79084615032565b60608315613ff6575081610ef7565b8251156140065782518084602001fd5b8160405162461bcd60e51b8152600401610fbc9190614269565b6001600160a01b0382166140805760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610fbc565b61408c82600083613bfd565b6001600160a01b038216600090815260336020526040902054818110156141005760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610fbc565b6001600160a01b038316600090815260336020526040812083830390556035805484929061412f908490614eac565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b82805461418690614a6d565b90600052602060002090601f0160209004810192826141a857600085556141ee565b82601f106141c157805160ff19168380011785556141ee565b828001600101855582156141ee579182015b828111156141ee5782518255916020019190600101906141d3565b506141fa9291506141fe565b5090565b5b808211156141fa57600081556001016141ff565b60006020828403121561422557600080fd5b81356001600160e01b031981168114610ef757600080fd5b60005b83811015614258578181015183820152602001614240565b838111156130265750506000910152565b602081526000825180602084015261428881604085016020870161423d565b601f01601f19169190910160400192915050565b6001600160a01b03811681146110af57600080fd5b600080604083850312156142c457600080fd5b82356142cf8161429c565b946020939093013593505050565b6000602082840312156142ef57600080fd5b8135610ef78161429c565b60008060006060848603121561430f57600080fd5b833561431a8161429c565b9250602084013561432a8161429c565b929592945050506040919091013590565b60006020828403121561434d57600080fd5b5035919050565b6000806040838503121561436757600080fd5b8235915060208301356143798161429c565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156143bc576143bc614384565b60405290565b604051601f8201601f191681016001600160401b03811182821017156143ea576143ea614384565b604052919050565b60006001600160401b0382111561440b5761440b614384565b5060051b60200190565b600082601f83011261442657600080fd5b8135602061443b614436836143f2565b6143c2565b82815260059290921b8401810191818101908684111561445a57600080fd5b8286015b848110156110d45780356144718161429c565b835291830191830161445e565b600082601f83011261448f57600080fd5b8135602061449f614436836143f2565b82815260059290921b840181019181810190868411156144be57600080fd5b8286015b848110156110d457803583529183019183016144c2565b80151581146110af57600080fd5b600080600080608085870312156144fd57600080fd5b84356001600160401b038082111561451457600080fd5b61452088838901614415565b9550602087013591508082111561453657600080fd5b6145428883890161447e565b9450604087013591508082111561455857600080fd5b506145658782880161447e565b9250506060850135614576816144d9565b939692955090935050565b6000806000806080858703121561459757600080fd5b84356001600160401b03808211156145ae57600080fd5b6145ba88838901614415565b955060208701359150808211156145d057600080fd5b6145dc8883890161447e565b945060408701359150808211156145f257600080fd5b506145ff8782880161447e565b949793965093946060013593505050565b60006001600160401b0382111561462957614629614384565b50601f01601f191660200190565b600082601f83011261464857600080fd5b813561465661443682614610565b81815284602083860101111561466b57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561469b57600080fd5b82356146a68161429c565b915060208301356001600160401b038111156146c157600080fd5b6146cd85828601614637565b9150509250929050565b6000806000606084860312156146ec57600080fd5b83356146f78161429c565b95602085013595506040909401359392505050565b6000806020838503121561471f57600080fd5b82356001600160401b038082111561473657600080fd5b818501915085601f83011261474a57600080fd5b81358181111561475957600080fd5b86602082850101111561476b57600080fd5b60209290920196919550909350505050565b60008083601f84011261478f57600080fd5b5081356001600160401b038111156147a657600080fd5b6020830191508360208260051b85010111156147c157600080fd5b9250929050565b600080600080604085870312156147de57600080fd5b84356001600160401b03808211156147f557600080fd5b6148018883890161477d565b9096509450602087013591508082111561481a57600080fd5b506148278782880161477d565b95989497509550505050565b600080600080600060a0868803121561484b57600080fd5b85356148568161429c565b945060208601356148668161429c565b935060408601356001600160401b038082111561488257600080fd5b61488e89838a0161447e565b945060608801359150808211156148a457600080fd5b6148b089838a0161447e565b935060808801359150808211156148c657600080fd5b506148d388828901614637565b9150509295509295909350565b6000602082840312156148f257600080fd5b813560ff81168114610ef757600080fd5b6000806000806080858703121561491957600080fd5b84356149248161429c565b966020860135965060408601359560600135945092505050565b6000806040838503121561495157600080fd5b823561495c8161429c565b915060208301356143798161429c565b6000806000806000806060878903121561498557600080fd5b86356001600160401b038082111561499c57600080fd5b6149a88a838b0161477d565b909850965060208901359150808211156149c157600080fd5b6149cd8a838b0161477d565b909650945060408901359150808211156149e657600080fd5b506149f389828a0161477d565b979a9699509497509295939492505050565b600080600080600060a08688031215614a1d57600080fd5b8535614a288161429c565b94506020860135614a388161429c565b9350604086013592506060860135915060808601356001600160401b03811115614a6157600080fd5b6148d388828901614637565b600181811c90821680614a8157607f821691505b602082108103614aa157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115614b6857614b68614b3f565b500190565b600060208284031215614b7f57600080fd5b5051919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215614bc757600080fd5b8151610ef7816144d9565b600060208284031215614be457600080fd5b81516001600160401b0381168114610ef757600080fd5b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b600082601f830112614c3557600080fd5b81516020614c45614436836143f2565b82815260059290921b84018101918181019086841115614c6457600080fd5b8286015b848110156110d45780518352918301918301614c68565b60006020808385031215614c9257600080fd5b82516001600160401b0380821115614ca957600080fd5b9084019060408287031215614cbd57600080fd5b614cc561439a565b825182811115614cd457600080fd5b8301601f81018813614ce557600080fd5b8051614cf3614436826143f2565b81815260059190911b8201860190868101908a831115614d1257600080fd5b928701925b82841015614d39578351614d2a8161429c565b82529287019290870190614d17565b84525050508284015182811115614d4f57600080fd5b614d5b88828601614c24565b948201949094529695505050505050565b600060ff821660ff841680821015614d8657614d86614b3f565b90039392505050565b600181815b80851115614dca578160001904821115614db057614db0614b3f565b80851615614dbd57918102915b93841c9390800290614d94565b509250929050565b600082614de157506001610da3565b81614dee57506000610da3565b8160018114614e045760028114614e0e57614e2a565b6001915050610da3565b60ff841115614e1f57614e1f614b3f565b50506001821b610da3565b5060208310610133831016604e8410600b8410161715614e4d575081810a610da3565b614e578383614d8f565b8060001904821115614e6b57614e6b614b3f565b029392505050565b6000610ef760ff841683614dd2565b634e487b7160e01b600052601260045260246000fd5b600082614ea757614ea7614e82565b500690565b600082821015614ebe57614ebe614b3f565b500390565b634e487b7160e01b600052603260045260246000fd5b600060018201614eeb57614eeb614b3f565b5060010190565b600060208284031215614f0457600080fd5b81516001600160401b03811115614f1a57600080fd5b8201601f81018413614f2b57600080fd5b8051614f3961443682614610565b818152856020838501011115614f4e57600080fd5b61192182602083016020860161423d565b600081518084526020808501945080840160005b83811015614f8f57815187529582019590820190600101614f73565b509495945050505050565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b81811015614fe8578551851683529483019491830191600101614fca565b50508581036040870152614ffc8189614f5f565b9350505050828103606084015261129b8185614f5f565b600081600019048311821515161561502d5761502d614b3f565b500290565b60008261504157615041614e82565b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161511781601785016020880161423d565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161514881602884016020880161423d565b01602801949350505050565b60006001600160ff1b038184138284138082168684048611161561517a5761517a614b3f565b600160ff1b600087128281168783058912161561519957615199614b3f565b600087129250878205871284841616156151b5576151b5614b3f565b878505871281841616156151cb576151cb614b3f565b505050929093029392505050565b6000816151e8576151e8614b3f565b506000190190565b6000825161520281846020870161423d565b9190910192915050565b60008261521b5761521b614e82565b600160ff1b82146000198414161561523557615235614b3f565b500590565b600080821280156001600160ff1b038490038513161561525c5761525c614b3f565b600160ff1b839003841281161561527557615275614b3f565b5050019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204f8153f734620632288f001d7ba510ee70af80c25468e38c337679b4f17d0e5764736f6c634300080e0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x60806040526004361061041b5760003560e01c80638662522f1161021e578063ce88b43911610123578063e63ab1e9116100ab578063f2fde38b1161007a578063f2fde38b14610ce6578063f3edb9ec14610d06578063f75991cd14610d26578063f887ea4014610d46578063ffa1ad7414610d6757600080fd5b8063e63ab1e914610c32578063e77be52114610c66578063ec87621c14610c86578063f23a6e6114610cba57600080fd5b8063dd62ed3e116100f2578063dd62ed3e14610bbc578063e07f744c14610bdc578063e0d7cad914610bfc578063e472076b14610c12578063e6085b861461089257600080fd5b8063ce88b43914610b47578063d547741f14610b67578063d6a022b814610b87578063d80e05aa14610b9c57600080fd5b8063a217fddf116101a6578063b00eb9fe11610175578063b00eb9fe14610a81578063b6a3f59a14610aa2578063bab5adc314610ac2578063bc197c8114610ae2578063be46d0d514610b2757600080fd5b8063a217fddf14610a0c578063a457c2d714610a21578063a9059cbb14610a41578063ad17b00f14610a6157600080fd5b806391d14854116101ed57806391d148541461095c57806395d89b411461097c578063963ff55e1461099157806398010565146109b1578063a1631e4b146109df57600080fd5b80638662522f146108e75780638c66d04f146109075780638da5cb5b146109275780638f770ad01461094557600080fd5b8063366d1624116103245780635fadcc1e116102ac57806370a082311161027b57806370a0823114610847578063715018a61461087d5780637332d0361461089257806379255ddd146108b25780638456cb59146108d257600080fd5b80635fadcc1e146107b95780636a55fff5146107f25780636ca0b0d7146108125780636dbb31021461082757600080fd5b80634642547b116102f35780634642547b1461073957806348c21d56146107595780634f1ef2861461077957806352d1902d1461078c5780635c975abb146107a157600080fd5b8063366d1624146106c457806339509351146106e45780633ebc2df1146107045780633f4ba83a1461072457600080fd5b8063248a9ca3116103a75780632cddcdd5116103765780632cddcdd5146106305780632f2ff15d14610650578063313ce5671461067057806336568abe146106845780633659cfe6146106a457600080fd5b8063248a9ca31461056457806325a760c21461059457806327872012146105bb5780632b540f19146105ff57600080fd5b80630b9fbf45116103ee5780630b9fbf45146104b95780630e2d15ab146104d9578063143a08d41461050a57806318160ddd1461052f57806323b872dd1461054457600080fd5b806301ffc9a71461042057806306fdde0314610455578063095ea7b3146104775780630b7d28c714610497575b600080fd5b34801561042c57600080fd5b5061044061043b366004614213565b610d98565b60405190151581526020015b60405180910390f35b34801561046157600080fd5b5061046a610da9565b60405161044c9190614269565b34801561048357600080fd5b506104406104923660046142b1565b610e3b565b3480156104a357600080fd5b506104b76104b23660046142dd565b610e53565b005b3480156104c557600080fd5b506104406104d43660046142b1565b610ebe565b3480156104e557600080fd5b506104406104f43660046142dd565b6101a06020526000908152604090205460ff1681565b34801561051657600080fd5b506105216101a65481565b60405190815260200161044c565b34801561053b57600080fd5b50603554610521565b34801561055057600080fd5b5061044061055f3660046142fa565b610edb565b34801561057057600080fd5b5061052161057f36600461433b565b600090815260fb602052604090206001015490565b3480156105a057600080fd5b506101aa5460ff165b60405160ff909116815260200161044c565b3480156105c757600080fd5b506105216105d63660046142b1565b6001600160a01b039190911660009081526101a860209081526040808320938352929052205490565b34801561060b57600080fd5b5061044061061a3660046142dd565b6101a16020526000908152604090205460ff1681565b34801561063c57600080fd5b5061052161064b3660046142b1565b610efe565b34801561065c57600080fd5b506104b761066b366004614354565b610f26565b34801561067c57600080fd5b5060126105a9565b34801561069057600080fd5b506104b761069f366004614354565b610f50565b3480156106b057600080fd5b506104b76106bf3660046142dd565b610fd3565b3480156106d057600080fd5b506105216106df3660046144e7565b6110b2565b3480156106f057600080fd5b506104406106ff3660046142b1565b6110df565b34801561071057600080fd5b506104b761071f3660046142dd565b611101565b34801561073057600080fd5b506104b7611158565b34801561074557600080fd5b506104b76107543660046142dd565b61118b565b34801561076557600080fd5b50610521610774366004614581565b6111eb565b6104b7610787366004614688565b6112a6565b34801561079857600080fd5b50610521611372565b3480156107ad57600080fd5b5060975460ff16610440565b3480156107c557600080fd5b506101a4546107da906001600160a01b031681565b6040516001600160a01b03909116815260200161044c565b3480156107fe57600080fd5b5061052161080d3660046142b1565b611425565b34801561081e57600080fd5b50610521600281565b34801561083357600080fd5b506104b76108423660046142dd565b611495565b34801561085357600080fd5b506105216108623660046142dd565b6001600160a01b031660009081526033602052604090205490565b34801561088957600080fd5b506104b76114f2565b34801561089e57600080fd5b506105216108ad3660046146d7565b611556565b3480156108be57600080fd5b506104b76108cd36600461433b565b611583565b3480156108de57600080fd5b506104b76115fd565b3480156108f357600080fd5b5061044061090236600461470c565b61162e565b34801561091357600080fd5b506104b76109223660046142dd565b6116a3565b34801561093357600080fd5b506065546001600160a01b03166107da565b34801561095157600080fd5b506105216101915481565b34801561096857600080fd5b50610440610977366004614354565b6116fa565b34801561098857600080fd5b5061046a611725565b34801561099d57600080fd5b506107da6109ac36600461433b565b611734565b3480156109bd57600080fd5b506105216109cc36600461433b565b6101a76020526000908152604090205481565b3480156109eb57600080fd5b506109f461175f565b6040516001600160401b03909116815260200161044c565b348015610a1857600080fd5b50610521600081565b348015610a2d57600080fd5b50610440610a3c3660046142b1565b6117d3565b348015610a4d57600080fd5b50610440610a5c3660046142b1565b611859565b348015610a6d57600080fd5b50610521610a7c3660046146d7565b61186e565b348015610a8d57600080fd5b506101a5546107da906001600160a01b031681565b348015610aae57600080fd5b506104b7610abd36600461433b565b61192a565b348015610ace57600080fd5b506104b7610add3660046147c8565b6119d1565b348015610aee57600080fd5b50610b0e610afd366004614833565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161044c565b348015610b3357600080fd5b506104b7610b423660046148e0565b611a90565b348015610b5357600080fd5b50610521610b62366004614903565b611b18565b348015610b7357600080fd5b506104b7610b82366004614354565b611b91565b348015610b9357600080fd5b50610521611bb6565b348015610ba857600080fd5b506104b7610bb73660046142dd565b611bcf565b348015610bc857600080fd5b50610521610bd736600461493e565b611c29565b348015610be857600080fd5b506104b7610bf73660046142dd565b611c54565b348015610c0857600080fd5b5061052161271081565b348015610c1e57600080fd5b50610521610c2d3660046144e7565b611cec565b348015610c3e57600080fd5b506105217f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b348015610c7257600080fd5b506104b7610c8136600461496c565b611d1e565b348015610c9257600080fd5b506105217f241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b0881565b348015610cc657600080fd5b50610b0e610cd5366004614a05565b63f23a6e6160e01b95945050505050565b348015610cf257600080fd5b506104b7610d013660046142dd565b611f20565b348015610d1257600080fd5b50610440610d2136600461470c565b611fe8565b348015610d3257600080fd5b50610440610d4136600461470c565b61201c565b348015610d5257600080fd5b506101a2546107da906001600160a01b031681565b348015610d7357600080fd5b5061046a604051806040016040528060058152602001640312e302e360dc1b81525081565b6000610da38261205f565b92915050565b606060368054610db890614a6d565b80601f0160208091040260200160405190810160405280929190818152602001828054610de490614a6d565b8015610e315780601f10610e0657610100808354040283529160200191610e31565b820191906000526020600020905b815481529060010190602001808311610e1457829003601f168201915b5050505050905090565b600033610e49818585612094565b5060019392505050565b610e5b6121b8565b6001600160a01b03811660008181526101a06020908152604091829020805460ff191660019081179091558251938452908301527f9243c023afac8831ce7d7574176d51e9cbdff271c07285080839f677ff57a6b491015b60405180910390a150565b6000610ed2610ecd848461220e565b61226e565b50600192915050565b6000610ee683612322565b610ef18484846123a5565b50600190505b9392505050565b60006101a76000610f0f85856123be565b815260200190815260200160002054905092915050565b600082815260fb6020526040902060010154610f41816123fe565b610f4b8383612408565b505050565b6001600160a01b0381163314610fc55760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610fcf828261248e565b5050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361101b5760405162461bcd60e51b8152600401610fbc90614aa7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661106460008051602061527c833981519152546001600160a01b031690565b6001600160a01b03161461108a5760405162461bcd60e51b8152600401610fbc90614af3565b611093816124f5565b604080516000808252602082019092526110af918391906124fd565b50565b6000806110bf8686612668565b90506110d4816110ce86612765565b85612811565b509695505050505050565b600033610e498185856110f28383611c29565b6110fc9190614b55565b612094565b6111096121b8565b6101a480546001600160a01b0319166001600160a01b0383169081179091556040519081527fcc693712a2055d921e821f24fea7e18faff35a4e741d180badc0b05a0c275e6a90602001610eb3565b6111817f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a612ae3565b611189612b49565b565b6111936121b8565b6001600160a01b03811660008181526101a060209081526040808320805460ff191690558051938452908301919091527f9243c023afac8831ce7d7574176d51e9cbdff271c07285080839f677ff57a6b49101610eb3565b6101a5546000906001600160a01b031615611239576040805180820190915260028152611a9960f11b6020820152826112375760405162461bcd60e51b8152600401610fbc9190614269565b505b845160011460405180604001604052806002815260200161353360f01b815250906112775760405162461bcd60e51b8152600401610fbc9190614269565b5060006112848686612668565b905061129b8161129386612765565b856000612bdc565b979650505050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036112ee5760405162461bcd60e51b8152600401610fbc90614aa7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661133760008051602061527c833981519152546001600160a01b031690565b6001600160a01b03161461135d5760405162461bcd60e51b8152600401610fbc90614af3565b611366826124f5565b610fcf828260016124fd565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114125760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610fbc565b5060008051602061527c83398151915290565b604051627eeac760e11b8152306004820152602481018290526000906001600160a01b0384169062fdd58e90604401602060405180830381865afa158015611471573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef79190614b6d565b61149d6121b8565b6001600160a01b03811660008181526101a16020908152604091829020805460ff1916600117905590519182527fbfe78aa03afab7296923112293cb902a2fe6df5a6d3d81e1933c652c4cf860f49101610eb3565b6065546001600160a01b0316331461154c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610fbc565b6111896000612d5c565b6000611560612dae565b61157b61156d858561220e565b61157684612dee565b612e1c565b949350505050565b61158b6121b8565b604080518082019091526002815261031360f41b602082015261271082106115c65760405162461bcd60e51b8152600401610fbc9190614269565b5061019e8190556040518181527fb53960c69c6a03b9c2457d50976610ab54438aea64f693512228035729dde0e990602001610eb3565b6116267f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a612ae3565b611189612e93565b6101a454604051638662522f60e01b81526000916001600160a01b031690638662522f906116629086908690600401614b86565b602060405180830381865afa15801561167f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef79190614bb5565b6116ab6121b8565b6101a580546001600160a01b0319166001600160a01b0383169081179091556040519081527f3e762c7e655633ce63121393b9694f9ca1883d14d18f48f1be55e5dc7a9fb6c190602001610eb3565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060378054610db890614a6d565b610194818154811061174557600080fd5b6000918252602090912001546001600160a01b0316905081565b6101a4546040805163a1631e4b60e01b815290516000926001600160a01b03169163a1631e4b9160048083019260209291908290030181865afa1580156117aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ce9190614bd2565b905090565b600033816117e18286611c29565b9050838110156118415760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610fbc565b61184e8286868403612094565b506001949350505050565b600061186483612322565b610e498383612f0e565b6000611878612dae565b6101a5546001600160a01b031661189157506000610ef7565b6101a5546000906001600160a01b031663927542743087876118b288612dee565b6040518563ffffffff1660e01b81526004016118d19493929190614bfb565b600060405180830381865afa1580156118ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119169190810190614c7f565b905061192181612f1c565b95945050505050565b6119326121b8565b6101aa546000906119479060ff166012614d6c565b61195290600a614e73565b905061195e8183614e98565b15611993576040805180820182526002815261036360f41b6020820152905162461bcd60e51b8152610fbc9190600401614269565b6101918290556040518281527f4e44c8be34d12f1b7f56b13b4bbe97e64ca37a91916f86c73412da80c21748e2906020015b60405180910390a15050565b60006119dd6001612f7a565b905080156119f5576000805461ff0019166101001790555b611a0185858585612ffa565b611a43604051806040016040528060048152602001631491511160e21b815250604051806040016040528060048152602001631491511160e21b81525061302c565b8015611a89576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b611a986121b8565b601260ff8216811015611ad5576040805180820182526002815261353960f01b6020820152905162461bcd60e51b8152610fbc9190600401614269565b6101aa805460ff191660ff84169081179091556040519081527f28ef430cb4208d917fe1e0206ce3bd7c5a262f04fbcc60b7800af7ac8dce3db0906020016119c5565b6101a5546000906001600160a01b031615611b66576040805180820190915260028152611a9960f11b602082015282611b645760405162461bcd60e51b8152600401610fbc9190614269565b505b6000611b72868661220e565b9050611b8781611b8186612dee565b8561307a565b9695505050505050565b600082815260fb6020526040902060010154611bac816123fe565b610f4b838361248e565b6000611bc160355490565b610191546117ce9190614eac565b611bd76121b8565b6001600160a01b03811660008181526101a16020908152604091829020805460ff1916905590519182527fd1fc9d8986829d0ba9df2bc201a2c76327e0f71567b5a2fb82ba464bf4a03f449101610eb3565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b611c5c6121b8565b604080518082019091526002815261313160f01b60208201526001600160a01b038216611c9c5760405162461bcd60e51b8152600401610fbc9190614269565b5061019d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fe45e1256d720bfcb8dfcc82308efc5ad34e89a7ca19cc500b5c657fcc3359e5590602001610eb3565b6040805180820182526002815261353360f01b6020820152905162461bcd60e51b8152600091610fbc91600401614269565b611d266121b8565b84611d3181856131fa565b611d3b81836131fa565b60005b81811015611f16576000888883818110611d5a57611d5a614ec3565b9050602002016020810190611d6f91906142dd565b90506000878784818110611d8557611d85614ec3565b9050602002013590506000868685818110611da257611da2614ec3565b6001600160a01b03861660009081526101a9602090815260408083208884528252909120549102929092013592505060ff1615611e215760405162461bcd60e51b815260206004820152601960248201527f76696e7461676520616c7265616479206465706f7369746564000000000000006044820152606401610fbc565b604080518082019091526002815261313160f01b60208201526001600160a01b038416611e615760405162461bcd60e51b8152600401610fbc9190614269565b50604080518082019091526002815261353760f01b60208201526064821115611e9d5760405162461bcd60e51b8152600401610fbc9190614269565b506001600160a01b03831660008181526101a8602090815260408083208684528252918290208490558151928352820184905281018290527f91878448ef87c3db4aeb83e60e7deb1240ecae3fd04975ec93547398514cb4ed9060600160405180910390a150505080611f0f90614ed9565b9050611d3e565b5050505050505050565b6065546001600160a01b03163314611f7a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610fbc565b6001600160a01b038116611fdf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610fbc565b6110af81612d5c565b6101a454604051633cfb6e7b60e21b81526000916001600160a01b03169063f3edb9ec906116629086908690600401614b86565b6101a45460405163f75991cd60e01b81526000916001600160a01b03169063f75991cd906116629086908690600401614b86565b6001600160a01b03163b151590565b60006001600160e01b03198216630271189760e51b1480610da357506301ffc9a760e01b6001600160e01b0319831614610da3565b6001600160a01b0383166120f65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610fbc565b6001600160a01b0382166121575760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610fbc565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b336121cb6065546001600160a01b031690565b6001600160a01b03161460405180604001604052806002815260200161062760f31b815250906110af5760405162461bcd60e51b8152600401610fbc9190614269565b61223b604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b6040518060600160405280846001600160a01b0316815260200183815260200161226585856123be565b90529392505050565b6101a45481516020830151604051635eb2324760e11b81526000936001600160a01b03169263bd64648e926122b9926004016001600160a01b03929092168252602082015260400190565b600060405180830381865afa1580156122d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122fe9190810190614ef2565b805190915015610fcf578060405162461bcd60e51b8152600401610fbc9190614269565b604080518082019091526002815261313960f01b60208201526001600160a01b0382166123625760405162461bcd60e51b8152600401610fbc9190614269565b50604080518082019091526002815261032360f41b60208201526001600160a01b0382163003610fcf5760405162461bcd60e51b8152600401610fbc9190614269565b6000336123b3858285613231565b61184e8585856132a5565b6000826001600160a01b0316633fafa1276040518163ffffffff1660e01b8152600401602060405180830381865afa158015611471573d6000803e3d6000fd5b6110af813361347e565b61241282826116fa565b610fcf57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561244a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61249882826116fa565b15610fcf57600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6110af6121b8565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561253057610f4b836134e2565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561258a575060408051601f3d908101601f1916820190925261258791810190614b6d565b60015b6125ed5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610fbc565b60008051602061527c833981519152811461265c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610fbc565b50610f4b83838361357e565b8151606090806001600160401b0381111561268557612685614384565b6040519080825280602002602001820160405280156126e357816020015b6126d0604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b8152602001906001900390816126a35790505b50915060005b8181101561275d5761272d85828151811061270657612706614ec3565b602002602001015185838151811061272057612720614ec3565b602002602001015161220e565b83828151811061273f5761273f614ec3565b6020026020010181905250808061275590614ed9565b9150506126e9565b505092915050565b8051606090806001600160401b0381111561278257612782614384565b6040519080825280602002602001820160405280156127ab578160200160208202803683370190505b50915060005b8181101561280a576127db8482815181106127ce576127ce614ec3565b6020026020010151612dee565b8382815181106127ed576127ed614ec3565b60209081029190910101528061280281614ed9565b9150506127b1565b5050919050565b6000612830604051806040016040528060608152602001606081525090565b612838612dae565b604080518082019091526002815261353360f01b602082015283156128705760405162461bcd60e51b8152600401610fbc9190614269565b508451604080518082019091526002815261353360f01b6020820152600182146128ad5760405162461bcd60e51b8152600401610fbc9190614269565b506128b98186516131fa565b6101a5546001600160a01b031615806128e257503360009081526101a0602052604090205460ff165b1561291957505060408051600081830181815260608301845282528251818152602080820190945292820192909252909150612adb565b6000816001600160401b0381111561293357612933614384565b60405190808252806020026020018201604052801561295c578160200160208202803683370190505b5090506000826001600160401b0381111561297957612979614384565b6040519080825280602002602001820160405280156129a2578160200160208202803683370190505b50905060005b83811015612a4d578881815181106129c2576129c2614ec3565b6020026020010151600001518382815181106129e0576129e0614ec3565b60200260200101906001600160a01b031690816001600160a01b031681525050888181518110612a1257612a12614ec3565b602002602001015160200151828281518110612a3057612a30614ec3565b602090810291909101015280612a4581614ed9565b9150506129a8565b506101a5546040516339089a4b60e11b81526001600160a01b0390911690637211349690612a85903090869086908d90600401614f9a565b600060405180830381865afa158015612aa2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612aca9190810190614c7f565b9350612ad584612f1c565b94505050505b935093915050565b612aed81336116fa565b80612b11575033612b066065546001600160a01b031690565b6001600160a01b0316145b604051806040016040528060018152602001603160f81b81525090610fcf5760405162461bcd60e51b8152600401610fbc9190614269565b60975460ff16612b925760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610fbc565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60606000612be8612dae565b85518551612bf79082906131fa565b8315612c4257806001600160401b03811115612c1557612c15614384565b604051908082528060200260200182016040528015612c3e578160200160208202803683370190505b5092505b600080612c50898988612811565b91509150612c5e87836135a3565b612c688285614b55565b93508115612c8257612c82816000015182602001516135e3565b60005b83811015612d4f57612caf8a8281518110612ca257612ca2614ec3565b602002602001015161226e565b6000898281518110612cc357612cc3614ec3565b60200260200101519050612cf08b8381518110612ce257612ce2614ec3565b602002602001015182613713565b612cfa9087614b55565b95508715612d3e57612d1f8b8381518110612d1757612d17614ec3565b506000919050565b878381518110612d3157612d31614ec3565b6020026020010181815250505b50612d4881614ed9565b9050612c85565b5050505094509492505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff1615604051806040016040528060028152602001610c4d60f21b815250906110af5760405162461bcd60e51b8152600401610fbc9190614269565b6101aa54600090601290612e059060ff1682614d6c565b9050612e1281600a614e73565b610ef79084615013565b81516001600160a01b031660009081526101a8602090815260408083208286015184528252808320548151808301909252600282526106a760f31b9282019290925281612e7c5760405162461bcd60e51b8152600401610fbc9190614269565b506064612e898285615013565b61157b9190615032565b60975460ff1615612ed95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610fbc565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612bbf3390565b600033610e498185856132a5565b80515160208201515160009190612f349082906131fa565b60005b8181101561280a5783602001518181518110612f5557612f55614ec3565b602002602001015183612f689190614b55565b9250612f7381614ed9565b9050612f37565b60008054610100900460ff1615612fb9578160ff166001148015612f9d5750303b155b612d175760405162461bcd60e51b8152600401610fbc90615046565b60005460ff808416911610612fe05760405162461bcd60e51b8152600401610fbc90615046565b506000805460ff191660ff92909216919091179055600190565b61300261374d565b61300a613774565b6130126137a4565b61301a61374d565b613026848484846137d7565b50505050565b600054610100900460ff166130535760405162461bcd60e51b8152600401610fbc90615094565b815161306690603690602085019061417a565b508051610f4b90603790602084019061417a565b6000613084612dae565b61308d8461226e565b6000613097611bb6565b9050806000036130d05760408051808201825260018152603360f81b6020820152905162461bcd60e51b8152610fbc9190600401614269565b808411156130dc578093505b6101a55484906000906001600160a01b0316156131c25760006130ff88846138f2565b905061310a81612f1c565b915061311686836135a3565b6131208284614eac565b81515190935060005b81811015613185576131758360000151828151811061314a5761314a614ec3565b60200260200101518460200151838151811061316857613168614ec3565b6020026020010151613985565b61317e81614ed9565b9050613129565b5060408051338152602081018590527f4658b473764413b8a15e16e464adf1ee318894b37e86cf2fd44a70bca04f6502910160405180910390a150505b6131ce3383838a613a70565b93506131da8787613af9565b6131e687333089613b0b565b6131f08787613ba4565b5050509392505050565b808214610fcf576040805180820182526002815261189960f11b6020820152905162461bcd60e51b8152610fbc9190600401614269565b600061323d8484611c29565b9050600019811461302657818110156132985760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610fbc565b6130268484848403612094565b6001600160a01b0383166133095760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610fbc565b6001600160a01b03821661336b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610fbc565b613376838383613bfd565b6001600160a01b038316600090815260336020526040902054818110156133ee5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610fbc565b6001600160a01b03808516600090815260336020526040808220858503905591851681529081208054849290613425908490614b55565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161347191815260200190565b60405180910390a3613026565b61348882826116fa565b610fcf576134a0816001600160a01b03166014613c05565b6134ab836020613c05565b6040516020016134bc9291906150df565b60408051601f198184030181529082905262461bcd60e51b8252610fbc91600401614269565b6001600160a01b0381163b61354f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610fbc565b60008051602061527c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61358783613da0565b6000825111806135945750805b15610f4b576130268383613de0565b8115610fcf57604080518082019091526002815261353160f01b602082015282821115610f4b5760405162461bcd60e51b8152600401610fbc9190614269565b6000805b83518110156136b657600083828151811061360457613604614ec3565b60200260200101519050600061271061019e54836136229190615013565b61362c9190615032565b90506136388183614eac565b91506136448185614b55565b935061366986848151811061365b5761365b614ec3565b602002602001015183611859565b5060408051338152602081018490527f3f89e1d936a29a8de9ae9040436992721a00bc63bbe3ca55692b95f0311640b2910160405180910390a15050806136af90614ed9565b90506135e7565b508015610f4b5761019d546136d4906001600160a01b031682611859565b5060408051338152602081018390527f932bd968974f0b6fa1cb59bf961f81d2e57b39332d311b413dceae17966387db910160405180910390a1505050565b6000613720338385613ecb565b90506137378361373284600019615154565b613af9565b61374383303385613b0b565b610da38383613efe565b600054610100900460ff166111895760405162461bcd60e51b8152600401610fbc90615094565b600054610100900460ff1661379b5760405162461bcd60e51b8152600401610fbc90615094565b61118933612d5c565b600054610100900460ff166137cb5760405162461bcd60e51b8152600401610fbc90615094565b6097805460ff19169055565b82811461381e5760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606401610fbc565b61382661374d565b6000805b848110156138af5761387a84848381811061384757613847614ec3565b9050602002013587878481811061386057613860614ec3565b905060200201602081019061387591906142dd565b612408565b600084848381811061388e5761388e614ec3565b905060200201350361389f57600191505b6138a881614ed9565b905061382a565b5080611a895760405162461bcd60e51b8152602060048201526012602482015271139bc818591b5a5b881cdc1958da599a595960721b6044820152606401610fbc565b60408051808201909152606080825260208201526101a5548351602085015160405163249d509d60e21b81526001600160a01b03909316926392754274926139409230928890600401614bfb565b600060405180830381865afa15801561395d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ef79190810190614c7f565b6001600160a01b0382166139db5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610fbc565b6139e760008383613bfd565b80603560008282546139f99190614b55565b90915550506001600160a01b03821660009081526033602052604081208054839290613a26908490614b55565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b80516001600160a01b031660009081526101a9602090815260408083208285015184529091528120805460ff1916600117905580613aae8486614b55565b90506000613abc8483612e1c565b9050613ac88582614eac565b9250613ad48784613985565b81811015613aef57613aef30613aea8385614eac565b613985565b5050949350505050565b610fcf82613b0683613f43565b613f71565b83600001516001600160a01b031663f242432a84848760200151613b2e86613fb9565b6040516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260a06084820152600060a482015260c401600060405180830381600087803b158015613b9057600080fd5b505af1158015611f16573d6000803e3d6000fd5b7f42fa234691156c87ff89ed9ae178d78cb7d8e64c828f7fa7e3892aa2a1a3ebef82600001518360200151613bd884613fb9565b604080516001600160a01b0390941684526020840192909252908201526060016119c5565b610f4b612dae565b60606000613c14836002615013565b613c1f906002614b55565b6001600160401b03811115613c3657613c36614384565b6040519080825280601f01601f191660200182016040528015613c60576020820181803683370190505b509050600360fc1b81600081518110613c7b57613c7b614ec3565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613caa57613caa614ec3565b60200101906001600160f81b031916908160001a9053506000613cce846002615013565b613cd9906001614b55565b90505b6001811115613d51576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613d0d57613d0d614ec3565b1a60f81b828281518110613d2357613d23614ec3565b60200101906001600160f81b031916908160001a90535060049490941c93613d4a816151d9565b9050613cdc565b508315610ef75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610fbc565b613da9816134e2565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613e485760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610fbc565b600080846001600160a01b031684604051613e6391906151f0565b600060405180830381855af49150503d8060008114613e9e576040519150601f19603f3d011682016040523d82523d6000602084013e613ea3565b606091505b5091509150611921828260405180606001604052806027815260200161529c60279139613fe7565b6000613ed78284612e1c565b9050613ee38482614020565b80831115610ef757610ef730613ef98386614eac565b614020565b7fb404e45f295d886798376935d5d46a49070234b42fd1699345e9444fcdbf9db43383600001518460200151613f3385613fb9565b6040516119c59493929190614bfb565b6101aa54600090601290613f5a9060ff1682614d6c565b9050613f6781600a614e73565b610ef7908461520c565b60408083015160009081526101a76020522054613f8e828261523a565b60408085015160009081526101a760205220556101a654613fb090839061523a565b6101a655505050565b6101aa54600090601290613fd09060ff1682614d6c565b9050613fdd81600a614e73565b610ef79084615032565b60608315613ff6575081610ef7565b8251156140065782518084602001fd5b8160405162461bcd60e51b8152600401610fbc9190614269565b6001600160a01b0382166140805760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610fbc565b61408c82600083613bfd565b6001600160a01b038216600090815260336020526040902054818110156141005760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610fbc565b6001600160a01b038316600090815260336020526040812083830390556035805484929061412f908490614eac565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b82805461418690614a6d565b90600052602060002090601f0160209004810192826141a857600085556141ee565b82601f106141c157805160ff19168380011785556141ee565b828001600101855582156141ee579182015b828111156141ee5782518255916020019190600101906141d3565b506141fa9291506141fe565b5090565b5b808211156141fa57600081556001016141ff565b60006020828403121561422557600080fd5b81356001600160e01b031981168114610ef757600080fd5b60005b83811015614258578181015183820152602001614240565b838111156130265750506000910152565b602081526000825180602084015261428881604085016020870161423d565b601f01601f19169190910160400192915050565b6001600160a01b03811681146110af57600080fd5b600080604083850312156142c457600080fd5b82356142cf8161429c565b946020939093013593505050565b6000602082840312156142ef57600080fd5b8135610ef78161429c565b60008060006060848603121561430f57600080fd5b833561431a8161429c565b9250602084013561432a8161429c565b929592945050506040919091013590565b60006020828403121561434d57600080fd5b5035919050565b6000806040838503121561436757600080fd5b8235915060208301356143798161429c565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156143bc576143bc614384565b60405290565b604051601f8201601f191681016001600160401b03811182821017156143ea576143ea614384565b604052919050565b60006001600160401b0382111561440b5761440b614384565b5060051b60200190565b600082601f83011261442657600080fd5b8135602061443b614436836143f2565b6143c2565b82815260059290921b8401810191818101908684111561445a57600080fd5b8286015b848110156110d45780356144718161429c565b835291830191830161445e565b600082601f83011261448f57600080fd5b8135602061449f614436836143f2565b82815260059290921b840181019181810190868411156144be57600080fd5b8286015b848110156110d457803583529183019183016144c2565b80151581146110af57600080fd5b600080600080608085870312156144fd57600080fd5b84356001600160401b038082111561451457600080fd5b61452088838901614415565b9550602087013591508082111561453657600080fd5b6145428883890161447e565b9450604087013591508082111561455857600080fd5b506145658782880161447e565b9250506060850135614576816144d9565b939692955090935050565b6000806000806080858703121561459757600080fd5b84356001600160401b03808211156145ae57600080fd5b6145ba88838901614415565b955060208701359150808211156145d057600080fd5b6145dc8883890161447e565b945060408701359150808211156145f257600080fd5b506145ff8782880161447e565b949793965093946060013593505050565b60006001600160401b0382111561462957614629614384565b50601f01601f191660200190565b600082601f83011261464857600080fd5b813561465661443682614610565b81815284602083860101111561466b57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561469b57600080fd5b82356146a68161429c565b915060208301356001600160401b038111156146c157600080fd5b6146cd85828601614637565b9150509250929050565b6000806000606084860312156146ec57600080fd5b83356146f78161429c565b95602085013595506040909401359392505050565b6000806020838503121561471f57600080fd5b82356001600160401b038082111561473657600080fd5b818501915085601f83011261474a57600080fd5b81358181111561475957600080fd5b86602082850101111561476b57600080fd5b60209290920196919550909350505050565b60008083601f84011261478f57600080fd5b5081356001600160401b038111156147a657600080fd5b6020830191508360208260051b85010111156147c157600080fd5b9250929050565b600080600080604085870312156147de57600080fd5b84356001600160401b03808211156147f557600080fd5b6148018883890161477d565b9096509450602087013591508082111561481a57600080fd5b506148278782880161477d565b95989497509550505050565b600080600080600060a0868803121561484b57600080fd5b85356148568161429c565b945060208601356148668161429c565b935060408601356001600160401b038082111561488257600080fd5b61488e89838a0161447e565b945060608801359150808211156148a457600080fd5b6148b089838a0161447e565b935060808801359150808211156148c657600080fd5b506148d388828901614637565b9150509295509295909350565b6000602082840312156148f257600080fd5b813560ff81168114610ef757600080fd5b6000806000806080858703121561491957600080fd5b84356149248161429c565b966020860135965060408601359560600135945092505050565b6000806040838503121561495157600080fd5b823561495c8161429c565b915060208301356143798161429c565b6000806000806000806060878903121561498557600080fd5b86356001600160401b038082111561499c57600080fd5b6149a88a838b0161477d565b909850965060208901359150808211156149c157600080fd5b6149cd8a838b0161477d565b909650945060408901359150808211156149e657600080fd5b506149f389828a0161477d565b979a9699509497509295939492505050565b600080600080600060a08688031215614a1d57600080fd5b8535614a288161429c565b94506020860135614a388161429c565b9350604086013592506060860135915060808601356001600160401b03811115614a6157600080fd5b6148d388828901614637565b600181811c90821680614a8157607f821691505b602082108103614aa157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115614b6857614b68614b3f565b500190565b600060208284031215614b7f57600080fd5b5051919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215614bc757600080fd5b8151610ef7816144d9565b600060208284031215614be457600080fd5b81516001600160401b0381168114610ef757600080fd5b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b600082601f830112614c3557600080fd5b81516020614c45614436836143f2565b82815260059290921b84018101918181019086841115614c6457600080fd5b8286015b848110156110d45780518352918301918301614c68565b60006020808385031215614c9257600080fd5b82516001600160401b0380821115614ca957600080fd5b9084019060408287031215614cbd57600080fd5b614cc561439a565b825182811115614cd457600080fd5b8301601f81018813614ce557600080fd5b8051614cf3614436826143f2565b81815260059190911b8201860190868101908a831115614d1257600080fd5b928701925b82841015614d39578351614d2a8161429c565b82529287019290870190614d17565b84525050508284015182811115614d4f57600080fd5b614d5b88828601614c24565b948201949094529695505050505050565b600060ff821660ff841680821015614d8657614d86614b3f565b90039392505050565b600181815b80851115614dca578160001904821115614db057614db0614b3f565b80851615614dbd57918102915b93841c9390800290614d94565b509250929050565b600082614de157506001610da3565b81614dee57506000610da3565b8160018114614e045760028114614e0e57614e2a565b6001915050610da3565b60ff841115614e1f57614e1f614b3f565b50506001821b610da3565b5060208310610133831016604e8410600b8410161715614e4d575081810a610da3565b614e578383614d8f565b8060001904821115614e6b57614e6b614b3f565b029392505050565b6000610ef760ff841683614dd2565b634e487b7160e01b600052601260045260246000fd5b600082614ea757614ea7614e82565b500690565b600082821015614ebe57614ebe614b3f565b500390565b634e487b7160e01b600052603260045260246000fd5b600060018201614eeb57614eeb614b3f565b5060010190565b600060208284031215614f0457600080fd5b81516001600160401b03811115614f1a57600080fd5b8201601f81018413614f2b57600080fd5b8051614f3961443682614610565b818152856020838501011115614f4e57600080fd5b61192182602083016020860161423d565b600081518084526020808501945080840160005b83811015614f8f57815187529582019590820190600101614f73565b509495945050505050565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b81811015614fe8578551851683529483019491830191600101614fca565b50508581036040870152614ffc8189614f5f565b9350505050828103606084015261129b8185614f5f565b600081600019048311821515161561502d5761502d614b3f565b500290565b60008261504157615041614e82565b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161511781601785016020880161423d565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161514881602884016020880161423d565b01602801949350505050565b60006001600160ff1b038184138284138082168684048611161561517a5761517a614b3f565b600160ff1b600087128281168783058912161561519957615199614b3f565b600087129250878205871284841616156151b5576151b5614b3f565b878505871281841616156151cb576151cb614b3f565b505050929093029392505050565b6000816151e8576151e8614b3f565b506000190190565b6000825161520281846020870161423d565b9190910192915050565b60008261521b5761521b614e82565b600160ff1b82146000198414161561523557615235614b3f565b500590565b600080821280156001600160ff1b038490038513161561525c5761525c614b3f565b600160ff1b839003841281161561527557615275614b3f565b5050019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212204f8153f734620632288f001d7ba510ee70af80c25468e38c337679b4f17d0e5764736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRedeemFeeExemptedAddress(address)": {
        "params": {
          "_address": "address to be exempted on redeem fees"
        }
      },
      "addRedeemFeeExemptedTCO2(address)": {
        "params": {
          "_tco2": "TCO2 to be exempted on redeem fees"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "calculateDepositAdjustedAmount(address,uint256,uint256)": {
        "params": {
          "amount": "Amount of ERC-1155 tokens to deposit",
          "erc1155": "Address of the ERC-1155 contract",
          "tokenId": "ID of the ERC-1155 token"
        },
        "returns": {
          "adjustedAmount": "The amount of pool tokens minted to the user"
        }
      },
      "calculateDepositFees(address,uint256,uint256)": {
        "details": "User specifies in front-end the address and amount they want",
        "params": {
          "amount": "Amount of ERC-1155 tokens to deposit (0 decimals)",
          "erc1155": "ERC1155 contract address",
          "tokenId": "id representing the vintage"
        },
        "returns": {
          "feeDistributionTotal": "Total fee amount to be paid in pool tokens"
        }
      },
      "calculateRedeemOutAdjustedAmount(address,uint256,uint256)": {
        "params": {
          "amount": "Amount of ERC-1155 token to redeem",
          "erc1155": "Address of the ERC-1155 contract",
          "tokenId": "ID of the ERC-1155 token"
        },
        "returns": {
          "adjustedAmount": "The amount of pool tokens to be burnt by the caller"
        }
      },
      "calculateRedemptionOutFees(address[],uint256[],uint256[],bool)": {
        "params": {
          "amounts": "Array of ERC-1155 token amounts to redeem (0 decimals) The indexes of this array are matching 1:1 with the erc1155s array.",
          "erc1155s": "Array of ERC1155 contract addresses",
          "toRetire": "No-op",
          "tokenIds": "ids of the vintages of each project"
        },
        "returns": {
          "feeDistributionTotal": "Total fee amount to be paid in pool tokens"
        }
      },
      "checkEligible(address,uint256)": {
        "params": {
          "erc1155": "the ERC1155 contract to check",
          "tokenId": "the token id"
        },
        "returns": {
          "isEligible": "true if address is eligible and no other issues occur"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(address,uint256,uint256,uint256)": {
        "details": "Eligibility of the ERC1155 token to be deposited is checked via `checkEligible`",
        "params": {
          "amount": "Amount of ERC-1155 tokens to be deposited (0 decimals)",
          "erc1155": "ERC1155 contract address",
          "maxFee": "Maximum pool token fee to be paid for the deposit. This value cannot be zero. Use `calculateDepositFees(erc1155,tokenId,amount)` to determine the fee that will be charged given the state of the pool during this call. Add a buffer on top of the returned fee amount up to the maximum fee you are willing to pay. (18 decimals)",
          "tokenId": "id representing the vintage"
        },
        "returns": {
          "mintedPoolTokenAmount": "Amount of pool tokens minted to the caller"
        }
      },
      "getRemaining()": {
        "details": "Returns the remaining space in pool before hitting the cap"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "wraps _pause(), only Admin"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "redeemOutMany(address[],uint256[],uint256[],uint256)": {
        "params": {
          "amounts": "Array of ERC-1155 token amounts to redeem (0 decimals) The indexes of this array are matching 1:1 with the erc1155s array.",
          "erc1155s": "ERC1155 contract address",
          "maxFee": "Maximum pool token fee to be paid for the redemption. This value cannot be zero. Use `calculateRedemptionOutFees(erc1155,tokenIds,amounts,false)` to determine the fee that will be charged given the state of the pool during this call. Add a buffer on top of the returned fee amount up to the maximum fee you are willing to pay. (18 decimals)",
          "tokenIds": "id representing the vintage"
        },
        "returns": {
          "poolAmountSpent": "The amount of pool tokens spent by the caller"
        }
      },
      "removeRedeemFeeExemptedAddress(address)": {
        "params": {
          "_address": "address to be removed from exemption"
        }
      },
      "removeRedeemFeeExemptedTCO2(address)": {
        "params": {
          "_tco2": "TCO2 to be removed from exemption"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "scores(address,uint256)": {
        "params": {
          "erc1155": "Address of the ERC-1155 contract",
          "tokenId": "ID of the ERC-1155 token"
        },
        "returns": {
          "score": "The score of the ERC-1155 token"
        }
      },
      "setFeeCalculator(address)": {
        "params": {
          "_feeCalculator": "Fee module contract address"
        }
      },
      "setFeeRedeemBurnAddress(address)": {
        "params": {
          "feeRedeemBurnAddress_": "address to transfer the fees to burn"
        }
      },
      "setFeeRedeemBurnPercentage(uint256)": {
        "params": {
          "feeRedeemBurnPercentageInBase_": "percentage of fee in base"
        }
      },
      "setFilter(address)": {
        "params": {
          "_filter": "Filter contract address"
        }
      },
      "setScores(address[],uint256[],uint256[])": {
        "details": "Only executable by the pool owner",
        "params": {
          "erc1155s": "Array of ERC-1155 contracts",
          "newScores": "Array of scores to set",
          "tokenIds": "Array of ERC-1155 token IDs"
        }
      },
      "setSupplyCap(uint256)": {
        "details": "supplyCap is initially set to 0 and must be increased before deposits",
        "params": {
          "newCap": "New pool supply cap"
        }
      },
      "setUnderlyingDecimals(uint8)": {
        "details": "The underlying decimals are the number of decimals the ERC-1155 token uses to represent the underlying asset. For example, if the ERC-1155 token represents a tonne of carbon, then the underlying decimals would be 0. If it represents a kilogram of carbon, then the underlying decimals would be 3.",
        "params": {
          "underlyingDecimals_": "The number of decimals the ERC-1155 token uses to represent a tonne of carbon."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "tokenBalance(address,uint256)": {
        "params": {
          "erc1155": "ERC1155 contract address",
          "tokenId": "id representing the vintage"
        },
        "returns": {
          "balance": "pool balance"
        }
      },
      "totalPerProjectSupply(address,uint256)": {
        "returns": {
          "_0": "supply"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpause the system, wraps _unpause(), only Admin"
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "VERSION": {
        "details": "Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRedeemFeeExemptedAddress(address)": {
        "notice": "Adds a new address for redeem fees exemption"
      },
      "addRedeemFeeExemptedTCO2(address)": {
        "notice": "Adds a new TCO2 for redeem fees exemption"
      },
      "calculateDepositAdjustedAmount(address,uint256,uint256)": {
        "notice": "Calculate the adjusted amount of pool tokens to mint for a deposit of the provided amount of the ERC-1155 token."
      },
      "calculateDepositFees(address,uint256,uint256)": {
        "notice": "View function to calculate deposit fees pre-execution"
      },
      "calculateRedeemOutAdjustedAmount(address,uint256,uint256)": {
        "notice": "Calculate the amounts of pool tokens needed in order to redeem the provided amount of the ERC-1155 token."
      },
      "calculateRedemptionInFees(address[],uint256[],uint256[],bool)": {
        "notice": "View function to calculate redemption fees pre-execution, according to the amounts of pool tokens to be spent. NOTE: This function is not supported yet"
      },
      "calculateRedemptionOutFees(address[],uint256[],uint256[],bool)": {
        "notice": "View function to calculate redemption fees pre-execution, according to the amounts of underlying tokens to be redeemed."
      },
      "checkEligible(address,uint256)": {
        "notice": "Checks if token to be deposited is eligible for this pool. Reverts if not. Beware that the revert reason might depend on the underlying implementation of IPoolFilter.checkEligible"
      },
      "deposit(address,uint256,uint256,uint256)": {
        "notice": "Deposit function for pool that accepts ERC1155 vintages and mints pool token 1:1"
      },
      "feeCalculator()": {
        "notice": "module to calculate fees for the pool"
      },
      "methodologies(string)": {
        "notice": "Checks if methodology is eligible for this pool"
      },
      "minimumVintageStartTime()": {
        "notice": "Returns minimum vintage start time for this pool"
      },
      "pause()": {
        "notice": "Emergency function to disable contract's core functionality"
      },
      "redeemFeeExemptedAddresses(address)": {
        "notice": "End users exempted from redeem fees"
      },
      "redeemFeeExemptedTCO2s(address)": {
        "notice": "TCO2s exempted from redeem fees"
      },
      "redeemOutMany(address[],uint256[],uint256[],uint256)": {
        "notice": "Redeem ERC1155 vintages for pool tokens 1:1 minus fees The amounts provided are the exact amounts of ERC1155 vintages to be redeemed."
      },
      "regions(string)": {
        "notice": "Checks if region is eligible for this pool"
      },
      "removeRedeemFeeExemptedAddress(address)": {
        "notice": "Removes an address from redeem fees exemption"
      },
      "removeRedeemFeeExemptedTCO2(address)": {
        "notice": "Removes a TCO2 from redeem fees exemption"
      },
      "router()": {
        "notice": "bridge router who has access to the bridgeMint & bridgeBurn functions which mint/burn pool tokens for cross chain messenges"
      },
      "scoredTCO2s(uint256)": {
        "notice": "array used to read from when redeeming TCO2s automatically"
      },
      "scores(address,uint256)": {
        "notice": "Get the score of an ERC-1155 token"
      },
      "setFeeCalculator(address)": {
        "notice": "Update the address of the fee module contract"
      },
      "setFeeRedeemBurnAddress(address)": {
        "notice": "Update the fee redeem burn address"
      },
      "setFeeRedeemBurnPercentage(uint256)": {
        "notice": "Update the fee redeem burn percentage"
      },
      "setFilter(address)": {
        "notice": "Update the address of the filter contract"
      },
      "setScores(address[],uint256[],uint256[])": {
        "notice": "Set scores for ERC-1155 tokens"
      },
      "setSupplyCap(uint256)": {
        "notice": "Function to limit the maximum pool supply"
      },
      "setUnderlyingDecimals(uint8)": {
        "notice": "Set the underlying decimals for ERC-1155 tokens."
      },
      "standards(string)": {
        "notice": "Checks if standard is eligible for this pool"
      },
      "supplyCap()": {
        "notice": "The supply cap is used as a measure to guard deposits in the pool. It is meant to minimize the impact a potential compromise in the source registry (eg. Verra) can have to the pool."
      },
      "tokenBalance(address,uint256)": {
        "notice": "Returns the balance of the carbon offset found in the pool"
      },
      "totalPerProjectSupply(address,uint256)": {
        "notice": "Return the total supply of the project for the given ERC1155 token."
      },
      "totalProjectSupply(uint256)": {
        "notice": "Project token id to total supply of the project in the pool. Supply amounts are kept in the underlying's native precision regardless of whether underlying is an ERC-20 or ERC-1155 token."
      },
      "totalUnderlyingSupply()": {
        "notice": "Total supply of underlying collateral in the pool.  Supply amounts are kept in the underlying's native precision regardless of whether underlying is an ERC-20 or ERC-1155 token."
      },
      "underlyingDecimals()": {
        "notice": "Underlying decimals for ERC-1155 tokens. 0 decimals means that the smallest denomination the ERC-1155 token can represent is a tonne, 3 decimals means a kilogram, etc."
      }
    },
    "notice": "REDD pool contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2390,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2393,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5494,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2850,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2856,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2858,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 2860,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 2862,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 3441,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 1881,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 1993,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2682,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 2771,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5801,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1497,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_roles",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1492_storage)"
      },
      {
        "astId": 1796,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2372,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2660,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 28254,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "supplyCap",
        "offset": 0,
        "slot": "401",
        "type": "t_uint256"
      },
      {
        "astId": 28258,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_tokenBalances",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28260,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_contractRegistry",
        "offset": 0,
        "slot": "403",
        "type": "t_address"
      },
      {
        "astId": 28264,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "scoredTCO2s",
        "offset": 0,
        "slot": "404",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 28269,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_regions",
        "offset": 0,
        "slot": "405",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 28273,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_standards",
        "offset": 0,
        "slot": "406",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 28277,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_methodologies",
        "offset": 0,
        "slot": "407",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 28282,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_externalWhiteList",
        "offset": 0,
        "slot": "408",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 28287,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_internalWhiteList",
        "offset": 0,
        "slot": "409",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 28292,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_internalBlackList",
        "offset": 0,
        "slot": "410",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 28295,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_feeRedeemReceiver",
        "offset": 0,
        "slot": "411",
        "type": "t_address"
      },
      {
        "astId": 28297,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_feeRedeemPercentageInBase",
        "offset": 0,
        "slot": "412",
        "type": "t_uint256"
      },
      {
        "astId": 28300,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_feeRedeemBurnAddress",
        "offset": 0,
        "slot": "413",
        "type": "t_address"
      },
      {
        "astId": 28303,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_feeRedeemBurnPercentageInBase",
        "offset": 0,
        "slot": "414",
        "type": "t_uint256"
      },
      {
        "astId": 28306,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_minimumVintageStartTime",
        "offset": 0,
        "slot": "415",
        "type": "t_uint64"
      },
      {
        "astId": 28308,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_seedMode",
        "offset": 8,
        "slot": "415",
        "type": "t_bool"
      },
      {
        "astId": 28310,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_regionsIsAcceptedMapping",
        "offset": 9,
        "slot": "415",
        "type": "t_bool"
      },
      {
        "astId": 28312,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_standardsIsAcceptedMapping",
        "offset": 10,
        "slot": "415",
        "type": "t_bool"
      },
      {
        "astId": 28314,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "DEPRECATED_methodologiesIsAcceptedMapping",
        "offset": 11,
        "slot": "415",
        "type": "t_bool"
      },
      {
        "astId": 28320,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "redeemFeeExemptedAddresses",
        "offset": 0,
        "slot": "416",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 28326,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "redeemFeeExemptedTCO2s",
        "offset": 0,
        "slot": "417",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 28330,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "router",
        "offset": 0,
        "slot": "418",
        "type": "t_address"
      },
      {
        "astId": 28334,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_feeRedeemRetirePercentageInBase",
        "offset": 0,
        "slot": "419",
        "type": "t_uint256"
      },
      {
        "astId": 28336,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "filter",
        "offset": 0,
        "slot": "420",
        "type": "t_address"
      },
      {
        "astId": 28341,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "feeCalculator",
        "offset": 0,
        "slot": "421",
        "type": "t_contract(IFeeCalculator)10716"
      },
      {
        "astId": 28344,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "totalUnderlyingSupply",
        "offset": 0,
        "slot": "422",
        "type": "t_uint256"
      },
      {
        "astId": 28349,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "totalProjectSupply",
        "offset": 0,
        "slot": "423",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 28357,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_scores",
        "offset": 0,
        "slot": "424",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 28363,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_vintageDeposited",
        "offset": 0,
        "slot": "425",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 28366,
        "contract": "contracts/pools/REDD.sol:REDD",
        "label": "_underlyingDecimals",
        "offset": 0,
        "slot": "426",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IFeeCalculator)10716": {
        "encoding": "inplace",
        "label": "contract IFeeCalculator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1492_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1492_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)1492_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 1489,
            "contract": "contracts/pools/REDD.sol:REDD",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1491,
            "contract": "contracts/pools/REDD.sol:REDD",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}