{
  "language": "Solidity",
  "sources": {
    "@hyperlane-xyz/core/contracts/client/MailboxClient.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\n// ============ Internal Imports ============\nimport {IMailbox} from \"../interfaces/IMailbox.sol\";\nimport {IPostDispatchHook} from \"../interfaces/hooks/IPostDispatchHook.sol\";\nimport {IInterchainSecurityModule} from \"../interfaces/IInterchainSecurityModule.sol\";\nimport {Message} from \"../libs/Message.sol\";\n\n// ============ External Imports ============\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract MailboxClient is OwnableUpgradeable {\n    using Message for bytes;\n\n    IMailbox public immutable mailbox;\n\n    uint32 public immutable localDomain;\n\n    IPostDispatchHook public hook;\n\n    IInterchainSecurityModule public interchainSecurityModule;\n\n    uint256[48] private __GAP; // gap for upgrade safety\n\n    // ============ Modifiers ============\n    modifier onlyContract(address _contract) {\n        require(\n            Address.isContract(_contract),\n            \"MailboxClient: invalid mailbox\"\n        );\n        _;\n    }\n\n    modifier onlyContractOrNull(address _contract) {\n        require(\n            Address.isContract(_contract) || _contract == address(0),\n            \"MailboxClient: invalid contract setting\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Only accept messages from an Hyperlane Mailbox contract\n     */\n    modifier onlyMailbox() {\n        require(\n            msg.sender == address(mailbox),\n            \"MailboxClient: sender not mailbox\"\n        );\n        _;\n    }\n\n    constructor(address _mailbox) onlyContract(_mailbox) {\n        mailbox = IMailbox(_mailbox);\n        localDomain = mailbox.localDomain();\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @notice Sets the address of the application's custom hook.\n     * @param _hook The address of the hook contract.\n     */\n    function setHook(address _hook) public onlyContractOrNull(_hook) onlyOwner {\n        hook = IPostDispatchHook(_hook);\n    }\n\n    /**\n     * @notice Sets the address of the application's custom interchain security module.\n     * @param _module The address of the interchain security module contract.\n     */\n    function setInterchainSecurityModule(\n        address _module\n    ) public onlyContractOrNull(_module) onlyOwner {\n        interchainSecurityModule = IInterchainSecurityModule(_module);\n    }\n\n    // ======== Initializer =========\n    function _MailboxClient_initialize(\n        address _hook,\n        address _interchainSecurityModule,\n        address _owner\n    ) internal onlyInitializing {\n        __Ownable_init();\n        setHook(_hook);\n        setInterchainSecurityModule(_interchainSecurityModule);\n        _transferOwnership(_owner);\n    }\n\n    function _isLatestDispatched(bytes32 id) internal view returns (bool) {\n        return mailbox.latestDispatchedId() == id;\n    }\n\n    function _metadata(\n        uint32 /*_destinationDomain*/\n    ) internal view virtual returns (bytes memory) {\n        return \"\";\n    }\n\n    function _dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        bytes memory _messageBody\n    ) internal virtual returns (bytes32) {\n        return\n            _dispatch(_destinationDomain, _recipient, msg.value, _messageBody);\n    }\n\n    function _dispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        uint256 _value,\n        bytes memory _messageBody\n    ) internal virtual returns (bytes32) {\n        return\n            mailbox.dispatch{value: _value}(\n                _destinationDomain,\n                _recipient,\n                _messageBody,\n                _metadata(_destinationDomain),\n                hook\n            );\n    }\n\n    function _quoteDispatch(\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        bytes memory _messageBody\n    ) internal view virtual returns (uint256) {\n        return\n            mailbox.quoteDispatch(\n                _destinationDomain,\n                _recipient,\n                _messageBody,\n                _metadata(_destinationDomain),\n                hook\n            );\n    }\n}\n"
    },
    "@hyperlane-xyz/core/contracts/client/Router.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\n// ============ Internal Imports ============\nimport {IMessageRecipient} from \"../interfaces/IMessageRecipient.sol\";\nimport {IPostDispatchHook} from \"../interfaces/hooks/IPostDispatchHook.sol\";\nimport {IInterchainSecurityModule} from \"../interfaces/IInterchainSecurityModule.sol\";\nimport {MailboxClient} from \"./MailboxClient.sol\";\nimport {EnumerableMapExtended} from \"../libs/EnumerableMapExtended.sol\";\n\n// ============ External Imports ============\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nabstract contract Router is MailboxClient, IMessageRecipient {\n    using EnumerableMapExtended for EnumerableMapExtended.UintToBytes32Map;\n    using Strings for uint32;\n\n    // ============ Mutable Storage ============\n    EnumerableMapExtended.UintToBytes32Map internal _routers;\n\n    uint256[48] private __GAP; // gap for upgrade safety\n\n    constructor(address _mailbox) MailboxClient(_mailbox) {}\n\n    // ============ External functions ============\n    function domains() external view returns (uint32[] memory) {\n        return _routers.uint32Keys();\n    }\n\n    /**\n     * @notice Returns the address of the Router contract for the given domain\n     * @param _domain The remote domain ID.\n     * @dev Returns 0 address if no router is enrolled for the given domain\n     * @return router The address of the Router contract for the given domain\n     */\n    function routers(uint32 _domain) public view virtual returns (bytes32) {\n        (, bytes32 _router) = _routers.tryGet(_domain);\n        return _router;\n    }\n\n    /**\n     * @notice Unregister the domain\n     * @param _domain The domain of the remote Application Router\n     */\n    function unenrollRemoteRouter(uint32 _domain) external virtual onlyOwner {\n        _unenrollRemoteRouter(_domain);\n    }\n\n    /**\n     * @notice Register the address of a Router contract for the same Application on a remote chain\n     * @param _domain The domain of the remote Application Router\n     * @param _router The address of the remote Application Router\n     */\n    function enrollRemoteRouter(\n        uint32 _domain,\n        bytes32 _router\n    ) external virtual onlyOwner {\n        _enrollRemoteRouter(_domain, _router);\n    }\n\n    /**\n     * @notice Batch version of `enrollRemoteRouter`\n     * @param _domains The domains of the remote Application Routers\n     * @param _addresses The addresses of the remote Application Routers\n     */\n    function enrollRemoteRouters(\n        uint32[] calldata _domains,\n        bytes32[] calldata _addresses\n    ) external virtual onlyOwner {\n        require(_domains.length == _addresses.length, \"!length\");\n        uint256 length = _domains.length;\n        for (uint256 i = 0; i < length; i += 1) {\n            _enrollRemoteRouter(_domains[i], _addresses[i]);\n        }\n    }\n\n    /**\n     * @notice Batch version of `unenrollRemoteRouter`\n     * @param _domains The domains of the remote Application Routers\n     */\n    function unenrollRemoteRouters(\n        uint32[] calldata _domains\n    ) external virtual onlyOwner {\n        uint256 length = _domains.length;\n        for (uint256 i = 0; i < length; i += 1) {\n            _unenrollRemoteRouter(_domains[i]);\n        }\n    }\n\n    /**\n     * @notice Handles an incoming message\n     * @param _origin The origin domain\n     * @param _sender The sender address\n     * @param _message The message\n     */\n    function handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) external payable virtual override onlyMailbox {\n        bytes32 _router = _mustHaveRemoteRouter(_origin);\n        require(_router == _sender, \"Enrolled router does not match sender\");\n        _handle(_origin, _sender, _message);\n    }\n\n    // ============ Virtual functions ============\n    function _handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) internal virtual;\n\n    // ============ Internal functions ============\n\n    /**\n     * @notice Set the router for a given domain\n     * @param _domain The domain\n     * @param _address The new router\n     */\n    function _enrollRemoteRouter(\n        uint32 _domain,\n        bytes32 _address\n    ) internal virtual {\n        _routers.set(_domain, _address);\n    }\n\n    /**\n     * @notice Remove the router for a given domain\n     * @param _domain The domain\n     */\n    function _unenrollRemoteRouter(uint32 _domain) internal virtual {\n        require(_routers.remove(_domain), _domainNotFoundError(_domain));\n    }\n\n    /**\n     * @notice Return true if the given domain / router is the address of a remote Application Router\n     * @param _domain The domain of the potential remote Application Router\n     * @param _address The address of the potential remote Application Router\n     */\n    function _isRemoteRouter(\n        uint32 _domain,\n        bytes32 _address\n    ) internal view returns (bool) {\n        return routers(_domain) == _address;\n    }\n\n    /**\n     * @notice Assert that the given domain has a Application Router registered and return its address\n     * @param _domain The domain of the chain for which to get the Application Router\n     * @return _router The address of the remote Application Router on _domain\n     */\n    function _mustHaveRemoteRouter(\n        uint32 _domain\n    ) internal view returns (bytes32) {\n        (bool contained, bytes32 _router) = _routers.tryGet(_domain);\n        require(contained, _domainNotFoundError(_domain));\n        return _router;\n    }\n\n    function _domainNotFoundError(\n        uint32 _domain\n    ) internal pure returns (string memory) {\n        return\n            string.concat(\n                \"No router enrolled for domain: \",\n                _domain.toString()\n            );\n    }\n\n    function _dispatch(\n        uint32 _destinationDomain,\n        bytes memory _messageBody\n    ) internal virtual returns (bytes32) {\n        return _dispatch(_destinationDomain, msg.value, _messageBody);\n    }\n\n    function _dispatch(\n        uint32 _destinationDomain,\n        uint256 _value,\n        bytes memory _messageBody\n    ) internal virtual returns (bytes32) {\n        bytes32 _router = _mustHaveRemoteRouter(_destinationDomain);\n        return\n            super._dispatch(_destinationDomain, _router, _value, _messageBody);\n    }\n\n    function _quoteDispatch(\n        uint32 _destinationDomain,\n        bytes memory _messageBody\n    ) internal view virtual returns (uint256) {\n        bytes32 _router = _mustHaveRemoteRouter(_destinationDomain);\n        return super._quoteDispatch(_destinationDomain, _router, _messageBody);\n    }\n}\n"
    },
    "@hyperlane-xyz/core/contracts/interfaces/hooks/IPostDispatchHook.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\n/*@@@@@@@       @@@@@@@@@\n @@@@@@@@@       @@@@@@@@@\n  @@@@@@@@@       @@@@@@@@@\n   @@@@@@@@@       @@@@@@@@@\n    @@@@@@@@@@@@@@@@@@@@@@@@@\n     @@@@@  HYPERLANE  @@@@@@@\n    @@@@@@@@@@@@@@@@@@@@@@@@@\n   @@@@@@@@@       @@@@@@@@@\n  @@@@@@@@@       @@@@@@@@@\n @@@@@@@@@       @@@@@@@@@\n@@@@@@@@@       @@@@@@@@*/\n\ninterface IPostDispatchHook {\n    enum Types {\n        UNUSED,\n        ROUTING,\n        AGGREGATION,\n        MERKLE_TREE,\n        INTERCHAIN_GAS_PAYMASTER,\n        FALLBACK_ROUTING,\n        ID_AUTH_ISM,\n        PAUSABLE,\n        PROTOCOL_FEE\n    }\n\n    /**\n     * @notice Returns an enum that represents the type of hook\n     */\n    function hookType() external view returns (uint8);\n\n    /**\n     * @notice Returns whether the hook supports metadata\n     * @param metadata metadata\n     * @return Whether the hook supports metadata\n     */\n    function supportsMetadata(\n        bytes calldata metadata\n    ) external view returns (bool);\n\n    /**\n     * @notice Post action after a message is dispatched via the Mailbox\n     * @param metadata The metadata required for the hook\n     * @param message The message passed from the Mailbox.dispatch() call\n     */\n    function postDispatch(\n        bytes calldata metadata,\n        bytes calldata message\n    ) external payable;\n\n    /**\n     * @notice Compute the payment required by the postDispatch call\n     * @param metadata The metadata required for the hook\n     * @param message The message passed from the Mailbox.dispatch() call\n     * @return Quoted payment for the postDispatch call\n     */\n    function quoteDispatch(\n        bytes calldata metadata,\n        bytes calldata message\n    ) external view returns (uint256);\n}\n"
    },
    "@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\ninterface IInterchainSecurityModule {\n    enum Types {\n        UNUSED,\n        ROUTING,\n        AGGREGATION,\n        LEGACY_MULTISIG,\n        MERKLE_ROOT_MULTISIG,\n        MESSAGE_ID_MULTISIG,\n        NULL, // used with relayer carrying no metadata\n        CCIP_READ\n    }\n\n    /**\n     * @notice Returns an enum that represents the type of security model\n     * encoded by this ISM.\n     * @dev Relayers infer how to fetch and format metadata.\n     */\n    function moduleType() external view returns (uint8);\n\n    /**\n     * @notice Defines a security model responsible for verifying interchain\n     * messages based on the provided metadata.\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\n     * the security model encoded by the module (e.g. validator signatures)\n     * @param _message Hyperlane encoded interchain message\n     * @return True if the message was verified\n     */\n    function verify(\n        bytes calldata _metadata,\n        bytes calldata _message\n    ) external returns (bool);\n}\n\ninterface ISpecifiesInterchainSecurityModule {\n    function interchainSecurityModule()\n        external\n        view\n        returns (IInterchainSecurityModule);\n}\n"
    },
    "@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\nimport {IInterchainSecurityModule} from \"./IInterchainSecurityModule.sol\";\nimport {IPostDispatchHook} from \"./hooks/IPostDispatchHook.sol\";\n\ninterface IMailbox {\n    // ============ Events ============\n    /**\n     * @notice Emitted when a new message is dispatched via Hyperlane\n     * @param sender The address that dispatched the message\n     * @param destination The destination domain of the message\n     * @param recipient The message recipient address on `destination`\n     * @param message Raw bytes of message\n     */\n    event Dispatch(\n        address indexed sender,\n        uint32 indexed destination,\n        bytes32 indexed recipient,\n        bytes message\n    );\n\n    /**\n     * @notice Emitted when a new message is dispatched via Hyperlane\n     * @param messageId The unique message identifier\n     */\n    event DispatchId(bytes32 indexed messageId);\n\n    /**\n     * @notice Emitted when a Hyperlane message is processed\n     * @param messageId The unique message identifier\n     */\n    event ProcessId(bytes32 indexed messageId);\n\n    /**\n     * @notice Emitted when a Hyperlane message is delivered\n     * @param origin The origin domain of the message\n     * @param sender The message sender address on `origin`\n     * @param recipient The address that handled the message\n     */\n    event Process(\n        uint32 indexed origin,\n        bytes32 indexed sender,\n        address indexed recipient\n    );\n\n    function localDomain() external view returns (uint32);\n\n    function delivered(bytes32 messageId) external view returns (bool);\n\n    function defaultIsm() external view returns (IInterchainSecurityModule);\n\n    function defaultHook() external view returns (IPostDispatchHook);\n\n    function requiredHook() external view returns (IPostDispatchHook);\n\n    function latestDispatchedId() external view returns (bytes32);\n\n    function dispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata messageBody\n    ) external payable returns (bytes32 messageId);\n\n    function quoteDispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata messageBody\n    ) external view returns (uint256 fee);\n\n    function dispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata body,\n        bytes calldata defaultHookMetadata\n    ) external payable returns (bytes32 messageId);\n\n    function quoteDispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata messageBody,\n        bytes calldata defaultHookMetadata\n    ) external view returns (uint256 fee);\n\n    function dispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata body,\n        bytes calldata customHookMetadata,\n        IPostDispatchHook customHook\n    ) external payable returns (bytes32 messageId);\n\n    function quoteDispatch(\n        uint32 destinationDomain,\n        bytes32 recipientAddress,\n        bytes calldata messageBody,\n        bytes calldata customHookMetadata,\n        IPostDispatchHook customHook\n    ) external view returns (uint256 fee);\n\n    function process(\n        bytes calldata metadata,\n        bytes calldata message\n    ) external payable;\n\n    function recipientIsm(\n        address recipient\n    ) external view returns (IInterchainSecurityModule module);\n}\n"
    },
    "@hyperlane-xyz/core/contracts/interfaces/IMessageRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\ninterface IMessageRecipient {\n    function handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) external payable;\n}\n"
    },
    "@hyperlane-xyz/core/contracts/libs/EnumerableMapExtended.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\n// ============ External Imports ============\nimport \"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n// extends EnumerableMap with uint256 => bytes32 type\n// modelled after https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.8.0/contracts/utils/structs/EnumerableMap.sol\nlibrary EnumerableMapExtended {\n    using EnumerableMap for EnumerableMap.Bytes32ToBytes32Map;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    struct UintToBytes32Map {\n        EnumerableMap.Bytes32ToBytes32Map _inner;\n    }\n\n    // ============ Library Functions ============\n    function keys(\n        UintToBytes32Map storage map\n    ) internal view returns (uint256[] memory _keys) {\n        uint256 _length = map._inner.length();\n        _keys = new uint256[](_length);\n        for (uint256 i = 0; i < _length; i++) {\n            _keys[i] = uint256(map._inner._keys.at(i));\n        }\n    }\n\n    function uint32Keys(\n        UintToBytes32Map storage map\n    ) internal view returns (uint32[] memory _keys) {\n        uint256[] memory uint256keys = keys(map);\n        _keys = new uint32[](uint256keys.length);\n        for (uint256 i = 0; i < uint256keys.length; i++) {\n            _keys[i] = uint32(uint256keys[i]);\n        }\n    }\n\n    function set(\n        UintToBytes32Map storage map,\n        uint256 key,\n        bytes32 value\n    ) internal {\n        map._inner.set(bytes32(key), value);\n    }\n\n    function get(\n        UintToBytes32Map storage map,\n        uint256 key\n    ) internal view returns (bytes32) {\n        return map._inner.get(bytes32(key));\n    }\n\n    function tryGet(\n        UintToBytes32Map storage map,\n        uint256 key\n    ) internal view returns (bool, bytes32) {\n        return map._inner.tryGet(bytes32(key));\n    }\n\n    function remove(\n        UintToBytes32Map storage map,\n        uint256 key\n    ) internal returns (bool) {\n        return map._inner.remove(bytes32(key));\n    }\n\n    function contains(\n        UintToBytes32Map storage map,\n        uint256 key\n    ) internal view returns (bool) {\n        return map._inner.contains(bytes32(key));\n    }\n\n    function length(\n        UintToBytes32Map storage map\n    ) internal view returns (uint256) {\n        return map._inner.length();\n    }\n\n    function at(\n        UintToBytes32Map storage map,\n        uint256 index\n    ) internal view returns (uint256, bytes32) {\n        (bytes32 key, bytes32 value) = map._inner.at(index);\n        return (uint256(key), value);\n    }\n}\n"
    },
    "@hyperlane-xyz/core/contracts/libs/Message.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\nimport {TypeCasts} from \"./TypeCasts.sol\";\n\n/**\n * @title Hyperlane Message Library\n * @notice Library for formatted messages used by Mailbox\n **/\nlibrary Message {\n    using TypeCasts for bytes32;\n\n    uint256 private constant VERSION_OFFSET = 0;\n    uint256 private constant NONCE_OFFSET = 1;\n    uint256 private constant ORIGIN_OFFSET = 5;\n    uint256 private constant SENDER_OFFSET = 9;\n    uint256 private constant DESTINATION_OFFSET = 41;\n    uint256 private constant RECIPIENT_OFFSET = 45;\n    uint256 private constant BODY_OFFSET = 77;\n\n    /**\n     * @notice Returns formatted (packed) Hyperlane message with provided fields\n     * @dev This function should only be used in memory message construction.\n     * @param _version The version of the origin and destination Mailboxes\n     * @param _nonce A nonce to uniquely identify the message on its origin chain\n     * @param _originDomain Domain of origin chain\n     * @param _sender Address of sender as bytes32\n     * @param _destinationDomain Domain of destination chain\n     * @param _recipient Address of recipient on destination chain as bytes32\n     * @param _messageBody Raw bytes of message body\n     * @return Formatted message\n     */\n    function formatMessage(\n        uint8 _version,\n        uint32 _nonce,\n        uint32 _originDomain,\n        bytes32 _sender,\n        uint32 _destinationDomain,\n        bytes32 _recipient,\n        bytes calldata _messageBody\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                _version,\n                _nonce,\n                _originDomain,\n                _sender,\n                _destinationDomain,\n                _recipient,\n                _messageBody\n            );\n    }\n\n    /**\n     * @notice Returns the message ID.\n     * @param _message ABI encoded Hyperlane message.\n     * @return ID of `_message`\n     */\n    function id(bytes memory _message) internal pure returns (bytes32) {\n        return keccak256(_message);\n    }\n\n    /**\n     * @notice Returns the message version.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Version of `_message`\n     */\n    function version(bytes calldata _message) internal pure returns (uint8) {\n        return uint8(bytes1(_message[VERSION_OFFSET:NONCE_OFFSET]));\n    }\n\n    /**\n     * @notice Returns the message nonce.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Nonce of `_message`\n     */\n    function nonce(bytes calldata _message) internal pure returns (uint32) {\n        return uint32(bytes4(_message[NONCE_OFFSET:ORIGIN_OFFSET]));\n    }\n\n    /**\n     * @notice Returns the message origin domain.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Origin domain of `_message`\n     */\n    function origin(bytes calldata _message) internal pure returns (uint32) {\n        return uint32(bytes4(_message[ORIGIN_OFFSET:SENDER_OFFSET]));\n    }\n\n    /**\n     * @notice Returns the message sender as bytes32.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Sender of `_message` as bytes32\n     */\n    function sender(bytes calldata _message) internal pure returns (bytes32) {\n        return bytes32(_message[SENDER_OFFSET:DESTINATION_OFFSET]);\n    }\n\n    /**\n     * @notice Returns the message sender as address.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Sender of `_message` as address\n     */\n    function senderAddress(\n        bytes calldata _message\n    ) internal pure returns (address) {\n        return sender(_message).bytes32ToAddress();\n    }\n\n    /**\n     * @notice Returns the message destination domain.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Destination domain of `_message`\n     */\n    function destination(\n        bytes calldata _message\n    ) internal pure returns (uint32) {\n        return uint32(bytes4(_message[DESTINATION_OFFSET:RECIPIENT_OFFSET]));\n    }\n\n    /**\n     * @notice Returns the message recipient as bytes32.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Recipient of `_message` as bytes32\n     */\n    function recipient(\n        bytes calldata _message\n    ) internal pure returns (bytes32) {\n        return bytes32(_message[RECIPIENT_OFFSET:BODY_OFFSET]);\n    }\n\n    /**\n     * @notice Returns the message recipient as address.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Recipient of `_message` as address\n     */\n    function recipientAddress(\n        bytes calldata _message\n    ) internal pure returns (address) {\n        return recipient(_message).bytes32ToAddress();\n    }\n\n    /**\n     * @notice Returns the message body.\n     * @param _message ABI encoded Hyperlane message.\n     * @return Body of `_message`\n     */\n    function body(\n        bytes calldata _message\n    ) internal pure returns (bytes calldata) {\n        return bytes(_message[BODY_OFFSET:]);\n    }\n}\n"
    },
    "@hyperlane-xyz/core/contracts/libs/TypeCasts.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(_addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\n        return address(uint160(uint256(_buf)));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport {Initializable} from \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155Upgradeable.sol\";\nimport \"./IERC1155ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC1155MetadataURIUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\n    using AddressUpgradeable for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\n        __ERC1155_init_unchained(uri_);\n    }\n\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual override returns (uint256[] memory) {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155Upgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n */\nabstract contract ERC1155SupplyUpgradeable is Initializable, ERC1155Upgradeable {\n    mapping(uint256 => uint256) private _totalSupply;\n\n    function __ERC1155Supply_init() internal onlyInitializing {\n    }\n\n    function __ERC1155Supply_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Total amount of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return ERC1155SupplyUpgradeable.totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        if (from == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                _totalSupply[ids[i]] += amounts[i];\n            }\n        }\n\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 id = ids[i];\n                uint256 amount = amounts[i];\n                uint256 supply = _totalSupply[id];\n                require(supply >= amount, \"ERC1155: burn amount exceeds totalSupply\");\n                unchecked {\n                    _totalSupply[id] = supply - amount;\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Upgradeable.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport {Initializable} from \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    function __ERC721Enumerable_init() internal onlyInitializing {\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual override returns (uint256[] memory) {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableMap.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\n\npragma solidity ^0.8.0;\n\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * The following map types are supported:\n *\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableMap.\n * ====\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Bytes32ToBytes32Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToBytes32Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || contains(map, key), errorMessage);\n        return value;\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\n        return map._keys.values();\n    }\n\n    // UintToUintMap\n\n    struct UintToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key)));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToUintMap storage map, uint256 key, string memory errorMessage) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(key), errorMessage));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        UintToAddressMap storage map,\n        uint256 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressToUintMap\n\n    struct AddressToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\n        return remove(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\n        return contains(map._inner, bytes32(uint256(uint160(key))));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (address(uint160(uint256(key))), uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        AddressToUintMap storage map,\n        address key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // Bytes32ToUintMap\n\n    struct Bytes32ToUintMap {\n        Bytes32ToBytes32Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\n        return set(map._inner, key, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\n        return remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\n        return contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\n        return length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the map. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\n        (bytes32 key, bytes32 value) = at(map._inner, index);\n        return (key, uint256(value));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`. O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\n        (bool success, bytes32 value) = tryGet(map._inner, key);\n        return (success, uint256(value));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`. O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\n        return uint256(get(map._inner, key));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToUintMap storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (uint256) {\n        return uint256(get(map._inner, key, errorMessage));\n    }\n\n    /**\n     * @dev Return the an array containing all the keys\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = keys(map._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Protocol\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <info@neutralx.com>\npragma solidity ^0.8.13;\n\nstruct FeeDistribution {\n    address[] recipients;\n    uint256[] shares;\n}\n\n/// @title IFeeCalculator\n/// @author Neutral Labs Inc.\n/// @notice This interface defines methods for calculating fees.\ninterface IFeeCalculator {\n    /// @notice Calculates the deposit fee for a given amount.\n    /// @param pool The address of the pool.\n    /// @param tco2 The address of the TCO2 token.\n    /// @param depositAmount The amount to be deposited.\n    /// @return feeDistribution How the fee is meant to be\n    /// distributed among the fee recipients.\n    function calculateDepositFees(address pool, address tco2, uint256 depositAmount)\n        external\n        view\n        returns (FeeDistribution memory feeDistribution);\n\n    /// @notice Calculates the redemption fees for a given amount.\n    /// @param pool The address of the pool.\n    /// @param tco2s The addresses of the TCO2 token.\n    /// @param redemptionAmounts The amounts to be redeemed.\n    /// @return feeDistribution How the fee is meant to be\n    /// distributed among the fee recipients.\n    function calculateRedemptionFees(address pool, address[] calldata tco2s, uint256[] calldata redemptionAmounts)\n        external\n        view\n        returns (FeeDistribution memory feeDistribution);\n\n    /// @notice Calculates the deposit fee for a given amount of an ERC1155 project.\n    /// @param pool The address of the pool.\n    /// @param erc1155 The address of the ERC1155 project\n    /// @param tokenId The tokenId of the vintage.\n    /// @param depositAmount The amount to be deposited.\n    /// @return feeDistribution How the fee is meant to be\n    /// distributed among the fee recipients.\n    function calculateDepositFees(address pool, address erc1155, uint256 tokenId, uint256 depositAmount)\n        external\n        view\n        returns (FeeDistribution memory feeDistribution);\n\n    /// @notice Calculates the redemption fees for a given amount on ERC1155 projects.\n    /// @param pool The address of the pool.\n    /// @param erc1155s The addresses of the ERC1155 projects.\n    /// @param tokenIds The tokenIds of the project vintages.\n    /// @param redemptionAmounts The amounts to be redeemed.\n    /// @return feeDistribution How the fee is meant to be\n    /// distributed among the fee recipients.\n    function calculateRedemptionFees(\n        address pool,\n        address[] calldata erc1155s,\n        uint256[] calldata tokenIds,\n        uint256[] calldata redemptionAmounts\n    ) external view returns (FeeDistribution memory feeDistribution);\n}\n"
    },
    "contracts/bases/RoleInitializer.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\nabstract contract RoleInitializer is AccessControlUpgradeable {\n    function __RoleInitializer_init_unchained(\n        address[] calldata accounts,\n        bytes32[] calldata roles\n    ) internal {\n        require(accounts.length == roles.length, 'Array length mismatch');\n\n        __AccessControl_init_unchained();\n\n        bool hasDefaultAdmin = false;\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            _grantRole(roles[i], accounts[i]);\n            if (roles[i] == DEFAULT_ADMIN_ROLE) hasDefaultAdmin = true;\n        }\n        require(hasDefaultAdmin, 'No admin specified');\n    }\n}\n"
    },
    "contracts/bases/ToucanCarbonOffsetsBase.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\n\nimport '../interfaces/ICarbonOffsetBatches.sol';\nimport '../interfaces/ICarbonProjects.sol';\nimport '../interfaces/ICarbonProjectVintages.sol';\nimport '../interfaces/IPausable.sol';\nimport '../interfaces/IToucanCarbonOffsetsEscrow.sol';\nimport '../interfaces/IToucanCarbonOffsetsFactory.sol';\nimport '../interfaces/IToucanContractRegistry.sol';\nimport '../retirements/interfaces/IRetirementCertificates.sol';\nimport '../ToucanCarbonOffsetsStorage.sol';\nimport {BatchStatus} from '../CarbonOffsetBatchesTypes.sol';\n\n/// @notice Base contract for any specific contract implementation of the TCO2 tokens (ERC20)\nabstract contract ToucanCarbonOffsetsBase is\n    ERC20Upgradeable,\n    ToucanCarbonOffsetsStorage\n{\n    // ----------------------------------------\n    //              Constants\n    // ----------------------------------------\n\n    /// @dev All roles related to accessing this contract\n    bytes32 public constant DETOKENIZER_ROLE = keccak256('DETOKENIZER_ROLE');\n    bytes32 public constant TOKENIZER_ROLE = keccak256('TOKENIZER_ROLE');\n    bytes32 public constant RETIREMENT_ROLE = keccak256('RETIREMENT_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event FeePaid(address bridger, uint256 fees);\n    event FeeBurnt(address bridger, uint256 fees);\n    event Retired(address sender, uint256 amount, uint256 eventId);\n\n    // ----------------------------------------\n    //              Modifiers\n    // ----------------------------------------\n\n    /// @dev modifier checks whether the `ToucanCarbonOffsetsFactory` is paused\n    /// Since TCO2 contracts are permissionless, pausing does not function individually\n    modifier whenNotPaused() {\n        address tco2Factory = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsFactoryAddress(standardRegistry());\n        bool _paused = IPausable(tco2Factory).paused();\n        require(!_paused, 'Paused TCO2');\n        _;\n    }\n\n    modifier onlyBridges() {\n        address tco2Factory = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsFactoryAddress(standardRegistry());\n        bool isAllowed = IToucanCarbonOffsetsFactory(tco2Factory)\n            .allowedBridges(msg.sender);\n        require(isAllowed, 'Not allowed');\n        _;\n    }\n\n    modifier onlyFactoryOwner() {\n        address tco2Factory = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsFactoryAddress(standardRegistry());\n        address owner = IToucanCarbonOffsetsFactory(tco2Factory).owner();\n        require(owner == msg.sender, 'Not factory owner');\n        _;\n    }\n\n    // Modifer that checks if the msg.sender has the required role\n    modifier onlyWithRole(bytes32 role) {\n        require(\n            IToucanCarbonOffsetsFactory(\n                IToucanContractRegistry(contractRegistry)\n                    .toucanCarbonOffsetsFactoryAddress(standardRegistry())\n            ).hasRole(role, msg.sender),\n            'Invalid access'\n        );\n        _;\n    }\n\n    // Modifier that checks if msg.sender is the escrow contract\n    modifier onlyEscrow() {\n        require(\n            IToucanContractRegistry(contractRegistry)\n                .toucanCarbonOffsetsEscrowAddress() == msg.sender,\n            'Not escrow contract'\n        );\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    // ----------------------------------------\n    //      Bridge-related functions\n    // ----------------------------------------\n\n    /// @notice Burn TCO2 on behalf of a user. msg.sender does not require approval\n    /// by the account for the burn to be successfull. This function is exposed so it\n    /// can be utilized in cross-chain transfers of TCO2 where we want to burn the\n    /// TCO2 in the source chain but not retire it.\n    /// @param account The user for whom to burn TCO2\n    /// @param amount The amount to burn.\n    function bridgeBurn(address account, uint256 amount)\n        external\n        virtual\n        whenNotPaused\n        onlyBridges\n    {\n        _burn(account, amount);\n    }\n\n    /// @notice Mint TCO2 on behalf of a user. This function is exposed to\n    /// be called by authorized message bridge systems and utilized for\n    /// cross-chain transfers of TCO2 where we want to mint the TCO2 in the\n    /// source chain.\n    /// @param account The user for whom to mint TCO2\n    /// @param amount The amount to mint.\n    function bridgeMint(address account, uint256 amount)\n        external\n        virtual\n        whenNotPaused\n        onlyBridges\n    {\n        _mint(account, amount);\n    }\n\n    // ----------------------------------------\n    //       Permissionless functions\n    // ----------------------------------------\n\n    function projectVintageTokenId() external view returns (uint256) {\n        return _projectVintageTokenId;\n    }\n\n    /// @notice Token name getter overriden to return the a name based on the carbon project data\n    //slither-disable-next-line external-function\n    function name() public view virtual override returns (string memory) {\n        string memory globalProjectId;\n        string memory vintageName;\n        (globalProjectId, vintageName) = getGlobalProjectVintageIdentifiers();\n        return\n            string.concat(\n                'Toucan Protocol: TCO2-',\n                globalProjectId,\n                '-',\n                vintageName\n            );\n    }\n\n    /// @notice Token symbol getter overriden to return the a symbol based on the carbon project data\n    //slither-disable-next-line external-function\n    function symbol() public view virtual override returns (string memory) {\n        string memory globalProjectId;\n        string memory vintageName;\n        (globalProjectId, vintageName) = getGlobalProjectVintageIdentifiers();\n        return string.concat('TCO2-', globalProjectId, '-', vintageName);\n    }\n\n    /// @dev Helper function to retrieve data fragments for `name()` and `symbol()`\n    function getGlobalProjectVintageIdentifiers()\n        public\n        view\n        virtual\n        returns (string memory, string memory)\n    {\n        ProjectData memory projectData;\n        VintageData memory vintageData;\n        (projectData, vintageData) = getAttributes();\n        return (projectData.projectId, vintageData.name);\n    }\n\n    /// @dev Function to get corresponding attributes from the CarbonProjects\n    function getAttributes()\n        public\n        view\n        virtual\n        returns (ProjectData memory, VintageData memory)\n    {\n        address pc = IToucanContractRegistry(contractRegistry)\n            .carbonProjectsAddress();\n        address vc = IToucanContractRegistry(contractRegistry)\n            .carbonProjectVintagesAddress();\n\n        VintageData memory vintageData = ICarbonProjectVintages(vc)\n            .getProjectVintageDataByTokenId(_projectVintageTokenId);\n        ProjectData memory projectData = ICarbonProjects(pc)\n            .getProjectDataByTokenId(vintageData.projectTokenId);\n\n        return (projectData, vintageData);\n    }\n\n    function getVintageData()\n        external\n        view\n        virtual\n        returns (VintageData memory vintageData)\n    {\n        address vc = IToucanContractRegistry(contractRegistry)\n            .carbonProjectVintagesAddress();\n\n        vintageData = ICarbonProjectVintages(vc).getProjectVintageDataByTokenId(\n                _projectVintageTokenId\n            );\n    }\n\n    /// @dev Returns the remaining space in TCO2 contract before hitting the cap\n    function getRemaining() public view returns (uint256 remaining) {\n        uint256 cap = getDepositCap();\n        remaining = cap - totalSupply();\n    }\n\n    /// @dev Returns the cap for TCO2s based on `totalVintageQuantity`\n    /// Returns `~unlimited` if the value for the vintage is not set\n    function getDepositCap() public view returns (uint256) {\n        VintageData memory vintageData;\n        (, vintageData) = getAttributes();\n        uint64 totalVintageQuantity = vintageData.totalVintageQuantity;\n\n        ///@dev multipliying tonnes with decimals\n        uint256 cap = totalVintageQuantity * 10**decimals();\n\n        /// @dev if totalVintageQuantity is not set (=0), remove cap\n        if (cap == 0) return type(uint256).max;\n\n        return cap;\n    }\n\n    /// @notice Burn TCO2 on behalf of a user. msg.sender needs to be approved by\n    /// the account for the burn to be successfull. This function is exposed so it\n    /// can be utilized to burn credits without retiring them (eg. dispose HFC-23).\n    /// @param account The user for whom to burn TCO2\n    /// @param amount The amount to burn\n    function burnFrom(address account, uint256 amount)\n        external\n        virtual\n        whenNotPaused\n    {\n        _spendAllowance(account, msg.sender, amount);\n        _burn(account, amount);\n    }\n\n    // @dev Internal function for the burning of TCO2 tokens\n    // @dev retiringEntityAddress is a parameter to handle scenarios, when\n    // retirements are performed from the escrow contract and the retiring entity\n    // is different than the account.\n    function _retire(\n        address account,\n        uint256 amount,\n        address retiringEntityAddress\n    ) internal virtual returns (uint256 retirementEventId) {\n        _burn(account, amount);\n\n        // Register retirement event in the certificates contract\n        address certAddr = IToucanContractRegistry(contractRegistry)\n            .retirementCertificatesAddress();\n        retirementEventId = IRetirementCertificates(certAddr).registerEvent(\n            retiringEntityAddress,\n            _projectVintageTokenId,\n            amount,\n            false\n        );\n\n        emit Retired(retiringEntityAddress, amount, retirementEventId);\n    }\n\n    // @dev Internal function retire and mint certificates\n    function _retireAndMintCertificate(\n        address retiringEntity,\n        CreateRetirementRequestParams memory params\n    ) internal virtual whenNotPaused {\n        uint256[] memory retirementEventIds;\n        if (params.tokenIds.length == 0) {\n            uint256 retirementEventId = _retire(\n                msg.sender,\n                params.amount,\n                retiringEntity\n            );\n            retirementEventIds = new uint256[](1);\n            retirementEventIds[0] = retirementEventId;\n        } else {\n            retirementEventIds = new uint256[](params.tokenIds.length);\n            uint256 decimalMultiplier = 10**decimals();\n            for (uint256 i = 0; i < params.tokenIds.length; i++) {\n                //slither-disable-next-line unused-return\n                (, uint256 batchQuantity, ) = ICarbonOffsetBatches(\n                    IToucanContractRegistry(contractRegistry)\n                        .carbonOffsetBatchesAddress()\n                ).getBatchNFTData(params.tokenIds[i]);\n                uint256 retirementEventId = _retire(\n                    msg.sender,\n                    batchQuantity * decimalMultiplier,\n                    retiringEntity\n                );\n                retirementEventIds[i] = retirementEventId;\n            }\n        }\n        //slither-disable-next-line unused-return\n        IRetirementCertificates(\n            IToucanContractRegistry(contractRegistry)\n                .retirementCertificatesAddress()\n        ).mintCertificateWithExtraData(\n                retiringEntity,\n                params,\n                retirementEventIds\n            );\n    }\n\n    // -----------------------------\n    //      Locked ERC20 safety\n    // -----------------------------\n\n    /// @dev Modifier to disallowing sending tokens to either the 0-address\n    /// or this contract itself\n    modifier validDestination(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        _;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        validDestination(recipient)\n        whenNotPaused\n        returns (bool)\n    {\n        super.transfer(recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    )\n        public\n        virtual\n        override\n        validDestination(recipient)\n        whenNotPaused\n        returns (bool)\n    {\n        super.transferFrom(sender, recipient, amount);\n        return true;\n    }\n\n    /// @notice Return the name of the registry that this\n    /// factory is enabling to tokenize, eg., verra\n    /// @dev this must be overridden in the child contract\n    function standardRegistry() public virtual returns (string memory) {}\n\n    /// @notice Return the minimum precision supported by the registry\n    /// @dev this must be overridden in the child contract\n    function standardRegistryDecimals() public virtual returns (uint8) {}\n}\n"
    },
    "contracts/bases/ToucanCarbonOffsetsDirectRetirements.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport './ToucanCarbonOffsetsBase.sol';\n\n/// @notice Base contract for any TCO2 token that can be retired\n/// directly on-chain.\nabstract contract ToucanCarbonOffsetsDirectRetirements is\n    ToucanCarbonOffsetsBase\n{\n    // ----------------------------------------\n    //              Functions\n    // ----------------------------------------\n\n    /// @notice Retirement/Cancellation of TCO2 tokens (the actual offsetting),\n    /// which results in the tokens being burnt\n    function retire(uint256 amount)\n        external\n        virtual\n        whenNotPaused\n        returns (uint256 retirementEventId)\n    {\n        retirementEventId = _retire(msg.sender, amount, msg.sender);\n    }\n\n    /// @dev Allow for pools or third party contracts to retire for the user\n    /// Requires approval\n    function retireFrom(address account, uint256 amount)\n        external\n        virtual\n        whenNotPaused\n        returns (uint256 retirementEventId)\n    {\n        _spendAllowance(account, msg.sender, amount);\n        retirementEventId = _retire(account, amount, account);\n    }\n\n    /// @notice Retire an amount of TCO2s, register a retirement event\n    /// then mint a certificate passing a single retirementEventId.\n    /// @param retiringEntityString An identifiable string for the retiring entity, eg. their name.\n    /// @param beneficiary The beneficiary to set in the NFT.\n    /// @param beneficiaryString The beneficiaryString to set in the NFT.\n    /// @param retirementMessage The retirementMessage to set in the NFT.\n    /// @param amount The amount to retire and issue an NFT certificate for.\n    function retireAndMintCertificate(\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256 amount\n    ) external virtual whenNotPaused {\n        CreateRetirementRequestParams\n            memory params = CreateRetirementRequestParams({\n                tokenIds: new uint256[](0),\n                amount: amount,\n                retiringEntityString: retiringEntityString,\n                beneficiary: beneficiary,\n                beneficiaryString: beneficiaryString,\n                retirementMessage: retirementMessage,\n                beneficiaryLocation: '',\n                consumptionCountryCode: '',\n                consumptionPeriodStart: 0,\n                consumptionPeriodEnd: 0\n            });\n\n        _retireAndMintCertificate(msg.sender, params);\n    }\n}\n"
    },
    "contracts/bases/ToucanCarbonOffsetsEscrowableWithBatchBase.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport './ToucanCarbonOffsetsWithBatchBase.sol';\nimport {Errors} from '../libraries/Errors.sol';\n\n/// @notice Base contract that can be reused between different TCO2\n/// implementations that need to work with batch NFTs\nabstract contract ToucanCarbonOffsetsEscrowableWithBatchBase is\n    IERC721Receiver,\n    ToucanCarbonOffsetsWithBatchBase\n{\n    // ----------------------------------------\n    //       Events\n    // ----------------------------------------\n\n    event DetokenizationRequested(\n        address indexed user,\n        uint256 amount,\n        uint256 indexed requestId,\n        uint256[] batchIds\n    );\n    event DetokenizationReverted(uint256 indexed requestId);\n    event DetokenizationFinalized(uint256 indexed requestId);\n\n    event RetirementRequested(\n        address indexed user,\n        uint256 indexed requestId,\n        CreateRetirementRequestParams params\n    );\n    event RetirementReverted(uint256 indexed requestId);\n    event RetirementFinalized(uint256 indexed requestId);\n\n    // ----------------------------------------\n    //       Modifiers\n    // ----------------------------------------\n\n    modifier nonFractional(uint256 amount) {\n        uint256 maxPrecision = 10**standardRegistryDecimals();\n        require(\n            amount == (amount / maxPrecision) * maxPrecision,\n            Errors.TCO2_INVALID_DECIMALS\n        );\n\n        _;\n    }\n\n    // ----------------------------------------\n    //       Admin functions\n    // ----------------------------------------\n\n    /// @notice Finalize a detokenization request by burning its amount of TCO2. In case the amount requested is\n    /// smaller than the total amount of TCO2 in the batches, the last batch is split into two new batches, one that\n    /// balances the total to be the amount requested and the other with the remaining amount.\n    /// @dev Callable only by a detokenizer.\n    /// @param requestId The id of the request to finalize.\n    function finalizeDetokenization(uint256 requestId)\n        external\n        whenNotPaused\n        onlyWithRole(DETOKENIZER_ROLE)\n    {\n        address escrow = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsEscrowAddress();\n\n        // Finalize escrow request\n        IToucanCarbonOffsetsEscrow(escrow).finalizeDetokenizationRequest(\n            requestId\n        );\n\n        emit DetokenizationFinalized(requestId);\n    }\n\n    /// @notice Revert a detokenization request\n    /// @param requestId The request id in the escrow contract that\n    /// tracks the detokenization request\n    function revertDetokenization(uint256 requestId)\n        external\n        whenNotPaused\n        onlyWithRole(DETOKENIZER_ROLE)\n    {\n        address escrow = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsEscrowAddress();\n\n        // Mark escrow request as reverted\n        IToucanCarbonOffsetsEscrow(escrow).revertDetokenizationRequest(\n            requestId\n        );\n\n        emit DetokenizationReverted(requestId);\n    }\n\n    /// @notice Finalize a retirement request by burning its amount of TCO2 and minting a certificate for the\n    /// beneficiary. In case the amount requested is smaller than the total amount of TCO2 in the batches, the last\n    /// batch is split into two new batches, one that balances the total to be the amount requested and the other with\n    /// the remaining amount.\n    /// @dev Callable only by a retirement approver.\n    /// @param requestId The ID of the request to finalize.\n    function finalizeRetirement(uint256 requestId)\n        external\n        whenNotPaused\n        onlyWithRole(RETIREMENT_ROLE)\n    {\n        address escrow = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsEscrowAddress();\n\n        // Finalize escrow request\n        IToucanCarbonOffsetsEscrow(escrow).finalizeRetirementRequest(requestId);\n\n        emit RetirementFinalized(requestId);\n    }\n\n    /// @notice Revert a retirement request\n    /// @param requestId The request id in the escrow contract that\n    /// tracks the retirement request\n    function revertRetirement(uint256 requestId)\n        external\n        whenNotPaused\n        onlyWithRole(RETIREMENT_ROLE)\n    {\n        address escrow = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsEscrowAddress();\n\n        // Mark escrow request as reverted\n        IToucanCarbonOffsetsEscrow(escrow).revertRetirementRequest(requestId);\n\n        emit RetirementReverted(requestId);\n    }\n\n    // ----------------------------------------\n    //       Permissionless functions\n    // ----------------------------------------\n\n    /// @notice Request a detokenization of batch-NFTs. The amount of TCO2 to detokenize will be transferred from\n    /// the user to an escrow contract.\n    /// @dev This function is permissionless and can be called by anyone\n    /// @param tokenIds Token IDs of one or more batches to detokenize\n    /// @param amount The amount of TCO2 to detokenize, must be greater than zero and equal to or smaller than the\n    /// total amount of the batches (and also greater then the total amount of all the batches except the last one)\n    /// @return requestId The ID of the request in the escrow contract\n    function requestDetokenization(uint256[] calldata tokenIds, uint256 amount)\n        external\n        nonFractional(amount)\n        whenNotPaused\n        returns (uint256 requestId)\n    {\n        address escrow = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsEscrowAddress();\n\n        // Create escrow contract request, and transfer TCO2s from sender to escrow contract\n        require(approve(escrow, amount), Errors.TCO2_APPROVAL_AMT_FAILED);\n        requestId = IToucanCarbonOffsetsEscrow(escrow)\n            .createDetokenizationRequest(_msgSender(), amount, tokenIds);\n\n        emit DetokenizationRequested(_msgSender(), amount, requestId, tokenIds);\n    }\n\n    /// @notice Request a retirement of TCO2s from batch-NFTs. The amount of TCO2s to retire will be transferred\n    /// from the user to an escrow contract.\n    /// @dev This function is permissionless and can be called by anyone\n    /// @param params The parameters of the retirement request:\n    ///     uint256[] tokenIds One or more batches to retire\n    ///     uint256 amount The amount of TCO2 to retire, must be greater than zero and equal to or smaller than the\n    /// total amount of the batches (and also greater then the total amount of all the batches except the last one)\n    ///     string retiringEntityString The name of the retiring entity\n    ///     address beneficiary The address of the beneficiary of the retirement\n    ///     string beneficiaryString The name of the beneficiary of the retirement\n    ///     string retirementMessage A message to be included in the retirement certificate\n    ///     string beneficiaryLocation The location of the beneficiary of the retirement\n    ///     string consumptionCountryCode The country code of the consumption location\n    ///     uint256 consumptionPeriodStart The start of the consumption period, in seconds since the epoch\n    ///     uint256 consumptionPeriodEnd The end of the consumption period, in seconds since the epoch\n    /// @return requestId The ID of the request in the escrow contract\n    function requestRetirement(CreateRetirementRequestParams calldata params)\n        external\n        nonFractional(params.amount)\n        whenNotPaused\n        returns (uint256 requestId)\n    {\n        address escrow = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsEscrowAddress();\n\n        // Create escrow contract request, and transfer TCO2s from sender to escrow contract\n        require(\n            approve(escrow, params.amount),\n            Errors.TCO2_APPROVAL_AMT_FAILED\n        );\n        requestId = IToucanCarbonOffsetsEscrow(escrow).createRetirementRequest(\n            _msgSender(),\n            params\n        );\n\n        emit RetirementRequested(_msgSender(), requestId, params);\n    }\n\n    function retireAndMintCertificateForEntity(\n        address retiringEntity,\n        CreateRetirementRequestParams calldata params\n    ) external virtual onlyEscrow {\n        _retireAndMintCertificate(retiringEntity, params);\n    }\n}\n"
    },
    "contracts/bases/ToucanCarbonOffsetsFactoryBase.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\n\nimport '../bases/RoleInitializer.sol';\nimport '../interfaces/IToucanContractRegistry.sol';\nimport '../interfaces/ICarbonProjects.sol';\nimport '../interfaces/ICarbonProjectVintages.sol';\nimport '../libraries/ProjectUtils.sol';\nimport '../libraries/ProjectVintageUtils.sol';\nimport '../libraries/Strings.sol';\nimport '../libraries/Modifiers.sol';\nimport '../ToucanCarbonOffsetsFactoryStorage.sol';\n\n/// @notice This TCO2 factory base should be used for any logic specific implementation\nabstract contract ToucanCarbonOffsetsFactoryBase is\n    ToucanCarbonOffsetsFactoryStorageV1,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    UUPSUpgradeable,\n    ProjectUtils,\n    ProjectVintageUtils,\n    Modifiers,\n    ToucanCarbonOffsetsFactoryStorage,\n    RoleInitializer\n{\n    using Strings for string;\n\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev divider to calculate fees in basis points\n    uint256 public constant bridgeFeeDivider = 1e4;\n\n    /// @dev All roles related to accessing this contract\n    bytes32 public constant DETOKENIZER_ROLE = keccak256('DETOKENIZER_ROLE');\n    bytes32 public constant TOKENIZER_ROLE = keccak256('TOKENIZER_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event TokenCreated(uint256 vintageTokenId, address tokenAddress);\n    event AddedToAllowedBridges(address account);\n    event RemovedFromallowedBridges(address account);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function __ToucanCarbonOffsetsFactoryBase_init(\n        address[] calldata accounts,\n        bytes32[] calldata roles\n    ) internal {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n        __RoleInitializer_init_unchained(accounts, roles);\n    }\n\n    // ----------------------------------------\n    //           Admin functions\n    // ----------------------------------------\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    /// @dev sets the Beacon that tracks the current implementation logic of the TCO2s\n    function setBeacon(address _beacon) external onlyOwner {\n        beacon = _beacon;\n    }\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() external onlyBy(contractRegistry, owner()) {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() external onlyBy(contractRegistry, owner()) {\n        _unpause();\n    }\n\n    /// @dev set the registry contract to be tracked\n    function setToucanContractRegistry(address _address) external onlyOwner {\n        contractRegistry = _address;\n    }\n\n    /// @notice adds account to the allowedBridges list\n    /// meant to be used only for cross-chain bridging\n    function addToAllowedBridges(address account) external onlyOwner {\n        bool isAllowed = allowedBridges[account];\n        require(!isAllowed, 'Already allowed');\n\n        allowedBridges[account] = true;\n        emit AddedToAllowedBridges(account);\n    }\n\n    /// @notice removes account from the allowedBridges list\n    /// meant to be used only for cross-chain bridging\n    function removeFromAllowedBridges(address account) external onlyOwner {\n        bool isAllowed = allowedBridges[account];\n        require(isAllowed, 'Already not allowed');\n\n        allowedBridges[account] = false;\n        emit RemovedFromallowedBridges(account);\n    }\n\n    // ----------------------------------------\n    //       Permissionless functions\n    // ----------------------------------------\n\n    /// @notice internal factory function to deploy new TCO2 (ERC20) contracts\n    /// @dev the function creates a new BeaconProxy for each TCO2\n    /// @param projectVintageTokenId links the vintage-specific data to the TCO2 contract\n    function deployNewProxy(uint256 projectVintageTokenId)\n        internal\n        virtual\n        whenNotPaused\n    {\n        require(beacon != address(0), 'Error: Beacon for proxy not set');\n        require(\n            !checkExistence(projectVintageTokenId),\n            'pvERC20 already exists'\n        );\n        checkProjectVintageTokenExists(contractRegistry, projectVintageTokenId);\n\n        /// Ensure that the TCO2 to be deployed is for a standard that is supported\n        /// by the standard registry.\n        require(hasValidStandard(projectVintageTokenId), 'Invalid standard');\n\n        /// @dev generate payload for initialize function\n        string memory signature = 'initialize(string,string,uint256,address)';\n        bytes memory payload = abi.encodeWithSignature(\n            signature,\n            'Toucan Protocol: TCO2',\n            'TCO2',\n            projectVintageTokenId,\n            contractRegistry\n        );\n\n        //slither-disable-next-line reentrancy-no-eth\n        BeaconProxy proxyTCO2 = new BeaconProxy(beacon, payload);\n\n        IToucanContractRegistry(contractRegistry).addERC20(\n            address(proxyTCO2),\n            standardRegistry()\n        );\n\n        deployedContracts.push(address(proxyTCO2));\n        pvIdtoERC20[projectVintageTokenId] = address(proxyTCO2);\n\n        emit TokenCreated(projectVintageTokenId, address(proxyTCO2));\n    }\n\n    /// @dev Deploys a TCO2 contract based on a project vintage\n    /// @param projectVintageTokenId numeric tokenId from vintage in `CarbonProjectVintages`\n    function deployFromVintage(uint256 projectVintageTokenId)\n        external\n        virtual\n        whenNotPaused\n    {\n        deployNewProxy(projectVintageTokenId);\n    }\n\n    /// @dev Checks if same project vintage has already been deployed\n    function checkExistence(uint256 projectVintageTokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        if (pvIdtoERC20[projectVintageTokenId] == address(0)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function hasValidStandard(uint256 projectVintageTokenId)\n        internal\n        view\n        returns (bool)\n    {\n        // Fetch contracts from contract registry\n        address tcnRegistry = contractRegistry;\n        address pc = IToucanContractRegistry(tcnRegistry)\n            .carbonProjectsAddress();\n        address vc = IToucanContractRegistry(tcnRegistry)\n            .carbonProjectVintagesAddress();\n\n        // Fetch carbon data\n        VintageData memory vintageData = ICarbonProjectVintages(vc)\n            .getProjectVintageDataByTokenId(projectVintageTokenId);\n        ProjectData memory projectData = ICarbonProjects(pc)\n            .getProjectDataByTokenId(vintageData.projectTokenId);\n\n        // Check whether standard in carbon data matches supported standards\n        // in the current factory\n        string[] memory standards = supportedStandards();\n        uint256 supportedStandardsLen = standards.length;\n        string memory candidateStandard = projectData.standard;\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < supportedStandardsLen; ) {\n            string memory supportedStandard = standards[i];\n\n            if (candidateStandard.equals(supportedStandard)) {\n                return true;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        return false;\n    }\n\n    /// @dev Returns all addresses of deployed TCO2 contracts\n    function getContracts() external view virtual returns (address[] memory) {\n        return deployedContracts;\n    }\n\n    function bridgeFeeReceiverAddress()\n        external\n        view\n        virtual\n        returns (address)\n    {\n        return bridgeFeeReceiver;\n    }\n\n    function getBridgeFeeAndBurnAmount(uint256 _quantity)\n        external\n        view\n        virtual\n        returns (uint256, uint256)\n    {\n        //slither-disable-next-line divide-before-multiply\n        uint256 feeAmount = (_quantity * bridgeFeePercentageInBase) /\n            bridgeFeeDivider;\n        //slither-disable-next-line divide-before-multiply\n        uint256 burnAmount = (feeAmount * bridgeFeeBurnPercentageInBase) /\n            bridgeFeeDivider;\n        return (feeAmount, burnAmount);\n    }\n\n    /// @notice Update the bridge fee percentage\n    /// @param _bridgeFeePercentageInBase percentage of bridge fee in base\n    function setBridgeFeePercentage(uint256 _bridgeFeePercentageInBase)\n        external\n        onlyOwner\n    {\n        require(\n            _bridgeFeePercentageInBase < bridgeFeeDivider,\n            'bridge fee percentage must be lower than bridge fee divider'\n        );\n        bridgeFeePercentageInBase = _bridgeFeePercentageInBase;\n    }\n\n    /// @notice Update the bridge fee receiver\n    /// @param _bridgeFeeReceiver address to transfer the fees\n    function setBridgeFeeReceiver(address _bridgeFeeReceiver)\n        external\n        onlyOwner\n    {\n        bridgeFeeReceiver = _bridgeFeeReceiver;\n    }\n\n    /// @notice Update the bridge fee burning percentage\n    /// @param _bridgeFeeBurnPercentageInBase percentage of bridge fee in base\n    function setBridgeFeeBurnPercentage(uint256 _bridgeFeeBurnPercentageInBase)\n        external\n        onlyOwner\n    {\n        require(\n            _bridgeFeeBurnPercentageInBase < bridgeFeeDivider,\n            'burn fee percentage must be lower than bridge fee divider'\n        );\n        bridgeFeeBurnPercentageInBase = _bridgeFeeBurnPercentageInBase;\n    }\n\n    /// @notice Update the bridge fee burn address\n    /// @param _bridgeFeeBurnAddress address to transfer the fees to burn\n    function setBridgeFeeBurnAddress(address _bridgeFeeBurnAddress)\n        external\n        onlyOwner\n    {\n        bridgeFeeBurnAddress = _bridgeFeeBurnAddress;\n    }\n\n    /// @notice Return the name of the registry that this\n    /// factory is enabling to tokenize, eg., verra\n    /// @dev this must be overridden in the child contract\n    function standardRegistry() public pure virtual returns (string memory) {}\n\n    /// @notice Return the standard(s) supported by the carbon\n    /// registry from where this factory tokenizes credits, eg., VCS\n    /// It's important to satisfy this interface in order to ensure\n    /// that TCO2 factories cannot create TCO2s for standards that\n    /// the standard registry does not support\n    function supportedStandards()\n        public\n        pure\n        virtual\n        returns (string[] memory)\n    {}\n}\n"
    },
    "contracts/bases/ToucanCarbonOffsetsWithBatchBase.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport './ToucanCarbonOffsetsBase.sol';\nimport {Errors} from '../libraries/Errors.sol';\n\n/// @notice Base contract that can be reused between different TCO2\n/// implementations that need to work with batch NFTs\nabstract contract ToucanCarbonOffsetsWithBatchBase is\n    IERC721Receiver,\n    ToucanCarbonOffsetsBase\n{\n    // ----------------------------------------\n    //       Admin functions\n    // ----------------------------------------\n\n    /// @notice Defractionalize batch NFT by burning the amount\n    /// of TCO2 from the sender and transfer the batch NFT that\n    /// was selected to the sender.\n    /// The only valid sender currently is the TCO2 factory owner.\n    /// @param tokenId The batch NFT to defractionalize from the TCO2\n    function defractionalize(uint256 tokenId)\n        external\n        whenNotPaused\n        onlyFactoryOwner\n    {\n        address batchNFT = IToucanContractRegistry(contractRegistry)\n            .carbonOffsetBatchesAddress();\n\n        // Fetch and burn amount of the NFT to be defractionalized\n        (\n            ,\n            uint256 batchAmount,\n            BatchStatus status\n        ) = _getNormalizedDataFromBatch(batchNFT, tokenId);\n        require(\n            status == BatchStatus.Confirmed,\n            Errors.TCO2_BATCH_NOT_CONFIRMED\n        );\n        _burn(msg.sender, batchAmount);\n\n        // Transfer batch NFT to sender\n        IERC721(batchNFT).transferFrom(address(this), msg.sender, tokenId);\n    }\n\n    /// @notice Receive hook to fractionalize Batch-NFTs into ERC20's\n    /// @dev Function is called with `operator` as `msg.sender` in a reference implementation by OZ\n    /// `from` is the previous owner, not necessarily the same as operator.\n    /// The hook checks if NFT collection is whitelisted and next if attributes are matching this ERC20 contract\n    function onERC721Received(\n        address, /* operator */\n        address from,\n        uint256 tokenId,\n        bytes calldata /* data */\n    ) external virtual override whenNotPaused returns (bytes4) {\n        // msg.sender is the CarbonOffsetBatches contract\n        require(\n            checkWhiteListed(msg.sender),\n            Errors.TCO2_BATCH_NOT_WHITELISTED\n        );\n\n        (\n            uint256 gotVintageTokenId,\n            uint256 quantity,\n            BatchStatus status\n        ) = _getNormalizedDataFromBatch(msg.sender, tokenId);\n        require(\n            gotVintageTokenId == _projectVintageTokenId,\n            Errors.TCO2_NON_MATCHING_NFT\n        );\n        // don't mint TCO2s for received batches that are in detokenization/retirement requested status\n        if (\n            status == BatchStatus.DetokenizationRequested ||\n            status == BatchStatus.RetirementRequested\n        ) return this.onERC721Received.selector;\n        // mint TCO2s for received batches that are in confirmed status\n        require(\n            status == BatchStatus.Confirmed,\n            Errors.TCO2_BATCH_NOT_CONFIRMED\n        );\n        require(getRemaining() >= quantity, Errors.TCO2_QTY_HIGHER);\n\n        minterToId[from] = tokenId;\n        IToucanCarbonOffsetsFactory tco2Factory = IToucanCarbonOffsetsFactory(\n            IToucanContractRegistry(contractRegistry)\n                .toucanCarbonOffsetsFactoryAddress(standardRegistry())\n        );\n        address bridgeFeeReceiver = tco2Factory.bridgeFeeReceiverAddress();\n\n        if (bridgeFeeReceiver == address(0x0)) {\n            // if no bridge fee receiver address is set, mint without fees\n            _mint(from, quantity);\n        } else {\n            // calculate bridge fees\n            (uint256 feeAmount, uint256 feeBurnAmount) = tco2Factory\n                .getBridgeFeeAndBurnAmount(quantity);\n            _mint(from, quantity - feeAmount);\n            address bridgeFeeBurnAddress = tco2Factory.bridgeFeeBurnAddress();\n            // we mint the burn fee to the bridge fee burn address so it can be retired later.\n            // if there is no address configured we just mint the full amount to the bridge fee receiver.\n            if (bridgeFeeBurnAddress != address(0x0) && feeBurnAmount > 0) {\n                feeAmount -= feeBurnAmount;\n                _mint(bridgeFeeReceiver, feeAmount);\n                _mint(bridgeFeeBurnAddress, feeBurnAmount);\n                emit FeePaid(from, feeAmount);\n                emit FeeBurnt(from, feeBurnAmount);\n            } else if (feeAmount > 0) {\n                _mint(bridgeFeeReceiver, feeAmount);\n                emit FeePaid(from, feeAmount);\n            }\n        }\n\n        return this.onERC721Received.selector;\n    }\n\n    // ----------------------------------------\n    //       Internal functions\n    // ----------------------------------------\n\n    function _getNormalizedDataFromBatch(address cob, uint256 tokenId)\n        internal\n        view\n        returns (\n            uint256,\n            uint256,\n            BatchStatus\n        )\n    {\n        (\n            uint256 vintageTokenId,\n            uint256 quantity,\n            BatchStatus status\n        ) = ICarbonOffsetBatches(cob).getBatchNFTData(tokenId);\n        return (vintageTokenId, _batchAmountToTCO2Amount(quantity), status);\n    }\n\n    function _batchAmountToTCO2Amount(uint256 batchAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        return batchAmount * 10**decimals();\n    }\n\n    /// @dev Internal helper to check if CarbonOffsetBatches is whitelisted (official)\n    function checkWhiteListed(address collection)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        if (\n            collection ==\n            IToucanContractRegistry(contractRegistry)\n                .carbonOffsetBatchesAddress()\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "contracts/CarbonOffsetBatches.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\nimport './interfaces/ICarbonOffsetBatches.sol';\nimport './interfaces/ICarbonProjectVintages.sol';\nimport './interfaces/IToucanCarbonOffsets.sol';\nimport './interfaces/IToucanCarbonOffsetsFactory.sol';\nimport './interfaces/IToucanContractRegistry.sol';\nimport './CarbonOffsetBatchesStorage.sol';\nimport {Errors} from './libraries/Errors.sol';\nimport './libraries/ProjectVintageUtils.sol';\nimport './libraries/Modifiers.sol';\nimport './libraries/Strings.sol';\n\n/// @title A contract for managing batches of carbon credits\n/// @notice Also referred to as Batch-Contract (formerly BatchCollection)\n/// Contract that tokenizes retired/cancelled CO2 credits into NFTs via a claims process\ncontract CarbonOffsetBatches is\n    ICarbonOffsetBatches,\n    ERC721EnumerableUpgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    UUPSUpgradeable,\n    ProjectVintageUtils,\n    Modifiers,\n    CarbonOffsetBatchesStorage\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using Strings for string;\n\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.5.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    /// @dev All roles related to accessing this contract\n    bytes32 public constant VERIFIER_ROLE = keccak256('VERIFIER_ROLE');\n    bytes32 public constant TOKENIZER_ROLE = keccak256('TOKENIZER_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event BatchMinted(address sender, uint256 tokenId);\n    event BatchUpdated(uint256 tokenId, string serialNumber, uint256 quantity);\n    event BatchLinkedWithVintage(\n        uint256 tokenId,\n        uint256 projectVintageTokenId\n    );\n    event BatchComment(\n        uint256 tokenId,\n        uint256 commentId,\n        address sender,\n        string comment\n    );\n    event BatchStatusUpdate(uint256 tokenId, BatchStatus status);\n    event RegistrySupported(string registry, bool isSupported);\n    event Tokenized(\n        uint256 tokenId,\n        address tco2,\n        address indexed recipient,\n        uint256 amount\n    );\n\n    event Split(uint256 tokenId, uint256 newTokenId);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(address _contractRegistry)\n        external\n        virtual\n        initializer\n    {\n        __Context_init_unchained();\n        __ERC721_init_unchained(\n            'Toucan Protocol: Carbon Offset Batches',\n            'TOUCAN-COB'\n        );\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __AccessControl_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n\n        contractRegistry = _contractRegistry;\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    // Poor person's modifiers\n    // ------------------------\n\n    function onlyWithRole(bytes32 role) internal view {\n        if (!hasRole(role, msg.sender)) revert(Errors.COB_INVALID_CALLER);\n    }\n\n    function onlyEscrow() internal view {\n        address escrow = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsEscrowAddress();\n        if (escrow != msg.sender) revert(Errors.COB_INVALID_CALLER);\n    }\n\n    function onlyPending(uint256 tokenId) internal view {\n        if (nftList[tokenId].status != BatchStatus.Pending)\n            revert(Errors.COB_INVALID_STATUS);\n    }\n\n    function onlyApprovedOrOwner(uint256 tokenId) internal view {\n        if (!_isApprovedOrOwner(_msgSender(), tokenId))\n            revert(Errors.COB_TRANSFER_NOT_APPROVED);\n    }\n\n    function onlyVerifierOrBatchOwner(uint256 tokenId) internal view {\n        if (\n            ownerOf(tokenId) != _msgSender() &&\n            !hasRole(VERIFIER_ROLE, msg.sender)\n        ) revert(Errors.COB_NOT_VERIFIER_OR_BATCH_OWNER);\n    }\n\n    function onlyValidNewStatus(BatchStatus statusA, BatchStatus statusB)\n        internal\n        pure\n    {\n        if (statusA != statusB) revert(Errors.COB_INVALID_NEW_STATUS);\n    }\n\n    function onlyUnpaused() internal view {\n        if (paused()) revert(Errors.COB_PAUSED_CONTRACT);\n    }\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), callable only by the Toucan contract registry or the contract owner\n    function pause() external onlyBy(contractRegistry, owner()) {\n        _pause();\n    }\n\n    /// @notice Emergency function to re-enable contract's core functionality after being paused\n    /// @dev wraps _unpause(), callable only by the Toucan contract registry or the contract owner\n    function unpause() external onlyBy(contractRegistry, owner()) {\n        _unpause();\n    }\n\n    /// @notice Admin function to set the contract registry\n    /// @dev Callable only by the contract owner\n    /// @param _address The address of the new contract registry\n    function setToucanContractRegistry(address _address) external onlyOwner {\n        contractRegistry = _address;\n    }\n\n    /// @notice Admin function to set whether a registry is supported\n    /// @dev Callable only by the contract owner; executable only if the status can be changed\n    /// @param registry The registry to set supported status for\n    /// @param isSupported Whether the registry should be supported\n    function setSupportedRegistry(string memory registry, bool isSupported)\n        external\n        onlyOwner\n    {\n        if (supportedRegistries[registry] == isSupported)\n            revert(Errors.COB_ALREADY_SUPPORTED);\n\n        supportedRegistries[registry] = isSupported;\n        emit RegistrySupported(registry, isSupported);\n    }\n\n    /// @dev internal helper function to set the status and emit an event\n    function _updateStatus(uint256 tokenId, BatchStatus newStatus)\n        internal\n        virtual\n    {\n        nftList[tokenId].status = newStatus;\n        emit BatchStatusUpdate(tokenId, newStatus);\n    }\n\n    /// @notice Set the status of a batch to a new status\n    /// for detokenization or retirement requests.\n    ///\n    /// Valid transitions:\n    /// - In case a user makes a request:\n    ///   - Confirmed -> DetokenizationRequested\n    ///   - Confirmed -> RetirementRequested\n    /// - In case a DETOKENIZER_ROLE in TCO2 finalizes a request:\n    ///   - DetokenizationRequested -> DetokenizationFinalized\n    ///   - RetirementRequested -> RetirementFinalized\n    /// - In case a DETOKENIZER_ROLE in TCO2 reverts a request:\n    ///   - DetokenizationRequested -> Confirmed\n    ///   - RetirementRequested -> Confirmed\n    ///\n    /// @dev Callable only by the escrow contract, only for batches owned by a TCO2 contract\n    /// @param tokenId The token ID of the batch\n    /// @param newStatus The new status to set\n    function setStatusForDetokenizationOrRetirement(\n        uint256 tokenId,\n        BatchStatus newStatus\n    ) external virtual override {\n        onlyUnpaused();\n        onlyEscrow();\n        address tokenOwner = ownerOf(tokenId);\n        if (!IToucanContractRegistry(contractRegistry).isValidERC20(tokenOwner))\n            revert(Errors.COB_INVALID_BATCH_OWNER);\n        BatchStatus currentStatus = nftList[tokenId].status;\n        // Only valid transition to a requested status is from a confirmed batch\n        if (\n            newStatus == BatchStatus.DetokenizationRequested ||\n            newStatus == BatchStatus.RetirementRequested\n        ) {\n            onlyValidNewStatus(currentStatus, BatchStatus.Confirmed);\n            // Only valid transition to a finalized status is from a requested status\n        } else if (newStatus == BatchStatus.DetokenizationFinalized) {\n            onlyValidNewStatus(\n                currentStatus,\n                BatchStatus.DetokenizationRequested\n            );\n        } else if (newStatus == BatchStatus.RetirementFinalized) {\n            onlyValidNewStatus(currentStatus, BatchStatus.RetirementRequested);\n            // Only valid transition to a confirmed status is from a requested status\n        } else if (newStatus == BatchStatus.Confirmed) {\n            if (\n                currentStatus != BatchStatus.DetokenizationRequested &&\n                currentStatus != BatchStatus.RetirementRequested\n            ) revert(Errors.COB_INVALID_NEW_STATUS);\n        } else {\n            revert(Errors.COB_INVALID_NEW_STATUS);\n        }\n        _updateStatus(tokenId, newStatus);\n    }\n\n    /// @notice Function to approve a Batch-NFT after validation.\n    /// Fractionalization requires status Confirmed.\n    /// @dev Callable only by verifiers, only for pending batches. This flow requires a previous linking with a vintage\n    /// @param tokenId The token ID of the batch\n    function confirmBatch(uint256 tokenId) external virtual {\n        onlyUnpaused();\n        onlyWithRole(VERIFIER_ROLE);\n        _confirmBatch(tokenId);\n    }\n\n    /// @dev Internal function that requires a previous linking with a `projectVintageTokenId`.\n    function _confirmBatch(uint256 _tokenId) internal {\n        if (!_exists(_tokenId)) revert(Errors.COB_NOT_EXISTS);\n        onlyPending(_tokenId);\n        if (nftList[_tokenId].projectVintageTokenId == 0)\n            revert(Errors.COB_MISSING_VINTAGE);\n        if (serialNumberApproved[nftList[_tokenId].serialNumber])\n            revert(Errors.COB_ALREADY_APPROVED);\n        // setting serialnumber as unique after confirmation\n        serialNumberApproved[nftList[_tokenId].serialNumber] = true;\n        _updateStatus(_tokenId, BatchStatus.Confirmed);\n    }\n\n    /// @notice Reject Batch-NFTs, e.g. if the serial number entered is incorrect.\n    /// @dev Callable only by verifiers, only for pending batches.\n    /// @param tokenId The token ID of the batch\n    function rejectBatch(uint256 tokenId) public virtual {\n        onlyUnpaused();\n        onlyWithRole(VERIFIER_ROLE);\n        onlyPending(tokenId);\n\n        // unsetting serialnumber with rejection\n        serialNumberApproved[nftList[tokenId].serialNumber] = false;\n        _updateStatus(tokenId, BatchStatus.Rejected);\n    }\n\n    /// @notice Function to reject Batch-NFTs, including a reason to be displayed to the user.\n    function rejectWithComment(uint256 tokenId, string memory comment)\n        external\n        virtual\n    {\n        onlyUnpaused();\n        rejectBatch(tokenId);\n        _addComment(tokenId, comment);\n    }\n\n    /// @dev admin function to reject a previously approved batch\n    /// Requires that the Batch-NFT has not been fractionalized yet\n    function rejectApprovedWithComment(uint256 tokenId, string memory comment)\n        external\n    {\n        onlyUnpaused();\n        onlyWithRole(VERIFIER_ROLE);\n        if (nftList[tokenId].status != BatchStatus.Confirmed)\n            revert(Errors.COB_NOT_CONFIRMED);\n        if (\n            IToucanContractRegistry(contractRegistry).isValidERC20(\n                ownerOf(tokenId)\n            )\n        ) revert(Errors.COB_ALREADY_FRACTIONALIZED);\n        _updateStatus(tokenId, BatchStatus.Rejected);\n        _addComment(tokenId, comment);\n    }\n\n    /// @notice Set batches back to pending after a rejection. This can\n    /// be useful if there was an issue unrelated to the on-chain data of the\n    /// batch, e.g. the batch was incorrectly rejected.\n    /// @dev Callable only by verifiers, only for rejected batches.\n    /// @param tokenId The token ID of the batch\n    function setToPending(uint256 tokenId) external virtual {\n        onlyUnpaused();\n        onlyWithRole(VERIFIER_ROLE);\n        if (nftList[tokenId].status != BatchStatus.Rejected)\n            revert(Errors.COB_NOT_REJECTED);\n        _updateStatus(tokenId, BatchStatus.Pending);\n    }\n\n    /// @notice Link Batch-NFT with Vintage\n    /// @dev Function for alternative flow where Batch-NFT approval is done separately. Callable only by verifiers.\n    /// @param tokenId The token ID of the batch\n    /// @param projectVintageTokenId The token ID of the vintage\n    function linkWithVintage(uint256 tokenId, uint256 projectVintageTokenId)\n        external\n        virtual\n    {\n        onlyUnpaused();\n        onlyWithRole(VERIFIER_ROLE);\n        _linkWithVintage(tokenId, projectVintageTokenId);\n    }\n\n    // @dev Function to internally link with Vintage when Batch-NFT approval is done seperately.\n    function _linkWithVintage(uint256 _tokenId, uint256 _projectVintageTokenId)\n        internal\n    {\n        checkProjectVintageTokenExists(\n            contractRegistry,\n            _projectVintageTokenId\n        );\n        nftList[_tokenId].projectVintageTokenId = _projectVintageTokenId;\n        emit BatchLinkedWithVintage(_tokenId, _projectVintageTokenId);\n    }\n\n    /// @notice Link with vintage and confirm Batch-NFT\n    /// @dev Function for main approval flow. Callable only by verifiers.\n    /// @param tokenId The token ID of the batch\n    /// @param projectVintageTokenId The token ID of the vintage\n    function confirmBatchWithVintage(\n        uint256 tokenId,\n        uint256 projectVintageTokenId\n    ) external virtual {\n        onlyUnpaused();\n        onlyWithRole(VERIFIER_ROLE);\n        // We don't want this to be a \"backdoor\" for modifying the vintage; it\n        // could be insecure or allow accidents to happen, and it would also\n        // result in BatchLinkedWithVintage being emitted more than once per\n        // batch.\n        if (nftList[tokenId].projectVintageTokenId != 0)\n            revert(Errors.COB_VINTAGE_ALREADY_SET);\n        _linkWithVintage(tokenId, projectVintageTokenId);\n        _confirmBatch(tokenId);\n    }\n\n    /// @notice Remove a previously approved serial number\n    /// @dev Function to remove uniqueness for previously set serialnumbers. Callable only by verifiers.\n    /// N.B. even though (technically speaking) calling this to complete the\n    /// upgrade to a fixed contract is the responsibility of the contract's\n    /// owner (deployer), in practice that is a multi-sig even before upgrade,\n    /// and unsetting a bunch of serials via multi-sig is not practical.\n    /// So instead we allow the verifiers to do it.\n    /// @param serialNumber The serial number to unset\n    function unsetSerialNumber(string memory serialNumber) external {\n        onlyWithRole(VERIFIER_ROLE);\n        serialNumberApproved[serialNumber] = false;\n    }\n\n    // ----------------------------------\n    //  (Semi-)Permissionless functions\n    // ----------------------------------\n\n    /// @notice Permissionlessly mint empty Batch-NFTs\n    /// Entry point to the carbon bridging process.\n    /// @dev To be updated by NFT owner after serial number has been provided\n    /// @param to The address the NFT should be minted to. This should be the user.\n    /// @return The token ID of the newly minted NFT\n    function mintEmptyBatch(address to) external virtual returns (uint256) {\n        onlyUnpaused();\n        return _mintEmptyBatch(to, to);\n    }\n\n    /// @notice Permissionlessly mint empty Batch-NFTs\n    /// Entry point to the carbon bridging process.\n    /// @dev To be updated by NFT owner after serial number has been provided\n    /// @param to The address the NFT should be minted to. This should be the user\n    /// but can also be the CarbonOffsetBatches contract itself in case the batch-NFT\n    /// is held temporarily by the contract before fractionalization (see tokenize()).\n    /// @param onBehalfOf The address of user on behalf of whom the batch is minted\n    /// @return newItemId The token ID of the newly minted NFT\n    function _mintEmptyBatch(address to, address onBehalfOf)\n        internal\n        returns (uint256 newItemId)\n    {\n        newItemId = batchTokenCounter;\n        unchecked {\n            ++newItemId;\n        }\n        batchTokenCounter = newItemId;\n\n        _safeMint(to, newItemId);\n        nftList[newItemId].status = BatchStatus.Pending;\n\n        emit BatchMinted(onBehalfOf, newItemId);\n    }\n\n    /// @notice Update Batch-NFT after Serialnumber has been verified\n    /// @dev Data is usually inserted by the user (NFT owner) via the UI. Callable only by verifiers or the batch-NFT\n    /// owner.\n    /// @param tokenId The token ID of the batch\n    /// @param serialNumber The serial number received from the registry/credit cancellation\n    /// @param quantity Quantity in tCO2e, greater than 0\n    /// @param uri Optional tokenURI with additional information\n    function updateBatchWithData(\n        uint256 tokenId,\n        string memory serialNumber,\n        uint256 quantity,\n        string memory uri\n    ) external virtual {\n        onlyUnpaused();\n        onlyVerifierOrBatchOwner(tokenId);\n        onlyPending(tokenId);\n        _updateSerialAndQuantity(tokenId, serialNumber, quantity);\n\n        if (!uri.equals(nftList[tokenId].uri)) nftList[tokenId].uri = uri;\n    }\n\n    /// @notice Internal function that updates batch-NFT after serial number has been verified\n    function _updateSerialAndQuantity(\n        uint256 tokenId,\n        string memory serialNumber,\n        uint256 quantity\n    ) internal {\n        if (serialNumberApproved[serialNumber])\n            revert(Errors.COB_ALREADY_APPROVED);\n        if (quantity == 0) revert(Errors.COB_INVALID_QUANTITY);\n        nftList[tokenId].serialNumber = serialNumber;\n        nftList[tokenId].quantity = quantity;\n\n        emit BatchUpdated(tokenId, serialNumber, quantity);\n    }\n\n    /// @notice Update batch-NFT with serial number and quantity only\n    /// @dev Convenience function to only update serial number and quantity and not the serial/URI. Callable only by a\n    /// verifier or the batch-NFT owner.\n    /// @param tokenId The token ID of the batch\n    /// @param newSerialNumber The serial number received from the registry/credit cancellation\n    /// @param newQuantity Quantity in tCO2e, greater than 0\n    function setSerialandQuantity(\n        uint256 tokenId,\n        string memory newSerialNumber,\n        uint256 newQuantity\n    ) external virtual {\n        onlyUnpaused();\n        onlyVerifierOrBatchOwner(tokenId);\n        onlyPending(tokenId);\n        _updateSerialAndQuantity(tokenId, newSerialNumber, newQuantity);\n    }\n\n    /// @notice Returns just the confirmation (approval) status of Batch-NFT\n    /// @param tokenId The token ID of the batch\n    function getConfirmationStatus(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (BatchStatus)\n    {\n        return nftList[tokenId].status;\n    }\n\n    /// @notice Returns all data for Batch-NFT\n    /// @dev Used in TCO2 contract's receive hook `onERC721Received`\n    /// @param tokenId The token ID of the batch\n    /// @return projectVintageTokenId The token ID of the vintage\n    /// @return quantity Quantity in tCO2e\n    /// @return status The status of the batch\n    function getBatchNFTData(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (\n            uint256,\n            uint256,\n            BatchStatus\n        )\n    {\n        if (!_exists(tokenId)) revert(Errors.COB_NOT_EXISTS);\n        return (\n            nftList[tokenId].projectVintageTokenId,\n            nftList[tokenId].quantity,\n            nftList[tokenId].status\n        );\n    }\n\n    /// @notice Returns the serial number of a batch token id\n    /// @param tokenId The token ID of the batch\n    /// @return The serial number of the batch\n    function getSerialNumber(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        if (!_exists(tokenId)) revert(Errors.COB_NOT_EXISTS);\n        return nftList[tokenId].serialNumber;\n    }\n\n    /// @dev This is necessary because the automatically generated nftList\n    /// getter will not include an array of comments in the returned tuple for\n    /// gas reasons:\n    /// https://docs.soliditylang.org/en/latest/contracts.html#visibility-and-getters\n    function getComments(uint256 tokenId)\n        external\n        view\n        virtual\n        returns (string[] memory, address[] memory)\n    {\n        return (nftList[tokenId].comments, nftList[tokenId].commentAuthors);\n    }\n\n    /// @dev Overridden here because of function overloading issues with ethers.js\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override(ERC721Upgradeable, IERC721Upgradeable) {\n        onlyApprovedOrOwner(tokenId);\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /// @notice Automatically converts Batch-NFT to TCO2s (ERC20)\n    /// @dev Only by the batch-NFT owner or approved operator, only if batch is confirmed.\n    /// Batch-NFT is sent from the sender and TCO2s are transferred to the sender.\n    /// Queries the factory to find the corresponding TCO2 contract\n    /// Fractionalization happens via receive hook on `safeTransferFrom`\n    /// @param tokenId The token ID of the batch\n    function fractionalize(uint256 tokenId) external virtual {\n        onlyApprovedOrOwner(tokenId);\n        // Fractionalize by transferring the batch-NFT to the TCO2 contract.\n        safeTransferFrom(\n            _msgSender(),\n            _getTCO2ForBatchTokenId(tokenId),\n            tokenId,\n            ''\n        );\n    }\n\n    /// @dev returns the address of the TCO2 contract that corresponds to the batch-NFT\n    function _getTCO2ForBatchTokenId(uint256 tokenId)\n        internal\n        view\n        returns (address)\n    {\n        uint256 pvId = nftList[tokenId].projectVintageTokenId;\n        IToucanContractRegistry tcnRegistry = IToucanContractRegistry(\n            contractRegistry\n        );\n\n        // Fetch the registry from the vintage data first\n        address vintages = tcnRegistry.carbonProjectVintagesAddress();\n        VintageData memory data = ICarbonProjectVintages(vintages)\n            .getProjectVintageDataByTokenId(pvId);\n\n        // Now we can fetch the TCO2 factory for the carbon registry\n        string memory carbonRegistry = data.registry;\n        if (bytes(carbonRegistry).length == 0) {\n            carbonRegistry = 'verra';\n        }\n        address tco2Factory = tcnRegistry.toucanCarbonOffsetsFactoryAddress(\n            carbonRegistry\n        );\n\n        return IToucanCarbonOffsetsFactory(tco2Factory).pvIdtoERC20(pvId);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlUpgradeable, ERC721EnumerableUpgradeable)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IAccessControlUpgradeable).interfaceId ||\n            ERC721Upgradeable.supportsInterface(interfaceId);\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    function setBaseURI(string memory gateway) external onlyOwner {\n        baseURI = gateway;\n    }\n\n    /// @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n    /// based on the ERC721URIStorage implementation\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        if (!_exists(tokenId)) revert(Errors.COB_NOT_EXISTS);\n\n        string memory uri = nftList[tokenId].uri;\n        // If there is no base URI, return the token URI.\n        if (bytes(_baseURI()).length == 0) return uri;\n        // If both are set, concatenate the baseURI and tokenURI\n        if (bytes(uri).length > 0) return string.concat(_baseURI(), uri);\n\n        return super.tokenURI(tokenId);\n    }\n\n    /// @dev Utilized here in order to disable transfers when paused\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount,\n        uint256 batchSize\n    ) internal virtual override {\n        onlyUnpaused();\n        super._beforeTokenTransfer(from, to, amount, batchSize);\n    }\n\n    /// @notice Append a comment to a Batch-NFT\n    /// @dev Don't allow the contract owner to comment.  When the contract owner\n    /// can also be a verifier they should add them as a verifier first; this\n    /// should prevent accidental comments from the wrong account.\n    function addComment(uint256 tokenId, string memory comment) external {\n        // this also checks that tokenId exists, otherwise ERC721Upgradeable.ownerOf would revert on nonexistent token\n        onlyVerifierOrBatchOwner(tokenId);\n        _addComment(tokenId, comment);\n    }\n\n    function _addComment(uint256 tokenId, string memory comment) internal {\n        nftList[tokenId].comments.push() = comment;\n        nftList[tokenId].commentAuthors.push() = _msgSender();\n        emit BatchComment(\n            tokenId,\n            nftList[tokenId].comments.length,\n            _msgSender(),\n            comment\n        );\n    }\n\n    /// @notice This function allows external APIs to tokenize their carbon credits\n    /// @dev Callable only by tokenizers. Performs the full tokenization process: minting a batch-NFT, linking it with a project\n    /// vintage, setting the quantity and serial number, confirming the batch, and fractionalizing it. The TCO2s are\n    /// then transferred to the recipient.\n    /// @param recipient Recipient of the tokens\n    /// @param serialNumber Serial number of the carbon credits to be tokenized\n    /// @param quantity Quantity to be tokenized in 1e18 format, greater than 0\n    /// @param projectVintageTokenId The token ID of the vintage\n    /// @return tokenId The token ID of the newly minted batch\n    function tokenize(\n        address recipient,\n        string calldata serialNumber,\n        uint256 quantity,\n        uint256 projectVintageTokenId\n    ) external returns (uint256 tokenId) {\n        onlyUnpaused();\n        onlyWithRole(TOKENIZER_ROLE);\n        // Prepare and confirm batch\n        tokenId = _mintEmptyBatch(address(this), recipient);\n        _updateSerialAndQuantity(tokenId, serialNumber, quantity);\n        _linkWithVintage(tokenId, projectVintageTokenId);\n        _confirmBatch(tokenId);\n\n        // Check existing TCO2 balance; to be used at the end\n        // to send the exact TCO2 needed to the recipient.\n        address tco2 = _getTCO2ForBatchTokenId(tokenId);\n        if (tco2 == address(0)) revert(Errors.COB_TCO2_NOT_FOUND);\n        string memory registry = IToucanCarbonOffsets(tco2).standardRegistry();\n        if (!supportedRegistries[registry])\n            revert(Errors.COB_REGISTRY_NOT_SUPPORTED);\n        uint256 balanceBefore = IERC20Upgradeable(tco2).balanceOf(\n            address(this)\n        );\n\n        // Fractionalize by transferring the batch-NFT to the TCO2 contract.\n        _safeTransfer(address(this), tco2, tokenId, '');\n\n        // Check that TCO2s were minted\n        uint256 balanceAfter = IERC20Upgradeable(tco2).balanceOf(address(this));\n        uint256 amount = balanceAfter - balanceBefore;\n\n        //slither-disable-next-line incorrect-equality\n        if (amount == 0) revert(Errors.COB_NO_TCO2_MINTED);\n\n        // Transfer minted TCO2s to recipient.\n        IERC20Upgradeable(tco2).safeTransfer(recipient, amount);\n        emit Tokenized(tokenId, tco2, recipient, amount);\n    }\n\n    /// @notice Split a batch-NFT into two batch-NFTs, by creating a new batch-NFT and updating the old one.\n    /// The old batch will have a new serial number and quantity will be reduced by the quantity of the new batch.\n    /// @dev Callable only by the escrow contract, only for batches with status\n    /// RetirementRequested or DetokenizationRequested. The TCO2 contract will also be the owner of the new batch and\n    /// its status will be the same as the old batch.\n    /// @param tokenId The token ID of the batch to split\n    /// @param tokenIdNewSerialNumber The new serial number for the old batch\n    /// @param newTokenIdSerialNumber The serial number for the new batch\n    /// @param newTokenIdQuantity The quantity for the new batch, must be smaller than the old quantity and greater\n    /// than 0\n    /// @return newTokenId The token ID of the new batch\n    function split(\n        uint256 tokenId,\n        string calldata tokenIdNewSerialNumber,\n        string calldata newTokenIdSerialNumber,\n        uint256 newTokenIdQuantity\n    ) external returns (uint256 newTokenId) {\n        onlyUnpaused();\n        onlyEscrow();\n        address tco2 = ownerOf(tokenId);\n        if (!IToucanContractRegistry(contractRegistry).isValidERC20(tco2))\n            revert(Errors.COB_INVALID_BATCH_OWNER);\n        // Validate batch status\n        BatchStatus status = nftList[tokenId].status;\n        if (\n            status != BatchStatus.RetirementRequested &&\n            status != BatchStatus.DetokenizationRequested\n        ) revert(Errors.COB_INVALID_STATUS);\n        // Validate batch quantity\n        if (nftList[tokenId].quantity <= newTokenIdQuantity)\n            revert(Errors.COB_INVALID_QUANTITY);\n\n        // keep old serial number to be able to unapprove it after checking and approving the new ones\n        string memory oldSerialNumber = nftList[tokenId].serialNumber;\n        // this also performs the check that the new quantity is smaller than the old quantity, otherwise it would\n        // underflow and revert. in case it is equal to the old quantity, _updateSerialAndQuantity would revert on\n        // quantity == 0\n        _updateSerialAndQuantity(\n            tokenId,\n            tokenIdNewSerialNumber,\n            nftList[tokenId].quantity - newTokenIdQuantity\n        );\n        serialNumberApproved[tokenIdNewSerialNumber] = true;\n\n        // mint a new batch to be owned by the TCO2 contract\n        newTokenId = _mintEmptyBatch(address(this), tco2);\n        _updateSerialAndQuantity(\n            newTokenId,\n            newTokenIdSerialNumber,\n            newTokenIdQuantity\n        ); // here we would revert in case newTokenIdQuantity == 0\n        serialNumberApproved[newTokenIdSerialNumber] = true;\n\n        // unapprove the old serial number\n        serialNumberApproved[oldSerialNumber] = false;\n\n        // link the new batch with the vintage of the old batch\n        _linkWithVintage(newTokenId, nftList[tokenId].projectVintageTokenId);\n\n        // Copy the status from the old batch\n        _updateStatus(newTokenId, status);\n\n        // transfer new batch to TCO2 contract with the right status so that\n        // it will not be fractionalized\n        _safeTransfer(address(this), tco2, newTokenId, '');\n\n        emit Split(tokenId, newTokenId);\n    }\n\n    function onERC721Received(\n        address, /* operator */\n        address from, /* from */\n        uint256, /* tokenId */\n        bytes calldata /* data */\n    ) external pure returns (bytes4) {\n        // This hook is only used by the contract to mint batch-NFTs that\n        // can be tokenized on behalf of end users.\n        if (from != address(0)) revert(Errors.COB_ONLY_MINTS);\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/CarbonOffsetBatchesStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.14;\n\nimport {BatchStatus} from './CarbonOffsetBatchesTypes.sol';\n\n/// @dev Separate storage contract to improve upgrade safety\nabstract contract CarbonOffsetBatchesStorageV1 {\n    uint256 public batchTokenCounter;\n    /// @custom:oz-upgrades-renamed-from serialNumberExist\n    mapping(string => bool) public serialNumberApproved;\n    mapping(string => bool) private DEPRECATED_URIs;\n    mapping(address => bool) private DEPRECATED_VERIFIERS;\n\n    string internal baseURI;\n    address public contractRegistry;\n\n    struct NFTData {\n        uint256 projectVintageTokenId;\n        string serialNumber;\n        uint256 quantity;\n        BatchStatus status;\n        string uri;\n        string[] comments;\n        address[] commentAuthors;\n    }\n\n    mapping(uint256 => NFTData) public nftList;\n}\n\nabstract contract CarbonOffsetBatchesStorageV2 {\n    mapping(string => bool) internal supportedRegistries;\n}\n\nabstract contract CarbonOffsetBatchesStorage is\n    CarbonOffsetBatchesStorageV1,\n    CarbonOffsetBatchesStorageV2\n{}\n"
    },
    "contracts/CarbonOffsetBatchesTypes.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity 0.8.14;\n\nenum BatchStatus {\n    Pending, // 0\n    Rejected, // 1\n    Confirmed, // 2\n    DetokenizationRequested, // 3\n    DetokenizationFinalized, // 4\n    RetirementRequested, // 5\n    RetirementFinalized // 6\n}\n"
    },
    "contracts/CarbonProjects.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\n\nimport './bases/RoleInitializer.sol';\nimport './CarbonProjectsStorage.sol';\nimport './interfaces/ICarbonProjects.sol';\nimport './libraries/Modifiers.sol';\nimport './libraries/Errors.sol';\n\n/// @notice The CarbonProjects contract stores carbon project-specific data\n/// The data is stored in structs via ERC721 tokens\n/// Most contracts in the protocol query the data stored here\n/// The attributes in the Project-NFTs are constant over all vintages of the project\n/// @dev Each project can have up to n vintages, with data stored in the\n/// `CarbonProjectVintages` contract. `vintageTokenId`s are mapped to `projectTokenId`s\n/// via `pvToTokenId` in the vintage contract.\ncontract CarbonProjects is\n    ICarbonProjects,\n    CarbonProjectsStorage,\n    ERC721Upgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    Modifiers,\n    RoleInitializer,\n    UUPSUpgradeable\n{\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.2.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    /// @dev All roles related to accessing this contract\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event ProjectMinted(address receiver, uint256 tokenId);\n    event ProjectUpdated(uint256 tokenId);\n    event ProjectIdUpdated(uint256 tokenId);\n    event BeneficiaryUpdated(\n        uint256 indexed tokenId,\n        address oldBeneficiary,\n        address newBeneficiary\n    );\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(address[] calldata accounts, bytes32[] calldata roles)\n        external\n        virtual\n        initializer\n    {\n        __Context_init_unchained();\n        __ERC721_init_unchained(\n            'Toucan Protocol: Carbon Projects',\n            'TOUCAN-CP'\n        );\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __RoleInitializer_init_unchained(accounts, roles);\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n    /// @dev modifier that only lets the contract's owner and elected managers add/update/remove project data\n    modifier onlyManagers() {\n        require(\n            hasRole(MANAGER_ROLE, msg.sender) || owner() == msg.sender,\n            'Caller is not authorized'\n        );\n        _;\n    }\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() external onlyBy(contractRegistry, owner()) {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() external onlyBy(contractRegistry, owner()) {\n        _unpause();\n    }\n\n    function setToucanContractRegistry(address _address) external onlyOwner {\n        contractRegistry = _address;\n    }\n\n    /// @notice Adds a new carbon project along with attributes/data\n    /// @dev Projects can be added by data-managers\n    function addNewProject(\n        address to,\n        string memory projectId,\n        string memory standard,\n        string memory methodology,\n        string memory region,\n        string memory storageMethod,\n        string memory method,\n        string memory emissionType,\n        string memory category,\n        string memory uri,\n        address beneficiary\n    ) external virtual override onlyManagers whenNotPaused returns (uint256) {\n        require(bytes(projectId).length != 0, 'ProjectId cannot be empty');\n        require(!projectIds[projectId], 'Project already exists');\n        projectIds[projectId] = true;\n\n        uint256 newItemId = projectTokenCounter;\n        unchecked {\n            ++newItemId;\n            ++totalSupply;\n        }\n        projectTokenCounter = uint128(newItemId);\n\n        validProjectTokenIds[newItemId] = true;\n\n        _mint(to, newItemId);\n\n        projectData[newItemId].projectId = projectId;\n        projectData[newItemId].standard = standard;\n        projectData[newItemId].methodology = methodology;\n        projectData[newItemId].region = region;\n        projectData[newItemId].storageMethod = storageMethod;\n        projectData[newItemId].method = method;\n        projectData[newItemId].emissionType = emissionType;\n        projectData[newItemId].category = category;\n        projectData[newItemId].uri = uri;\n        projectData[newItemId].beneficiary = beneficiary;\n\n        emit ProjectMinted(to, newItemId);\n        pidToTokenId[projectId] = newItemId;\n        return newItemId;\n    }\n\n    /// @notice Updates and existing carbon project\n    /// @dev Projects can be updated by data-managers\n    function updateProject(\n        uint256 tokenId,\n        string memory newStandard,\n        string memory newMethodology,\n        string memory newRegion,\n        string memory newStorageMethod,\n        string memory newMethod,\n        string memory newEmissionType,\n        string memory newCategory,\n        string memory newUri,\n        address beneficiary\n    ) external virtual onlyManagers whenNotPaused {\n        require(_exists(tokenId), 'Project not yet minted');\n        projectData[tokenId].standard = newStandard;\n        projectData[tokenId].methodology = newMethodology;\n        projectData[tokenId].region = newRegion;\n        projectData[tokenId].storageMethod = newStorageMethod;\n        projectData[tokenId].method = newMethod;\n        projectData[tokenId].emissionType = newEmissionType;\n        projectData[tokenId].category = newCategory;\n        projectData[tokenId].uri = newUri;\n        projectData[tokenId].beneficiary = beneficiary;\n\n        emit ProjectUpdated(tokenId);\n    }\n\n    /// @notice Updates a token to a new project id\n    /// @dev Projects and their projectId's must be unique, changing them must be handled carefully\n    /// @param tokenId the token id to update\n    /// @param newProjectId the new project id\n    function updateProjectId(uint256 tokenId, string memory newProjectId)\n        external\n        virtual\n        onlyManagers\n        whenNotPaused\n    {\n        _updateProjectId(tokenId, newProjectId);\n    }\n\n    /// @notice Updates multiple tokens to a new project it\n    /// @dev Projects and their projectId's must be unique, changing them must be handled carefully\n    /// @param tokenIds the token ids to update\n    /// @param newProjectIds the new project ids\n    function updateProjectIds(\n        uint256[] calldata tokenIds,\n        string[] calldata newProjectIds\n    ) external virtual onlyManagers whenNotPaused {\n        uint256 length = tokenIds.length;\n        require(length == newProjectIds.length, Errors.CP_LENGTH_MISMATCH);\n        for (uint256 i = 0; i < length; i++) {\n            _updateProjectId(tokenIds[i], newProjectIds[i]);\n        }\n    }\n\n    /// @notice Updates the project beneficiary\n    function updateBeneficiary(uint256 tokenId, address beneficiary)\n        external\n        virtual\n        onlyManagers\n        whenNotPaused\n    {\n        require(_exists(tokenId), 'Project not yet minted');\n        address oldBeneficiary = projectData[tokenId].beneficiary;\n        projectData[tokenId].beneficiary = beneficiary;\n        emit BeneficiaryUpdated(tokenId, oldBeneficiary, beneficiary);\n    }\n\n    /// @dev Removes a project and corresponding data, sets projectTokenId invalid\n    function removeProject(uint256 projectTokenId)\n        external\n        virtual\n        onlyManagers\n        whenNotPaused\n    {\n        string memory pid = projectData[projectTokenId].projectId;\n        projectIds[pid] = false;\n        delete pidToTokenId[pid];\n        delete projectData[projectTokenId];\n        /// @dev set projectTokenId to invalid\n        totalSupply--;\n        validProjectTokenIds[projectTokenId] = false;\n    }\n\n    /// @dev Function used by the utility function `checkProjectTokenExists`\n    function isValidProjectTokenId(uint256 projectTokenId)\n        external\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return validProjectTokenIds[projectTokenId];\n    }\n\n    /// @dev retrieve all data from ProjectData struct\n    function getProjectDataByTokenId(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (ProjectData memory)\n    {\n        return (projectData[tokenId]);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(\n            AccessControlUpgradeable,\n            ERC721Upgradeable,\n            IERC165Upgradeable\n        )\n        returns (bool)\n    {\n        return\n            interfaceId == type(IAccessControlUpgradeable).interfaceId ||\n            ERC721Upgradeable.supportsInterface(interfaceId);\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    function setBaseURI(string memory gateway) external onlyOwner {\n        baseURI = gateway;\n    }\n\n    /// @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n    /// based on the ERC721URIStorage implementation\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(_exists(tokenId), 'Non-existent token id');\n\n        string memory uri = projectData[tokenId].uri;\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return uri;\n        }\n        // If both are set, concatenate the baseURI and tokenURI\n        if (bytes(uri).length > 0) {\n            return string.concat(base, uri);\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    // Internal\n\n    function _updateProjectId(uint256 tokenId, string memory newProjectId)\n        internal\n    {\n        require(_exists(tokenId), 'Project not yet minted');\n        if (bytes(newProjectId).length != 0) {\n            require(\n                projectIds[newProjectId] == false,\n                'Cant change current projectId to an existing one'\n            );\n        }\n\n        string memory oldProjectId = projectData[tokenId].projectId;\n        projectIds[oldProjectId] = false;\n        delete pidToTokenId[oldProjectId];\n\n        projectData[tokenId].projectId = newProjectId;\n        projectIds[newProjectId] = true;\n        pidToTokenId[newProjectId] = tokenId;\n\n        emit ProjectIdUpdated(tokenId);\n    }\n}\n"
    },
    "contracts/CarbonProjectsStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\n// Storage contract for CarbonProjects\npragma solidity 0.8.14;\n\nimport {ProjectData} from './CarbonProjectTypes.sol';\n\n/// @dev Separate storage contract to improve upgrade safety\nabstract contract CarbonProjectsStorage {\n    uint128 public projectTokenCounter;\n    uint128 public totalSupply;\n    address public contractRegistry;\n    string public baseURI;\n\n    /// @dev maps `tokenId` to `ProjectData` struct\n    mapping(uint256 => ProjectData) public projectData;\n\n    /// @dev uniqueness check for globalUniqueIdentifier strings\n    /// Example: `'VCS-01468' -> true`\n    /// Todo: assess if can be deprecated\n    mapping(string => bool) public projectIds;\n\n    /// @dev mapping to identify invalid projectTokenIds\n    /// Examples: projectokenIds that have been removed or non-existent ones\n    mapping(uint256 => bool) public validProjectTokenIds;\n\n    /// @dev Maps a universal/global project-id like 'VCS-1234' to its `tokenId`\n    mapping(string => uint256) public pidToTokenId;\n}\n"
    },
    "contracts/CarbonProjectTypes.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity 0.8.14;\n\n/// @dev CarbonProject related data and attributes\nstruct ProjectData {\n    string projectId;\n    string standard;\n    string methodology;\n    string region;\n    string storageMethod;\n    string method;\n    string emissionType;\n    string category;\n    string uri;\n    address beneficiary;\n}\n"
    },
    "contracts/CarbonProjectVintages.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\n\nimport './bases/RoleInitializer.sol';\nimport './interfaces/ICarbonProjectVintages.sol';\nimport './CarbonProjectVintagesStorage.sol';\nimport './libraries/ProjectUtils.sol';\nimport './libraries/Modifiers.sol';\n\n/// @notice The CarbonProjectVintages contract stores vintage-specific data\n/// The data is stored in structs via ERC721 tokens\n/// Most contracts in the protocol query the data stored here\n/// Every `vintageData` struct points to a parent `CarbonProject`\ncontract CarbonProjectVintages is\n    CarbonProjectVintagesStorage,\n    ICarbonProjectVintages,\n    ERC721Upgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    RoleInitializer,\n    UUPSUpgradeable,\n    Modifiers,\n    ProjectUtils\n{\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.1.2';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    /// @dev All roles related to accessing this contract\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event ProjectVintageMinted(\n        address receiver,\n        uint256 tokenId,\n        uint256 projectTokenId,\n        uint64 startTime\n    );\n    event ProjectVintageUpdated(uint256 tokenId);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(address[] calldata accounts, bytes32[] calldata roles)\n        external\n        virtual\n        initializer\n    {\n        __Context_init_unchained();\n        __ERC721_init_unchained(\n            'Toucan Protocol: Carbon Project Vintages',\n            'TOUCAN-CPV'\n        );\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __RoleInitializer_init_unchained(accounts, roles);\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @dev modifier that only lets the contract's owner and elected managers add/update/remove project data\n    modifier onlyManagers() {\n        require(\n            hasRole(MANAGER_ROLE, msg.sender) || owner() == msg.sender,\n            'Caller is not authorized'\n        );\n        _;\n    }\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() external onlyBy(contractRegistry, owner()) {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() external onlyBy(contractRegistry, owner()) {\n        _unpause();\n    }\n\n    function setToucanContractRegistry(address _address) external onlyOwner {\n        contractRegistry = _address;\n    }\n\n    /// @notice Adds a new carbon project-vintage along with attributes/data\n    /// @dev vintages can be added by data-managers\n    function addNewVintage(address to, VintageData memory _vintageData)\n        external\n        virtual\n        override\n        onlyManagers\n        whenNotPaused\n        returns (uint256)\n    {\n        checkProjectTokenExists(contractRegistry, _vintageData.projectTokenId);\n\n        require(\n            pvToTokenId[_vintageData.projectTokenId][_vintageData.startTime] ==\n                0,\n            'Error: vintage already added'\n        );\n\n        require(\n            _vintageData.startTime < _vintageData.endTime,\n            'Error: vintage startTime must be less than endTime'\n        );\n\n        /// @dev Increase `projectVintageTokenCounter` and mark current Id as valid\n        uint256 newItemId = projectVintageTokenCounter;\n        unchecked {\n            ++newItemId;\n            ++totalSupply;\n        }\n        projectVintageTokenCounter = uint128(newItemId);\n\n        validProjectVintageIds[newItemId] = true;\n\n        _mint(to, newItemId);\n\n        vintageData[newItemId] = _vintageData;\n        emit ProjectVintageMinted(\n            to,\n            newItemId,\n            _vintageData.projectTokenId,\n            _vintageData.startTime\n        );\n        pvToTokenId[_vintageData.projectTokenId][\n            _vintageData.startTime\n        ] = newItemId;\n\n        return newItemId;\n    }\n\n    /// @dev Function to check whether a projectVintageToken exists,\n    /// to be called by other (external) contracts\n    function exists(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return super._exists(tokenId);\n    }\n\n    /// @notice Updates an existing carbon project\n    /// @param tokenId The tokenId of the vintage to update\n    /// @param _vintageData New vintage data\n    /// @dev Only data-managers can update the data for correction\n    /// except the sensitive `projectId`\n    function updateProjectVintage(\n        uint256 tokenId,\n        VintageData memory _vintageData\n    ) external virtual onlyManagers whenNotPaused {\n        require(_exists(tokenId), 'Project not yet minted');\n        // @dev very sensitive data, better update via separate function\n        _vintageData.projectTokenId = vintageData[tokenId].projectTokenId;\n\n        delete pvToTokenId[_vintageData.projectTokenId][\n            vintageData[tokenId].startTime\n        ];\n\n        vintageData[tokenId] = _vintageData;\n        pvToTokenId[_vintageData.projectTokenId][\n            _vintageData.startTime\n        ] = tokenId;\n\n        emit ProjectVintageUpdated(tokenId);\n    }\n\n    /// @dev Removes a project-vintage and corresponding data\n    function removeVintage(uint256 tokenId)\n        external\n        virtual\n        onlyManagers\n        whenNotPaused\n    {\n        totalSupply--;\n        delete vintageData[tokenId];\n    }\n\n    /// @dev retrieve all data from VintageData struct\n    function getProjectVintageDataByTokenId(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (VintageData memory)\n    {\n        return (vintageData[tokenId]);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(\n            AccessControlUpgradeable,\n            ERC721Upgradeable,\n            IERC165Upgradeable\n        )\n        returns (bool)\n    {\n        return\n            interfaceId == type(IAccessControlUpgradeable).interfaceId ||\n            ERC721Upgradeable.supportsInterface(interfaceId);\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    function setBaseURI(string memory baseURI_) external onlyOwner {\n        baseURI = baseURI_;\n    }\n\n    /// @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n    /// based on the ERC721URIStorage implementation\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(_exists(tokenId), 'Non-existent token id');\n\n        string memory uri = vintageData[tokenId].uri;\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return uri;\n        }\n        // If both are set, concatenate the baseURI and tokenURI\n        if (bytes(uri).length > 0) {\n            return string.concat(base, uri);\n        }\n\n        return super.tokenURI(tokenId);\n    }\n}\n"
    },
    "contracts/CarbonProjectVintagesStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\n// Storage contract for CarbonProjects\npragma solidity 0.8.14;\n\nimport {VintageData} from './CarbonProjectVintageTypes.sol';\n\n/// @dev Separate storage contract to improve upgrade safety\nabstract contract CarbonProjectVintagesStorage {\n    uint128 public projectVintageTokenCounter;\n    uint128 public totalSupply;\n    address public contractRegistry;\n    string public baseURI;\n\n    mapping(uint256 => VintageData) public vintageData;\n\n    /// @dev mapping to identify invalid projectVintageIds\n    /// Examples: projectVintageIds that have been removed or non-existent ones\n    mapping(uint256 => bool) public validProjectVintageIds;\n\n    /// @dev Maps: projectTokenId => vintage startTime => projectVintageTokenId\n    ///\n    /// This is the rough reverse of VintageData.projectTokenId, i.e. it's the\n    /// way that a caller with a projectTokenId and a vintage startTime can\n    /// obtain the corresponding projectVintageTokenId.  This is particularly\n    /// important during the batch NFT approval phase, since prior to\n    /// confirmation, there is no direct association between the batch and the\n    /// project/vintage; only a long serial number containing info which allows\n    /// that association.\n    mapping(uint256 => mapping(uint64 => uint256)) public pvToTokenId;\n}\n"
    },
    "contracts/CarbonProjectVintageTypes.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity 0.8.14;\n\nstruct VintageData {\n    /// @dev A human-readable string which differentiates this from other vintages in\n    /// the same project, and helps build the corresponding TCO2 name and symbol.\n    string name;\n    uint64 startTime; // UNIX timestamp\n    uint64 endTime; // UNIX timestamp\n    uint256 projectTokenId;\n    uint64 totalVintageQuantity;\n    bool isCorsiaCompliant;\n    bool isCCPcompliant;\n    string coBenefits;\n    string correspAdjustment;\n    string additionalCertification;\n    string uri;\n    string registry;\n}\n"
    },
    "contracts/cross-chain/interfaces/IBridgeableToken.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\ninterface IBridgeableToken is IERC20 {\n    function bridgeMint(address _account, uint256 _amount) external;\n\n    function bridgeBurn(address _account, uint256 _amount) external;\n}\n"
    },
    "contracts/cross-chain/interfaces/IPoolBridgeable.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\ninterface IPoolBridgeable {\n    function completeTCO2Bridging(\n        address[] memory tco2s,\n        uint256[] memory amount\n    ) external;\n}\n"
    },
    "contracts/cross-chain/interfaces/IToucanCrosschainMessenger.sol": {
      "content": "// SPDX-FileCopyrightText: 2022 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {RemoteTokenInformation} from '../ToucanCrosschainMessengerStorage.sol';\n\ninterface IToucanCrosschainMessenger {\n    function transferTokens(\n        uint32 destinationDomain,\n        address token,\n        uint256 amount\n    ) external payable;\n\n    function transferTokensToRecipient(\n        uint32 destinationDomain,\n        address token,\n        uint256 amount,\n        address recipient\n    ) external payable;\n\n    function bridgeTCO2s(\n        uint32 destinationDomain,\n        address[] memory token,\n        uint256[] memory amount,\n        address recipient\n    ) external payable;\n\n    function remoteTokens(address _token, uint32 _destinationDomain)\n        external\n        view\n        returns (RemoteTokenInformation memory);\n\n    function quoteTokenTransferFee(\n        uint32 destinationDomain,\n        address token,\n        uint256 amount,\n        address recipient\n    ) external view returns (uint256);\n\n    function quoteBridgeTCO2sFee(\n        uint32 destinationDomain,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        address recipient\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/cross-chain/ToucanCrosschainMessenger.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {Router} from '@hyperlane-xyz/core/contracts/client/Router.sol';\nimport {AccessControlUpgradeable} from '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport {PausableUpgradeable} from '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport {UUPSUpgradeable} from '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport './ToucanCrosschainMessengerStorage.sol';\nimport {IBridgeableToken} from './interfaces/IBridgeableToken.sol';\nimport {IPoolBridgeable} from './interfaces/IPoolBridgeable.sol';\nimport {IToucanCrosschainMessenger} from './interfaces/IToucanCrosschainMessenger.sol';\n\ncontract ToucanCrosschainMessenger is\n    IToucanCrosschainMessenger,\n    PausableUpgradeable,\n    UUPSUpgradeable,\n    AccessControlUpgradeable,\n    Router,\n    ToucanCrosschainMessengerStorage\n{\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '2.1.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 2;\n\n    /// @dev EIP712Domain hash used in generating request hashes\n    bytes32 public constant EIP712DomainHash =\n        keccak256('EIP712Domain(string name,string version,uint256 chainId)');\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n    bytes32 public constant BRIDGER_ROLE = keccak256('BRIDGER_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event BridgeRequestReceived(\n        uint32 indexed originDomain,\n        uint32 toDomain,\n        address indexed bridger,\n        address recipient,\n        address indexed token,\n        uint256 amount,\n        bytes32 requesthash\n    );\n    event BridgeRequestSent(\n        uint32 originDomain,\n        uint32 indexed toDomain,\n        address indexed bridger,\n        address recipient,\n        address indexed token,\n        uint256 amount,\n        uint256 nonce,\n        bytes32 requesthash\n    );\n    event PoolRebalancingRequestReceived(\n        uint32 indexed originDomain,\n        uint32 indexed toDomain,\n        address indexed bridger,\n        address recipient,\n        address[] tokens,\n        uint256[] amounts,\n        bytes32 requesthash\n    );\n    event PoolRebalancingRequestSent(\n        uint32 indexed originDomain,\n        uint32 indexed toDomain,\n        address indexed bridger,\n        address recipient,\n        address[] tokens,\n        uint256[] amounts,\n        uint256 nonce,\n        bytes32 requesthash\n    );\n\n    event TokenPairAdded(\n        address indexed homeTokenAddress,\n        address indexed remoteTokenAddress,\n        uint32 domainId\n    );\n    event TokenPairRemoved(\n        address indexed homeTokenAddress,\n        address indexed remoteTokenAddress,\n        uint32 domainId\n    );\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address mailbox) Router(mailbox) {\n        _disableInitializers();\n    }\n\n    modifier onlyPausers() {\n        require(hasRole(PAUSER_ROLE, msg.sender), 'Not authorized');\n        _;\n    }\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(\n        address owner,\n        address[] calldata accounts,\n        bytes32[] calldata roles\n    ) external virtual initializer {\n        require(accounts.length == roles.length, 'Array length mismatch');\n\n        _MailboxClient_initialize(address(0), address(0), owner);\n        __Pausable_init();\n        __UUPSUpgradeable_init_unchained();\n        __AccessControl_init_unchained();\n\n        bool hasDefaultAdmin = false;\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            _grantRole(roles[i], accounts[i]);\n            if (roles[i] == DEFAULT_ADMIN_ROLE) hasDefaultAdmin = true;\n        }\n        require(hasDefaultAdmin, 'No admin specified');\n    }\n\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    EIP712DomainHash,\n                    'ToucanCrosschainMessenger',\n                    VERSION,\n                    block.chainid\n                )\n            );\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ----------------------------------------\n    //      Admin functions\n    // ----------------------------------------\n\n    /// @notice Adds a new set of token pairs than can be bridged\n    /// @dev Called by owner to add or map home token addresses to remote token addresses.\n    /// @param homeTokens token addresses on home chain\n    /// @param remoteTokens_ token addresses on remote chain\n    /// @param domain domain ID of the remote chain whose tokens are being mapped\n    function batchAddTokenPair(\n        address[] calldata homeTokens,\n        address[] calldata remoteTokens_,\n        uint32 domain\n    ) external onlyOwner {\n        uint256 homeTokensLen = homeTokens.length;\n        require(homeTokensLen == remoteTokens_.length, 'Array length mismatch');\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < homeTokensLen; ++i) {\n            _addTokenPair(homeTokens[i], remoteTokens_[i], domain);\n        }\n    }\n\n    /// @notice Adds new token pair than can be bridged\n    /// @dev Called by owner to add or map home token address to remote token address.\n    /// Changing the remote token address can only be done within a 7 day period, after first\n    /// setting it.\n    /// @param homeToken token address on home chain\n    /// @param remoteToken token address on remote chain\n    /// @param domain domain ID of the remote chain whose token is being mapped\n    function addTokenPair(\n        address homeToken,\n        address remoteToken,\n        uint32 domain\n    ) external onlyOwner {\n        _addTokenPair(homeToken, remoteToken, domain);\n    }\n\n    function _addTokenPair(\n        address homeToken,\n        address remoteToken,\n        uint32 domain\n    ) private {\n        require(homeToken != address(0), '!homeToken');\n        address remoteToken_ = _remoteTokens[homeToken][domain].tokenAddress;\n        _remoteTokens[homeToken][domain] = RemoteTokenInformation(\n            remoteToken,\n            block.timestamp\n        );\n        if (remoteToken == address(0)) {\n            require(remoteToken_ != address(0), 'invalid pair removal');\n            emit TokenPairRemoved(homeToken, remoteToken_, domain);\n        } else {\n            emit TokenPairAdded(homeToken, remoteToken, domain);\n        }\n    }\n\n    /// @notice Pause the cross chain bridge\n    function pause() external onlyPausers whenNotPaused {\n        _pause();\n    }\n\n    /// @notice Unpause the cross chain bridge\n    function unpause() external onlyPausers whenPaused {\n        _unpause();\n    }\n\n    // ----------------------------------------\n    //      Message-handling functions\n    // ----------------------------------------\n\n    /// @notice Receive messages sent via Hyperlane from other remote Routers;\n    /// parse the contents of the message and enact the message's effects on the local chain\n    /// @dev it is internally invoked via handle() which is invoked by Hyperlane's mailbox\n    /// @param origin The domain the message is coming from\n    /// @param message The message in the form of raw bytes\n    function _handle(\n        uint32 origin,\n        bytes32, // sender, // commented out because parameter not used\n        bytes calldata message\n    ) internal virtual override whenNotPaused {\n        uint8 messageTypeInt = abi.decode(message, (uint8));\n\n        if (messageTypeInt == uint8(MessageType.TOKEN_TRANSFER)) {\n            _handleTokenTransferRequest(origin, message);\n        } else if (messageTypeInt == uint8(MessageType.TCO2_REBALANCE)) {\n            _handleTCO2RebalanceRequest(origin, message);\n        } else {\n            revert('Unsupported Operation');\n        }\n    }\n\n    function _handleTokenTransferRequest(uint32 origin, bytes memory message)\n        internal\n    {\n        (\n            uint8 messageType,\n            address bridger,\n            address recipient,\n            address token,\n            uint256 amount,\n            uint32 toDomain,\n            bytes32 requestHash\n        ) = abi.decode(\n                message,\n                (uint8, address, address, address, uint256, uint32, bytes32)\n            );\n\n        _saveIncomingRequest(requestHash, MessageType(messageType));\n\n        IBridgeableToken(token).bridgeMint(recipient, amount);\n\n        emit BridgeRequestReceived(\n            origin,\n            toDomain,\n            bridger,\n            recipient,\n            token,\n            amount,\n            requestHash\n        );\n    }\n\n    function _handleTCO2RebalanceRequest(uint32 origin, bytes memory message)\n        internal\n    {\n        (\n            uint8 messageType,\n            address bridger,\n            address recipient,\n            address[] memory tokens,\n            uint256[] memory amounts,\n            uint32 toDomain,\n            bytes32 requestHash\n        ) = abi.decode(\n                message,\n                (uint8, address, address, address[], uint256[], uint32, bytes32)\n            );\n\n        _saveIncomingRequest(requestHash, MessageType(messageType));\n\n        uint256 length = tokens.length;\n        for (uint256 i = 0; i < length; i++) {\n            address token = tokens[i];\n            uint256 amount = amounts[i];\n            IBridgeableToken bridgeableToken = IBridgeableToken(token);\n            bridgeableToken.bridgeMint(address(this), amount);\n            require(\n                bridgeableToken.approve(recipient, amount),\n                'approval unsuccessful'\n            );\n        }\n\n        IPoolBridgeable(recipient).completeTCO2Bridging(tokens, amounts);\n\n        emit PoolRebalancingRequestReceived(\n            origin,\n            toDomain,\n            bridger,\n            recipient,\n            tokens,\n            amounts,\n            requestHash\n        );\n    }\n\n    // ----------------------------------------\n    //      Message-dispatching functions\n    // ----------------------------------------\n\n    /// @notice Fetch the amount that needs to be used as a fee\n    /// in order to to pay for the gas of the transfer on the\n    /// destination domain.\n    /// @dev Use the result of this function as msg.value when calling\n    /// `transferTokens` or `transferTokensToRecipient`.\n    /// @param destinationDomain The domain to send the message to\n    /// @param tokens address of token to be bridged\n    /// @param amounts the amount of tokens to be bridged\n    /// @param recipient the recipient of tokens in the destination domain\n    /// @return The required fee for a token transfer\n    function quoteBridgeTCO2sFee(\n        uint32 destinationDomain,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        address recipient\n    ) external view override returns (uint256) {\n        bytes memory message = _buildTCO2RebalanceMessage(\n            destinationDomain,\n            recipient,\n            tokens,\n            amounts,\n            bytes32(type(uint256).max)\n        );\n        return _quoteDispatch(destinationDomain, message);\n    }\n\n    /// @notice Fetch the amount that needs to be used as a fee\n    /// in order to to pay for the gas of the transfer on the\n    /// destination domain.\n    /// @dev Use the result of this function as msg.value when calling\n    /// `transferTokens` or `transferTokensToRecipient`.\n    /// @param destinationDomain The domain to send the message to\n    /// @param token address of token to be bridged\n    /// @param amount the amount of tokens to be bridged\n    /// @param recipient the recipient of tokens in the destination domain\n    /// @return The required fee for a token transfer\n    function quoteTokenTransferFee(\n        uint32 destinationDomain,\n        address token,\n        uint256 amount,\n        address recipient\n    ) external view override returns (uint256) {\n        bytes memory message = _buildTokenTransferMessage(\n            destinationDomain,\n            token,\n            amount,\n            recipient,\n            bytes32(type(uint256).max)\n        );\n        return _quoteDispatch(destinationDomain, message);\n    }\n\n    function _buildTokenTransferMessage(\n        uint32 destinationDomain,\n        address token,\n        uint256 amount,\n        address recipient,\n        bytes32 requestHash\n    ) internal view returns (bytes memory) {\n        address remoteToken = _remoteTokens[token][destinationDomain]\n            .tokenAddress;\n        require(remoteToken != address(0), 'remote token not mapped');\n        return\n            abi.encode(\n                MessageType.TOKEN_TRANSFER,\n                msg.sender,\n                recipient,\n                remoteToken,\n                amount,\n                destinationDomain,\n                requestHash\n            );\n    }\n\n    /// @notice Transfer tokens to a recipient in the destination domain\n    /// @param destinationDomain The domain to send the tokens to\n    /// @param token address of token to be bridged\n    /// @param amount the amount of tokens to be bridged\n    /// @param recipient the recipient of tokens in the destination domain\n    function transferTokensToRecipient(\n        uint32 destinationDomain,\n        address token,\n        uint256 amount,\n        address recipient\n    ) public payable whenNotPaused {\n        bytes32 requestHash = _saveOutgoingTokenTransferRequest(\n            destinationDomain,\n            token,\n            recipient,\n            amount\n        );\n\n        // encode a message to send to the remote xApp Router\n        bytes memory _outboundMessage = _buildTokenTransferMessage(\n            destinationDomain,\n            token,\n            amount,\n            recipient,\n            requestHash\n        );\n        // Dispatch the message\n        _dispatch(destinationDomain, _outboundMessage);\n        // Burn the tokens on this side of the bridge\n        IBridgeableToken(token).bridgeBurn(msg.sender, amount);\n        emit BridgeRequestSent(\n            localDomain,\n            destinationDomain,\n            msg.sender,\n            recipient,\n            token,\n            amount,\n            nonce,\n            requestHash\n        );\n    }\n\n    /// @notice Transfer tokens to a recipient in the destination domain.\n    /// The recipient of the tokens in the destination domain is the same as\n    /// msg.sender in this context.\n    /// @param destinationDomain The domain to send the message to\n    /// @param token address of token to be bridged\n    /// @param amount the amount of tokens to be bridged\n    function transferTokens(\n        uint32 destinationDomain,\n        address token,\n        uint256 amount\n    ) external payable {\n        transferTokensToRecipient(destinationDomain, token, amount, msg.sender);\n    }\n\n    /// @notice Bridges multiple tokens to a recipient in the destination domain\n    /// @param destinationDomain The domain to send the tokens to\n    /// @param tokens addresses of tokens to be bridged\n    /// @param amounts the amounts of tokens to be bridged\n    /// @param recipient the recipient of tokens in the destination domain\n    function bridgeTCO2s(\n        uint32 destinationDomain,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        address recipient\n    ) external payable override whenNotPaused onlyRole(BRIDGER_ROLE) {\n        bytes32 requestHash = _saveOutgoingTCO2RebalanceRequest(\n            destinationDomain,\n            recipient,\n            tokens,\n            amounts\n        );\n\n        bytes memory message = _buildTCO2RebalanceMessage(\n            destinationDomain,\n            recipient,\n            tokens,\n            amounts,\n            requestHash\n        );\n\n        _dispatch(destinationDomain, message);\n        emit PoolRebalancingRequestSent(\n            localDomain,\n            destinationDomain,\n            msg.sender,\n            recipient,\n            tokens,\n            amounts,\n            nonce,\n            requestHash\n        );\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            IBridgeableToken(tokens[i]).bridgeBurn(msg.sender, amounts[i]);\n        }\n    }\n\n    function _buildTCO2RebalanceMessage(\n        uint32 destinationDomain,\n        address recipient,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        bytes32 requestHash\n    ) internal view returns (bytes memory message) {\n        uint256 length = tokens.length;\n        address[] memory remoteTokens_ = new address[](tokens.length);\n        for (uint256 i = 0; i < length; i++) {\n            address remoteToken = _remoteTokens[tokens[i]][destinationDomain]\n                .tokenAddress;\n            require(remoteToken != address(0), 'remote token not mapped');\n            require(amounts[i] > 0, 'invalid amount');\n            remoteTokens_[i] = remoteToken;\n        }\n\n        message = abi.encode(\n            MessageType.TCO2_REBALANCE,\n            msg.sender,\n            recipient,\n            remoteTokens_,\n            amounts,\n            destinationDomain,\n            requestHash\n        );\n    }\n\n    function _saveOutgoingTCO2RebalanceRequest(\n        uint32 destinationDomain,\n        address recipient,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) internal returns (bytes32 requestHash) {\n        requestHash = _generateRequestHash(\n            recipient,\n            tokens,\n            amounts,\n            destinationDomain\n        );\n\n        requests[requestHash] = BridgeRequest(\n            false,\n            block.timestamp,\n            BridgeRequestType.SENT,\n            MessageType.TCO2_REBALANCE\n        );\n    }\n\n    function _saveOutgoingTokenTransferRequest(\n        uint32 destinationDomain,\n        address recipient,\n        address token,\n        uint256 amount\n    ) internal returns (bytes32 requestHash) {\n        requestHash = _generateRequestHash(\n            recipient,\n            token,\n            amount,\n            destinationDomain\n        );\n        requests[requestHash] = BridgeRequest(\n            false,\n            block.timestamp, // timestamp when the bridge request was sent\n            BridgeRequestType.SENT,\n            MessageType.TOKEN_TRANSFER\n        );\n    }\n\n    function _saveIncomingRequest(bytes32 requestHash, MessageType messageType)\n        internal\n    {\n        //slither-disable-next-line incorrect-equality\n        require(\n            requests[requestHash].requestType ==\n                BridgeRequestType.NOT_REGISTERED,\n            'Bridge Request Executed'\n        );\n\n        requests[requestHash] = BridgeRequest(\n            false,\n            block.timestamp, // timestamp when the bridge request was received\n            BridgeRequestType.RECEIVED,\n            messageType\n        );\n    }\n\n    function _generateRequestHash(\n        address receiver,\n        address token,\n        uint256 amount,\n        uint32 destinationDomain\n    ) internal returns (bytes32 _requestHash) {\n        _updateNonce();\n        _requestHash = keccak256(\n            abi.encodePacked(\n                DOMAIN_SEPARATOR(),\n                receiver,\n                token,\n                amount,\n                destinationDomain,\n                nonce\n            )\n        );\n    }\n\n    function _generateRequestHash(\n        address receiver,\n        address[] memory tokens,\n        uint256[] memory amounts,\n        uint32 destinationDomain\n    ) internal returns (bytes32 requestHash) {\n        uint256 length = tokens.length;\n        bytes memory tokensAndAmounts;\n        for (uint256 i = 0; i < length; i++) {\n            tokensAndAmounts = abi.encodePacked(\n                tokensAndAmounts,\n                tokens[i],\n                amounts[i]\n            );\n        }\n\n        _updateNonce();\n        requestHash = keccak256(\n            abi.encodePacked(\n                DOMAIN_SEPARATOR(),\n                receiver,\n                tokensAndAmounts,\n                destinationDomain,\n                nonce\n            )\n        );\n    }\n\n    function _updateNonce() internal {\n        uint256 currentNonce = nonce;\n        unchecked {\n            ++currentNonce;\n        }\n        nonce = currentNonce;\n    }\n\n    function remoteTokens(address token, uint32 domain)\n        external\n        view\n        virtual\n        override\n        returns (RemoteTokenInformation memory)\n    {\n        return _remoteTokens[token][domain];\n    }\n}\n"
    },
    "contracts/cross-chain/ToucanCrosschainMessengerStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earthz\npragma solidity 0.8.14;\n\nstruct RemoteTokenInformation {\n    /// @notice address of the token in the remote chain\n    address tokenAddress;\n    /// @notice timer keeps track of when the token pair\n    /// was created in order to disallow updates to the\n    /// pair after a specific amount of time elapses\n    uint256 timer;\n}\n\nstruct BridgeRequest {\n    bool isReverted; // this state is added for future addition of revert functionality\n    uint256 timestamp;\n    BridgeRequestType requestType;\n    MessageType messageType;\n}\n\nenum BridgeRequestType {\n    NOT_REGISTERED, // 0\n    SENT, // 1\n    RECEIVED // 2\n}\n\nenum MessageType {\n    TOKEN_TRANSFER,\n    TCO2_REBALANCE\n}\n\n/// @dev Separate storage contract to improve upgrade safety\nabstract contract ToucanCrosschainMessengerStorageV1 {\n    /// @dev nonce is used to serialize requests executed\n    /// by the source chain in order to avoid duplicates\n    /// from being processed in the remote chain\n    uint256 public nonce;\n    //slither-disable-next-line constable-states\n    bytes32 private DEPRECATED_DOMAIN_SEPARATOR;\n    /// @dev requests keeps track of a hash of the request\n    /// to the request info in order to avoid duplicates\n    /// from being processed in the remote chain\n    /// @custom:oz-retyped-from mapping(bytes32 => ToucanCrosschainMessengerStorageV1.BridgeRequest)\n    mapping(bytes32 => BridgeRequest) public requests;\n    /// @notice remoteTokens maps a token (address) in the source\n    /// chain to the domain id of the remote chain (uint32)\n    /// to info about the token in the remote chain (RemoteTokenInformation)\n    mapping(address => mapping(uint32 => RemoteTokenInformation))\n        internal _remoteTokens;\n}\n\nabstract contract ToucanCrosschainMessengerStorage is\n    ToucanCrosschainMessengerStorageV1\n{}\n"
    },
    "contracts/interfaces/ICarbonOffsetBatches.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {BatchStatus} from '../CarbonOffsetBatchesTypes.sol';\n\ninterface ICarbonOffsetBatches {\n    function getConfirmationStatus(uint256 tokenId)\n        external\n        view\n        returns (BatchStatus);\n\n    function getBatchNFTData(uint256 tokenId)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            BatchStatus\n        );\n\n    function getSerialNumber(uint256 tokenId)\n        external\n        view\n        returns (string memory);\n\n    function setStatusForDetokenizationOrRetirement(\n        uint256 tokenId,\n        BatchStatus newStatus\n    ) external;\n\n    function split(\n        uint256 tokenId,\n        string calldata tokenIdNewSerialNumber,\n        string calldata newTokenIdSerialNumber,\n        uint256 newTokenIdQuantity\n    ) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/ICarbonProjects.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\n\nimport {ProjectData} from '../CarbonProjectTypes.sol';\n\ninterface ICarbonProjects is IERC721Upgradeable {\n    function addNewProject(\n        address to,\n        string memory projectId,\n        string memory standard,\n        string memory methodology,\n        string memory region,\n        string memory storageMethod,\n        string memory method,\n        string memory emissionType,\n        string memory category,\n        string memory uri,\n        address beneficiary\n    ) external returns (uint256);\n\n    function isValidProjectTokenId(uint256 tokenId) external returns (bool);\n\n    function updateProjectId(uint256 tokenId, string calldata newProjectId)\n        external;\n\n    function updateProjectIds(\n        uint256[] calldata tokenIds,\n        string[] calldata newProjectIds\n    ) external;\n\n    function getProjectDataByTokenId(uint256 tokenId)\n        external\n        view\n        returns (ProjectData memory);\n}\n"
    },
    "contracts/interfaces/ICarbonProjectVintages.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\n\nimport {VintageData} from '../CarbonProjectVintageTypes.sol';\n\ninterface ICarbonProjectVintages is IERC721Upgradeable {\n    function addNewVintage(address to, VintageData memory _vintageData)\n        external\n        returns (uint256);\n\n    function exists(uint256 tokenId) external view returns (bool);\n\n    function getProjectVintageDataByTokenId(uint256 tokenId)\n        external\n        view\n        returns (VintageData memory);\n}\n"
    },
    "contracts/interfaces/IPausable.sol": {
      "content": "// SPDX-FileCopyrightText: 2022 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\ninterface IPausable {\n    function paused() external view returns (bool);\n\n    function pause() external;\n\n    function unpause() external;\n}\n"
    },
    "contracts/interfaces/IToucanCarbonOffsets.sol": {
      "content": "// SPDX-FileCopyrightText: 2022 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {VintageData} from '../CarbonProjectVintageTypes.sol';\nimport {ProjectData} from '../CarbonProjectTypes.sol';\nimport {CreateRetirementRequestParams} from '../interfaces/IToucanCarbonOffsetsEscrow.sol';\n\ninterface IToucanCarbonOffsets {\n    function retireFrom(address account, uint256 amount)\n        external\n        returns (uint256 retirementEventId);\n\n    function burnFrom(address account, uint256 amount) external;\n\n    function getAttributes()\n        external\n        view\n        returns (ProjectData memory, VintageData memory);\n\n    /// @notice Get the vintage data of the TCO2\n    function getVintageData()\n        external\n        view\n        returns (VintageData memory vintageData);\n\n    function standardRegistry() external view returns (string memory);\n\n    function retireAndMintCertificate(\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256 amount\n    ) external;\n\n    function retireAndMintCertificateForEntity(\n        address retiringEntity,\n        CreateRetirementRequestParams calldata params\n    ) external;\n\n    function projectVintageTokenId() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IToucanCarbonOffsetsEscrow.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {DetokenizationRequest, RetirementRequest, RequestStatus} from '../ToucanCarbonOffsetsEscrowTypes.sol';\n\nstruct CreateRetirementRequestParams {\n    uint256[] tokenIds;\n    uint256 amount;\n    string retiringEntityString;\n    address beneficiary;\n    string beneficiaryString;\n    string retirementMessage;\n    string beneficiaryLocation;\n    string consumptionCountryCode;\n    uint256 consumptionPeriodStart;\n    uint256 consumptionPeriodEnd;\n}\n\ninterface IToucanCarbonOffsetsEscrow {\n    function createDetokenizationRequest(\n        address user,\n        uint256 amount,\n        uint256[] calldata batchTokenIds\n    ) external returns (uint256);\n\n    function createRetirementRequest(\n        address user,\n        CreateRetirementRequestParams calldata params\n    ) external returns (uint256);\n\n    function finalizeDetokenizationRequest(uint256 requestId) external;\n\n    function finalizeRetirementRequest(uint256 requestId) external;\n\n    function revertDetokenizationRequest(uint256 requestId) external;\n\n    function revertRetirementRequest(uint256 requestId) external;\n\n    function detokenizationRequests(uint256 requestId)\n        external\n        view\n        returns (DetokenizationRequest memory);\n\n    function retirementRequests(uint256 requestId)\n        external\n        view\n        returns (RetirementRequest memory);\n}\n"
    },
    "contracts/interfaces/IToucanCarbonOffsetsFactory.sol": {
      "content": "// SPDX-FileCopyrightText: 2022 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\ninterface IToucanCarbonOffsetsFactory is IAccessControlUpgradeable {\n    function bridgeFeeReceiverAddress()\n        external\n        view\n        returns (address receiver);\n\n    function bridgeFeeBurnAddress() external view returns (address burner);\n\n    function getBridgeFeeAndBurnAmount(uint256 quantity)\n        external\n        view\n        returns (uint256 feeAmount, uint256 burnAmount);\n\n    function allowedBridges(address user) external view returns (bool);\n\n    function owner() external view returns (address);\n\n    function standardRegistry() external returns (string memory);\n\n    function pvIdtoERC20(uint256 pvId) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IToucanContractRegistry.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\ninterface IToucanContractRegistry {\n    function carbonOffsetBatchesAddress() external view returns (address);\n\n    function carbonProjectsAddress() external view returns (address);\n\n    function carbonProjectVintagesAddress() external view returns (address);\n\n    function toucanCarbonOffsetsFactoryAddress(string memory standardRegistry)\n        external\n        view\n        returns (address);\n\n    function retirementCertificatesAddress() external view returns (address);\n\n    function toucanCarbonOffsetsEscrowAddress() external view returns (address);\n\n    function retirementCertificateFractionalizerAddress()\n        external\n        view\n        returns (address);\n\n    function retirementCertificateFractionsAddress()\n        external\n        view\n        returns (address);\n\n    function isValidERC20(address erc20) external view returns (bool);\n\n    function addERC20(address erc20, string memory standardRegistry) external;\n}\n"
    },
    "contracts/libraries/Errors.sol": {
      "content": "// SPDX-FileCopyrightText: 2022 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\n/**\n * @title Errors library\n * @notice Defines the error messages emitted by the different contracts of the Toucan protocol\n * @dev Inspired by the AAVE error library:\n * https://github.com/aave/protocol-v2/blob/5df59ec74a0c635d877dc1c5ee4a165d41488352/contracts/protocol/libraries/helpers/Errors.sol\n * Error messages prefix glossary:\n *  - CP = CarbonPool\n *  - COB = CarbonOffsetBatches\n *  - TCO2 = TCO2\n */\nlibrary Errors {\n    // User is not authorized\n    string public constant CP_UNAUTHORIZED = '1';\n    // Empty array provided as input\n    string public constant CP_EMPTY_ARRAY = '2';\n    // Pool is full of TCO2s\n    string public constant CP_FULL_POOL = '3';\n    // ERC20 is blocklisted in the pool. This error\n    // is returned for TCO2s that have been blocklisted\n    // like the HFC-23 project.\n    string public constant CP_BLOCKLISTED = '4';\n    // ERC20 is not allowlisted in the pool\n    // This error is returned in case the ERC20 is\n    // not a TCO2 in which case it has to be manually\n    // allowlisted in order to be allowed in the pool.\n    string public constant CP_NOT_ALLOWLISTED = '5';\n    // Vintage start time of a TCO2 is too old\n    string public constant CP_START_TIME_TOO_OLD = '6';\n    string public constant CP_REGION_NOT_ACCEPTED = '7';\n    string public constant CP_STANDARD_NOT_ACCEPTED = '8';\n    string public constant CP_METHODOLOGY_NOT_ACCEPTED = '9';\n    // Provided fee is invalid, not in a basis points format: [0,10000)\n    string public constant CP_INVALID_FEE = '10';\n    // Provided address needs to be non-zero\n    string public constant CP_EMPTY_ADDRESS = '11';\n    // Validation check to ensure array lengths match\n    string public constant CP_LENGTH_MISMATCH = '12';\n    // TCO2 not exempted from redeem fees\n    string public constant CP_NOT_EXEMPTED = '13';\n    // A contract has been paused\n    string public constant CP_PAUSED_CONTRACT = '14';\n    // Redemption has leftover unredeemed value\n    string public constant CP_NON_ZERO_REMAINING = '15';\n    // Redemption exceeds deposited TCO2 supply\n    string public constant CP_EXCEEDS_TCO2_SUPPLY = '16';\n    // User must be a router\n    string public constant CP_ONLY_ROUTER = '17';\n    // User must be the owner\n    string public constant CP_ONLY_OWNER = '18';\n    // Zero destination address is invalid for pool token transfers\n    string public constant CP_INVALID_DESTINATION_ZERO = '19';\n    // Self destination address is invalid for pool token transfers\n    string public constant CP_INVALID_DESTINATION_SELF = '20';\n    // Zero amount provided as an input (eg., in redemptions) in invalid\n    string public constant CP_ZERO_AMOUNT = '21';\n    // ERC20 is not eligible to be pooled\n    string public constant CP_NOT_ELIGIBLE = '22';\n    // Carbon registry is already supported in COB\n    string public constant COB_ALREADY_SUPPORTED = '23';\n    // The caller is not granted the VERIFIER_ROLE in COB\n    string public constant COB_NOT_VERIFIER_OR_BATCH_OWNER = '24';\n    // The caller does not own the provided batch\n    string public constant COB_NOT_BATCH_OWNER = '25';\n    // The owner of the batch is invalid (not a TCO2 contract)\n    string public constant COB_INVALID_BATCH_OWNER = '26';\n    // The batch is not in Confirmed status\n    string public constant COB_NOT_CONFIRMED = '27';\n    // The batch is not in a requested status (DetokenizationRequested or RetirementRequested)\n    string public constant COB_NOT_REQUESTED_STATUS = '28';\n    // The batch does not exist\n    string public constant COB_NOT_EXISTS = '29';\n    // The batch has an invalid status based on the action requested\n    string public constant COB_INVALID_STATUS = '30';\n    // The batch is missing an associated project vintage\n    string public constant COB_MISSING_VINTAGE = '31';\n    // The serial number in the batch is already approved\n    string public constant COB_ALREADY_APPROVED = '32';\n    // The batch is not in Pending status\n    string public constant COB_NOT_PENDING = '33';\n    // The batch is already fractionalized\n    string public constant COB_ALREADY_FRACTIONALIZED = '34';\n    // The batch is not in Rejected status\n    string public constant COB_NOT_REJECTED = '35';\n    // The project vintage is already set in the batch\n    string public constant COB_VINTAGE_ALREADY_SET = '36';\n    // The transfer is not approved\n    string public constant COB_TRANSFER_NOT_APPROVED = '37';\n    // The COB contract is paused\n    string public constant COB_PAUSED_CONTRACT = '38';\n    // The caller is invalid\n    string public constant COB_INVALID_CALLER = '39';\n    // The TCO2 for the batch is not found\n    string public constant COB_TCO2_NOT_FOUND = '40';\n    // The registry for the provided vintage is not supported\n    string public constant COB_REGISTRY_NOT_SUPPORTED = '41';\n    // No TCO2 was minted as part of tokenization\n    string public constant COB_NO_TCO2_MINTED = '42';\n    // Only mints are supported for the batch contract to receive an NFT\n    string public constant COB_ONLY_MINTS = '43';\n    // New batch status is invalid\n    string public constant COB_INVALID_NEW_STATUS = '44';\n    // The TCO2 batch amount is invalid\n    string public constant TCO2_BATCH_AMT_INVALID = '45';\n    // The TCO2 batch amount approval has failed\n    string public constant TCO2_APPROVAL_AMT_FAILED = '46';\n    // The TCO2 batch not confirmed\n    string public constant TCO2_BATCH_NOT_CONFIRMED = '47';\n    // The TCO2 batch not whitelisted\n    string public constant TCO2_BATCH_NOT_WHITELISTED = '48';\n    // The TCO2 is non matching NFT\n    string public constant TCO2_NON_MATCHING_NFT = '49';\n    // The TCO2 Quantity in batch is higher than total vintages\n    string public constant TCO2_QTY_HIGHER = '50';\n    // The fee to be charged is too high\n    string public constant CP_FEE_TOO_HIGH = '51';\n    // The max fee to be paid is invalid\n    string public constant CP_INVALID_MAX_FEE = '52';\n    // The pool feature is not supported\n    string public constant CP_NOT_SUPPORTED = '53';\n    // Used for instance to check for sub-tonnage retirement requests\n    string public constant TCO2_INVALID_DECIMALS = '54';\n    // The TCO2 Quantity in the batch is invalid\n    string public constant COB_INVALID_QUANTITY = '55';\n    // Splitting is required on detokenization/retirement finalization, but 2 new serial numbers\n    // were not provided\n    string public constant TCO2_MISSING_SERIALS = '56';\n    // The score set for the ERC-1155 token in the pool is invalid\n    string public constant INVALID_ERC1155_SCORE = '57';\n    // The score of the ERC-1155 token in the pool is not set\n    string public constant EMPTY_ERC155_SCORE = '58';\n    // The underlying decimals are too high for the pool\n    string public constant UNDERLYING_DECIMALS_TOO_HIGH = '59';\n    // The provided supply cap is invalid and should match the underlying token decimals\n    // eg., for an ERC-1155 token whose smallest denomination is tonnes, the pool supply\n    // cap should not include decimals of lower fidelity than tonnes.\n    string public constant INVALID_SUPPLY_CAP = '60';\n}\n"
    },
    "contracts/libraries/Modifiers.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\ncontract Modifiers {\n    modifier onlyBy(address _contractRegistry, address _owner) {\n        require(\n            _contractRegistry == msg.sender || _owner == msg.sender,\n            'Caller is not the registry, nor owner'\n        );\n        _;\n    }\n}\n"
    },
    "contracts/libraries/ProjectUtils.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '../interfaces/IToucanContractRegistry.sol';\nimport '../interfaces/ICarbonProjects.sol';\n\ncontract ProjectUtils {\n    function checkProjectTokenExists(address contractRegistry, uint256 tokenId)\n        internal\n        virtual\n    {\n        address c = IToucanContractRegistry(contractRegistry)\n            .carbonProjectsAddress();\n        bool isValidProjectTokenId = ICarbonProjects(c).isValidProjectTokenId(\n            tokenId\n        );\n        require(isValidProjectTokenId == true, 'Error: Project does not exist');\n    }\n}\n"
    },
    "contracts/libraries/ProjectVintageUtils.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '../interfaces/IToucanContractRegistry.sol';\nimport '../interfaces/ICarbonProjectVintages.sol';\n\ncontract ProjectVintageUtils {\n    function checkProjectVintageTokenExists(\n        address contractRegistry,\n        uint256 tokenId\n    ) internal virtual {\n        address c = IToucanContractRegistry(contractRegistry)\n            .carbonProjectVintagesAddress();\n        require(\n            ICarbonProjectVintages(c).exists(tokenId),\n            'Carbon project vintage does not yet exist'\n        );\n    }\n}\n"
    },
    "contracts/libraries/PuroSerialNumbers.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {Strings} from './Strings.sol';\n\nstruct SerialNumber {\n    // Fields relevant to serial numbers prior to the\n    // Puro API migration.\n    string startSerial;\n    string endSerial;\n    string serialType;\n    // Fields relevant to serial numbers after the\n    // Puro API migration.\n    string issuanceId;\n    // Fields relevant to serial numbers both before and\n    // after the Puro API migration.\n    uint256 rangeStart;\n    uint256 rangeEnd;\n}\n\nlibrary PuroSerialNumbers {\n    using Strings for string;\n    using Strings for uint256;\n\n    // The size info of the serials before the migration to the new Puro API.\n    // Example: 643002406555908610000000140219-643002406555908610000000140220\n    // We need to maintain the serial numbers that were added on-chain\n    // before the migration until we can update serials directly on-chain (LILA-7025).\n    uint256 internal constant TYPE_SIZE = 18;\n    uint256 internal constant NUMBER_SIZE = 12;\n    uint256 internal constant SERIAL_SIZE = TYPE_SIZE * 2 + NUMBER_SIZE * 2 + 1;\n    // The info of the serials that are submitted on-chain after the Puro API migration.\n    // Example: 40980b1a-cff7-4c78-9cc5-a3a2f18c7e0d_1000-1001\n    uint256 internal constant ISSUANCE_ID_SIZE = 36;\n\n    /// @notice Parse a serial number range\n    /// @param serialNumber The serial number string to parse\n    /// @return The parsed serial number\n    function parseSerialNumber(string memory serialNumber)\n        internal\n        pure\n        returns (SerialNumber memory)\n    {\n        if (bytes(serialNumber).length == SERIAL_SIZE) {\n            return parseSerialNumberV1(serialNumber);\n        }\n        return parseSerialNumberV2(serialNumber);\n    }\n\n    /// @notice Parse a serial number range that was created on-chain before the\n    /// Puro API migration.\n    /// @param serialNumber The serial number string to parse\n    /// @return The parsed serial number\n    function parseSerialNumberV1(string memory serialNumber)\n        internal\n        pure\n        returns (SerialNumber memory)\n    {\n        if (serialNumber.count('-') != 1) {\n            revert('v1: incorrect delimiter count');\n        }\n\n        // Split the serial number range into start and end.\n        (string memory startSerial, string memory endSerial) = serialNumber\n            .split('-');\n\n        // Get the part of the serial that is related to the type\n        // of the batch and validate that it is the same for both\n        // serials.\n        string memory startType = startSerial.slice(0, TYPE_SIZE);\n        string memory endType = endSerial.slice(0, TYPE_SIZE);\n        if (!startType.equals(endType)) {\n            revert('Type mismatch');\n        }\n\n        // Get the part of the serial that is related to the amount,\n        // convert to integer, and ensure start is less than end.\n        uint256 rangeStart = startSerial\n            .slice(TYPE_SIZE + 1, TYPE_SIZE + NUMBER_SIZE)\n            .toInteger();\n        uint256 rangeEnd = endSerial\n            .slice(TYPE_SIZE + 1, TYPE_SIZE + NUMBER_SIZE)\n            .toInteger();\n        if (rangeStart > rangeEnd) {\n            revert('Invalid range');\n        }\n\n        return\n            SerialNumber({\n                issuanceId: '',\n                startSerial: startSerial,\n                endSerial: endSerial,\n                serialType: startType,\n                rangeStart: rangeStart,\n                rangeEnd: rangeEnd\n            });\n    }\n\n    /// @notice Parse a serial number range that was created on-chain after the\n    /// Puro API migration.\n    /// @param serialNumber The serial number string to parse\n    /// @return The parsed serial number\n    function parseSerialNumberV2(string memory serialNumber)\n        internal\n        pure\n        returns (SerialNumber memory)\n    {\n        if (serialNumber.count('_') != 1) {\n            revert('v2: incorrect delimiter count');\n        }\n\n        // Split the serial number range into issuance id and the\n        // actual range.\n        (string memory issuanceId, string memory range) = serialNumber.split(\n            '_'\n        );\n\n        // Validate the issuance id.\n        if (!isValidIssuanceId(issuanceId)) {\n            revert('Invalid issuance id');\n        }\n\n        // Validate the range.\n        if (range.count('-') != 1) {\n            revert('Incorrect delimiter count in range');\n        }\n        (string memory startString, string memory endString) = range.split('-');\n        uint256 rangeStart = startString.toInteger();\n        uint256 rangeEnd = endString.toInteger();\n        if (rangeStart > rangeEnd) {\n            revert('Invalid range');\n        }\n\n        return\n            SerialNumber({\n                startSerial: '',\n                endSerial: '',\n                serialType: '',\n                issuanceId: issuanceId,\n                rangeStart: rangeStart,\n                rangeEnd: rangeEnd\n            });\n    }\n\n    function isValidIssuanceId(string memory issuanceId)\n        internal\n        pure\n        returns (bool)\n    {\n        // Basic UUID validation, far from complete.\n        // Probably not worth it to have more than this\n        // on-chain but we could definitely extend in the\n        // future as long as we don't deploy on L1.\n        return\n            bytes(issuanceId).length == ISSUANCE_ID_SIZE &&\n            issuanceId.count('-') == 4;\n    }\n\n    /// @notice Split a serial number range into two parts based on\n    /// the given amount.\n    /// @param serialNumber The serial number to split\n    /// @param amount The amount to split by\n    /// @return balancingSerialNumber remainingSerialNumber The serial\n    /// numbers split from the original serial number.\n    function splitSerialNumber(SerialNumber memory serialNumber, uint256 amount)\n        internal\n        pure\n        returns (\n            string memory balancingSerialNumber,\n            string memory remainingSerialNumber\n        )\n    {\n        if (bytes(serialNumber.issuanceId).length != 0) {\n            return splitSerialNumberV2(serialNumber, amount);\n        }\n        return splitSerialNumberV1(serialNumber, amount);\n    }\n\n    /// @notice Split a serial number range into two parts based on\n    /// the given amount. This is valid for splitting serial numbers\n    /// that were created on-chain before the Puro API migration.\n    /// @param serialNumber The serial number to split\n    /// @param amount The amount to split by\n    /// @return balancingSerialNumber remainingSerialNumber The serial\n    /// numbers split from the original serial number.\n    function splitSerialNumberV1(\n        SerialNumber memory serialNumber,\n        uint256 amount\n    )\n        internal\n        pure\n        returns (\n            string memory balancingSerialNumber,\n            string memory remainingSerialNumber\n        )\n    {\n        if (amount == 0) {\n            revert('Empty amount');\n        }\n        if (amount >= serialNumber.rangeEnd - serialNumber.rangeStart + 1) {\n            revert('Cannot split');\n        }\n\n        // Determine intermediate serial numbers\n        uint256 balancingEndNum = serialNumber.rangeStart + amount - 1;\n        uint256 remainingStartNum = balancingEndNum + 1;\n\n        // Pad amounts\n        string memory paddedBalancingEnd = balancingEndNum.toString().pad(\n            NUMBER_SIZE,\n            '0'\n        );\n        string memory paddedRemainingStart = remainingStartNum.toString().pad(\n            NUMBER_SIZE,\n            '0'\n        );\n        string memory balancingEnd = string.concat(\n            serialNumber.serialType,\n            paddedBalancingEnd\n        );\n        string memory remainingStart = string.concat(\n            serialNumber.serialType,\n            paddedRemainingStart\n        );\n\n        // Create new serials\n        return (\n            string.concat(\n                string.concat(serialNumber.startSerial, '-'),\n                balancingEnd\n            ),\n            string.concat(\n                string.concat(remainingStart, '-'),\n                serialNumber.endSerial\n            )\n        );\n    }\n\n    /// @notice Split a serial number range into two parts based on\n    /// the given amount. This is valid for splitting serial numbers\n    /// that were created on-chain after the Puro API migration.\n    /// @param serialNumber The serial number to split\n    /// @param amount The amount to split by\n    /// @return balancingSerialNumber remainingSerialNumber The serial\n    /// numbers split from the original serial number.\n    function splitSerialNumberV2(\n        SerialNumber memory serialNumber,\n        uint256 amount\n    )\n        internal\n        pure\n        returns (\n            string memory balancingSerialNumber,\n            string memory remainingSerialNumber\n        )\n    {\n        if (amount == 0) {\n            revert('Empty amount');\n        }\n        if (amount >= serialNumber.rangeEnd - serialNumber.rangeStart + 1) {\n            revert('Cannot split');\n        }\n\n        // Determine intermediate serial numbers\n        uint256 balancingEndNum = serialNumber.rangeStart + amount - 1;\n        uint256 remainingStartNum = balancingEndNum + 1;\n\n        // Create new serials\n        return (\n            string.concat(\n                serialNumber.issuanceId,\n                '_',\n                serialNumber.rangeStart.toString(),\n                '-',\n                balancingEndNum.toString()\n            ),\n            string.concat(\n                serialNumber.issuanceId,\n                '_',\n                remainingStartNum.toString(),\n                '-',\n                serialNumber.rangeEnd.toString()\n            )\n        );\n    }\n}\n"
    },
    "contracts/libraries/Strings.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\n\nlibrary Strings {\n    /// @notice Compare two strings\n    /// @param a The string to compare\n    /// @param b The string to compare to\n    /// @return True if the strings are equal, false otherwise\n    function equals(string memory a, string memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return\n            (bytes(a).length == bytes(b).length) &&\n            (keccak256(bytes(a)) == keccak256(bytes(b)));\n    }\n\n    /// @notice Convert a string to an integer\n    /// @param numString The string to convert\n    /// @return The integer value of the string\n    function toInteger(string memory numString)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 val = 0;\n        bytes memory stringBytes = bytes(numString);\n        uint256 stringBytesLen = stringBytes.length;\n        for (uint256 i = 0; i < stringBytesLen; ++i) {\n            uint256 exp = stringBytesLen - i;\n            bytes1 ival = stringBytes[i];\n            uint8 uval = uint8(ival);\n            uint256 jval = uval - uint256(0x30);\n\n            val += (uint256(jval) * (10**(exp - 1)));\n        }\n        return val;\n    }\n\n    /// @notice Convert an integer to a string\n    /// @param value The integer to convert\n    /// @return The string value of the integer\n    function toString(uint256 value) internal pure returns (string memory) {\n        return StringsUpgradeable.toString(value);\n    }\n\n    /// @notice Get a substring of a string\n    /// @param text The string to get a substring from\n    /// @param begin The start index of the substring\n    /// @param end The end index of the substring\n    /// @return The substring\n    function slice(\n        string memory text,\n        uint256 begin,\n        uint256 end\n    ) internal pure returns (string memory) {\n        uint256 length = end - begin;\n        bytes memory a = new bytes(length);\n        for (uint256 i = 0; i < length; ++i) {\n            a[i] = bytes(text)[i + begin];\n        }\n        return string(a);\n    }\n\n    /// @notice Pad a string with a character\n    /// @param text The string to pad\n    /// @param length The length to pad to\n    /// @param padChar The character to pad with\n    /// @return The padded string\n    function pad(\n        string memory text,\n        uint256 length,\n        string memory padChar\n    ) internal pure returns (string memory) {\n        uint256 textLen = bytes(text).length;\n        require(bytes(padChar).length == 1, 'Invalid padChar length');\n        require(length >= textLen, 'Invalid text length');\n\n        for (uint256 i = textLen; i < length; ++i) {\n            text = string.concat(padChar, text);\n        }\n\n        return text;\n    }\n\n    /// @notice Count the occurrences of a character in a string\n    /// @param text The string to count occurrences of char in\n    /// @param char The character to count\n    /// @return nums The number of occurrences\n    function count(string memory text, string memory char)\n        internal\n        pure\n        returns (uint256 nums)\n    {\n        require(bytes(char).length == 1, 'Invalid char length');\n        bytes1 c = bytes(char)[0];\n\n        uint256 textLen = bytes(text).length;\n        for (uint256 i = 0; i < textLen; ++i) {\n            if (bytes(text)[i] == c) {\n                ++nums;\n            }\n        }\n    }\n\n    /// @notice Split a string into two parts. The first occurrence of the delimiter\n    /// is used to split the string into first and last.\n    /// @param text The string to split\n    /// @param delimiter The character to split on\n    /// @return first last The two parts of the string\n    function split(string memory text, string memory delimiter)\n        internal\n        pure\n        returns (string memory first, string memory last)\n    {\n        require(bytes(delimiter).length == 1, 'Invalid delimiter length');\n        bytes1 d = bytes(delimiter)[0];\n\n        uint256 textLen = bytes(text).length;\n        for (uint256 i = 0; i < textLen; ++i) {\n            if (bytes(text)[i] == d) {\n                first = slice(text, 0, i);\n                last = slice(text, i + 1, textLen);\n                return (first, last);\n            }\n        }\n    }\n}\n"
    },
    "contracts/periphery/FxHashNFTCarbonExtension.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/ERC721.sol';\n\nimport {NFTCarbonExtension} from './NFTCarbonExtension.sol';\n\ninterface IFxGenArt721 is IERC721 {\n    // It returns the current supply\n    // https://github.com/fxhash/fxhash-evm-core/blob/62bac5f71ebb43faea2f84d2838ebdce85b94f32/src/tokens/FxGenArt721.sol#L62\n    function totalSupply() external view returns (uint96);\n}\n\ncontract FxHashNFTCarbonExtension is NFTCarbonExtension {\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.0.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 2;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address pool_) NFTCarbonExtension(pool_) {}\n\n    function initialize(\n        uint256 initialPoolTokenAllocation_,\n        address erc721_,\n        address[] calldata accounts,\n        bytes32[] calldata roles\n    ) external initializer {\n        __NFTCarbonExtension_initialize(\n            initialPoolTokenAllocation_,\n            erc721_,\n            accounts,\n            roles\n        );\n    }\n\n    function _getTotalSupply() internal view override returns (uint256) {\n        return IFxGenArt721(address(erc721)).totalSupply();\n    }\n}\n"
    },
    "contracts/periphery/NFTCarbonExtension.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\nimport '../bases/RoleInitializer.sol';\n\nabstract contract NFTCarbonExtension is\n    RoleInitializer,\n    PausableUpgradeable,\n    UUPSUpgradeable\n{\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    IERC20 public immutable pool;\n\n    /// @dev All roles related to accessing this contract\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n\n    // Storage\n    IERC721 public erc721;\n    uint256 public basePoolTokenAllocationPerNFT;\n    uint256 public allocatedSupply;\n    mapping(uint256 => uint256) internal _tokenIdBalance;\n    bool internal allocationStarted;\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n\n    // Events\n    event PoolTokenAllocated(uint256 amount);\n    event PoolTokenWithdrawn(uint256 amount);\n    event ERC721Set(address erc721);\n    event BasePoolTokenAllocationPerNFTSet(uint256 allocation);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address pool_) {\n        require(pool_ != address(0), 'Empty pool address');\n        pool = IERC20(pool_);\n        _disableInitializers();\n    }\n\n    function __NFTCarbonExtension_initialize(\n        uint256 basePoolTokenAllocationPerNFT_,\n        address erc721_,\n        address[] calldata accounts,\n        bytes32[] calldata roles\n    ) internal {\n        __RoleInitializer_init_unchained(accounts, roles);\n        __Pausable_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n\n        basePoolTokenAllocationPerNFT = basePoolTokenAllocationPerNFT_;\n        erc721 = IERC721(erc721_);\n    }\n\n    // Admin functions\n\n    function setErc721(address erc721_) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        erc721 = IERC721(erc721_);\n        emit ERC721Set(erc721_);\n    }\n\n    function setBasePoolTokenAllocationPerNFT(uint256 allocation_)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(!allocationStarted, 'allocation started');\n        basePoolTokenAllocationPerNFT = allocation_;\n        emit BasePoolTokenAllocationPerNFTSet(allocation_);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        override\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {}\n\n    function pause() external onlyRole(PAUSER_ROLE) {\n        super._pause();\n    }\n\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        super._unpause();\n    }\n\n    /** Allows the owner allocate an amount of pool token based on an estimated supply.\n     * @notice The caller needs to approve this contract for a sufficient amount of pool\n     * tokens before executing it. The method quoteAllocatePoolTokenAmount can be used to get\n     * the precise amount needed.\n     * @param estimatedSupply Indicates the amount of NFT tokens for which to allocate\n     * pool tokens\n     *\n     */\n    function allocatePoolToken(uint256 estimatedSupply)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        allocationStarted = true;\n        allocatedSupply += estimatedSupply;\n\n        uint256 amount = estimatedSupply * basePoolTokenAllocationPerNFT;\n        bool success = pool.transferFrom(msg.sender, address(this), amount);\n        require(success, 'transfer failed');\n\n        emit PoolTokenAllocated(amount);\n    }\n\n    /** Allows the owner to withdraw any exceeding amount of pre-allocated\n     * pool tokens.\n     * @param supplyToWithdraw the supply to withdraw. It must be less than the\n     * allocated supply and at the same time we will not allow withdrawals\n     * that violate the carbon backing of the NFTs.\n     */\n    function withdrawPoolToken(uint256 supplyToWithdraw)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        uint256 newAllocatedSupply = allocatedSupply - supplyToWithdraw;\n        uint256 totalSupply = _getTotalSupply();\n        require(newAllocatedSupply >= totalSupply, 'cannot violate backing');\n\n        allocatedSupply = newAllocatedSupply;\n\n        uint256 leftoverTokens = supplyToWithdraw *\n            basePoolTokenAllocationPerNFT;\n        bool success = pool.transfer(msg.sender, leftoverTokens);\n        require(success, 'transfer failed');\n\n        emit PoolTokenWithdrawn(leftoverTokens);\n    }\n\n    /// @dev Marketplace-specific contracts need to override this\n    /// function to return the final supply of the NFT collection\n    /// once a mint has been finalized. In turn this supply variable\n    /// is honored by withdrawPoolToken() to ensure that the owner\n    /// does not withdraw more tokens than they should.\n    function _getTotalSupply() internal view virtual returns (uint256);\n\n    // Permissionless functions\n\n    /** Returns the amount of pool tokens associated to the NFT token id\n     * @param tokenId the token id\n     * @return balance pool token balance\n     */\n    function tokenIdBalance(uint256 tokenId)\n        external\n        view\n        returns (uint256 balance)\n    {\n        require(erc721.ownerOf(tokenId) != address(0), 'non existing token id');\n        return _tokenIdBalance[tokenId] + basePoolTokenAllocationPerNFT;\n    }\n\n    /** It returns the amount of pool tokens required in the sender account\n     * to fulfill an allocation request for the given NFT supply\n     * @param estimatedSupply estimated supply for which to allocate tokens\n     * @return poolTokenAmount required pool token balance\n     */\n    function quoteAllocatePoolTokenAmount(uint256 estimatedSupply)\n        external\n        view\n        returns (uint256 poolTokenAmount, bool isSufficientBalance)\n    {\n        poolTokenAmount = estimatedSupply * basePoolTokenAllocationPerNFT;\n        isSufficientBalance = pool.balanceOf(msg.sender) >= poolTokenAmount;\n    }\n\n    /** It allows an NFT owner to embed further pool tokens in their NFT\n     * @notice The caller needs to approve this contract for a sufficient amount of pool\n     * tokens before executing it.\n     * @param tokenId the token id where to allocate the pool tokens\n     * @param amount amount of pool tokens to associate to the NFT token\n     */\n    function embed(uint256 tokenId, uint256 amount) external whenNotPaused {\n        require(amount > 0, 'invalid amount');\n        require(erc721.ownerOf(tokenId) == msg.sender, 'not the owner');\n\n        _tokenIdBalance[tokenId] += amount;\n\n        bool success = pool.transferFrom(msg.sender, address(this), amount);\n        require(success, 'transfer failed');\n    }\n}\n"
    },
    "contracts/pools/Biochar.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {PoolBridgeable} from './PoolBridgeable.sol';\nimport {PoolWithFeeCalculatorERC20} from './PoolWithFeeCalculatorERC20.sol';\n\n/// @notice Biochar pool contract\ncontract Biochar is PoolWithFeeCalculatorERC20, PoolBridgeable {\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.1.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(address[] calldata accounts, bytes32[] calldata roles)\n        external\n        virtual\n        initializer\n    {\n        __Pool_init_unchained(accounts, roles);\n        __ERC20_init_unchained('Biochar', 'CHAR');\n    }\n\n    /// @dev Exposed for backwards compatibility and will be removed\n    /// in a future version. Use totalProjectSupply instead.\n    function totalPerProjectTCO2Supply(uint256 projectTokenId)\n        external\n        view\n        returns (uint256)\n    {\n        return totalProjectSupply[projectTokenId];\n    }\n\n    /// @dev Exposed for backwards compatibility and will be removed\n    /// in a future version. Use tokenBalance instead.\n    function tokenBalances(address tco2) public view returns (uint256) {\n        return tokenBalance(tco2);\n    }\n\n    /// @dev Exposed for backwards compatibility and will be removed\n    /// in a future version. Use totalUnderlyingSupply instead.\n    function totalTCO2Supply() external view returns (uint256) {\n        return totalUnderlyingSupply;\n    }\n}\n"
    },
    "contracts/pools/BiocharFilter.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport './PoolFilter.sol';\n\ncontract BiocharFilter is PoolFilter {\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    string public constant VERSION = '1.1.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(address[] calldata accounts, bytes32[] calldata roles)\n        external\n        virtual\n        initializer\n    {\n        __PoolFilter_init_unchained(accounts, roles);\n    }\n}\n"
    },
    "contracts/pools/interfaces/IEcoCarbonCredit.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\ninterface IEcoCarbonCredit {\n    function projectId() external view returns (uint256);\n}\n"
    },
    "contracts/pools/interfaces/IPoolFilter.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\ninterface IPoolFilter {\n    function checkEligible(address erc20Addr)\n        external\n        view\n        returns (string memory);\n\n    function checkERC1155Eligible(address token, uint256 tokenId)\n        external\n        view\n        returns (string memory);\n\n    function minimumVintageStartTime() external view returns (uint64);\n\n    function regions(string calldata region) external view returns (bool);\n\n    function standards(string calldata standard) external view returns (bool);\n\n    function methodologies(string calldata methodology)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "contracts/pools/NatureCarbonTonne.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {Errors} from '../libraries/Errors.sol';\nimport {PoolBridgeableLegacy} from './PoolBridgeableLegacy.sol';\nimport {PoolWithFixedFees} from './PoolWithFixedFees.sol';\n\n/// @notice Nature Carbon Tonne (or NatureCarbonTonne)\n/// Contract is an ERC20 compliant token that acts as a pool for TCO2 tokens\ncontract NatureCarbonTonne is PoolWithFixedFees, PoolBridgeableLegacy {\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.5.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize() external virtual initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20_init_unchained('Toucan Protocol: Nature Carbon Tonne', 'NCT');\n        __AccessControl_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /// @notice View function to calculate fees pre-execution\n    /// @dev Kept for backwards-compatibility. New clients should use\n    /// calculateRedemptionInFees instead.\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of amounts to redeem for each tco2s\n    /// @return totalFee Total fees amount\n    function calculateRedeemFees(\n        address[] memory tco2s,\n        uint256[] memory amounts\n    ) external view virtual returns (uint256 totalFee) {\n        return calculateRedemptionInFees(tco2s, amounts, false);\n    }\n\n    /// @notice Need to set the total TCO2 supply of the pool and\n    /// the supply for each project token held by the pool\n    /// otherwise redemptions and crosschain rebalancing will fail.\n    /// This function will be executed once then removed in a future\n    /// upgrade.\n    /// @param projectTokenIds Project token ids held by the pool\n    /// @param projectSupply Total project supply held by the pool.\n    /// The indexes of this array are matching 1:1 with the\n    /// projectTokenIds array.\n    function setTotalTCO2Supply(\n        uint256[] calldata projectTokenIds,\n        uint256[] calldata projectSupply\n    ) external {\n        onlyWithRole(MANAGER_ROLE);\n        uint256 projectTokenIdsLen = projectTokenIds.length;\n        require(\n            projectTokenIdsLen == projectSupply.length,\n            Errors.CP_LENGTH_MISMATCH\n        );\n        require(projectTokenIdsLen != 0, Errors.CP_EMPTY_ARRAY);\n\n        uint256 _totalUnderlyingSupply = 0;\n        for (uint256 i = 0; i < projectTokenIdsLen; ++i) {\n            // Does not protect against duplicates\n            _totalUnderlyingSupply += projectSupply[i];\n            totalProjectSupply[projectTokenIds[i]] = projectSupply[i];\n        }\n        totalUnderlyingSupply = _totalUnderlyingSupply;\n    }\n\n    /// @notice Redeem TCO2s for pool tokens 1:1 minus fees\n    /// The amounts provided are the exact amounts of pool tokens the caller\n    /// is willing to spend in order to redeem TCO2s.\n    /// @dev Kept for backwards-compatibility. New clients should use\n    /// redeemInMany instead.\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of pool token amounts to spend in order to redeem TCO2s.\n    /// The indexes of this array are matching 1:1 with the tco2s array.\n    /// @return redeemedAmounts The amounts of the TCO2s that were redeemed\n    function redeemMany(address[] memory tco2s, uint256[] memory amounts)\n        external\n        virtual\n        returns (uint256[] memory redeemedAmounts)\n    {\n        PoolVintageToken[] memory vintages = _buildPoolVintageTokens(tco2s);\n        (, redeemedAmounts) = _redeemInMany(vintages, amounts, 0, false);\n    }\n\n    /// @notice Returns the balance of the carbon offset found in the pool\n    /// @dev Kept for backwards compatibility. Use tokenBalance instead.\n    /// @param tco2 TCO2 contract address\n    /// @return balance pool balance\n    function tokenBalances(address tco2) public view returns (uint256) {\n        return tokenBalance(tco2);\n    }\n}\n"
    },
    "contracts/pools/NatureCarbonTonneFilter.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport './PoolFilter.sol';\n\ncontract NatureCarbonTonneFilter is PoolFilter {\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    string public constant VERSION = '1.0.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(address[] calldata accounts, bytes32[] calldata roles)\n        external\n        virtual\n        initializer\n    {\n        __PoolFilter_init_unchained(accounts, roles);\n    }\n}\n"
    },
    "contracts/pools/Pool.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport {FeeDistribution, IFeeCalculator} from '@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol';\n\nimport '../bases/RoleInitializer.sol';\nimport '../interfaces/IToucanCarbonOffsets.sol';\nimport {Errors} from '../libraries/Errors.sol';\nimport './interfaces/IPoolFilter.sol';\nimport './PoolStorage.sol';\n\n/// @notice Pool template contract\n/// ERC20 compliant token that acts as a pool for vintage tokens\nabstract contract Pool is\n    ContextUpgradeable,\n    ERC20Upgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    RoleInitializer,\n    UUPSUpgradeable,\n    PoolStorage\n{\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev All roles related to accessing this contract\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\n\n    /// @dev divider to calculate fees in basis points\n    uint256 public constant feeRedeemDivider = 1e4;\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event DepositFeePaid(address depositor, uint256 fees);\n    event RedeemFeePaid(address redeemer, uint256 fees);\n    event RedeemFeeBurnt(address redeemer, uint256 fees);\n    event RedeemBurnFeeUpdated(uint256 feeBp);\n    event RedeemFeeBurnAddressUpdated(address receiver);\n    event RedeemFeeExempted(address exemptedUser, bool isExempted);\n    event SupplyCapUpdated(uint256 newCap);\n    event FilterUpdated(address filter);\n    event AddFeeExemptedTCO2(address tco2);\n    event RemoveFeeExemptedTCO2(address tco2);\n    event MinimumTCLSeedingThresholdUpdated(uint256 newThreshold);\n\n    struct PoolVintageToken {\n        // Address of the token contract. This can be either\n        // an ERC-20 or an ERC-1155 token.\n        address tokenAddress;\n        // Token id for ERC-1155 tokens. For ERC-20 tokens,\n        // this field should always be 0.\n        uint256 erc1155VintageTokenId;\n        // Token id to identify uniquely a project for a vintage\n        // token in the pool. This id should be derived from the\n        // combination of tokenAddress and erc1155VintageTokenId,\n        // depending on the token type of the vintage.\n        uint256 projectTokenId;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function __Pool_init_unchained(\n        address[] calldata accounts,\n        bytes32[] calldata roles\n    ) internal {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n        __RoleInitializer_init_unchained(accounts, roles);\n    }\n\n    // ----------------------------------------\n    //                Abstract\n    // ----------------------------------------\n\n    function _feeDistribution(PoolVintageToken memory vintage, uint256)\n        internal\n        view\n        virtual\n        returns (FeeDistribution memory);\n\n    function _transfer(\n        PoolVintageToken memory vintage,\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual;\n\n    function _retire(\n        PoolVintageToken memory vintage,\n        address from,\n        uint256 amount\n    ) internal virtual returns (uint256);\n\n    function _checkEligible(PoolVintageToken memory vintage)\n        internal\n        view\n        virtual;\n\n    function _emitDepositedEvent(\n        PoolVintageToken memory vintage,\n        uint256 amount\n    ) internal virtual;\n\n    function _emitRedeemedEvent(PoolVintageToken memory vintage, uint256 amount)\n        internal\n        virtual;\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function _authorizeUpgrade(address) internal virtual override {\n        onlyPoolOwner();\n    }\n\n    // ------------------------\n    // Poor person's modifiers\n    // ------------------------\n\n    /// @dev function that checks whether the caller is the\n    /// contract owner\n    function onlyPoolOwner() internal view {\n        require(owner() == msg.sender, Errors.CP_ONLY_OWNER);\n    }\n\n    /// @dev function that only lets the contract's owner and granted role to execute\n    function onlyWithRole(bytes32 role) internal view {\n        require(\n            hasRole(role, msg.sender) || owner() == msg.sender,\n            Errors.CP_UNAUTHORIZED\n        );\n    }\n\n    /// @dev function that checks whether the contract is paused\n    function onlyUnpaused() internal view {\n        require(!paused(), Errors.CP_PAUSED_CONTRACT);\n    }\n\n    // ------------------------\n    // Admin functions\n    // ------------------------\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() external {\n        onlyWithRole(PAUSER_ROLE);\n        _pause();\n    }\n\n    /// @dev Unpause the system, wraps _unpause(), only Admin\n    function unpause() external {\n        onlyWithRole(PAUSER_ROLE);\n        _unpause();\n    }\n\n    /// @notice Update the fee redeem burn percentage\n    /// @param feeRedeemBurnPercentageInBase_ percentage of fee in base\n    function setFeeRedeemBurnPercentage(uint256 feeRedeemBurnPercentageInBase_)\n        external\n        virtual\n    {\n        onlyPoolOwner();\n        require(\n            feeRedeemBurnPercentageInBase_ < feeRedeemDivider,\n            Errors.CP_INVALID_FEE\n        );\n        _feeRedeemBurnPercentageInBase = feeRedeemBurnPercentageInBase_;\n        emit RedeemBurnFeeUpdated(feeRedeemBurnPercentageInBase_);\n    }\n\n    /// @notice Update the fee redeem burn address\n    /// @param feeRedeemBurnAddress_ address to transfer the fees to burn\n    function setFeeRedeemBurnAddress(address feeRedeemBurnAddress_) external {\n        onlyPoolOwner();\n        require(feeRedeemBurnAddress_ != address(0), Errors.CP_EMPTY_ADDRESS);\n        _feeRedeemBurnAddress = feeRedeemBurnAddress_;\n        emit RedeemFeeBurnAddressUpdated(feeRedeemBurnAddress_);\n    }\n\n    /// @notice Adds a new address for redeem fees exemption\n    /// @param _address address to be exempted on redeem fees\n    function addRedeemFeeExemptedAddress(address _address) external {\n        onlyPoolOwner();\n        redeemFeeExemptedAddresses[_address] = true;\n        emit RedeemFeeExempted(_address, true);\n    }\n\n    /// @notice Removes an address from redeem fees exemption\n    /// @param _address address to be removed from exemption\n    function removeRedeemFeeExemptedAddress(address _address) external {\n        onlyPoolOwner();\n        redeemFeeExemptedAddresses[_address] = false;\n        emit RedeemFeeExempted(_address, false);\n    }\n\n    /// @notice Adds a new TCO2 for redeem fees exemption\n    /// @param _tco2 TCO2 to be exempted on redeem fees\n    function addRedeemFeeExemptedTCO2(address _tco2) external {\n        onlyPoolOwner();\n        redeemFeeExemptedTCO2s[_tco2] = true;\n        emit AddFeeExemptedTCO2(_tco2);\n    }\n\n    /// @notice Removes a TCO2 from redeem fees exemption\n    /// @param _tco2 TCO2 to be removed from exemption\n    function removeRedeemFeeExemptedTCO2(address _tco2) external {\n        onlyPoolOwner();\n        redeemFeeExemptedTCO2s[_tco2] = false;\n        emit RemoveFeeExemptedTCO2(_tco2);\n    }\n\n    /// @notice Function to limit the maximum pool supply\n    /// @dev supplyCap is initially set to 0 and must be increased before deposits\n    /// @param newCap New pool supply cap\n    function setSupplyCap(uint256 newCap) external virtual {\n        onlyPoolOwner();\n        supplyCap = newCap;\n        emit SupplyCapUpdated(newCap);\n    }\n\n    /// @notice Update the address of the filter contract\n    /// @param _filter Filter contract address\n    function setFilter(address _filter) external virtual {\n        onlyPoolOwner();\n        filter = _filter;\n        emit FilterUpdated(_filter);\n    }\n\n    function setMinimumTCLSeedingThreshold(uint256 _minimumTCLSeedingThreshold)\n        external\n    {\n        onlyWithRole(MANAGER_ROLE);\n        minimumTCLSeedingThreshold = _minimumTCLSeedingThreshold;\n        emit MinimumTCLSeedingThresholdUpdated(_minimumTCLSeedingThreshold);\n    }\n\n    // ----------------------------\n    //   Permissionless functions\n    // ----------------------------\n\n    function _deposit(\n        PoolVintageToken memory vintage,\n        uint256 amountE18,\n        uint256 maxFee\n    ) internal returns (uint256 mintedPoolTokenAmount) {\n        onlyUnpaused();\n\n        // Ensure the vintage token is eligible to be deposited\n        _checkEligible(vintage);\n\n        // Ensure there is space in the pool\n        uint256 remainingSpace = getRemaining();\n        //slither-disable-next-line incorrect-equality\n        if (remainingSpace == 0) {\n            revert(Errors.CP_FULL_POOL);\n        }\n\n        // If the amount to be deposited exceeds the remaining space, deposit\n        // the maximum amount possible up to the cap instead of failing.\n        if (amountE18 > remainingSpace) amountE18 = remainingSpace;\n\n        uint256 depositedAmount = amountE18;\n        uint256 feeDistributionTotal = 0;\n        if (\n            totalUnderlyingSupply + amountE18 >= minimumTCLSeedingThreshold &&\n            feeCalculator != IFeeCalculator(address(0))\n        ) {\n            // we take a fee only on the part of the deposited amount that brings the total over the threshold\n            uint256 chargeableAmount = totalUnderlyingSupply >=\n                minimumTCLSeedingThreshold\n                ? amountE18\n                : amountE18 +\n                    totalUnderlyingSupply -\n                    minimumTCLSeedingThreshold;\n\n            // If a fee module is configured, use it to calculate the minting fees\n            FeeDistribution memory feeDistribution = _feeDistribution(\n                vintage,\n                chargeableAmount\n            );\n            feeDistributionTotal = getFeeDistributionTotal(feeDistribution);\n            _checkMaxFee(maxFee, feeDistributionTotal);\n            depositedAmount -= feeDistributionTotal;\n\n            // Distribute the fee between the recipients\n            uint256 recipientLen = feeDistribution.recipients.length;\n            for (uint256 i = 0; i < recipientLen; ++i) {\n                _mint(feeDistribution.recipients[i], feeDistribution.shares[i]);\n            }\n            emit DepositFeePaid(msg.sender, feeDistributionTotal);\n        }\n\n        // Mint pool tokens to the user based on the amount of the deposited\n        // underlying token\n        mintedPoolTokenAmount = _mint(\n            msg.sender,\n            depositedAmount,\n            feeDistributionTotal,\n            vintage\n        );\n\n        // Update supply-related storage variables in the pool\n        _changeSupply(vintage, int256(amountE18));\n\n        // Transfer the underlying token to the pool\n        _transfer(vintage, msg.sender, address(this), amountE18);\n\n        _emitDepositedEvent(vintage, amountE18);\n    }\n\n    /// @notice Function to mint pool tokens based on the amount of TCO2\n    /// @dev This function enables the minting of pool tokens based on the amount and the vintage token\n    /// @dev For generic Pool contract the minting is 1:1\n    function _mint(\n        address account,\n        uint256 amount,\n        uint256, /* fee */\n        PoolVintageToken memory\n    ) internal virtual returns (uint256) {\n        super._mint(account, amount);\n        return amount;\n    }\n\n    /// @notice Function to burn pool tokens based on the amount of TCO2\n    /// @dev This function enables the burning of pool tokens based on the amount and the vintage token\n    /// @dev For generic Pool contract the burning is 1:1\n    function _burn(\n        address account,\n        uint256 amount,\n        PoolVintageToken memory\n    ) internal virtual returns (uint256) {\n        super._burn(account, amount);\n        return amount;\n    }\n\n    /// @notice Returns minimum vintage start time for this pool\n    function minimumVintageStartTime() external view returns (uint64) {\n        return IPoolFilter(filter).minimumVintageStartTime();\n    }\n\n    /// @notice Checks if region is eligible for this pool\n    function regions(string calldata region) external view returns (bool) {\n        return IPoolFilter(filter).regions(region);\n    }\n\n    /// @notice Checks if standard is eligible for this pool\n    function standards(string calldata standard) external view returns (bool) {\n        return IPoolFilter(filter).standards(standard);\n    }\n\n    /// @notice Checks if methodology is eligible for this pool\n    function methodologies(string calldata methodology)\n        external\n        view\n        returns (bool)\n    {\n        return IPoolFilter(filter).methodologies(methodology);\n    }\n\n    /// @dev Internal function to calculate redemption fees according to the\n    /// amounts of pool tokens to be spent\n    /// Made virtual so that each child contract can implement its own\n    /// internal fee calculation logic that can be shared with the\n    /// current Pool contract. Child contracts will most likely need\n    /// to simply expose a public function that returns just the\n    /// feeDistributionTotal which is the value that is useful to\n    /// external clients who only care about the total fee amount and\n    /// not how the fee is going to be distributed.\n    function _calculateRedemptionInFees(\n        PoolVintageToken[] memory vintages,\n        uint256[] memory amounts,\n        bool toRetire\n    )\n        internal\n        view\n        virtual\n        returns (\n            uint256[] memory feeAmounts,\n            FeeDistribution memory feeDistribution\n        );\n\n    /// @dev Internal function to calculate redemption fees according to the\n    /// amounts of TCO2 to be redeemed\n    /// Made virtual so that each child contract can implement its own\n    /// internal fee calculation logic that can be shared with the\n    /// current Pool contract. Child contracts will most likely need\n    /// to simply expose a public function that returns just the\n    /// feeDistributionTotal which is the value that is useful to\n    /// external clients who only care about the total fee amount and\n    /// not how the fee is going to be distributed.\n    function _calculateRedemptionOutFees(\n        PoolVintageToken[] memory vintages,\n        uint256[] memory amounts,\n        bool toRetire\n    )\n        internal\n        view\n        virtual\n        returns (\n            uint256 feeDistributionTotal,\n            FeeDistribution memory feeDistribution\n        );\n\n    function getFeeDistributionTotal(FeeDistribution memory feeDistribution)\n        internal\n        pure\n        returns (uint256 feeAmount)\n    {\n        uint256 recipientLen = feeDistribution.recipients.length;\n        _checkLength(recipientLen, feeDistribution.shares.length);\n\n        for (uint256 i = 0; i < recipientLen; ++i) {\n            feeAmount += feeDistribution.shares[i];\n        }\n        return feeAmount;\n    }\n\n    function _redeemInMany(\n        PoolVintageToken[] memory vintages,\n        uint256[] memory amounts,\n        uint256 maxFee,\n        bool toRetire\n    )\n        internal\n        returns (\n            uint256[] memory retirementIds,\n            uint256[] memory redeemedAmounts\n        )\n    {\n        onlyUnpaused();\n        uint256 vintageLength = vintages.length;\n        _checkLength(vintageLength, amounts.length);\n        require(\n            feeCalculator == IFeeCalculator(address(0)),\n            Errors.CP_NOT_SUPPORTED\n        );\n\n        // Initialize return arrays\n        redeemedAmounts = new uint256[](vintageLength);\n        if (toRetire) {\n            retirementIds = new uint256[](vintageLength);\n        }\n\n        // Calculate the fees to be paid for the vintage token redemptions\n        (\n            uint256[] memory feeAmounts,\n            FeeDistribution memory feeDistribution\n        ) = _calculateRedemptionInFees(vintages, amounts, toRetire);\n\n        // Execute redemptions\n        uint256 totalFee = 0;\n\n        for (uint256 i = 0; i < vintageLength; ++i) {\n            _checkEligible(vintages[i]);\n\n            uint256 amountToRedeem = amounts[i];\n            amountToRedeem -= feeAmounts[i];\n            totalFee += feeAmounts[i];\n\n            // Redeem the amount minus the fee\n            //slither-disable-next-line unused-return\n            _redeemSingle(vintages[i], amountToRedeem);\n\n            // If requested, retire the vintage tokens in one go. Callers should\n            // first approve the pool in order for the pool to retire\n            // on behalf of them\n            if (toRetire) {\n                retirementIds[i] = _retire(\n                    vintages[i],\n                    msg.sender,\n                    amountToRedeem\n                );\n            }\n\n            // Keep track of redeemed amounts in return arguments\n            // to make the function composable.\n            redeemedAmounts[i] = amountToRedeem;\n        }\n\n        _checkMaxFee(maxFee, totalFee);\n\n        // Distribute the fee between the recipients\n        if (totalFee > 0) {\n            _distributeRedemptionFee(\n                feeDistribution.recipients,\n                feeDistribution.shares\n            );\n        }\n    }\n\n    function _checkMaxFee(uint256 maxFee, uint256 amount) internal pure {\n        if (maxFee != 0) {\n            // Protect caller against getting charged a higher fee than expected\n            require(amount <= maxFee, Errors.CP_FEE_TOO_HIGH);\n        }\n    }\n\n    function _changeSupply(PoolVintageToken memory vintage, int256 delta)\n        internal\n        virtual\n    {\n        uint256 currentSupply = totalProjectSupply[vintage.projectTokenId];\n        totalProjectSupply[vintage.projectTokenId] = uint256(\n            int256(currentSupply) + delta\n        );\n        totalUnderlyingSupply = uint256(int256(totalUnderlyingSupply) + delta);\n    }\n\n    function _redeemOutMany(\n        PoolVintageToken[] memory vintages,\n        uint256[] memory amountsE18,\n        uint256 maxFee,\n        bool toRetire\n    )\n        internal\n        returns (uint256[] memory retirementIds, uint256 poolAmountSpent)\n    {\n        onlyUnpaused();\n        uint256 vintageLength = vintages.length;\n        _checkLength(vintageLength, amountsE18.length);\n\n        // Initialize return arrays\n        if (toRetire) {\n            retirementIds = new uint256[](vintageLength);\n        }\n\n        // Calculate the fee to be paid for the vintage token redemptions\n        (\n            uint256 feeDistributionTotal,\n            FeeDistribution memory feeDistribution\n        ) = _calculateRedemptionOutFees(vintages, amountsE18, toRetire);\n        _checkMaxFee(maxFee, feeDistributionTotal);\n        poolAmountSpent += feeDistributionTotal;\n\n        // Distribute the fee between the recipients\n        if (feeDistributionTotal != 0) {\n            _distributeRedemptionFee(\n                feeDistribution.recipients,\n                feeDistribution.shares\n            );\n        }\n\n        // Execute redemptions\n        for (uint256 i = 0; i < vintageLength; ++i) {\n            _checkEligible(vintages[i]);\n\n            // Redeem the amount\n            uint256 amountToRedeem = amountsE18[i];\n            poolAmountSpent += _redeemSingle(vintages[i], amountToRedeem);\n\n            // If requested, retire the vintage tokens in one go. Callers should\n            // first approve the pool in order for the pool to retire\n            // on behalf of them\n            if (toRetire) {\n                retirementIds[i] = _retire(\n                    vintages[i],\n                    msg.sender,\n                    amountToRedeem\n                );\n            }\n        }\n    }\n\n    // Distribute the fees between the recipients\n    function _distributeRedemptionFee(\n        address[] memory recipients,\n        uint256[] memory fees\n    ) internal {\n        uint256 amountToBurn = 0;\n        for (uint256 i = 0; i < recipients.length; ++i) {\n            uint256 fee = fees[i];\n            uint256 burnAmount = (fee * _feeRedeemBurnPercentageInBase) /\n                feeRedeemDivider;\n            fee -= burnAmount;\n            amountToBurn += burnAmount;\n            transfer(recipients[i], fee);\n            emit RedeemFeePaid(msg.sender, fee);\n        }\n        if (amountToBurn > 0) {\n            transfer(_feeRedeemBurnAddress, amountToBurn);\n            emit RedeemFeeBurnt(msg.sender, amountToBurn);\n        }\n    }\n\n    /// @dev Internal function that redeems a single underlying token\n    function _redeemSingle(PoolVintageToken memory vintage, uint256 amountE18)\n        internal\n        virtual\n        returns (uint256 burntAmount)\n    {\n        // Burn pool tokens\n        burntAmount = _burn(msg.sender, amountE18, vintage);\n\n        // Update supply-related storage variables in the pool\n        _changeSupply(vintage, int256(amountE18) * -1);\n\n        // Transfer vintage token tokens to the caller\n        _transfer(vintage, address(this), msg.sender, amountE18);\n\n        _emitRedeemedEvent(vintage, amountE18);\n    }\n\n    /// @dev Implemented in order to disable transfers when paused\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        onlyUnpaused();\n    }\n\n    function _checkLength(uint256 l1, uint256 l2) internal pure {\n        if (l1 != l2) {\n            revert(Errors.CP_LENGTH_MISMATCH);\n        }\n    }\n\n    /// @dev Returns the remaining space in pool before hitting the cap\n    function getRemaining() public view returns (uint256) {\n        return (supplyCap - totalSupply());\n    }\n\n    // -----------------------------\n    //      Locked ERC20 safety\n    // -----------------------------\n\n    /// @dev Function to disallowing sending tokens to either the 0-address\n    /// or this contract itself\n    function validDestination(address to) internal view {\n        require(to != address(0x0), Errors.CP_INVALID_DESTINATION_ZERO);\n        require(to != address(this), Errors.CP_INVALID_DESTINATION_SELF);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        validDestination(recipient);\n        super.transfer(recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        validDestination(recipient);\n        super.transferFrom(sender, recipient, amount);\n        return true;\n    }\n}\n"
    },
    "contracts/pools/PoolBridgeable.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '../cross-chain/interfaces/IToucanCrosschainMessenger.sol';\nimport '../interfaces/IToucanCarbonOffsets.sol';\nimport {Errors} from '../libraries/Errors.sol';\nimport {Pool} from './Pool.sol';\n\nabstract contract PoolBridgeable is Pool {\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event RouterUpdated(address router);\n\n    event TCO2RebalanceRequestInitiated(\n        uint32 indexed destinationDomain,\n        address[] tco2s,\n        uint256[] amounts\n    );\n    event TCO2RebalanceRequestCompleted(address[] tco2s, uint256[] amounts);\n\n    // -------------------------------------\n    //   Functions\n    // -------------------------------------\n\n    function onlyRouter() internal view {\n        require(msg.sender == router, Errors.CP_ONLY_ROUTER);\n    }\n\n    /// @notice method to set router address\n    /// @dev use this method to set router address\n    /// @param _router address of ToucanCrosschainMessenger\n    function setRouter(address _router) external {\n        onlyPoolOwner();\n        // router address can be set to zero to make bridgeMint and bridgeBurn unusable\n        router = _router;\n        emit RouterUpdated(_router);\n    }\n\n    /// @notice mint tokens to receiver account that were cross-chain bridged\n    /// @dev invoked only by the ToucanCrosschainMessenger (Router)\n    /// @param _account account that will be minted with corss-chain bridged tokens\n    /// @param _amount amount of tokens that will be minted\n    function bridgeMint(address _account, uint256 _amount) external {\n        onlyRouter();\n        _mint(_account, _amount);\n    }\n\n    /// @notice burn tokens from account to be cross-chain bridged\n    /// @dev invoked only by the ToucanCrosschainMessenger (Router)\n    /// @param _account account that will be burned with corss-chain bridged tokens\n    /// @param _amount amount of tokens that will be burned\n    function bridgeBurn(address _account, uint256 _amount) external {\n        onlyRouter();\n        _burn(_account, _amount);\n    }\n\n    function _getRemotePoolAddress(address tcm, uint32 destinationDomain)\n        internal\n        view\n        returns (address recipient)\n    {\n        RemoteTokenInformation memory remoteInfo = IToucanCrosschainMessenger(\n            tcm\n        ).remoteTokens(address(this), destinationDomain);\n        recipient = remoteInfo.tokenAddress;\n        require(recipient != address(0), Errors.CP_EMPTY_ADDRESS);\n    }\n\n    /// @notice Get the fee needed to bridge TCO2s into the destination domain.\n    /// @param destinationDomain The domain to bridge TCO2s to\n    /// @param tco2s The TCO2s to bridge\n    /// @param amounts The amounts of TCO2s to bridge\n    /// @return fee The fee amount to be paid\n    function quoteBridgeTCO2sFee(\n        uint32 destinationDomain,\n        address[] calldata tco2s,\n        uint256[] calldata amounts\n    ) external view returns (uint256 fee) {\n        uint256 tco2Length = tco2s.length;\n        _checkLength(tco2Length, amounts.length);\n\n        address tcm = router;\n        address recipient = _getRemotePoolAddress(tcm, destinationDomain);\n\n        fee = IToucanCrosschainMessenger(tcm).quoteBridgeTCO2sFee(\n            destinationDomain,\n            tco2s,\n            amounts,\n            recipient\n        );\n    }\n\n    /// @notice Allows MANAGER or the owner to bridge TCO2s into\n    /// another domain.\n    /// @param destinationDomain The domain to bridge TCO2s to\n    /// @param tco2s The TCO2s to bridge\n    /// @param amounts The amounts of TCO2s to bridge\n    function bridgeTCO2s(\n        uint32 destinationDomain,\n        address[] calldata tco2s,\n        uint256[] calldata amounts\n    ) external payable {\n        onlyWithRole(MANAGER_ROLE);\n        uint256 tco2Length = tco2s.length;\n        require(tco2Length != 0, Errors.CP_EMPTY_ARRAY);\n        _checkLength(tco2Length, amounts.length);\n\n        // TODO: Disallow bridging more TCO2s than an amount that\n        // would bring the pool to imbalance, ie., end up with more\n        // pool tokens than TCO2s in the pool in the source chain.\n\n        // Read the address of the remote pool from ToucanCrosschainMessenger\n        // and set that as a recipient in our cross-chain messages.\n        address tcm = router;\n        address recipient = _getRemotePoolAddress(tcm, destinationDomain);\n\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < tco2Length; ++i) {\n            address tco2 = tco2s[i];\n            uint256 amount = amounts[i];\n\n            // Update supply-related storage variables in the pool\n            VintageData memory vData = IToucanCarbonOffsets(tco2)\n                .getVintageData();\n            require(\n                totalProjectSupply[vData.projectTokenId] >= amount,\n                'insufficient vintage amount'\n            );\n            totalProjectSupply[vData.projectTokenId] -= amount;\n            // this is enforced by an implicit invariant that makes\n            // sure a single project supply can never be more than\n            // the total underlying supply. Adding a check will\n            // anyway make debugging easier should the invariant\n            // unexpectedly be broken.\n            require(\n                totalUnderlyingSupply >= amount,\n                'insufficient underlying supply'\n            );\n            totalUnderlyingSupply -= amount;\n        }\n\n        // Transfer tokens to recipient\n        //slither-disable-next-line reentrancy-eth\n        IToucanCrosschainMessenger(tcm).bridgeTCO2s{value: msg.value}(\n            destinationDomain,\n            tco2s,\n            amounts,\n            recipient\n        );\n\n        emit TCO2RebalanceRequestInitiated(destinationDomain, tco2s, amounts);\n    }\n\n    /// @notice Allows a router to complete the bridging of tokens.\n    /// It transfers the tokens to the pool itself and updates the counters.\n    /// @param tco2s The TCO2s that have been bridged\n    /// @param amounts The amounts of TCO2s that have been bridged\n    function completeTCO2Bridging(\n        address[] calldata tco2s,\n        uint256[] calldata amounts\n    ) external {\n        onlyRouter();\n        uint256 tco2Length = tco2s.length;\n        require(tco2Length != 0, Errors.CP_EMPTY_ARRAY);\n        _checkLength(tco2Length, amounts.length);\n\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < tco2Length; ++i) {\n            address tco2 = tco2s[i];\n            uint256 amount = amounts[i];\n\n            // Update supply-related storage variables in the pool\n            VintageData memory vData = IToucanCarbonOffsets(tco2)\n                .getVintageData();\n\n            PoolVintageToken memory vintage = PoolVintageToken(\n                tco2,\n                0,\n                vData.projectTokenId\n            );\n\n            // Update supply-related storage variables in the pool\n            _changeSupply(vintage, int256(amount));\n\n            // Transfer the underlying token to the pool\n            _transfer(vintage, msg.sender, address(this), amount);\n        }\n\n        emit TCO2RebalanceRequestCompleted(tco2s, amounts);\n    }\n}\n"
    },
    "contracts/pools/PoolBridgeableLegacy.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '../cross-chain/interfaces/IToucanCrosschainMessenger.sol';\nimport '../interfaces/IToucanCarbonOffsets.sol';\nimport {Errors} from '../libraries/Errors.sol';\nimport {Pool} from './Pool.sol';\n\nabstract contract PoolBridgeableLegacy is Pool {\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event RouterUpdated(address router);\n    event TCO2Bridged(\n        uint32 indexed destinationDomain,\n        address indexed tco2,\n        uint256 amount\n    );\n\n    // -------------------------------------\n    //   Functions\n    // -------------------------------------\n\n    function onlyRouter() internal view {\n        require(msg.sender == router, Errors.CP_ONLY_ROUTER);\n    }\n\n    /// @notice method to set router address\n    /// @dev use this method to set router address\n    /// @param _router address of ToucanCrosschainMessenger\n    function setRouter(address _router) external {\n        onlyPoolOwner();\n        // router address can be set to zero to make bridgeMint and bridgeBurn unusable\n        router = _router;\n        emit RouterUpdated(_router);\n    }\n\n    /// @notice mint tokens to receiver account that were cross-chain bridged\n    /// @dev invoked only by the ToucanCrosschainMessenger (Router)\n    /// @param _account account that will be minted with corss-chain bridged tokens\n    /// @param _amount amount of tokens that will be minted\n    function bridgeMint(address _account, uint256 _amount) external {\n        onlyRouter();\n        _mint(_account, _amount);\n    }\n\n    /// @notice burn tokens from account to be cross-chain bridged\n    /// @dev invoked only by the ToucanCrosschainMessenger (Router)\n    /// @param _account account that will be burned with corss-chain bridged tokens\n    /// @param _amount amount of tokens that will be burned\n    function bridgeBurn(address _account, uint256 _amount) external {\n        onlyRouter();\n        _burn(_account, _amount);\n    }\n\n    function _getRemotePoolAddress(address tcm, uint32 destinationDomain)\n        internal\n        view\n        returns (address recipient)\n    {\n        RemoteTokenInformation memory remoteInfo = IToucanCrosschainMessenger(\n            tcm\n        ).remoteTokens(address(this), destinationDomain);\n        recipient = remoteInfo.tokenAddress;\n        require(recipient != address(0), Errors.CP_EMPTY_ADDRESS);\n    }\n\n    /// @notice Get the fee needed to bridge TCO2s into the destination domain.\n    /// @param destinationDomain The domain to bridge TCO2s to\n    /// @param tco2s The TCO2s to bridge\n    /// @param amounts The amounts of TCO2s to bridge\n    /// @return fee The fee amount to be paid\n    function quoteBridgeTCO2sFee(\n        uint32 destinationDomain,\n        address[] calldata tco2s,\n        uint256[] calldata amounts\n    ) external view returns (uint256 fee) {\n        uint256 tco2Length = tco2s.length;\n        _checkLength(tco2Length, amounts.length);\n\n        address tcm = router;\n        address recipient = _getRemotePoolAddress(tcm, destinationDomain);\n\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < tco2Length; ++i) {\n            fee += IToucanCrosschainMessenger(tcm).quoteTokenTransferFee(\n                destinationDomain,\n                tco2s[i],\n                amounts[i],\n                recipient\n            );\n        }\n    }\n\n    /// @notice Allows MANAGER or the owner to bridge TCO2s into\n    /// another domain.\n    /// @param destinationDomain The domain to bridge TCO2s to\n    /// @param tco2s The TCO2s to bridge\n    /// @param amounts The amounts of TCO2s to bridge\n    function bridgeTCO2s(\n        uint32 destinationDomain,\n        address[] calldata tco2s,\n        uint256[] calldata amounts\n    ) external payable {\n        onlyWithRole(MANAGER_ROLE);\n        uint256 tco2Length = tco2s.length;\n        require(tco2Length != 0, Errors.CP_EMPTY_ARRAY);\n        _checkLength(tco2Length, amounts.length);\n\n        // TODO: Disallow bridging more TCO2s than an amount that\n        // would bring the pool to imbalance, ie., end up with more\n        // pool tokens than TCO2s in the pool in the source chain.\n\n        // Read the address of the remote pool from ToucanCrosschainMessenger\n        // and set that as a recipient in our cross-chain messages.\n        address tcm = router;\n        address recipient = _getRemotePoolAddress(tcm, destinationDomain);\n\n        uint256 payment = msg.value / tco2Length;\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < tco2Length; ++i) {\n            address tco2 = tco2s[i];\n            uint256 amount = amounts[i];\n\n            {\n                // Update supply-related storage variables in the pool\n                VintageData memory vData = IToucanCarbonOffsets(tco2)\n                    .getVintageData();\n                totalProjectSupply[vData.projectTokenId] -= amount;\n                totalUnderlyingSupply -= amount;\n            }\n\n            // Transfer tokens to recipient\n            //slither-disable-next-line reentrancy-eth\n            IToucanCrosschainMessenger(tcm).transferTokensToRecipient{\n                value: payment\n            }(destinationDomain, tco2, amount, recipient);\n\n            emit TCO2Bridged(destinationDomain, tco2, amount);\n        }\n    }\n}\n"
    },
    "contracts/pools/PoolERC1155able.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport {FeeDistribution} from '@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol';\n\nimport {Errors} from '../libraries/Errors.sol';\nimport {IPoolFilter} from './interfaces/IPoolFilter.sol';\nimport {Pool} from './Pool.sol';\n\nabstract contract PoolERC1155able is Pool, ERC1155Holder {\n    event ERC1155Deposited(\n        address erc1155Addr,\n        uint256 tokenId,\n        uint256 amount\n    );\n    event ERC1155Redeemed(\n        address account,\n        address erc1155Addr,\n        uint256 tokenId,\n        uint256 amount\n    );\n    event UnderlyingDecimalsUpdated(uint8 decimals);\n\n    /// @notice Set the underlying decimals for ERC-1155 tokens.\n    /// @dev The underlying decimals are the number of decimals the ERC-1155\n    /// token uses to represent the underlying asset. For example, if the\n    /// ERC-1155 token represents a tonne of carbon, then the underlying\n    /// decimals would be 0. If it represents a kilogram of carbon, then the\n    /// underlying decimals would be 3.\n    /// @param underlyingDecimals_ The number of decimals the ERC-1155 token\n    /// uses to represent a tonne of carbon.\n    function setUnderlyingDecimals(uint8 underlyingDecimals_) external {\n        onlyPoolOwner();\n        uint8 poolDecimals = decimals();\n        // Underlying decimals cannot be higher than pool decimals, otherwise\n        // the conversions in _poolTokenAmount and _underlyingAmount will fail.\n        // Also if we allow a higher fidelity token to be deposited then the\n        // difference in decimals will be unredeemable. In theory we could check\n        // that low decimals in such deposits are not used but we don't have any\n        // need to do that yet.\n        if (underlyingDecimals_ > poolDecimals)\n            revert(Errors.UNDERLYING_DECIMALS_TOO_HIGH);\n        _underlyingDecimals = underlyingDecimals_;\n        emit UnderlyingDecimalsUpdated(underlyingDecimals_);\n    }\n\n    /// @notice Function to limit the maximum pool supply\n    /// @dev supplyCap is initially set to 0 and must be increased before deposits\n    /// @param newCap New pool supply cap\n    function setSupplyCap(uint256 newCap) external override {\n        onlyPoolOwner();\n        // The supply cap must be of valid precision for the underlying token\n        uint256 precision = 10**(decimals() - _underlyingDecimals);\n        if (newCap % precision != 0) {\n            revert(Errors.INVALID_SUPPLY_CAP);\n        }\n        supplyCap = newCap;\n        emit SupplyCapUpdated(newCap);\n    }\n\n    /// @notice Underlying decimals for ERC-1155 tokens. 0 decimals means\n    /// that the smallest denomination the ERC-1155 token can represent is\n    /// a tonne, 3 decimals means a kilogram, etc.\n    function underlyingDecimals() external view returns (uint8) {\n        return _underlyingDecimals;\n    }\n\n    /// @notice Return the total supply of the project for the\n    /// given ERC1155 token.\n    /// @return supply\n    function totalPerProjectSupply(address erc1155, uint256 tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        return totalProjectSupply[_projectTokenId(erc1155, tokenId)];\n    }\n\n    /// @notice View function to calculate deposit fees pre-execution\n    /// @dev User specifies in front-end the address and amount they want\n    /// @param erc1155 ERC1155 contract address\n    /// @param tokenId id representing the vintage\n    /// @param amount Amount to redeem\n    /// @return feeDistributionTotal Total fee amount to be paid\n    function calculateDepositFees(\n        address erc1155,\n        uint256 tokenId,\n        uint256 amount\n    ) external view virtual returns (uint256 feeDistributionTotal);\n\n    /// @notice View function to calculate redemption fees pre-execution,\n    /// according to the amounts of pool tokens to be spent.\n    /// @param erc1155s Array of ERC1155 contract addresses\n    /// @param tokenIds ids of the vintages of each project\n    /// @param amounts Array of pool token amounts to spend in order to redeem\n    /// underlying tokens.\n    /// @dev The indexes of all arrays should be matching 1:1.\n    /// @param toRetire No-op, retirements of ERC-1155 tokens are not\n    /// supported from within the pool yet and there are no immediate plans\n    /// to add support.\n    /// @return feeDistributionTotal Total fee amount to be paid\n    function calculateRedemptionInFees(\n        address[] memory erc1155s,\n        uint256[] memory tokenIds,\n        uint256[] memory amounts,\n        bool toRetire\n    ) external view virtual returns (uint256 feeDistributionTotal);\n\n    /// @notice View function to calculate redemption fees pre-execution,\n    /// according to the amounts of underlying tokens to be redeemed.\n    /// @param erc1155s Array of ERC1155 contract addresses\n    /// @param tokenIds ids of the vintages of each project\n    /// @param amounts Array of underlying token amounts to redeem.\n    /// @dev The indexes of all arrays should be matching 1:1.\n    /// @param toRetire No-op, retirements of ERC-1155 tokens are not\n    /// supported from within the pool yet and there are no immediate plans\n    /// to add support.\n    /// @return feeDistributionTotal Total fee amount to be paid\n    function calculateRedemptionOutFees(\n        address[] memory erc1155s,\n        uint256[] memory tokenIds,\n        uint256[] memory amounts,\n        bool toRetire\n    ) external view virtual returns (uint256 feeDistributionTotal);\n\n    /// @notice Returns the balance of the carbon offset found in the pool\n    /// @param erc1155 ERC1155 contract address\n    /// @param tokenId id representing the vintage\n    /// @return balance pool balance\n    function tokenBalance(address erc1155, uint256 tokenId)\n        public\n        view\n        returns (uint256 balance)\n    {\n        return IERC1155(erc1155).balanceOf(address(this), tokenId);\n    }\n\n    /// @notice Checks if token to be deposited is eligible for this pool.\n    /// Reverts if not.\n    /// Beware that the revert reason might depend on the underlying implementation\n    /// of IPoolFilter.checkEligible\n    /// @param erc1155 the ERC1155 contract to check\n    /// @param tokenId the token id\n    /// @return isEligible true if address is eligible and no other issues occur\n    function checkEligible(address erc1155, uint256 tokenId)\n        external\n        view\n        virtual\n        returns (bool isEligible)\n    {\n        _checkEligible(_buildPoolVintageToken(erc1155, tokenId));\n        return true;\n    }\n\n    // Overrides\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC1155Receiver, AccessControlUpgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    // Internal\n\n    function _checkEligible(PoolVintageToken memory vintage)\n        internal\n        view\n        override\n    {\n        string memory eligibilityError = IPoolFilter(filter)\n            .checkERC1155Eligible(\n                vintage.tokenAddress,\n                vintage.erc1155VintageTokenId\n            );\n        if (bytes(eligibilityError).length > 0) {\n            revert(eligibilityError);\n        }\n    }\n\n    function _changeSupply(PoolVintageToken memory vintage, int256 delta)\n        internal\n        override\n    {\n        super._changeSupply(vintage, _underlyingAmount(delta));\n    }\n\n    function _emitDepositedEvent(\n        PoolVintageToken memory vintage,\n        uint256 amount\n    ) internal override {\n        emit ERC1155Deposited(\n            vintage.tokenAddress,\n            vintage.erc1155VintageTokenId,\n            _underlyingAmount(amount)\n        );\n    }\n\n    function _emitRedeemedEvent(PoolVintageToken memory vintage, uint256 amount)\n        internal\n        override\n    {\n        emit ERC1155Redeemed(\n            msg.sender,\n            vintage.tokenAddress,\n            vintage.erc1155VintageTokenId,\n            _underlyingAmount(amount)\n        );\n    }\n\n    function _buildPoolVintageTokens(\n        address[] memory erc1155s,\n        uint256[] memory tokenIds\n    ) internal view returns (PoolVintageToken[] memory vintageTokens) {\n        uint256 length = erc1155s.length;\n        vintageTokens = new PoolVintageToken[](length);\n        for (uint256 i = 0; i < length; i++) {\n            vintageTokens[i] = _buildPoolVintageToken(erc1155s[i], tokenIds[i]);\n        }\n    }\n\n    function _buildPoolVintageToken(address erc1155, uint256 tokenId)\n        internal\n        view\n        returns (PoolVintageToken memory)\n    {\n        return\n            PoolVintageToken(\n                erc1155,\n                tokenId,\n                _projectTokenId(erc1155, tokenId)\n            );\n    }\n\n    function _feeDistribution(PoolVintageToken memory vintage, uint256 amount)\n        internal\n        view\n        virtual\n        override\n        returns (FeeDistribution memory)\n    {\n        return\n            feeCalculator.calculateDepositFees(\n                address(this),\n                vintage.tokenAddress,\n                vintage.erc1155VintageTokenId,\n                amount\n            );\n    }\n\n    function _transfer(\n        PoolVintageToken memory vintage,\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        IERC1155(vintage.tokenAddress).safeTransferFrom(\n            from,\n            to,\n            vintage.erc1155VintageTokenId,\n            _underlyingAmount(amount),\n            ''\n        );\n    }\n\n    function _retire(\n        PoolVintageToken memory vintage,\n        address from,\n        uint256 amount\n    ) internal override returns (uint256) {}\n\n    function _projectTokenId(address erc1155, uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (uint256);\n\n    /// @dev The underlying amount conversions are helpful to execute\n    /// so internal logic can be kept simple by always operating on\n    /// pool token decimals. For example, underlying token amounts are\n    /// converted to pool token amounts internally so pool ops like\n    /// charging fees can be performed.\n    function _underlyingAmount(uint256 poolTokenAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        uint8 decimals = decimals();\n        decimals -= _underlyingDecimals;\n        return poolTokenAmount / (10**decimals);\n    }\n\n    function _underlyingAmount(int256 poolTokenAmount)\n        internal\n        view\n        returns (int256)\n    {\n        uint8 decimals = decimals();\n        decimals -= _underlyingDecimals;\n        // The minimum decimals value that can overflow in the int256\n        // conversion below is 78 so not anything to be worried about.\n        return poolTokenAmount / int256(10**decimals);\n    }\n\n    function _poolTokenAmount(uint256 underlyingAmount)\n        internal\n        view\n        returns (uint256)\n    {\n        uint8 decimals = decimals();\n        decimals -= _underlyingDecimals;\n        return underlyingAmount * (10**decimals);\n    }\n\n    function _poolTokenAmounts(uint256[] memory amounts)\n        internal\n        view\n        returns (uint256[] memory poolTokenAmounts)\n    {\n        uint256 length = amounts.length;\n        poolTokenAmounts = new uint256[](length);\n        for (uint256 i = 0; i < length; i++) {\n            poolTokenAmounts[i] = _poolTokenAmount(amounts[i]);\n        }\n    }\n}\n"
    },
    "contracts/pools/PoolERC20able.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport {FeeDistribution} from '@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol';\n\nimport {VintageData, IToucanCarbonOffsets} from '../interfaces/IToucanCarbonOffsets.sol';\nimport {Errors} from '../libraries/Errors.sol';\nimport {IPoolFilter} from './interfaces/IPoolFilter.sol';\nimport {Pool} from './Pool.sol';\n\nabstract contract PoolERC20able is Pool {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    event Deposited(address erc20Addr, uint256 amount);\n    event Redeemed(address account, address erc20, uint256 amount);\n\n    /// @notice Return the total supply of the project for the\n    /// given TCO2 token.\n    /// @return supply\n    function totalPerProjectSupply(address tco2)\n        external\n        view\n        returns (uint256)\n    {\n        return totalProjectSupply[_projectTokenId(tco2)];\n    }\n\n    /// @notice Redeem a whitelisted TCO2 without paying any fees and burn\n    /// the TCO2. Initially added to burn HFC-23 credits, can be used in the\n    /// future to dispose of any other whitelisted credits.\n    /// @dev User needs to approve the pool contract in the TCO2 contract for\n    /// the amount to be burnt before executing this function.\n    /// @param tco2 TCO2 to redeem and burn\n    /// @param amount Amount to redeem and burn\n    function redeemAndBurn(address tco2, uint256 amount) external {\n        onlyUnpaused();\n        require(redeemFeeExemptedTCO2s[tco2], Errors.CP_NOT_EXEMPTED);\n        //slither-disable-next-line unused-return\n        _redeemSingle(_buildPoolVintageToken(tco2), amount);\n        // User has to approve the pool contract in the TCO2 contract\n        // in order for this function to successfully burn the tokens\n        IToucanCarbonOffsets(tco2).burnFrom(msg.sender, amount);\n    }\n\n    /// @notice View function to calculate deposit fees pre-execution\n    /// @dev User specifies in front-end the address and amount they want\n    /// @param tco2 TCO2 contract addresses\n    /// @param amount Amount to deposit\n    /// @return feeDistributionTotal Total fee amount to be paid\n    function calculateDepositFees(address tco2, uint256 amount)\n        external\n        view\n        virtual\n        returns (uint256 feeDistributionTotal);\n\n    /// @notice View function to calculate redemption fees pre-execution,\n    /// according to the amounts of pool tokens to be spent.\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of pool token amounts to spend in order to redeem TCO2s.\n    /// The indexes of this array are matching 1:1 with the tco2s array.\n    /// @param toRetire Whether the TCO2s will be retired atomically\n    /// with the redemption. It may be that lower fees will be charged\n    /// in this case.\n    /// @return feeDistributionTotal Total fee amount to be paid\n    function calculateRedemptionInFees(\n        address[] memory tco2s,\n        uint256[] memory amounts,\n        bool toRetire\n    ) external view virtual returns (uint256 feeDistributionTotal);\n\n    /// @notice View function to calculate redemption fees pre-execution,\n    /// according to the amounts of TCO2 to be redeemed.\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of TCO2 amounts to redeem.\n    /// The indexes of this array are matching 1:1 with the tco2s array.\n    /// @param toRetire Whether the TCO2s will be retired atomically\n    /// with the redemption. It may be that lower fees will be charged\n    /// in this case.\n    /// @return feeDistributionTotal Total fee amount to be paid\n    function calculateRedemptionOutFees(\n        address[] memory tco2s,\n        uint256[] memory amounts,\n        bool toRetire\n    ) external view virtual returns (uint256 feeDistributionTotal);\n\n    /// @notice Returns the balance of the carbon offset found in the pool\n    /// @param tco2 TCO2 contract address\n    /// @return balance pool balance\n    function tokenBalance(address tco2) public view returns (uint256) {\n        return IERC20Upgradeable(tco2).balanceOf(address(this));\n    }\n\n    /// @notice Checks if token to be deposited is eligible for this pool.\n    /// Reverts if not.\n    /// Beware that the revert reason might depend on the underlying implementation\n    /// of IPoolFilter.checkEligible\n    /// @param vintageToken the contract to check\n    /// @return isEligible true if address is eligible and no other issues occur\n    function checkEligible(address vintageToken)\n        external\n        view\n        virtual\n        returns (bool isEligible)\n    {\n        _checkEligible(_buildPoolVintageToken(vintageToken));\n        return true;\n    }\n\n    // Internal\n\n    function _emitDepositedEvent(\n        PoolVintageToken memory vintage,\n        uint256 amount\n    ) internal override {\n        emit Deposited(vintage.tokenAddress, amount);\n    }\n\n    function _emitRedeemedEvent(PoolVintageToken memory vintage, uint256 amount)\n        internal\n        override\n    {\n        emit Redeemed(msg.sender, vintage.tokenAddress, amount);\n    }\n\n    function _checkEligible(PoolVintageToken memory vintage)\n        internal\n        view\n        override\n    {\n        //slither-disable-next-line unused-return\n        string memory eligibilityError = IPoolFilter(filter).checkEligible(\n            vintage.tokenAddress\n        );\n\n        if (bytes(eligibilityError).length > 0) {\n            revert(eligibilityError);\n        }\n    }\n\n    function _feeDistribution(PoolVintageToken memory vintage, uint256 amount)\n        internal\n        view\n        virtual\n        override\n        returns (FeeDistribution memory)\n    {\n        return\n            feeCalculator.calculateDepositFees(\n                address(this),\n                vintage.tokenAddress,\n                amount\n            );\n    }\n\n    function _transfer(\n        PoolVintageToken memory vintage,\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        if (from == address(this)) {\n            IERC20Upgradeable(vintage.tokenAddress).safeTransfer(to, amount);\n        } else {\n            IERC20Upgradeable(vintage.tokenAddress).safeTransferFrom(\n                from,\n                to,\n                amount\n            );\n        }\n    }\n\n    function _retire(\n        PoolVintageToken memory vintage,\n        address from,\n        uint256 amount\n    ) internal override returns (uint256) {\n        return\n            IToucanCarbonOffsets(vintage.tokenAddress).retireFrom(from, amount);\n    }\n\n    function _buildPoolVintageTokens(address[] memory tco2s)\n        internal\n        view\n        returns (PoolVintageToken[] memory vintages)\n    {\n        uint256 length = tco2s.length;\n        vintages = new PoolVintageToken[](length);\n        for (uint256 i = 0; i < length; i++) {\n            vintages[i] = _buildPoolVintageToken(tco2s[i]);\n        }\n    }\n\n    function _buildPoolVintageToken(address tco2)\n        internal\n        view\n        returns (PoolVintageToken memory)\n    {\n        return PoolVintageToken(tco2, 0, _projectTokenId(tco2));\n    }\n\n    function _projectTokenId(address tco2) internal view returns (uint256) {\n        return IToucanCarbonOffsets(tco2).getVintageData().projectTokenId;\n    }\n}\n"
    },
    "contracts/pools/PoolFilter.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\n\nimport '../bases/RoleInitializer.sol';\nimport '../interfaces/IToucanCarbonOffsets.sol';\nimport '../interfaces/IToucanContractRegistry.sol';\nimport {Errors} from '../libraries/Errors.sol';\nimport '../libraries/Strings.sol';\nimport './PoolFilterStorage.sol';\n\nabstract contract PoolFilter is\n    ContextUpgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    RoleInitializer,\n    UUPSUpgradeable,\n    PoolFilterStorage\n{\n    using Strings for string;\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event AttributeMethodologyAdded(string methodology);\n    event AttributeMethodologyRemoved(string methodology);\n    event AttributeRegionAdded(string region);\n    event AttributeRegionRemoved(string region);\n    event AttributeStandardAdded(string standard);\n    event AttributeStandardRemoved(string standard);\n    event ExternalAddressRemovedFromAllowlist(address erc20addr);\n    event ExternalAddressAllowlisted(address erc20addr);\n    event ExternalERC1155TokenAllowlisted(\n        address tokenAddress,\n        uint256 tokenId\n    );\n    event ExternalERC1155TokenRemovedFromAllowlist(\n        address tokenAddress,\n        uint256 tokenId\n    );\n    event InternalAddressBlocklisted(address erc20addr);\n    event InternalAddressRemovedFromBlocklist(address erc20addr);\n    event InternalAddressRemovedFromAllowlist(address erc20addr);\n    event InternalAddressAllowlisted(address erc20addr);\n    event MappingSwitched(string mappingName, bool accepted);\n    event MinimumVintageStartTimeUpdated(uint256 minimumVintageStartTime);\n    event ToucanRegistrySet(address registry);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function __PoolFilter_init_unchained(\n        address[] calldata accounts,\n        bytes32[] calldata roles\n    ) internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __RoleInitializer_init_unchained(accounts, roles);\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function _authorizeUpgrade(address) internal virtual override {\n        onlyPoolOwner();\n    }\n\n    // ------------------------\n    // Poor person's modifiers\n    // ------------------------\n\n    /// @dev function that checks whether the caller is the\n    /// contract owner\n    function onlyPoolOwner() internal view {\n        require(owner() == msg.sender, Errors.CP_ONLY_OWNER);\n    }\n\n    // ----------------------------------------\n    //      Read-only functions\n    // ----------------------------------------\n\n    /// @notice Checks if an ERC20 token is eligible for this pool\n    /// @param erc20Addr The ERC20 token\n    /// @return String with error code if any error occurs, else empty string\n    function checkEligible(address erc20Addr)\n        external\n        view\n        virtual\n        returns (string memory)\n    {\n        bool isToucanContract = IToucanContractRegistry(contractRegistry)\n            .isValidERC20(erc20Addr);\n\n        if (isToucanContract) {\n            if (internalAllowlist[erc20Addr]) {\n                return '';\n            }\n\n            if (internalBlocklist[erc20Addr]) {\n                return Errors.CP_BLOCKLISTED;\n            }\n\n            return checkAttributeMatching(erc20Addr);\n        } else {\n            /// @dev If not Toucan native contract, check if address is allowlisted\n            if (!externalAllowlist[erc20Addr]) {\n                return Errors.CP_NOT_ALLOWLISTED;\n            }\n        }\n\n        return '';\n    }\n\n    /// @notice Checks if an ERC-1155 token is eligible for this pool\n    /// @param tokenAddress address of the ERC1155 token\n    /// @param tokenId ID of the ERC1155 token\n    /// @return String with error code if any error occurs, else empty string\n    function checkERC1155Eligible(address tokenAddress, uint256 tokenId)\n        external\n        view\n        returns (string memory)\n    {\n        if (!externalERC1155Allowlist[tokenAddress][tokenId])\n            return Errors.CP_NOT_ALLOWLISTED;\n\n        return '';\n    }\n\n    /// @notice Checks whether incoming ERC20s match the accepted criteria/attributes\n    /// @param erc20Addr The ERC20 token\n    /// @return String with error code if any error occurs, else empty string\n    function checkAttributeMatching(address erc20Addr)\n        public\n        view\n        virtual\n        returns (string memory)\n    {\n        ProjectData memory projectData;\n        VintageData memory vintageData;\n        (projectData, vintageData) = IToucanCarbonOffsets(erc20Addr)\n            .getAttributes();\n\n        /// @dev checks if any one of the attributes are blocklisted.\n        /// If mappings are set to \"allowlist\"-mode, require the opposite\n        if (vintageData.startTime < minimumVintageStartTime)\n            return Errors.CP_START_TIME_TOO_OLD;\n\n        if (regions[projectData.region] != regionsIsAcceptedMapping)\n            return Errors.CP_REGION_NOT_ACCEPTED;\n\n        if (standards[projectData.standard] != standardsIsAcceptedMapping)\n            return Errors.CP_STANDARD_NOT_ACCEPTED;\n\n        if (\n            methodologies[projectData.methodology] !=\n            methodologiesIsAcceptedMapping\n        ) return Errors.CP_METHODOLOGY_NOT_ACCEPTED;\n\n        return '';\n    }\n\n    // ----------------------------------------\n    //      Admin functions\n    // ----------------------------------------\n\n    function setToucanContractRegistry(address _address) external {\n        onlyPoolOwner();\n        contractRegistry = _address;\n        emit ToucanRegistrySet(_address);\n    }\n\n    /// @notice Generic function to switch attributes mappings into either\n    /// acceptance or rejection criteria\n    /// @param _mappingName attribute mapping of project-vintage data\n    /// @param accepted determines if mapping works as a blocklist or allowlist\n    function switchMapping(string memory _mappingName, bool accepted) external {\n        onlyPoolOwner();\n        if (_mappingName.equals('regions')) {\n            accepted\n                ? regionsIsAcceptedMapping = true\n                : regionsIsAcceptedMapping = false;\n        } else if (_mappingName.equals('standards')) {\n            accepted\n                ? standardsIsAcceptedMapping = true\n                : standardsIsAcceptedMapping = false;\n        } else if (_mappingName.equals('methodologies')) {\n            accepted\n                ? methodologiesIsAcceptedMapping = true\n                : methodologiesIsAcceptedMapping = false;\n        }\n        emit MappingSwitched(_mappingName, accepted);\n    }\n\n    /// @notice Function to add attributes for filtering (does not support complex AttributeSets)\n    /// @param addToList determines whether attribute should be added or removed\n    /// Other params are arrays of attributes to be added\n    function addAttributes(\n        bool addToList,\n        string[] memory _regions,\n        string[] memory _standards,\n        string[] memory _methodologies\n    ) external virtual {\n        onlyPoolOwner();\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < _standards.length; ++i) {\n            if (addToList == true) {\n                standards[_standards[i]] = true;\n                emit AttributeStandardAdded(_standards[i]);\n            } else {\n                standards[_standards[i]] = false;\n                emit AttributeStandardRemoved(_standards[i]);\n            }\n        }\n\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < _methodologies.length; ++i) {\n            if (addToList == true) {\n                methodologies[_methodologies[i]] = true;\n                emit AttributeMethodologyAdded(_methodologies[i]);\n            } else {\n                methodologies[_methodologies[i]] = false;\n                emit AttributeMethodologyRemoved(_methodologies[i]);\n            }\n        }\n\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < _regions.length; ++i) {\n            if (addToList == true) {\n                regions[_regions[i]] = true;\n                emit AttributeRegionAdded(_regions[i]);\n            } else {\n                regions[_regions[i]] = false;\n                emit AttributeRegionRemoved(_regions[i]);\n            }\n        }\n    }\n\n    /// @notice Function to allowlist selected external non-TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToExternalAllowlist(address[] memory erc20Addr) external {\n        onlyPoolOwner();\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            externalAllowlist[erc20Addr[i]] = true;\n            emit ExternalAddressAllowlisted(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Add ERC-1155 tokens to external allowlist\n    /// @param tokenAddresses An array of contract addresses\n    /// @param tokenIds An array of token IDs\n    /// @dev Both arrays must be of the same length. Each token address is associated\n    /// with the token ID at the same index.\n    function addToExternalERC1155Allowlist(\n        address[] calldata tokenAddresses,\n        uint256[] calldata tokenIds\n    ) external {\n        onlyPoolOwner();\n        uint256 tokensLen = tokenAddresses.length;\n        if (tokensLen != tokenIds.length) revert(Errors.CP_LENGTH_MISMATCH);\n\n        for (uint256 i = 0; i < tokensLen; ++i) {\n            externalERC1155Allowlist[tokenAddresses[i]][tokenIds[i]] = true;\n            emit ExternalERC1155TokenAllowlisted(\n                tokenAddresses[i],\n                tokenIds[i]\n            );\n        }\n    }\n\n    /// @notice Function to allowlist certain TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToInternalAllowlist(address[] memory erc20Addr) external {\n        onlyPoolOwner();\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            internalAllowlist[erc20Addr[i]] = true;\n            emit InternalAddressAllowlisted(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to blocklist certain TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToInternalBlocklist(address[] memory erc20Addr) external {\n        onlyPoolOwner();\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            internalBlocklist[erc20Addr[i]] = true;\n            emit InternalAddressBlocklisted(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to remove ERC20 addresses from external allowlist\n    /// @param erc20Addr accepts an array of contract addresses\n    function removeFromExternalAllowlist(address[] memory erc20Addr) external {\n        onlyPoolOwner();\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            externalAllowlist[erc20Addr[i]] = false;\n            emit ExternalAddressRemovedFromAllowlist(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Remove ERC-1155 tokens from external allowlist\n    /// @param tokenAddresses An array of contract addresses\n    /// @param tokenIds An array of token IDs\n    /// @dev Both arrays must be of the same length. Each token address is associated\n    /// with the token ID at the same index.\n    function removeFromExternalERC1155Allowlist(\n        address[] calldata tokenAddresses,\n        uint256[] calldata tokenIds\n    ) external {\n        onlyPoolOwner();\n        uint256 tokensLen = tokenAddresses.length;\n        if (tokensLen != tokenIds.length) revert(Errors.CP_LENGTH_MISMATCH);\n\n        for (uint256 i = 0; i < tokensLen; ++i) {\n            externalERC1155Allowlist[tokenAddresses[i]][tokenIds[i]] = false;\n            emit ExternalERC1155TokenRemovedFromAllowlist(\n                tokenAddresses[i],\n                tokenIds[i]\n            );\n        }\n    }\n\n    /// @notice Function to remove TCO2 addresses from internal blocklist\n    /// @param erc20Addr accepts an array of contract addresses\n    function removeFromInternalBlocklist(address[] memory erc20Addr) external {\n        onlyPoolOwner();\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            internalBlocklist[erc20Addr[i]] = false;\n            emit InternalAddressRemovedFromBlocklist(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to remove TCO2 addresses from internal allowlist\n    /// @param erc20Addr accepts an array of contract addressesc\n    function removeFromInternalAllowlist(address[] memory erc20Addr) external {\n        onlyPoolOwner();\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            internalAllowlist[erc20Addr[i]] = false;\n            emit InternalAddressRemovedFromAllowlist(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Determines the minimum vintage start time acceptance criteria of ERC20s\n    /// @param _minimumVintageStartTime unix time format\n    function setMinimumVintageStartTime(uint64 _minimumVintageStartTime)\n        external\n    {\n        onlyPoolOwner();\n        minimumVintageStartTime = _minimumVintageStartTime;\n        emit MinimumVintageStartTimeUpdated(_minimumVintageStartTime);\n    }\n}\n"
    },
    "contracts/pools/PoolFilterStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nabstract contract PoolFilterStorageV1 {\n    /// @dev Mappings for attributes that can be included or excluded\n    /// if set to `false`, attribute-values are blocklisted/rejected\n    /// if set to `true`, attribute-values are allowlisted/accepted\n    mapping(string => bool) public regions;\n    mapping(string => bool) public standards;\n    mapping(string => bool) public methodologies;\n\n    /// @dev mapping to allowlist external non-TCO2 contracts by address\n    mapping(address => bool) public externalAllowlist;\n\n    /// @dev mapping to include certain TCO2 contracts by address,\n    /// overriding attribute matching checks\n    mapping(address => bool) public internalAllowlist;\n\n    /// @dev mapping to exclude certain TCO2 contracts by address,\n    /// even if the attribute matching would pass\n    mapping(address => bool) public internalBlocklist;\n\n    /// @dev address of the registry contract that knows\n    /// the list of TCO2s\n    address public contractRegistry;\n\n    uint64 public minimumVintageStartTime;\n    /// @dev These booleans control the direction of the criteria as\n    /// they are defined in regions, standards, and methodologies.\n    ///\n    /// Two examples:\n    ///\n    /// 1. methodologiesIsAcceptedMapping=false\n    ///    methodologies['VM0002']=true\n    /// This means the pool will reject any project that follows the\n    /// 'VM0002' methodology and accept anything else\n    ///\n    /// 2. methodologiesIsAcceptedMapping=true\n    ///    methodologies['VM0002']=true\n    /// This means the pool will accept only any project that follows the\n    /// 'VM0002' methodology.\n    bool public regionsIsAcceptedMapping;\n    bool public standardsIsAcceptedMapping;\n    bool public methodologiesIsAcceptedMapping;\n}\n\nabstract contract PoolFilterStorageV2 {\n    /// @dev mapping to allowlist external ERC-1155 tokens\n    mapping(address => mapping(uint256 => bool))\n        public externalERC1155Allowlist;\n}\n\nabstract contract PoolFilterStorage is\n    PoolFilterStorageV1,\n    PoolFilterStorageV2\n{}\n"
    },
    "contracts/pools/PoolStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {IFeeCalculator} from '@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol';\n\nabstract contract PoolStorageV1 {\n    /// @notice The supply cap is used as a measure to guard deposits\n    /// in the pool. It is meant to minimize the impact a potential\n    /// compromise in the source registry (eg. Verra) can have to the pool.\n    uint256 public supplyCap;\n    //slither-disable-next-line constable-states\n    mapping(address => uint256) private DEPRECATED_tokenBalances;\n    //slither-disable-next-line constable-states\n    address private DEPRECATED_contractRegistry;\n\n    /// @notice array used to read from when redeeming TCO2s automatically\n    address[] public scoredTCO2s;\n\n    /// @dev Mappings for attributes that can be included or excluded\n    /// if set to `false`, attribute-values are blacklisted/rejected\n    /// if set to `true`, attribute-values are whitelisted/accepted\n    //slither-disable-next-line constable-states\n    mapping(string => bool) private DEPRECATED_regions;\n    //slither-disable-next-line constable-states\n    mapping(string => bool) private DEPRECATED_standards;\n    //slither-disable-next-line constable-states\n    mapping(string => bool) private DEPRECATED_methodologies;\n\n    /// @dev mapping to whitelist external non-TCO2 contracts by address\n    //slither-disable-next-line constable-states\n    mapping(address => bool) private DEPRECATED_externalWhiteList;\n\n    /// @dev mapping to include certain TCO2 contracts by address,\n    /// overriding attribute matching checks\n    //slither-disable-next-line constable-states\n    mapping(address => bool) private DEPRECATED_internalWhiteList;\n\n    /// @dev mapping to exclude certain TCO2 contracts by address,\n    /// even if the attribute matching would pass\n    //slither-disable-next-line constable-states\n    mapping(address => bool) private DEPRECATED_internalBlackList;\n\n    /// @dev fees redeem receiver address\n    //slither-disable-next-line uninitialized-state,constable-states\n    address internal _feeRedeemReceiver;\n\n    //slither-disable-next-line uninitialized-state,constable-states\n    uint256 internal _feeRedeemPercentageInBase;\n\n    /// @dev fees redeem burn address\n    address internal _feeRedeemBurnAddress;\n\n    /// @dev fees redeem burn percentage with 2 fixed decimals precision\n    uint256 internal _feeRedeemBurnPercentageInBase;\n\n    /// @dev repacked smaller variables here so new bools can be added below\n    //slither-disable-next-line constable-states\n    uint64 private DEPRECATED_minimumVintageStartTime;\n    //slither-disable-next-line constable-states\n    bool private DEPRECATED_seedMode;\n    //slither-disable-next-line constable-states\n    bool private DEPRECATED_regionsIsAcceptedMapping;\n    //slither-disable-next-line constable-states\n    bool private DEPRECATED_standardsIsAcceptedMapping;\n    //slither-disable-next-line constable-states\n    bool private DEPRECATED_methodologiesIsAcceptedMapping;\n}\n\nabstract contract PoolStorageV1_1 {\n    /// @notice End users exempted from redeem fees\n    mapping(address => bool) public redeemFeeExemptedAddresses;\n}\n\nabstract contract PoolStorageV1_2 {\n    /// @notice TCO2s exempted from redeem fees\n    mapping(address => bool) public redeemFeeExemptedTCO2s;\n}\n\nabstract contract PoolStorageV1_3 {\n    /// @notice bridge router who has access to the bridgeMint & bridgeBurn functions which\n    /// mint/burn pool tokens for cross chain messenges\n    //slither-disable-next-line constable-states\n    address public router;\n}\n\nabstract contract PoolStorageV1_4 {\n    /// @notice fee percentage in basis points charged for selective\n    /// redemptions that also retire the credits in the same transaction\n    //slither-disable-next-line uninitialized-state,constable-states\n    uint256 internal _feeRedeemRetirePercentageInBase;\n    address public filter;\n}\n\nabstract contract PoolStorageV1_5 {\n    /// @notice module to calculate fees for the pool\n    //slither-disable-next-line uninitialized-state,constable-states\n    IFeeCalculator public feeCalculator;\n    /// @notice Total supply of underlying collateral in the pool.  Supply\n    /// amounts are kept in the underlying's native precision regardless\n    /// of whether underlying is an ERC-20 or ERC-1155 token.\n    uint256 public totalUnderlyingSupply;\n    /// @notice Project token id to total supply of the project\n    /// in the pool. Supply amounts are kept in the underlying's native\n    /// precision regardless of whether underlying is an ERC-20 or ERC-1155\n    /// token.\n    mapping(uint256 => uint256) public totalProjectSupply;\n}\n\nabstract contract PoolStorageV1_6 {\n    /// @notice Mapping to track scores for ERC-1155 tokens\n    mapping(address => mapping(uint256 => uint256)) internal _scores;\n\n    mapping(address => mapping(uint256 => bool)) internal _vintageDeposited;\n    /// @notice Underlying decimals for ERC-1155 tokens. 0 decimals means\n    /// that the smallest denomination the ERC-1155 token can represent is\n    /// a tonne, 3 decimals means a kilogram, etc.\n    //slither-disable-next-line constable-states\n    uint8 internal _underlyingDecimals;\n}\n\nabstract contract PoolStorageV1_7 {\n    uint256 public minimumTCLSeedingThreshold;\n}\n\nabstract contract PoolStorage is\n    PoolStorageV1,\n    PoolStorageV1_1,\n    PoolStorageV1_2,\n    PoolStorageV1_3,\n    PoolStorageV1_4,\n    PoolStorageV1_5,\n    PoolStorageV1_6,\n    PoolStorageV1_7\n{}\n"
    },
    "contracts/pools/PoolWithAdjustingERC1155.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {Errors} from '../libraries/Errors.sol';\nimport {PoolWithFeeCalculatorERC1155} from './PoolWithFeeCalculatorERC1155.sol';\n\n/// @notice Apply adjustments to the minting and burning of pool tokens.\n/// Any pool for ERC-1155 tokens that inherits from this contract will be\n/// able to control the amounts being minted and burned based on the scores\n/// set for the ERC-1155 tokens.\nabstract contract PoolWithAdjustingERC1155 is PoolWithFeeCalculatorERC1155 {\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event ScoreUpdated(address erc1155, uint256 tokenId, uint256 score);\n\n    // ------------------------\n    // Admin functions\n    // ------------------------\n\n    /// @notice Set scores for ERC-1155 vintage tokens. Scores range from 0 to\n    /// 100 and determine the percentage of pool tokens minted or burnt during\n    /// deposits or redemptions. A score of 0 disables depositing and redeeming\n    /// for the vintage token.\n    /// @dev Only executable by the pool owner\n    /// @param erc1155s Array of ERC-1155 contracts\n    /// @param tokenIds Array of ERC-1155 token IDs\n    /// @param newScores Array of scores to set\n    function setScores(\n        address[] calldata erc1155s,\n        uint256[] calldata tokenIds,\n        uint256[] calldata newScores\n    ) external {\n        onlyPoolOwner();\n\n        uint256 erc1155sLength = erc1155s.length;\n        _checkLength(erc1155sLength, tokenIds.length);\n        _checkLength(erc1155sLength, newScores.length);\n\n        for (uint256 i = 0; i < erc1155sLength; ++i) {\n            address erc1155 = erc1155s[i];\n            uint256 tokenId = tokenIds[i];\n            uint256 score = newScores[i];\n\n            // Currently the smart contract does not provide logic to handle\n            // score updates for already deposited tokens. This is problematic\n            // because if the score of a deposited token is decreased, then it's\n            // possible for redemptions to fail because there will not be enough\n            // pool tokens held by the pool to burn. Until we implement this\n            // missing logic, we disable score updates for already deposited\n            // tokens altogether.\n            require(\n                _vintageDeposited[erc1155][tokenId] == false,\n                'vintage already deposited'\n            );\n\n            require(erc1155 != address(0), Errors.CP_EMPTY_ADDRESS);\n            require(score <= 100, Errors.INVALID_ERC1155_SCORE);\n\n            _scores[erc1155][tokenId] = score;\n\n            emit ScoreUpdated(erc1155, tokenId, score);\n        }\n    }\n\n    // ----------------------------\n    //   Permissionless functions\n    // ----------------------------\n\n    /// @notice Get the score for an ERC-1155 vintage token. Scores range from\n    /// 0 to 100 and determine the percentage of pool tokens minted or burnt\n    /// during deposits or redemptions. A score of 0 means that the vintage\n    /// token cannot be deposited or redeemed.\n    /// @param erc1155 Address of the ERC-1155 contract\n    /// @param tokenId ID of the ERC-1155 token\n    /// @return score The score of the ERC-1155 token\n    function scores(address erc1155, uint256 tokenId)\n        external\n        view\n        returns (uint256 score)\n    {\n        return _scores[erc1155][tokenId];\n    }\n\n    /// @notice Calculate the adjusted amount of pool tokens to mint\n    /// for a deposit of the provided amount of the ERC-1155 token.\n    /// @param erc1155 Address of the ERC-1155 contract\n    /// @param tokenId ID of the ERC-1155 token\n    /// @param amount Amount of ERC-1155 tokens to deposit\n    /// @return adjustedAmount The amount of pool tokens minted to the user\n    function calculateDepositAdjustedAmount(\n        address erc1155,\n        uint256 tokenId,\n        uint256 amount\n    ) external view returns (uint256 adjustedAmount) {\n        onlyUnpaused();\n\n        adjustedAmount = _calculateDepositAdjustedAmount(\n            _buildPoolVintageToken(erc1155, tokenId),\n            _poolTokenAmount(amount)\n        );\n    }\n\n    /// @notice Calculate the amounts of pool tokens needed in order to\n    /// redeem the provided amount of the ERC-1155 token.\n    /// @param erc1155 Address of the ERC-1155 contract\n    /// @param tokenId ID of the ERC-1155 token\n    /// @param amount Amount of ERC-1155 token to redeem\n    /// @return adjustedAmount The amount of pool tokens to be burnt\n    /// by the caller\n    function calculateRedeemOutAdjustedAmount(\n        address erc1155,\n        uint256 tokenId,\n        uint256 amount\n    ) external view returns (uint256 adjustedAmount) {\n        onlyUnpaused();\n\n        adjustedAmount = _calculateRedeemOutAdjustedAmount(\n            _buildPoolVintageToken(erc1155, tokenId),\n            _poolTokenAmount(amount)\n        );\n    }\n\n    /// @notice Mint pool tokens based on the amount and score of the\n    /// ERC-1155 token.\n    /// @dev caller gets minted an adjusted amount, based on the\n    /// score of the token, and the rest gets minted to the pool.\n    /// @param account Address of the user to mint tokens to\n    /// @param amount Amount of pool tokens to mint to the user. Adjustments\n    /// will be made by this function based on the score of the vintage.\n    /// @param feeDistributionTotal Fee in pool tokens paid by the user\n    /// @param vintage ERC-1155 token vintage to be deposited\n    /// @return callerMintedAmount The amount of pool tokens minted\n    /// to the caller\n    function _mint(\n        address account,\n        uint256 amount,\n        uint256 feeDistributionTotal,\n        PoolVintageToken memory vintage\n    ) internal override returns (uint256 callerMintedAmount) {\n        _vintageDeposited[vintage.tokenAddress][\n            vintage.erc1155VintageTokenId\n        ] = true;\n\n        // The adjusted amount should be calculated based on the total minted pool tokens\n        uint256 totalAmount = amount + feeDistributionTotal;\n        uint256 adjustedAmount = _calculateDepositAdjustedAmount(\n            vintage,\n            totalAmount\n        );\n        callerMintedAmount = adjustedAmount - feeDistributionTotal;\n\n        // mint adjusted amount to the user\n        _mint(account, callerMintedAmount);\n\n        // mint the remaining amount to the pool if an adjustment was made\n        if (adjustedAmount < totalAmount)\n            _mint(address(this), totalAmount - adjustedAmount);\n    }\n\n    /// @notice Burn pool tokens based on the amount and score of the\n    /// ERC-1155 token.\n    /// @dev caller burns an adjusted amount, based on the\n    /// score of the token, and the rest gets burnt from the pool\n    /// @param account Address of the user to burn tokens from\n    /// @param amountE18 Amount of pool tokens to burn from the caller.\n    /// Adjustments will be made by this function based on the score\n    /// of the vintage.\n    /// @param vintage ERC-1155 token vintage to be redeemed\n    /// @return burntAmount The amount of pool tokens burnt by the caller\n    function _burn(\n        address account,\n        uint256 amountE18,\n        PoolVintageToken memory vintage\n    ) internal override returns (uint256 burntAmount) {\n        burntAmount = _calculateRedeemOutAdjustedAmount(vintage, amountE18);\n\n        // burn the amount from user\n        _burn(account, burntAmount);\n\n        // burn the remaining amount using excess tokens from the pool\n        if (amountE18 > burntAmount)\n            _burn(address(this), amountE18 - burntAmount);\n    }\n\n    /// @notice Calculate the adjusted amount of pool tokens to mint\n    /// for a deposit of the provided amount of the ERC-1155 token.\n    /// @param vintage ERC-1155 token vintage to be deposited\n    /// @param amountE18 Amount of ERC-1155 tokens to deposit, adjusted to\n    /// 18 decimals\n    /// @return The amount of pool tokens to be minted to the user\n    function _calculateDepositAdjustedAmount(\n        PoolVintageToken memory vintage,\n        uint256 amountE18\n    ) internal view returns (uint256) {\n        uint256 score = _scores[vintage.tokenAddress][\n            vintage.erc1155VintageTokenId\n        ];\n        require(score != 0, Errors.EMPTY_ERC155_SCORE);\n\n        return (amountE18 * score) / 100;\n    }\n\n    /// @notice Calculate the amount of pool tokens to burn\n    /// for a redemption of the provided amount of the ERC-1155 token.\n    /// @param vintage ERC-1155 token vintage to be redeemed\n    /// @param amountE18 Amount of ERC-1155 token to redeem, adjusted to 18 decimals\n    /// @return The amount of pool tokens to be burnt\n    function _calculateRedeemOutAdjustedAmount(\n        PoolVintageToken memory vintage,\n        uint256 amountE18\n    ) internal view returns (uint256) {\n        uint256 score = _scores[vintage.tokenAddress][\n            vintage.erc1155VintageTokenId\n        ];\n        require(score != 0, Errors.EMPTY_ERC155_SCORE);\n\n        return (amountE18 * score) / 100;\n    }\n}\n"
    },
    "contracts/pools/PoolWithFeeCalculatorERC1155.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {FeeDistribution, IFeeCalculator} from '@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol';\n\nimport {PoolERC1155able} from './PoolERC1155able.sol';\nimport {Errors} from '../libraries/Errors.sol';\n\n/// @notice Pool with fee calculator template contract\n/// Any pool that inherits from this contract will be able to\n// charge fees both on deposits and redemptions with the use\n/// of a fee calculator contract.\nabstract contract PoolWithFeeCalculatorERC1155 is PoolERC1155able {\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event FeeCalculatorUpdated(address feeCalculator);\n\n    // ------------------------\n    // Admin functions\n    // ------------------------\n\n    /// @notice Update the address of the fee module contract\n    /// @param _feeCalculator Fee module contract address\n    function setFeeCalculator(address _feeCalculator) external {\n        onlyPoolOwner();\n        feeCalculator = IFeeCalculator(_feeCalculator);\n        emit FeeCalculatorUpdated(_feeCalculator);\n    }\n\n    // ----------------------------\n    //   Permissionless functions\n    // ----------------------------\n\n    /// @notice View function to calculate deposit fees pre-execution\n    /// @dev User specifies in front-end the address and amount they want\n    /// @param erc1155 ERC1155 contract address\n    /// @param tokenId id representing the vintage\n    /// @param amount Amount of ERC-1155 tokens to deposit (0 decimals)\n    /// @return feeDistributionTotal Total fee amount to be paid in pool tokens\n    function calculateDepositFees(\n        address erc1155,\n        uint256 tokenId,\n        uint256 amount\n    ) external view virtual override returns (uint256 feeDistributionTotal) {\n        onlyUnpaused();\n\n        // If the fee calculator is not configured or the amount doesn't bring us to the threshold, no fees are paid\n        if (\n            totalUnderlyingSupply + amount < minimumTCLSeedingThreshold ||\n            address(feeCalculator) == address(0)\n        ) {\n            return 0;\n        }\n\n        uint256 chargeableAmount = totalUnderlyingSupply >=\n            minimumTCLSeedingThreshold\n            ? amount\n            : amount + totalUnderlyingSupply - minimumTCLSeedingThreshold;\n        FeeDistribution memory feeDistribution = feeCalculator\n            .calculateDepositFees(\n                address(this),\n                erc1155,\n                tokenId,\n                _poolTokenAmount(chargeableAmount)\n            );\n        feeDistributionTotal = getFeeDistributionTotal(feeDistribution);\n    }\n\n    /// @notice View function to calculate redemption fees pre-execution,\n    /// according to the amounts of pool tokens to be spent.\n    /// NOTE: This function is not supported yet\n    function calculateRedemptionInFees(\n        address[] memory,\n        uint256[] memory,\n        uint256[] memory,\n        bool\n    ) external view virtual override returns (uint256) {\n        revert(Errors.CP_NOT_SUPPORTED);\n    }\n\n    function _calculateRedemptionInFees(\n        PoolVintageToken[] memory, /* ERC1155 vintages */\n        uint256[] memory, /* amounts */\n        bool /* toRetire */\n    )\n        internal\n        pure\n        override\n        returns (\n            uint256[] memory, /* feeAmounts */\n            FeeDistribution memory /* feeDistribution */\n        )\n    {\n        revert(Errors.CP_NOT_SUPPORTED);\n    }\n\n    /// @notice View function to calculate redemption fees pre-execution,\n    /// according to the amounts of underlying tokens to be redeemed.\n    /// @param erc1155s Array of ERC1155 contract addresses\n    /// @param tokenIds ids of the vintages of each project\n    /// @param amounts Array of ERC-1155 token amounts to redeem (0 decimals)\n    /// The indexes of this array are matching 1:1 with the erc1155s array.\n    /// @param toRetire No-op\n    /// @return feeDistributionTotal Total fee amount to be paid in pool tokens\n    function calculateRedemptionOutFees(\n        address[] memory erc1155s,\n        uint256[] memory tokenIds,\n        uint256[] memory amounts,\n        bool toRetire\n    ) external view virtual override returns (uint256 feeDistributionTotal) {\n        PoolVintageToken[] memory vintages = _buildPoolVintageTokens(\n            erc1155s,\n            tokenIds\n        );\n\n        (feeDistributionTotal, ) = _calculateRedemptionOutFees(\n            vintages,\n            _poolTokenAmounts(amounts),\n            toRetire\n        );\n    }\n\n    function _calculateRedemptionOutFees(\n        PoolVintageToken[] memory vintages,\n        uint256[] memory amountsE18,\n        bool toRetire\n    )\n        internal\n        view\n        override\n        returns (\n            uint256 feeDistributionTotal,\n            FeeDistribution memory feeDistribution\n        )\n    {\n        onlyUnpaused();\n        // Calculating fees for retiring is not supported yet\n        require(!toRetire, Errors.CP_NOT_SUPPORTED);\n        // Calculating fees for multi-ERC1155 redemptions is not supported yet\n        uint256 vintageLength = vintages.length;\n        require(vintageLength == 1, Errors.CP_NOT_SUPPORTED);\n        _checkLength(vintageLength, amountsE18.length);\n\n        // If the fee calculator is not configured or the caller is exempted, no fees are paid\n        if (\n            address(feeCalculator) == address(0) ||\n            redeemFeeExemptedAddresses[msg.sender]\n        ) {\n            return (0, FeeDistribution(new address[](0), new uint256[](0)));\n        }\n\n        address[] memory erc1155s = new address[](vintageLength);\n        uint256[] memory tokenIds = new uint256[](vintageLength);\n        for (uint256 i = 0; i < vintageLength; i++) {\n            erc1155s[i] = vintages[i].tokenAddress;\n            tokenIds[i] = vintages[i].erc1155VintageTokenId;\n        }\n\n        feeDistribution = feeCalculator.calculateRedemptionFees(\n            address(this),\n            erc1155s,\n            tokenIds,\n            amountsE18\n        );\n        feeDistributionTotal = getFeeDistributionTotal(feeDistribution);\n    }\n\n    /// @notice Deposit function for pool that accepts ERC1155 vintages and mints pool token 1:1\n    /// @param erc1155 ERC1155 contract address\n    /// @param tokenId id representing the vintage\n    /// @param amount Amount of ERC-1155 tokens to be deposited (0 decimals)\n    /// @param maxFee Maximum pool token fee to be paid for the deposit. This value cannot be zero.\n    /// Use `calculateDepositFees(erc1155,tokenId,amount)` to determine the fee that will be charged\n    /// given the state of the pool during this call. Add a buffer on top of the returned\n    /// fee amount up to the maximum fee you are willing to pay. (18 decimals)\n    /// @dev Eligibility of the ERC1155 token to be deposited is checked via `checkEligible`\n    /// @return mintedPoolTokenAmount Amount of pool tokens minted to the caller\n    function deposit(\n        address erc1155,\n        uint256 tokenId,\n        uint256 amount,\n        uint256 maxFee\n    ) external returns (uint256 mintedPoolTokenAmount) {\n        if (address(feeCalculator) != address(0)) {\n            require(maxFee != 0, Errors.CP_INVALID_MAX_FEE);\n        }\n        PoolVintageToken memory pvToken = _buildPoolVintageToken(\n            erc1155,\n            tokenId\n        );\n        return _deposit(pvToken, _poolTokenAmount(amount), maxFee);\n    }\n\n    /// @notice Redeem ERC1155 vintages for pool tokens 1:1 minus fees\n    /// The amounts provided are the exact amounts of ERC1155 vintages to be redeemed.\n    /// @param erc1155s ERC1155 contract address\n    /// @param tokenIds id representing the vintage\n    /// @param amounts Array of ERC-1155 token amounts to redeem (0 decimals)\n    /// The indexes of this array are matching 1:1 with the erc1155s array.\n    /// @param maxFee Maximum pool token fee to be paid for the redemption. This value cannot be zero.\n    /// Use `calculateRedemptionOutFees(erc1155,tokenIds,amounts,false)` to determine the fee that will\n    /// be charged given the state of the pool during this call. Add a buffer on top of the\n    /// returned fee amount up to the maximum fee you are willing to pay. (18 decimals)\n    /// @return poolAmountSpent The amount of pool tokens spent by the caller\n    function redeemOutMany(\n        address[] memory erc1155s,\n        uint256[] memory tokenIds,\n        uint256[] memory amounts,\n        uint256 maxFee\n    ) external virtual returns (uint256 poolAmountSpent) {\n        if (address(feeCalculator) != address(0)) {\n            require(maxFee != 0, Errors.CP_INVALID_MAX_FEE);\n        }\n        require(erc1155s.length == 1, Errors.CP_NOT_SUPPORTED);\n        PoolVintageToken[] memory vintages = _buildPoolVintageTokens(\n            erc1155s,\n            tokenIds\n        );\n\n        (, poolAmountSpent) = _redeemOutMany(\n            vintages,\n            _poolTokenAmounts(amounts),\n            maxFee,\n            false\n        );\n    }\n}\n"
    },
    "contracts/pools/PoolWithFeeCalculatorERC20.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {FeeDistribution, IFeeCalculator} from '@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol';\n\nimport {PoolERC20able} from './PoolERC20able.sol';\nimport {Errors} from '../libraries/Errors.sol';\n\n/// @notice Pool with fee calculator template contract\n/// Any pool that inherits from this contract will be able to\n// charge fees both on deposits and redemptions with the use\n/// of a fee calculator contract.\nabstract contract PoolWithFeeCalculatorERC20 is PoolERC20able {\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event FeeCalculatorUpdated(address feeCalculator);\n\n    // ------------------------\n    // Admin functions\n    // ------------------------\n\n    /// @notice Update the address of the fee module contract\n    /// @param _feeCalculator Fee module contract address\n    function setFeeCalculator(address _feeCalculator) external {\n        onlyPoolOwner();\n        feeCalculator = IFeeCalculator(_feeCalculator);\n        emit FeeCalculatorUpdated(_feeCalculator);\n    }\n\n    // ----------------------------\n    //   Permissionless functions\n    // ----------------------------\n\n    /// @notice View function to calculate deposit fees pre-execution\n    /// @dev User specifies in front-end the address and amount they want\n    /// @param tco2 TCO2 contract address\n    /// @param amount Amount to redeem\n    /// @return feeDistributionTotal Total fee amount to be paid\n    function calculateDepositFees(address tco2, uint256 amount)\n        external\n        view\n        override\n        returns (uint256 feeDistributionTotal)\n    {\n        onlyUnpaused();\n\n        // If the fee calculator is not configured or the amount doesn't bring us to the threshold, no fees are paid\n        if (\n            totalUnderlyingSupply + amount < minimumTCLSeedingThreshold ||\n            address(feeCalculator) == address(0)\n        ) {\n            return 0;\n        }\n\n        uint256 chargeableAmount = totalUnderlyingSupply >=\n            minimumTCLSeedingThreshold\n            ? amount\n            : amount + totalUnderlyingSupply - minimumTCLSeedingThreshold;\n        FeeDistribution memory feeDistribution = feeCalculator\n            .calculateDepositFees(address(this), tco2, chargeableAmount);\n        feeDistributionTotal = getFeeDistributionTotal(feeDistribution);\n    }\n\n    /// @notice View function to calculate fees pre-execution,\n    /// according to the amounts of pool tokens to be spent.\n    /// NOTE: This function is not supported yet\n    function calculateRedemptionInFees(\n        address[] memory, /* tco2s */\n        uint256[] memory, /* amounts */\n        bool /* toRetire */\n    )\n        external\n        pure\n        override\n        returns (\n            uint256 /* feeDistribution */\n        )\n    {\n        revert(Errors.CP_NOT_SUPPORTED);\n    }\n\n    function _calculateRedemptionInFees(\n        PoolVintageToken[] memory, /* tco2s */\n        uint256[] memory, /* amounts */\n        bool /* toRetire */\n    )\n        internal\n        pure\n        override\n        returns (\n            uint256[] memory, /* feeAmounts */\n            FeeDistribution memory /* feeDistribution */\n        )\n    {\n        revert(Errors.CP_NOT_SUPPORTED);\n    }\n\n    /// @notice View function to calculate fees pre-execution,\n    /// according to the amounts of TCO2 to be redeemed.\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of TCO2 amounts to redeem\n    /// The indexes of this array are matching 1:1 with the tco2s array.\n    /// @param toRetire Whether the TCO2s will be retired atomically\n    /// with the redemption. It may be that lower fees will be charged\n    /// in this case. Currently not supported.\n    /// @return feeDistributionTotal Total fee amount to be paid\n    function calculateRedemptionOutFees(\n        address[] memory tco2s,\n        uint256[] memory amounts,\n        bool toRetire\n    ) external view override returns (uint256 feeDistributionTotal) {\n        PoolVintageToken[] memory vintages = _buildPoolVintageTokens(tco2s);\n        (feeDistributionTotal, ) = _calculateRedemptionOutFees(\n            vintages,\n            amounts,\n            toRetire\n        );\n    }\n\n    function _calculateRedemptionOutFees(\n        PoolVintageToken[] memory vintages,\n        uint256[] memory amounts,\n        bool toRetire\n    )\n        internal\n        view\n        override\n        returns (\n            uint256 feeDistributionTotal,\n            FeeDistribution memory feeDistribution\n        )\n    {\n        onlyUnpaused();\n        // Calculating fees for retiring is not supported yet\n        require(!toRetire, Errors.CP_NOT_SUPPORTED);\n        // Calculating fees for multi-TCO2 redemptions is not supported yet\n        uint256 vintageLength = vintages.length;\n        require(vintageLength == 1, Errors.CP_NOT_SUPPORTED);\n        _checkLength(vintageLength, amounts.length);\n\n        // If the fee calculator is not configured or the caller is exempted, no fees are paid\n        if (\n            address(feeCalculator) == address(0) ||\n            redeemFeeExemptedAddresses[msg.sender]\n        ) {\n            return (0, FeeDistribution(new address[](0), new uint256[](0)));\n        }\n\n        address[] memory tco2s = new address[](vintageLength);\n        for (uint256 i = 0; i < vintageLength; i++) {\n            tco2s[i] = vintages[i].tokenAddress;\n        }\n\n        feeDistribution = feeCalculator.calculateRedemptionFees(\n            address(this),\n            tco2s,\n            amounts\n        );\n        feeDistributionTotal = getFeeDistributionTotal(feeDistribution);\n    }\n\n    /// @notice Deposit function for pool that accepts TCO2s and mints pool token 1:1\n    /// @param tco2 TCO2 to be deposited, requires approve\n    /// @param amount Amount of TCO2 to be deposited\n    /// @param maxFee Maximum fee to be paid for the deposit. This value cannot be zero.\n    /// Use `calculateDepositFees(tco2,amount)` to determine the fee that will be charged\n    /// given the state of the pool during this call. Add a buffer on top of the returned\n    /// fee amount up to the maximum fee you are willing to pay.\n    /// @dev Eligibility of the ERC20 token to be deposited is checked via `checkEligible`\n    /// @return mintedPoolTokenAmount Amount of pool tokens minted to the caller\n    function deposit(\n        address tco2,\n        uint256 amount,\n        uint256 maxFee\n    ) external returns (uint256 mintedPoolTokenAmount) {\n        if (address(feeCalculator) != address(0)) {\n            require(maxFee != 0, Errors.CP_INVALID_MAX_FEE);\n        }\n        return super._deposit(_buildPoolVintageToken(tco2), amount, maxFee);\n    }\n\n    /// @notice Redeem TCO2s for pool tokens 1:1 minus fees\n    /// The amounts provided are the exact amounts of TCO2s to be redeemed.\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of TCO2 amounts to redeem\n    /// The indexes of this array are matching 1:1 with the tco2s array.\n    /// @param maxFee Maximum fee to be paid for the redemption. This value cannot be zero.\n    /// Use `calculateRedemptionOutFees(tco2s,amounts,false)` to determine the fee that will\n    /// be charged given the state of the pool during this call. Add a buffer on top of the\n    /// returned fee amount up to the maximum fee you are willing to pay.\n    /// @return poolAmountSpent The amount of pool tokens spent by the caller\n    function redeemOutMany(\n        address[] memory tco2s,\n        uint256[] memory amounts,\n        uint256 maxFee\n    ) external virtual returns (uint256 poolAmountSpent) {\n        if (address(feeCalculator) != address(0)) {\n            require(maxFee != 0, Errors.CP_INVALID_MAX_FEE);\n        }\n        require(tco2s.length == 1, Errors.CP_NOT_SUPPORTED);\n        PoolVintageToken[] memory vintages = _buildPoolVintageTokens(tco2s);\n        (, poolAmountSpent) = _redeemOutMany(vintages, amounts, maxFee, false);\n    }\n}\n"
    },
    "contracts/pools/PoolWithFixedFees.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {FeeDistribution} from '@toucanprotocol/dynamic-fee-pools/src/interfaces/IFeeCalculator.sol';\nimport {PoolERC20able} from './PoolERC20able.sol';\nimport {Errors} from '../libraries/Errors.sol';\n\n/// @notice Pool with fixed fees template contract\n/// Any pool that inherits from this contract will be able to\n// charge fixed fees on redemptions.\nabstract contract PoolWithFixedFees is PoolERC20able {\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event RedeemFeeUpdated(uint256 feeBp);\n    event RedeemRetireFeeUpdated(uint256 feeBp);\n    event RedeemFeeReceiverUpdated(address receiver);\n    event TCO2ScoringUpdated(address[] tco2s);\n\n    // ------------------------\n    // Admin functions\n    // ------------------------\n\n    /// @notice Update the fee redeem percentage\n    /// @param feeBp_ percentage of fee in basis points\n    function setFeeRedeemPercentage(uint256 feeBp_) external {\n        onlyWithRole(MANAGER_ROLE);\n        require(feeBp_ < feeRedeemDivider, Errors.CP_INVALID_FEE);\n        _feeRedeemPercentageInBase = feeBp_;\n        emit RedeemFeeUpdated(feeBp_);\n    }\n\n    /// @notice Update the fee percentage charged in redeemManyAndRetire\n    /// @param feeBp_ percentage of fee in basis points\n    function setFeeRedeemRetirePercentage(uint256 feeBp_) external {\n        onlyWithRole(MANAGER_ROLE);\n        require(feeBp_ < feeRedeemDivider, Errors.CP_INVALID_FEE);\n        _feeRedeemRetirePercentageInBase = feeBp_;\n        emit RedeemRetireFeeUpdated(feeBp_);\n    }\n\n    /// @notice Update the fee redeem receiver\n    /// @param feeRedeemReceiver_ address to transfer the fees\n    function setFeeRedeemReceiver(address feeRedeemReceiver_) external {\n        onlyPoolOwner();\n        require(feeRedeemReceiver_ != address(0), Errors.CP_EMPTY_ADDRESS);\n        _feeRedeemReceiver = feeRedeemReceiver_;\n        emit RedeemFeeReceiverUpdated(feeRedeemReceiver_);\n    }\n\n    /// @notice Allows MANAGERs or the owner to pass an array to hold TCO2 contract addesses that are\n    /// ordered by some form of scoring mechanism\n    /// @param tco2s array of ordered TCO2 addresses\n    function setTCO2Scoring(address[] calldata tco2s) external {\n        onlyWithRole(MANAGER_ROLE);\n        require(tco2s.length != 0, Errors.CP_EMPTY_ARRAY);\n        scoredTCO2s = tco2s;\n        emit TCO2ScoringUpdated(tco2s);\n    }\n\n    // ----------------------------\n    //   Permissionless functions\n    // ----------------------------\n\n    /// @notice Return the fee recipient of redemption fees\n    function feeRedeemReceiver() external view returns (address) {\n        return _feeRedeemReceiver;\n    }\n\n    /// @notice Return the fee to be charged for selective redemptions\n    /// in basis points\n    function feeRedeemPercentageInBase() external view returns (uint256) {\n        return _feeRedeemPercentageInBase;\n    }\n\n    /// @notice Return the recipient of the fee to be burnt\n    function feeRedeemBurnAddress() external view returns (address) {\n        return _feeRedeemBurnAddress;\n    }\n\n    /// @notice Return the fee to be burnt for selective redemptions\n    /// This is calculated as a percentage of the fee charged, eg.,\n    /// if the fee is 10% and the burn percentage is 40%, then the\n    /// burn fee will be 4% of the total redeemed amount.\n    function feeRedeemBurnPercentageInBase() external view returns (uint256) {\n        return _feeRedeemBurnPercentageInBase;\n    }\n\n    function feeRedeemRetirePercentageInBase() external view returns (uint256) {\n        return _feeRedeemRetirePercentageInBase;\n    }\n\n    /// @notice View function to calculate deposit fees pre-execution\n    /// Note that currently no deposit fees are charged.\n    /// @dev User specifies in front-end the address and amount they want\n    /// First param is the TCO2 contract address to be deposited\n    /// Second param is the amount of TCO2 to be deposited\n    /// @return feeDistributionTotal Total fee amount to be paid\n    function calculateDepositFees(address, uint256)\n        external\n        view\n        override\n        returns (uint256 feeDistributionTotal)\n    {\n        onlyUnpaused();\n\n        return 0;\n    }\n\n    /// @notice View function to calculate fees pre-execution,\n    /// according to the amounts of pool tokens to be spent.\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of pool token amounts to spend in order to redeem TCO2s.\n    /// @param toRetire Whether the TCO2s will be retired atomically\n    /// with the redemption. It may be that lower fees will be charged\n    /// in this case.\n    /// @return feeDistributionTotal Total fee amount to be paid\n    function calculateRedemptionInFees(\n        address[] memory tco2s,\n        uint256[] memory amounts,\n        bool toRetire\n    ) public view override returns (uint256 feeDistributionTotal) {\n        PoolVintageToken[] memory vintages = _buildPoolVintageTokens(tco2s);\n        (uint256[] memory feeAmounts, ) = _calculateRedemptionInFees(\n            vintages,\n            amounts,\n            toRetire\n        );\n        for (uint256 i = 0; i < feeAmounts.length; ++i) {\n            feeDistributionTotal += feeAmounts[i];\n        }\n    }\n\n    function _calculateRedemptionInFees(\n        PoolVintageToken[] memory vintages,\n        uint256[] memory amounts,\n        bool toRetire\n    )\n        internal\n        view\n        override\n        returns (\n            uint256[] memory feeAmounts,\n            FeeDistribution memory feeDistribution\n        )\n    {\n        onlyUnpaused();\n\n        uint256 vintageLength = vintages.length;\n        _checkLength(vintageLength, amounts.length);\n\n        // Exempted addresses pay no fees\n        if (redeemFeeExemptedAddresses[msg.sender]) {\n            return (\n                new uint256[](vintageLength),\n                FeeDistribution(new address[](0), new uint256[](0))\n            );\n        }\n\n        uint256 feeDistributionTotal = 0;\n        feeAmounts = new uint256[](vintageLength);\n        for (uint256 i = 0; i < vintageLength; ++i) {\n            uint256 feeAmount = getFixedRedemptionFee(amounts[i], toRetire);\n            feeDistributionTotal += feeAmount;\n            feeAmounts[i] = feeAmount;\n        }\n        feeDistribution = getFixedRedemptionFeeRecipients(feeDistributionTotal);\n    }\n\n    /// @notice View function to calculate fees pre-execution,\n    /// according to the amounts of TCO2 to be redeemed.\n    /// @dev User specifies in front-end the addresses and amounts they want\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of amounts of TCO2 to be redeemed\n    /// @param toRetire Whether the TCO2s will be retired atomically\n    /// with the redemption. It may be that lower fees will be charged\n    /// in this case.\n    /// @return feeDistributionTotal Total fee amount to be paid\n    function calculateRedemptionOutFees(\n        address[] memory tco2s,\n        uint256[] memory amounts,\n        bool toRetire\n    ) external view override returns (uint256 feeDistributionTotal) {\n        PoolVintageToken[] memory vintages = _buildPoolVintageTokens(tco2s);\n        (feeDistributionTotal, ) = _calculateRedemptionOutFees(\n            vintages,\n            amounts,\n            toRetire\n        );\n    }\n\n    function _calculateRedemptionOutFees(\n        PoolVintageToken[] memory vintages,\n        uint256[] memory amounts,\n        bool toRetire\n    )\n        internal\n        view\n        override\n        returns (\n            uint256 feeDistributionTotal,\n            FeeDistribution memory feeDistribution\n        )\n    {\n        onlyUnpaused();\n\n        uint256 vintageLength = vintages.length;\n        _checkLength(vintageLength, amounts.length);\n\n        // Exempted addresses pay no fees\n        if (redeemFeeExemptedAddresses[msg.sender]) {\n            return (0, FeeDistribution(new address[](0), new uint256[](0)));\n        }\n\n        for (uint256 i = 0; i < vintageLength; ++i) {\n            feeDistributionTotal += getFixedRedemptionFee(amounts[i], toRetire);\n        }\n        feeDistribution = getFixedRedemptionFeeRecipients(feeDistributionTotal);\n    }\n\n    /// @notice Deposit function for pool that accepts TCO2s and mints pool token 1:1\n    /// @param tco2 TCO2 contract address to be deposited, requires approve\n    /// @param amount Amount of TCO2 to be deposited\n    /// @dev Eligibility is checked via `checkEligible`, balances are tracked\n    /// for each TCO2 separately\n    /// @return mintedPoolTokenAmount Amount of pool tokens minted to the caller\n    function deposit(address tco2, uint256 amount)\n        external\n        returns (uint256 mintedPoolTokenAmount)\n    {\n        return _deposit(_buildPoolVintageToken(tco2), amount, 0);\n    }\n\n    /// @notice Redeem TCO2s for pool tokens 1:1 minus fees\n    /// The amounts provided are the exact amounts of pool tokens the caller\n    /// is willing to spend in order to redeem TCO2s.\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of pool token amounts to spend in order to redeem TCO2s.\n    /// The indexes of this array are matching 1:1 with the tco2s array.\n    /// @return redeemedAmounts The amounts of the TCO2s that were redeemed\n    function redeemInMany(address[] memory tco2s, uint256[] memory amounts)\n        external\n        virtual\n        returns (uint256[] memory redeemedAmounts)\n    {\n        PoolVintageToken[] memory vintages = _buildPoolVintageTokens(tco2s);\n        (, redeemedAmounts) = _redeemInMany(vintages, amounts, 0, false);\n    }\n\n    /// @notice Redeem TCO2s for pool tokens 1:1 minus fees\n    /// The amounts provided are the exact amounts of TCO2s to be redeemed.\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of TCO2 amounts to redeem\n    /// The indexes of this array are matching 1:1 with the tco2s array.\n    /// @return poolAmountSpent The amount of pool tokens spent by the caller\n    function redeemOutMany(address[] memory tco2s, uint256[] memory amounts)\n        external\n        virtual\n        returns (uint256 poolAmountSpent)\n    {\n        PoolVintageToken[] memory vintages = _buildPoolVintageTokens(tco2s);\n        (, poolAmountSpent) = _redeemOutMany(vintages, amounts, 0, false);\n    }\n\n    /// @notice Redeem and retire TCO2s for pool tokens 1:1 minus fees\n    /// The amounts provided are the exact amounts of pool tokens the caller\n    /// is willing to spend in order to retire TCO2s.\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of pool token amounts to spend in order to redeem\n    /// and retire TCO2s. The indexes of this array are matching 1:1 with the\n    /// tco2s array.\n    /// @return retirementIds The retirements ids that were produced\n    /// @return redeemedAmounts The amounts of the TCO2s that were redeemed\n    function redeemAndRetireMany(\n        address[] memory tco2s,\n        uint256[] memory amounts\n    )\n        external\n        virtual\n        returns (\n            uint256[] memory retirementIds,\n            uint256[] memory redeemedAmounts\n        )\n    {\n        PoolVintageToken[] memory vintages = _buildPoolVintageTokens(tco2s);\n        (retirementIds, redeemedAmounts) = _redeemInMany(\n            vintages,\n            amounts,\n            0,\n            true\n        );\n    }\n\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\n    /// TCO2s from an array of ranked TCO2 contracts\n    /// starting from contract at index 0 until amount is satisfied\n    /// @param amount Total amount to be redeemed\n    /// @dev Pool tokens in user's wallet get burned\n    /// @return tco2s amounts The addresses and amounts of the TCO2s that were\n    /// automatically redeemed\n    function redeemAuto(uint256 amount)\n        external\n        virtual\n        returns (address[] memory tco2s, uint256[] memory amounts)\n    {\n        return redeemAuto2(amount);\n    }\n\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\n    /// TCO2s from an array of ranked TCO2 contracts starting from contract at\n    /// index 0 until amount is satisfied.\n    /// @param amount Total amount to be redeemed\n    /// @return tco2s amounts The addresses and amounts of the TCO2s that were\n    /// automatically redeemed\n    function redeemAuto2(uint256 amount)\n        public\n        virtual\n        returns (address[] memory tco2s, uint256[] memory amounts)\n    {\n        onlyUnpaused();\n        require(amount != 0, Errors.CP_ZERO_AMOUNT);\n        uint256 i = 0;\n        // Non-zero count tracks TCO2s with a balance\n        uint256 nonZeroCount = 0;\n\n        uint256 scoredTCO2Len = scoredTCO2s.length;\n        while (amount > 0 && i < scoredTCO2Len) {\n            address tco2 = scoredTCO2s[i];\n            uint256 balance = tokenBalance(tco2);\n            uint256 amountToRedeem = 0;\n\n            // Only TCO2s with a balance should be included for a redemption.\n            if (balance != 0) {\n                amountToRedeem = amount > balance ? balance : amount;\n                amount -= amountToRedeem;\n                unchecked {\n                    ++nonZeroCount;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n\n            // Create return arrays statically since Solidity does not\n            // support dynamic arrays or mappings in-memory (EIP-1153).\n            // Do it here to avoid having to fill out the last indexes\n            // during the second iteration.\n            //slither-disable-next-line incorrect-equality\n            if (amount == 0) {\n                tco2s = new address[](nonZeroCount);\n                amounts = new uint256[](nonZeroCount);\n\n                tco2s[nonZeroCount - 1] = tco2;\n                amounts[nonZeroCount - 1] = amountToRedeem;\n                //slither-disable-next-line unused-return\n                _redeemSingle(_buildPoolVintageToken(tco2), amountToRedeem);\n            }\n        }\n\n        if (amount != 0) {\n            revert(Errors.CP_NON_ZERO_REMAINING);\n        }\n\n        // Execute the second iteration by avoiding to run the last index\n        // since we have already executed that in the first iteration.\n        nonZeroCount = 0;\n        for (uint256 j = 0; j < i - 1; ++j) {\n            address tco2 = scoredTCO2s[j];\n            // This second loop only gets called when the `amount` is larger\n            // than the first tco2 balance in the array. Here, in every iteration the\n            // tco2 balance is smaller than the remaining amount while the last bit of\n            // the `amount` which is smaller than the tco2 balance, got redeemed\n            // in the first loop.\n            uint256 balance = tokenBalance(tco2);\n\n            // Ignore empty balances so we don't generate redundant transactions.\n            //slither-disable-next-line incorrect-equality\n            if (balance == 0) continue;\n\n            tco2s[nonZeroCount] = tco2;\n            amounts[nonZeroCount] = balance;\n            //slither-disable-next-line unused-return\n            _redeemSingle(_buildPoolVintageToken(tco2), balance);\n            unchecked {\n                ++nonZeroCount;\n            }\n        }\n    }\n\n    function getScoredTCO2s() external view returns (address[] memory) {\n        return scoredTCO2s;\n    }\n\n    function getFixedRedemptionFee(uint256 amount, bool toRetire)\n        internal\n        view\n        returns (uint256)\n    {\n        // Use appropriate fee bp to charge\n        uint256 feeBp = 0;\n        if (toRetire) {\n            feeBp = _feeRedeemRetirePercentageInBase;\n        } else {\n            feeBp = _feeRedeemPercentageInBase;\n        }\n        // Calculate fee\n        return (amount * feeBp) / feeRedeemDivider;\n    }\n\n    function getFixedRedemptionFeeRecipients(uint256 totalFee)\n        internal\n        view\n        returns (FeeDistribution memory feeDistribution)\n    {\n        address[] memory recipients = new address[](1);\n        uint256[] memory shares = new uint256[](1);\n        recipients[0] = _feeRedeemReceiver;\n        shares[0] = totalFee;\n        return FeeDistribution(recipients, shares);\n    }\n}\n"
    },
    "contracts/pools/REDD.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {IEcoCarbonCredit} from './interfaces/IEcoCarbonCredit.sol';\nimport {PoolWithAdjustingERC1155} from './PoolWithAdjustingERC1155.sol';\n\n/// @notice REDD pool contract\ncontract REDD is PoolWithAdjustingERC1155 {\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.0.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 2;\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(address[] calldata accounts, bytes32[] calldata roles)\n        external\n        virtual\n        initializer\n    {\n        __Pool_init_unchained(accounts, roles);\n        __ERC20_init_unchained('REDD', 'REDD');\n    }\n\n    function _projectTokenId(address erc1155, uint256)\n        internal\n        view\n        override\n        returns (uint256)\n    {\n        return IEcoCarbonCredit(erc1155).projectId();\n    }\n}\n"
    },
    "contracts/pools/REDDFilter.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport './PoolFilter.sol';\n\ncontract REDDFilter is PoolFilter {\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    string public constant VERSION = '1.0.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 2;\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(address[] calldata accounts, bytes32[] calldata roles)\n        external\n        virtual\n        initializer\n    {\n        __PoolFilter_init_unchained(accounts, roles);\n    }\n}\n"
    },
    "contracts/PuroToucanCarbonOffsets.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport './bases/ToucanCarbonOffsetsEscrowableWithBatchBase.sol';\n\n/// @notice The PuroToucanCarbonOffsets contract is a specific implementation for Puro's logic.\ncontract PuroToucanCarbonOffsets is ToucanCarbonOffsetsEscrowableWithBatchBase {\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.3.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    // ----------------------------------------\n    //       Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        uint256 projectVintageTokenId_,\n        address contractRegistry_\n    ) external virtual initializer {\n        __ERC20_init_unchained(name_, symbol_);\n        _projectVintageTokenId = projectVintageTokenId_;\n        contractRegistry = contractRegistry_;\n    }\n\n    function standardRegistry() public pure override returns (string memory) {\n        return 'puro';\n    }\n\n    function standardRegistryDecimals() public pure override returns (uint8) {\n        return 18;\n    }\n}\n"
    },
    "contracts/PuroToucanCarbonOffsetsFactory.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport './bases/ToucanCarbonOffsetsFactoryBase.sol';\n\n/// @notice The PuroToucanCarbonOffsetsFactory contract is a specific factory implementation for Puro's logic.\ncontract PuroToucanCarbonOffsetsFactory is ToucanCarbonOffsetsFactoryBase {\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.0.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(\n        address _contractRegistry,\n        address[] calldata _accounts,\n        bytes32[] calldata _roles\n    ) external virtual initializer {\n        __ToucanCarbonOffsetsFactoryBase_init(_accounts, _roles);\n\n        contractRegistry = _contractRegistry;\n    }\n\n    function standardRegistry() public pure override returns (string memory) {\n        return 'puro';\n    }\n\n    function supportedStandards()\n        public\n        pure\n        override\n        returns (string[] memory)\n    {\n        string[] memory standards = new string[](1);\n        standards[0] = 'PURO';\n        return standards;\n    }\n}\n"
    },
    "contracts/retirements/dimo/DIMOCostBasisSales.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\n\nimport '../../bases/RoleInitializer.sol';\nimport '../interfaces/IRetirementCertificateFractionalizer.sol';\nimport './interfaces/IDIMOCostBasisSales.sol';\nimport './DIMOCostBasisSalesStorage.sol';\n\ncontract DIMOCostBasisSales is\n    IDIMOCostBasisSales,\n    UUPSUpgradeable,\n    PausableUpgradeable,\n    RoleInitializer,\n    DIMOCostBasisSalesStorage\n{\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.0.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\n\n    event ListingUpdated(\n        address sender,\n        uint256 indexed vintageId,\n        uint256 amount,\n        uint256 pricePerUnit\n    );\n\n    event ListingBought(\n        address indexed beneficiary,\n        uint256 indexed vintageId,\n        uint256 amount,\n        uint256 fractionTokenId,\n        uint256 price\n    );\n\n    event ToucanRegistrySet(address contractRegistry);\n    event ListerSet(address newLister);\n    event DIMOUserProfileSet(address dimoUserProfile);\n\n    function initialize(\n        address[] calldata accounts,\n        bytes32[] calldata roles,\n        address contractRegistry_,\n        address paymentToken_\n    ) external initializer {\n        __UUPSUpgradeable_init_unchained();\n        __Pausable_init_unchained();\n        __RoleInitializer_init_unchained(accounts, roles);\n\n        contractRegistry = IToucanContractRegistry(contractRegistry_);\n        paymentToken = IERC20(paymentToken_);\n    }\n\n    // ----------------------------------------\n    //      Pausable\n    // ----------------------------------------\n\n    function pause() external onlyRole(PAUSER_ROLE) {\n        super._pause();\n    }\n\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        super._unpause();\n    }\n\n    // ----------------------------------------\n    //      Admin\n    // ----------------------------------------\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        override\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {}\n\n    function setToucanContractRegistry(address toucanContractRegistry)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        contractRegistry = IToucanContractRegistry(toucanContractRegistry);\n        emit ToucanRegistrySet(toucanContractRegistry);\n    }\n\n    function setLister(address lister_) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        lister = lister_;\n        emit ListerSet(lister_);\n    }\n\n    function setDIMOUserProfile(address dimoUserProfile_)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        dimoUserProfile = IDIMOUserProfile(dimoUserProfile_);\n        emit DIMOUserProfileSet(dimoUserProfile_);\n    }\n\n    // ----------------------------------------\n    //      Permissioned\n    // ----------------------------------------\n\n    /**\n     * Increments the listing amount of a given vintage id\n     * @param vintageId the vintage id\n     * @param amount increment\n     * @param pricePerUnit price (as `paymentToken`) per 1 unit of vintage.\n     * The new price per unit will be calculated as an weighted average\n     * of old and new price.\n     */\n    function list(\n        uint256 vintageId,\n        uint256 amount,\n        uint256 pricePerUnit\n    ) external whenNotPaused {\n        // we use a pre-defined lister instead of the OZ access control roles\n        // in order to make the lister easy to discover in the DIMO frontend.\n        // initially, only one lister will exist, but as soon as we move\n        // to a permissionless version of this method, lister will be deprecated and\n        // and account will be able to call list. This will be enabled by updating buy()\n        // to accept one or more listers from where buyers can consume balances.\n        require(msg.sender == lister, 'invalid lister');\n        require(amount > 0, 'invalid amount');\n        require(pricePerUnit > 0, 'invalid price per unit');\n        VintageListing storage vintage = listing[vintageId][msg.sender];\n\n        vintage.pricePerUnit =\n            (vintage.pricePerUnit * vintage.amount + amount * pricePerUnit) /\n            (vintage.amount + amount);\n        vintage.amount += amount;\n\n        emit ListingUpdated(\n            msg.sender,\n            vintageId,\n            vintage.amount,\n            vintage.pricePerUnit\n        );\n    }\n\n    // ----------------------------------------\n    //      Permissionless\n    // ----------------------------------------\n\n    function totalSold() external view override returns (uint256) {\n        return _totalSold;\n    }\n\n    /**\n     * Calculate the price to buy a certain fraction, defined by the request data\n     * @notice price is expressed in the unit of the `paymentToken`\n     * @param from the address of the account from whom the fraction is bought\n     * @param params the fraction request for which the quote needs to be\n     * made\n     * @return quote the quote\n     */\n    function quoteBuy(address from, FractionRequestData calldata params)\n        public\n        view\n        returns (uint256 quote)\n    {\n        quote =\n            (params.amount *\n                listing[params.projectVintageTokenId][from].pricePerUnit) /\n            1e18;\n    }\n\n    /**\n     * Performs the purchase of a fraction, according to the fraction request params\n     * @notice `maxPrice` is expressed in the unit of the `paymentToken`\n     * @param params the fraction request for which the purchase is made\n     * @param maxPrice the maximum price the buyer is willing to spend\n     */\n    function buy(FractionRequestData calldata params, uint256 maxPrice)\n        external\n        whenNotPaused\n        returns (uint256 fractionTokenId)\n    {\n        address from = lister;\n        uint256 listedAmount = listing[params.projectVintageTokenId][from]\n            .amount;\n        uint256 pricePerUnit = listing[params.projectVintageTokenId][from]\n            .pricePerUnit;\n        require(listedAmount > 0 && pricePerUnit > 0, 'vintage not listed');\n        require(listedAmount >= params.amount, 'amount too large');\n\n        uint256 finalPrice = quoteBuy(from, params);\n        require(finalPrice <= maxPrice, 'price too high');\n\n        listedAmount -= params.amount;\n        listing[params.projectVintageTokenId][from].amount = listedAmount;\n        _totalSold += params.amount;\n\n        require(\n            paymentToken.transferFrom(msg.sender, from, finalPrice),\n            'payment transfer failed'\n        );\n\n        fractionTokenId = IRetirementCertificateFractionalizer(\n            contractRegistry.retirementCertificateFractionalizerAddress()\n        ).mintFractionFrom(from, params);\n\n        // the statement is only added to optimize storage and has no effect on\n        // the method logic\n        if (listedAmount == 0) {\n            //slither-disable-next-line reentrancy-no-eth\n            delete listing[params.projectVintageTokenId][from];\n        }\n\n        _mintUserProfile(params.beneficiary);\n\n        emit ListingBought(\n            msg.sender,\n            params.projectVintageTokenId,\n            params.amount,\n            fractionTokenId,\n            finalPrice\n        );\n    }\n\n    /// @dev Mint a user profile if the user does not have one\n    function _mintUserProfile(address user) internal {\n        require(\n            dimoUserProfile != IDIMOUserProfile(address(0)),\n            'invalid user profile contract'\n        );\n        // slither-disable-next-line incorrect-equality\n        if (dimoUserProfile.balanceOf(user) == 0) {\n            // slither-disable-next-line unused-return\n            dimoUserProfile.mint(user);\n        }\n    }\n}\n"
    },
    "contracts/retirements/dimo/DIMOCostBasisSalesStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nimport '../../interfaces/IToucanContractRegistry.sol';\nimport './interfaces/IDIMOUserProfile.sol';\n\nstruct VintageListing {\n    uint256 amount;\n    uint256 pricePerUnit;\n}\n\nabstract contract DIMOCostBasisSalesStorage {\n    uint256 internal _totalSold;\n    mapping(uint256 => mapping(address => VintageListing)) public listing;\n\n    IToucanContractRegistry public contractRegistry;\n    IERC20 public paymentToken;\n    IDIMOUserProfile public dimoUserProfile;\n\n    address public lister;\n}\n"
    },
    "contracts/retirements/dimo/DIMOUserProfile.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol';\n\nimport '../../bases/RoleInitializer.sol';\nimport './interfaces/IDIMOCostBasisSales.sol';\nimport './interfaces/IDIMOUserProfile.sol';\nimport './DIMOUserProfileStorage.sol';\n\ncontract DIMOUserProfile is\n    IDIMOUserProfile,\n    ERC721Upgradeable,\n    UUPSUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    RoleInitializer,\n    DIMOUserProfileStorage\n{\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.0.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    /// @dev All roles related to accessing this contract\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\n    bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event AllowedCallerSet(address caller, bool allowed);\n    event ThresholdSet(uint256 index, uint256 threshold);\n    event TokenURISet(uint256 index, string tokenURI);\n    event BaseURISet(string baseURI);\n    event DIMOCostBasisSalesSet(address costBasisSalesAddress);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(\n        string memory baseURI_,\n        address costBasisSales,\n        address[] calldata accounts,\n        bytes32[] calldata roles\n    ) external initializer {\n        __Context_init_unchained();\n        __ERC721_init_unchained(\n            'DIMO Better Together Carbon Retirements',\n            'DCO2R'\n        );\n        __ReentrancyGuard_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n        __Pausable_init_unchained();\n        __RoleInitializer_init_unchained(accounts, roles);\n\n        baseURI = baseURI_;\n        dimoCostBasisSales = costBasisSales;\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {}\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(\n            AccessControlUpgradeable,\n            ERC721Upgradeable,\n            IERC165Upgradeable\n        )\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @notice Set the base URI for all token IDs.\n    /// NOTE: If the given URI doesn't end with a slash, it will be added automatically.\n    /// @param baseURI_ The base URI to set.\n    function setBaseURI(string memory baseURI_)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        baseURI = (bytes(baseURI_).length != 0 &&\n            bytes(baseURI_)[bytes(baseURI_).length - 1] != '/')\n            ? string.concat(baseURI_, '/')\n            : baseURI_;\n        emit BaseURISet(baseURI_);\n    }\n\n    /// @notice Set the address of the DIMOCostBasisSales contract\n    /// @param dimoCostBasisSales_ The address of the DIMOCostBasisSales contract\n    function setDIMOCostBasisSales(address dimoCostBasisSales_)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        dimoCostBasisSales = dimoCostBasisSales_;\n        emit DIMOCostBasisSalesSet(dimoCostBasisSales_);\n    }\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), callable only by pausers\n    function pause() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /// @notice Emergency function to re-enable contract's core functionality after being paused\n    /// @dev wraps _unpause(), callable only by pausers\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    /// @notice Set both tokenURIs and thresholds\n    /// @param tokenURIs_ The token URIs to set\n    /// @param thresholds_ The thresholds to set\n    function setTokenURIsAndThresholds(\n        string[] calldata tokenURIs_,\n        uint256[] calldata thresholds_\n    ) external onlyRole(MANAGER_ROLE) {\n        require(tokenURIs_.length == thresholds_.length + 1, 'Length mismatch');\n        _setTokenURIs(tokenURIs_);\n        _setThresholds(thresholds_);\n    }\n\n    /// @notice Set only tokenURIs\n    /// @param tokenURIs_ The token URIs to set\n    function setTokenURIs(string[] calldata tokenURIs_)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        require(tokenURIs_.length == _thresholds.length + 1, 'Length mismatch');\n        _setTokenURIs(tokenURIs_);\n    }\n\n    /// @notice Set only thresholds\n    /// @param thresholds_ The thresholds to set\n    function setThresholds(uint256[] calldata thresholds_)\n        external\n        onlyRole(MANAGER_ROLE)\n    {\n        require(_tokenURIs.length == thresholds_.length + 1, 'Length mismatch');\n        _setThresholds(thresholds_);\n    }\n\n    /// @notice Mint a new user profile NFT\n    /// @param to The address to mint the NFT to\n    /// @dev Only callable by minters\n    function mint(address to) external onlyRole(MINTER_ROLE) returns (uint256) {\n        _safeMint(to, ++_tokenIndex);\n        return _tokenIndex;\n    }\n\n    // ----------------------------------\n    //     Permissionless functions\n    // ----------------------------------\n\n    /// @notice Get the URI for a token ID. Returns an empty string if no URI is set.\n    /// @param tokenId The id of the NFT to get the URI for.\n    /// @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n    /// based on the ERC721URIStorage implementation\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override\n        returns (string memory)\n    {\n        require(_exists(tokenId), 'Non-existent token id');\n\n        string memory tokenURI_ = _getTokenURIBasedOnTotalSold();\n\n        return string.concat(baseURI, tokenURI_);\n    }\n\n    function tokenURIs() external view returns (string[] memory) {\n        return _tokenURIs;\n    }\n\n    function thresholds() external view returns (uint256[] memory) {\n        return _thresholds;\n    }\n\n    // ----------------------------------------\n    //      Internal functions\n    // ----------------------------------------\n\n    function _setTokenURIs(string[] calldata tokenURIs_) internal {\n        /// Unfortunately it's not possible yet to assign calldata dynamic arrays\n        /// to storage via references so we have to set the underlying array values\n        /// one by one.\n        delete _tokenURIs;\n\n        uint256 tokenURILen = tokenURIs_.length;\n        for (uint256 i = 0; i < tokenURILen; ++i) {\n            if (bytes(tokenURIs_[i]).length == 0) revert('Empty token URI');\n            _tokenURIs.push(tokenURIs_[i]);\n            emit TokenURISet(i, tokenURIs_[i]);\n        }\n    }\n\n    function _setThresholds(uint256[] calldata thresholds_) internal {\n        /// Unfortunately it's not possible yet to assign calldata dynamic arrays\n        /// to storage via references so we have to set the underlying array values\n        /// one by one.\n        delete _thresholds;\n\n        _thresholds.push(thresholds_[0]);\n        emit ThresholdSet(0, thresholds_[0]);\n\n        uint256 thresholdLen = thresholds_.length;\n        for (uint256 i = 1; i < thresholdLen; ++i) {\n            require(\n                thresholds_[i] > thresholds_[i - 1],\n                'Thresholds not sorted'\n            );\n            _thresholds.push(thresholds_[i]);\n            emit ThresholdSet(i, thresholds_[i]);\n        }\n    }\n\n    function _getTokenURIBasedOnTotalSold()\n        internal\n        view\n        returns (string memory)\n    {\n        if (_tokenURIs.length == 0) return '';\n        uint256 totalSold = IDIMOCostBasisSales(dimoCostBasisSales).totalSold();\n        uint256 thresholdLen = _thresholds.length;\n        for (uint256 i = 0; i < thresholdLen; ++i) {\n            if (totalSold <= _thresholds[i]) return _tokenURIs[i];\n        }\n        return _tokenURIs[thresholdLen];\n    }\n}\n"
    },
    "contracts/retirements/dimo/DIMOUserProfileStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nabstract contract DIMOUserProfileStorage {\n    string public baseURI;\n\n    address public dimoCostBasisSales;\n\n    uint256[] internal _thresholds;\n    string[] internal _tokenURIs;\n    uint256 internal _tokenIndex;\n}\n"
    },
    "contracts/retirements/dimo/interfaces/IDIMOCostBasisSales.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\ninterface IDIMOCostBasisSales {\n    function totalSold() external view returns (uint256);\n}\n"
    },
    "contracts/retirements/dimo/interfaces/IDIMOUserProfile.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\n\ninterface IDIMOUserProfile is IERC721Upgradeable {\n    function mint(address to) external returns (uint256);\n}\n"
    },
    "contracts/retirements/interfaces/IRetirementCertificateFractionalizer.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nstruct FractionRequestData {\n    uint256 amount;\n    uint256 projectVintageTokenId;\n    address beneficiary;\n    string beneficiaryString;\n    string retirementMessage;\n    string beneficiaryLocation;\n    string consumptionCountryCode;\n    uint256 consumptionPeriodStart;\n    uint256 consumptionPeriodEnd;\n    string tokenURI;\n    bytes extraData;\n}\n\ninterface IRetirementCertificateFractionalizer {\n    function mintFraction(FractionRequestData calldata params)\n        external\n        returns (uint256 tokenId);\n\n    function mintFractionFrom(address from, FractionRequestData calldata params)\n        external\n        returns (uint256 tokenId);\n}\n"
    },
    "contracts/retirements/interfaces/IRetirementCertificateFractions.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nstruct FractionData {\n    uint256 amount;\n    uint256 projectVintageTokenId;\n    uint256 createdAt;\n    address fractioningEntity;\n    address beneficiary;\n    string beneficiaryString;\n    string retirementMessage;\n    string beneficiaryLocation;\n    string consumptionCountryCode;\n    uint256 consumptionPeriodStart;\n    uint256 consumptionPeriodEnd;\n    string tokenURI;\n    bytes extraData;\n}\n\ninterface IRetirementCertificateFractions {\n    function mintFraction(address caller, FractionData calldata fractionData)\n        external\n        returns (uint256);\n}\n"
    },
    "contracts/retirements/interfaces/IRetirementCertificates.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {CreateRetirementRequestParams} from '../../interfaces/IToucanCarbonOffsetsEscrow.sol';\n\nstruct CertificateData {\n    uint256[] retirementEventIds;\n    uint256 createdAt;\n    address retiringEntity;\n    address beneficiary;\n    string retiringEntityString;\n    string beneficiaryString;\n    string retirementMessage;\n    string beneficiaryLocation;\n    string consumptionCountryCode;\n    uint256 consumptionPeriodStart;\n    uint256 consumptionPeriodEnd;\n}\n\n/// @dev a RetirementEvent has a clear ownership relationship.\n/// This relation is less clear in an NFT that already has a beneficiary set\nstruct RetirementEvent {\n    uint256 createdAt;\n    address retiringEntity;\n    /// @dev amount is denominated in 18 decimals, similar to amounts\n    /// in TCO2 contracts.\n    uint256 amount;\n    uint256 projectVintageTokenId;\n}\n\ninterface IRetirementCertificates {\n    function mintCertificate(\n        address retiringEntity,\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256[] calldata retirementEventIds\n    ) external returns (uint256);\n\n    function mintCertificateWithExtraData(\n        address retiringEntity,\n        CreateRetirementRequestParams calldata params,\n        uint256[] calldata retirementEventIds\n    ) external returns (uint256);\n\n    function registerEvent(\n        address retiringEntity,\n        uint256 projectVintageTokenId,\n        uint256 amount,\n        bool isLegacy\n    ) external returns (uint256 retireEventCounter);\n\n    /// NOTE: This function is deprecated in favour of `certificates` and should be removed in future versions.\n    function getData(uint256 tokenId)\n        external\n        view\n        returns (CertificateData memory);\n\n    function certificates(uint256 tokenId)\n        external\n        view\n        returns (CertificateData memory);\n\n    function retirements(uint256)\n        external\n        view\n        returns (RetirementEvent memory);\n}\n"
    },
    "contracts/retirements/RetirementCertificateFractionalizer.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol';\n\nimport '../interfaces/IToucanContractRegistry.sol';\nimport '../libraries/Strings.sol';\nimport '../token/ERC1155Allowable.sol';\nimport '../bases/RoleInitializer.sol';\nimport './interfaces/IRetirementCertificates.sol';\nimport './interfaces/IRetirementCertificateFractionalizer.sol';\nimport './interfaces/IRetirementCertificateFractions.sol';\nimport './RetirementCertificateFractionalizerStorage.sol';\n\n/// @notice The `RetirementCertificateFractionalizer` contract lets users mint fractions of retirement certificates.\n/// Users must first deposit a retirement certificate into this contract to mint fractions.\ncontract RetirementCertificateFractionalizer is\n    IRetirementCertificateFractionalizer,\n    ERC1155Allowable,\n    ERC1155SupplyUpgradeable,\n    UUPSUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    RoleInitializer,\n    RetirementCertificateFractionalizerStorage\n{\n    // ----------------------------------------\n    //      Libraries\n    // ----------------------------------------\n\n    using Strings for string;\n\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.0.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    /// @dev All roles related to accessing this contract\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event ToucanRegistrySet(address contractRegistry);\n    event BeneficiaryStringSet(string beneficiaryString);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(\n        address _contractRegistry,\n        string memory _beneficiaryString,\n        address[] calldata accounts,\n        bytes32[] calldata roles\n    ) external virtual initializer {\n        __Context_init_unchained();\n        __ERC1155_init_unchained('');\n        __ReentrancyGuard_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n        __Pausable_init_unchained();\n\n        __RoleInitializer_init_unchained(accounts, roles);\n\n        contractRegistry = _contractRegistry;\n        beneficiaryString = _beneficiaryString;\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {}\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlUpgradeable, ERC1155Upgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    function setToucanContractRegistry(address _address)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        contractRegistry = _address;\n        emit ToucanRegistrySet(_address);\n    }\n\n    /// @notice Set the beneficiary string that every certificate sent to this contract must have\n    /// @param _beneficiaryString The only accepted beneficiary string for certificates sent to this contract\n    /// @dev Callable only by admins\n    function setBeneficiaryString(string memory _beneficiaryString)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        beneficiaryString = _beneficiaryString;\n        emit BeneficiaryStringSet(_beneficiaryString);\n    }\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), callable only by pausers\n    function pause() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /// @notice Emergency function to re-enable contract's core functionality after being paused\n    /// @dev wraps _unpause(), callable only by pausers\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    // ----------------------------------\n    //     Permissionless functions\n    // ----------------------------------\n\n    /// @notice Mint a fraction of a retirement certificate, from the balance of the caller\n    /// @param params The request data of the fraction to mint\n    /// @return fractionTokenId The id of the minted fraction NFT, in the fractions contract\n    function mintFraction(FractionRequestData calldata params)\n        external\n        whenNotPaused\n        returns (uint256 fractionTokenId)\n    {\n        return _mintFractionFrom(_msgSender(), params);\n    }\n\n    /// @notice Mint a fraction of a retirement certificate, from the balance of the listing owner\n    /// @param from The owner of the balance to mint the fraction from\n    /// @param params The request data of the fraction to mint\n    /// @return fractionTokenId The id of the minted fraction NFT, in the fractions contract\n    function mintFractionFrom(address from, FractionRequestData calldata params)\n        public\n        whenNotPaused\n        returns (uint256 fractionTokenId)\n    {\n        require(params.amount > 0, 'Amount must be greater than 0');\n        if (from != _msgSender() && !isApprovedForAll(from, _msgSender())) {\n            _decreaseAllowance(\n                from,\n                _msgSender(),\n                params.projectVintageTokenId,\n                params.amount\n            );\n        }\n        fractionTokenId = _mintFractionFrom(from, params);\n    }\n\n    function _mintFractionFrom(\n        address from,\n        FractionRequestData calldata params\n    ) internal returns (uint256 fractionTokenId) {\n        // reduce the fraction's amount from the owner's balance\n        // this also checks if the owner has enough balance\n        _burn(from, params.projectVintageTokenId, params.amount);\n\n        FractionData memory fractionData = FractionData({\n            amount: params.amount,\n            projectVintageTokenId: params.projectVintageTokenId,\n            createdAt: block.timestamp,\n            fractioningEntity: from,\n            beneficiary: params.beneficiary,\n            beneficiaryString: params.beneficiaryString,\n            retirementMessage: params.retirementMessage,\n            beneficiaryLocation: params.beneficiaryLocation,\n            consumptionCountryCode: params.consumptionCountryCode,\n            consumptionPeriodStart: params.consumptionPeriodStart,\n            consumptionPeriodEnd: params.consumptionPeriodEnd,\n            tokenURI: params.tokenURI,\n            extraData: params.extraData\n        });\n        address rcFractions = IToucanContractRegistry(contractRegistry)\n            .retirementCertificateFractionsAddress();\n        fractionTokenId = IRetirementCertificateFractions(rcFractions)\n            .mintFraction(_msgSender(), fractionData);\n    }\n\n    /// @dev by depositing a retirement certificate into this contract, the sender gets\n    /// the right to mint fractions based on the amount of the certificate\n    function onERC721Received(\n        address, /* operator */\n        address from,\n        uint256 tokenId,\n        bytes calldata /* data */\n    ) external virtual returns (bytes4) {\n        address retirementCertificatesAddress = IToucanContractRegistry(\n            contractRegistry\n        ).retirementCertificatesAddress();\n        require(\n            msg.sender == retirementCertificatesAddress,\n            'Only RetirementCertificates can be sent to this contract'\n        );\n        IRetirementCertificates retirementCertificates = IRetirementCertificates(\n                retirementCertificatesAddress\n            );\n        CertificateData memory certificateData = retirementCertificates.getData(\n            tokenId\n        );\n        require(\n            certificateData.beneficiary == address(this),\n            'Beneficiary of the certificate must be this contract'\n        );\n        require(\n            certificateData.beneficiaryString.equals(beneficiaryString),\n            string.concat('Beneficiary string must be ', beneficiaryString)\n        );\n\n        // Add the certificate amounts to the balance of the sender\n        uint256[] memory retirementEventIds = certificateData\n            .retirementEventIds;\n        for (uint256 i = 0; i < retirementEventIds.length; i++) {\n            RetirementEvent memory retirement = retirementCertificates\n                .retirements(retirementEventIds[i]);\n            _mint(\n                from,\n                retirement.projectVintageTokenId,\n                retirement.amount,\n                ''\n            );\n            // Add the retirement event ids to the FIFO queue of the sender\n            // and keep track of its remaining balance\n            _retirementEventIds[from][retirement.projectVintageTokenId].push(\n                retirementEventIds[i]\n            );\n            remainingRetirementEventBalance[retirementEventIds[i]] += retirement\n                .amount;\n        }\n\n        return this.onERC721Received.selector;\n    }\n\n    /// @notice Get the FIFO queue of retirement event ids for a given owner and vintage\n    /// @param owner The owner of the retirement event ids; this is the original depositor\n    /// of the parent retirement certificate in the fractionalizer.\n    /// @param vintageId The project vintage of the retirement events\n    /// @return An array of retirement event ids\n    function getRetirementEventIds(address owner, uint256 vintageId)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return _retirementEventIds[owner][vintageId];\n    }\n\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override(ERC1155Upgradeable, ERC1155SupplyUpgradeable) {\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\n        if (to == address(0)) {\n            for (uint256 i = 0; i < ids.length; ++i) {\n                totalBurntSupply[ids[i]] += amounts[i];\n            }\n        }\n        if (from != address(0) && to != address(0)) {\n            revert('Transfers are not allowed yet');\n        }\n    }\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public override(ERC1155Upgradeable, ERC1155Allowable) {\n        ERC1155Allowable.safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public override(ERC1155Upgradeable, ERC1155Allowable) {\n        ERC1155Allowable.safeTransferFrom(from, to, id, amount, data);\n    }\n}\n"
    },
    "contracts/retirements/RetirementCertificateFractionalizerStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nabstract contract RetirementCertificateFractionalizerStorage {\n    address public contractRegistry;\n    string public beneficiaryString;\n\n    /// @dev mapping from vintage id to the total amount of fractions burnt for that vintage\n    mapping(uint256 => uint256) public totalBurntSupply;\n\n    /// @dev mapping from certificate depositor to vintage to a FIFO queue\n    /// of retirement event ids\n    mapping(address => mapping(uint256 => uint256[]))\n        internal _retirementEventIds;\n    mapping(uint256 => uint256) public remainingRetirementEventBalance;\n}\n"
    },
    "contracts/retirements/RetirementCertificateFractions.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\n\nimport './RetirementCertificateFractionsStorage.sol';\nimport './interfaces/IRetirementCertificateFractions.sol';\nimport '../libraries/Strings.sol';\nimport '../bases/RoleInitializer.sol';\n\n/// @notice The `RetirementCertificateFractions.sol` contract lets users mint NFTs that\n/// represent a fraction of a retirement certificate.\n/// @dev The amount of carbon is denominated in the 18-decimal form\ncontract RetirementCertificateFractions is\n    IRetirementCertificateFractions,\n    ERC721Upgradeable,\n    UUPSUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    RoleInitializer,\n    RetirementCertificateFractionsStorage\n{\n    // ----------------------------------------\n    //      Libraries\n    // ----------------------------------------\n\n    using Strings for string;\n    using Strings for uint256;\n\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.0.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    /// @dev All roles related to accessing this contract\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n    bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event BaseURISet(string baseURI);\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        string memory baseURI_,\n        address[] calldata accounts,\n        bytes32[] calldata roles\n    ) external initializer {\n        __Context_init_unchained();\n        __ERC721_init_unchained(\n            'Toucan Protocol: Retirement Certificate Fractions for Tokenized Carbon Offsets',\n            'TOUCAN-CERT-FRACTIONS'\n        );\n        __ReentrancyGuard_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n        __Pausable_init_unchained();\n        __RoleInitializer_init_unchained(accounts, roles);\n\n        baseURI = baseURI_;\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {}\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlUpgradeable, ERC721Upgradeable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @notice Set the base URI for all token IDs.\n    /// NOTE: If the given URI doesn't end with a slash, it will be added automatically.\n    /// @param baseURI_ The base URI to set.\n    function setBaseURI(string memory baseURI_)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        baseURI = (bytes(baseURI_).length != 0 &&\n            bytes(baseURI_)[bytes(baseURI_).length - 1] != '/')\n            ? string.concat(baseURI_, '/')\n            : baseURI_;\n        emit BaseURISet(baseURI_);\n    }\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), callable only by pausers\n    function pause() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /// @notice Emergency function to re-enable contract's core functionality after being paused\n    /// @dev wraps _unpause(), callable only by pausers\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    /// @notice Mint a fraction of a retirement certificate.\n    /// @dev Only a minter can call this function. Access is meant to\n    /// be granted to the retirement certificate fractionalizer.\n    /// @param fractionData The data of the fraction to mint.\n    /// @return The id of the minted fraction NFT.\n    function mintFraction(\n        address, /* caller */\n        FractionData calldata fractionData\n    )\n        external\n        virtual\n        nonReentrant\n        whenNotPaused\n        onlyRole(MINTER_ROLE)\n        returns (uint256)\n    {\n        return _mintFraction(fractionData);\n    }\n\n    function _mintFraction(FractionData calldata fractionData)\n        internal\n        returns (uint256)\n    {\n        require(fractionData.amount != 0, 'Amount must be greater than 0');\n        uint256 newItemId = _tokenIds;\n        unchecked {\n            ++newItemId;\n        }\n        _tokenIds = newItemId;\n\n        fractions[newItemId] = fractionData;\n\n        _safeMint(fractionData.beneficiary, newItemId);\n        return newItemId;\n    }\n\n    // ----------------------------------\n    //     Permissionless functions\n    // ----------------------------------\n\n    /// @notice Get the URI for a token ID. Returns an empty string if no URI is set.\n    /// @param tokenId The id of the NFT to get the URI for.\n    /// @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n    /// based on the ERC721URIStorage implementation\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(_exists(tokenId), 'Non-existent token id');\n        string memory _tokenURI = fractions[tokenId].tokenURI;\n        // If there is no base URI, return the token URI.\n        // If both are not set, return an empty string.\n        if (bytes(baseURI).length == 0) return _tokenURI;\n        // If both are set, concatenate the baseURI and tokenURI\n        if (bytes(_tokenURI).length != 0)\n            return string.concat(baseURI, _tokenURI);\n\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to\n        // the baseURI.\n        return string.concat(baseURI, tokenId.toString());\n    }\n}\n"
    },
    "contracts/retirements/RetirementCertificateFractionsStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {FractionData} from './interfaces/IRetirementCertificateFractions.sol';\n\nabstract contract RetirementCertificateFractionsStorage {\n    string public baseURI;\n\n    uint256 internal _tokenIds;\n\n    mapping(uint256 => FractionData) public fractions;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[47] private __gap;\n}\n"
    },
    "contracts/retirements/RetirementCertificates.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\n\nimport '../interfaces/ICarbonProjectVintages.sol';\nimport '../interfaces/IToucanContractRegistry.sol';\nimport '../libraries/Strings.sol';\nimport './interfaces/IRetirementCertificates.sol';\nimport './RetirementCertificatesStorage.sol';\n\n/// @notice The `RetirementCertificates` contract lets users mint NFTs that act as proof-of-retirement.\n/// These Retirement Certificate NFTs display how many TCO2s a user has burnt\n/// @dev The amount of RetirementEvents is denominated in the 18-decimal form\n/// @dev Getters in this contract return the corresponding amount in tonnes or kilos\ncontract RetirementCertificates is\n    IRetirementCertificates,\n    ERC721Upgradeable,\n    OwnableUpgradeable,\n    UUPSUpgradeable,\n    RetirementCertificatesStorageV1,\n    ReentrancyGuardUpgradeable,\n    RetirementCertificatesStorage\n{\n    // ----------------------------------------\n    //      Libraries\n    // ----------------------------------------\n\n    using Strings for string;\n\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.1.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    /// @dev dividers to round carbon in human-readable denominations\n    uint256 public constant tonneDenomination = 1e18;\n    uint256 public constant kiloDenomination = 1e15;\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event CertificateMinted(uint256 tokenId);\n    event CertificateUpdated(uint256 tokenId);\n    event ToucanRegistrySet(address ContractRegistry);\n    event BaseURISet(string baseURI);\n    event MinValidAmountSet(uint256 previousAmount, uint256 newAmount);\n    event EventsAttached(uint256 tokenId, uint256[] eventIds);\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(address _contractRegistry, string memory _baseURI)\n        external\n        virtual\n        initializer\n    {\n        __Context_init_unchained();\n        __ERC721_init_unchained(\n            'Toucan Protocol: Retirement Certificates for Tokenized Carbon Offsets',\n            'TOUCAN-CERT'\n        );\n        __Ownable_init_unchained();\n        __ReentrancyGuard_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n\n        contractRegistry = _contractRegistry;\n        baseURI = _baseURI;\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    function setToucanContractRegistry(address _address) external onlyOwner {\n        contractRegistry = _address;\n        emit ToucanRegistrySet(_address);\n    }\n\n    function setBaseURI(string memory baseURI_) external onlyOwner {\n        baseURI = baseURI_;\n        emit BaseURISet(baseURI_);\n    }\n\n    function setMinValidRetirementAmount(uint256 amount) external onlyOwner {\n        uint256 previousAmount = minValidRetirementAmount;\n        require(previousAmount != amount, 'Already set');\n\n        minValidRetirementAmount = amount;\n        emit MinValidAmountSet(previousAmount, amount);\n    }\n\n    // ----------------------------------\n    //     Permissionless functions\n    // ----------------------------------\n\n    /// @notice Register retirement events. This function can only be called by a TC02 contract\n    /// to register retirement events so they can be directly linked to an NFT mint.\n    /// @param retiringEntity The entity that has retired TCO2 and is eligible to mint an NFT.\n    /// @param projectVintageTokenId The vintage id of the TCO2 that is retired.\n    /// @param amount The amount of the TCO2 that is retired.\n    /// @param isLegacy Whether this event registration was executed by using the legacy retired\n    /// amount in the TCO2 contract or utilizes the new retirement event design.\n    /// @dev    The function can either be only called by a valid TCO2 contract.\n    function registerEvent(\n        address retiringEntity,\n        uint256 projectVintageTokenId,\n        uint256 amount,\n        bool isLegacy\n    ) external returns (uint256) {\n        // Logic requires that minting can only originate from a project-vintage ERC20 contract\n        require(\n            IToucanContractRegistry(contractRegistry).isValidERC20(msg.sender),\n            'Caller not a TCO2'\n        );\n        require(\n            amount != 0 && amount >= minValidRetirementAmount,\n            'Invalid amount'\n        );\n\n        /// Read from storage once, then use everywhere by reading\n        /// from memory.\n        uint256 eventCounter = retireEventCounter;\n        unchecked {\n            /// Realistically, the counter will never overflow\n            ++eventCounter;\n        }\n        /// Store counter back in storage\n        retireEventCounter = eventCounter;\n\n        // Track all events of a user\n        eventsOfUser[retiringEntity].push(eventCounter);\n        // Track retirements\n        if (!isLegacy) {\n            // Avoid tracking timestamps for legacy retirements since these\n            // are inaccurate.\n            _retirements[eventCounter].createdAt = block.timestamp;\n        }\n        _retirements[eventCounter].retiringEntity = retiringEntity;\n        _retirements[eventCounter].amount = amount;\n        _retirements[eventCounter]\n            .projectVintageTokenId = projectVintageTokenId;\n\n        return eventCounter;\n    }\n\n    /// @notice Attach retirement events to an NFT.\n    /// @param tokenId The id of the NFT to attach events to.\n    /// @param retirementEventIds An array of event ids to associate with the NFT.\n    function attachRetirementEvents(\n        uint256 tokenId,\n        uint256[] calldata retirementEventIds\n    ) external {\n        address tokenOwner = ownerOf(tokenId);\n        require(tokenOwner == msg.sender, 'Unauthorized');\n        _attachRetirementEvents(tokenId, tokenOwner, retirementEventIds);\n    }\n\n    /// @notice Attach retirement events to an NFT.\n    /// @param tokenId The id of the NFT to attach events to.\n    /// @param retiringEntity The entity that has retired TCO2 and is eligible to mint an NFT.\n    /// @param retirementEventIds An array of event ids to associate with the NFT.\n    function _attachRetirementEvents(\n        uint256 tokenId,\n        address retiringEntity,\n        uint256[] calldata retirementEventIds\n    ) internal {\n        // 0. Check whether retirementEventIds is empty\n        // 1. Check whether event belongs to user (retiring entity)\n        // 2. Check whether the event has previously been attached\n        require(retirementEventIds.length != 0, 'Empty event array');\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < retirementEventIds.length; ++i) {\n            uint256 eventId = retirementEventIds[i];\n            require(\n                _retirements[eventId].retiringEntity == retiringEntity,\n                'Invalid event to be claimed'\n            );\n            require(!claimedEvents[eventId], 'Already claimed event');\n            claimedEvents[eventId] = true;\n            _certificates[tokenId].retirementEventIds.push(eventId);\n        }\n        emit EventsAttached(tokenId, retirementEventIds);\n    }\n\n    /// @notice Mint new Retirement Certificate NFT that shows how many TCO2s have been retired.\n    /// @param retiringEntity The entity that has retired TCO2 and is eligible to mint an NFT.\n    /// @param retiringEntityString An identifiable string for the retiring entity, eg. their name.\n    /// @param beneficiary The beneficiary address for whom the TCO2 amount was retired.\n    /// @param beneficiaryString An identifiable string for the beneficiary, eg. their name.\n    /// @param retirementMessage A message to accompany the retirement.\n    /// @param retirementEventIds An array of event ids to associate with the NFT.\n    /// @return The token id of the newly minted NFT.\n    /// @dev    The function can either be called by a valid TCO2 contract or by someone who\n    ///         owns retirement events.\n    function mintCertificate(\n        address retiringEntity,\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256[] calldata retirementEventIds\n    ) external virtual nonReentrant returns (uint256) {\n        CreateRetirementRequestParams\n            memory params = CreateRetirementRequestParams({\n                tokenIds: new uint256[](0),\n                amount: 0,\n                retiringEntityString: retiringEntityString,\n                beneficiary: beneficiary,\n                beneficiaryString: beneficiaryString,\n                retirementMessage: retirementMessage,\n                beneficiaryLocation: '',\n                consumptionCountryCode: '',\n                consumptionPeriodStart: 0,\n                consumptionPeriodEnd: 0\n            });\n        return _mintCertificate(retiringEntity, params, retirementEventIds);\n    }\n\n    function _mintCertificate(\n        address retiringEntity,\n        CreateRetirementRequestParams memory params,\n        uint256[] calldata retirementEventIds\n    ) internal returns (uint256) {\n        // If the provided retiring entity is not the caller, then\n        // ensure the caller is at least a TCO2 contract. This is to\n        // allow TCO2 contracts to call retireAndMintCertificate.\n        require(\n            retiringEntity == msg.sender ||\n                IToucanContractRegistry(contractRegistry).isValidERC20(\n                    msg.sender\n                ) ==\n                true,\n            'Invalid caller'\n        );\n\n        // If no beneficiary address and name are provided, default them to the retiring entity\n        if (\n            params.beneficiary == address(0) &&\n            bytes(params.beneficiaryString).length == 0\n        ) {\n            params.beneficiary = retiringEntity;\n            params.beneficiaryString = params.retiringEntityString;\n        }\n\n        uint256 newItemId = _tokenIds;\n        unchecked {\n            ++newItemId;\n        }\n        _tokenIds = newItemId;\n\n        // Attach retirement events to the newly minted NFT\n        _attachRetirementEvents(newItemId, retiringEntity, retirementEventIds);\n\n        _certificates[newItemId].createdAt = block.timestamp;\n        _certificates[newItemId].beneficiary = params.beneficiary;\n        _certificates[newItemId].beneficiaryString = params.beneficiaryString;\n        _certificates[newItemId].retiringEntity = retiringEntity;\n        _certificates[newItemId].retiringEntityString = params\n            .retiringEntityString;\n        _certificates[newItemId].retirementMessage = params.retirementMessage;\n        _certificates[newItemId].beneficiaryLocation = params\n            .beneficiaryLocation;\n        _certificates[newItemId].consumptionCountryCode = params\n            .consumptionCountryCode;\n        _certificates[newItemId].consumptionPeriodStart = params\n            .consumptionPeriodStart;\n        _certificates[newItemId].consumptionPeriodEnd = params\n            .consumptionPeriodEnd;\n\n        emit CertificateMinted(newItemId);\n        _safeMint(retiringEntity, newItemId);\n\n        return newItemId;\n    }\n\n    /// @notice Mint new Retirement Certificate NFT that shows how many TCO2s have been retired.\n    /// @param retiringEntity The entity that has retired TCO2 and is eligible to mint an NFT.\n    /// @param params Retirement params\n    /// @param retirementEventIds An array of event ids to associate with the NFT.\n    /// @return The token id of the newly minted NFT.\n    /// @dev    The function can either be called by a valid TCO2 contract or by someone who\n    ///         owns retirement events.\n    function mintCertificateWithExtraData(\n        address retiringEntity,\n        CreateRetirementRequestParams calldata params,\n        uint256[] calldata retirementEventIds\n    ) external virtual nonReentrant returns (uint256) {\n        return _mintCertificate(retiringEntity, params, retirementEventIds);\n    }\n\n    /// @param tokenId The id of the NFT to get the URI.\n    /// @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n    /// based on the ERC721URIStorage implementation\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(_exists(tokenId), 'Non-existent token id');\n        return string.concat(baseURI, StringsUpgradeable.toString(tokenId));\n    }\n\n    /// @notice Update retirementMessage, beneficiary, and beneficiaryString of a NFT\n    /// within 24h of creation. Empty values are ignored, ie., will not overwrite the\n    /// existing stored values in the NFT.\n    /// @param tokenId The id of the NFT to update.\n    /// @param retiringEntityString An identifiable string for the retiring entity, eg. their name.\n    /// @param beneficiary The new beneficiary to set in the NFT.\n    /// @param beneficiaryString An identifiable string for the beneficiary, eg. their name.\n    /// @param retirementMessage The new retirementMessage to set in the NFT.\n    function updateCertificate(\n        uint256 tokenId,\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage\n    ) external virtual {\n        string[] memory registries = new string[](1);\n        registries[0] = 'verra';\n        require(\n            isCertificateForRegistry(tokenId, registries),\n            'Invalid registry'\n        );\n        require(msg.sender == ownerOf(tokenId), 'Sender is not owner');\n        require(\n            block.timestamp < _certificates[tokenId].createdAt + 24 hours,\n            '24 hours elapsed'\n        );\n\n        if (bytes(retiringEntityString).length != 0) {\n            _certificates[tokenId].retiringEntityString = retiringEntityString;\n        }\n        if (beneficiary != address(0)) {\n            _certificates[tokenId].beneficiary = beneficiary;\n        }\n        if (bytes(beneficiaryString).length != 0) {\n            _certificates[tokenId].beneficiaryString = beneficiaryString;\n        }\n        if (bytes(retirementMessage).length != 0) {\n            _certificates[tokenId].retirementMessage = retirementMessage;\n        }\n\n        emit CertificateUpdated(tokenId);\n    }\n\n    function isCertificateForRegistry(\n        uint256 tokenId,\n        string[] memory registries\n    ) public view returns (bool) {\n        // Determine the registry of the certificate\n        uint256 eventId = _certificates[tokenId].retirementEventIds[0];\n        uint256 projectVintageTokenId = _retirements[eventId]\n            .projectVintageTokenId;\n        VintageData memory data = ICarbonProjectVintages(\n            IToucanContractRegistry(contractRegistry)\n                .carbonProjectVintagesAddress()\n        ).getProjectVintageDataByTokenId(projectVintageTokenId);\n        string memory registry = data.registry;\n        if (bytes(registry).length == 0) {\n            // For backwards-compatibility\n            registry = 'verra';\n        }\n\n        // Loop through the registries and check if the certificate is for one of them\n        for (uint256 i = 0; i < registries.length; i++) {\n            if (registry.equals(registries[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /// @notice Get certificate data for an NFT.\n    /// @dev This function is deprecated in favour of `certificates(uint256 tokenId)`,\n    /// it is kept for backwards compatibility and will be removed in future versions.\n    /// @param tokenId The id of the NFT to get data for.\n    function getData(uint256 tokenId)\n        external\n        view\n        returns (CertificateData memory)\n    {\n        return _certificates[tokenId];\n    }\n\n    function certificates(uint256 tokenId)\n        external\n        view\n        returns (CertificateData memory)\n    {\n        return _certificates[tokenId];\n    }\n\n    function retirements(uint256 eventId)\n        external\n        view\n        returns (RetirementEvent memory)\n    {\n        return _retirements[eventId];\n    }\n\n    /// @notice Get all events for a user.\n    /// @param user The user for whom to fetch all events.\n    function getUserEvents(address user)\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return eventsOfUser[user];\n    }\n\n    /// @notice Get total retired amount for an NFT.\n    /// @param tokenId The id of the NFT to update.\n    /// @return amount Total retired amount for an NFT.\n    /// @dev The return amount is denominated in 18 decimals, similar to amounts\n    /// as they are read in TCO2 contracts.\n    /// For example, 1000000000000000000 means 1 tonne.\n    function getRetiredAmount(uint256 tokenId)\n        external\n        view\n        returns (uint256 amount)\n    {\n        uint256[] memory eventIds = _certificates[tokenId].retirementEventIds;\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < eventIds.length; ++i) {\n            amount += _retirements[eventIds[i]].amount;\n        }\n    }\n\n    /// @notice Get total retired amount for an NFT in tonnes.\n    /// @param tokenId The id of the NFT to update.\n    /// @return amount Total retired amount for an NFT in tonnes.\n    function getRetiredAmountInTonnes(uint256 tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        //slither-disable-next-line uninitialized-local\n        uint256 amount;\n        uint256[] memory eventIds = _certificates[tokenId].retirementEventIds;\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < eventIds.length; ++i) {\n            amount += _retirements[eventIds[i]].amount;\n        }\n        return amount / tonneDenomination;\n    }\n\n    /// @notice Get total retired amount for an NFT in kilos.\n    /// @param tokenId The id of the NFT to update.\n    /// @return amount Total retired amount for an NFT in kilos.\n    function getRetiredAmountInKilos(uint256 tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        //slither-disable-next-line uninitialized-local\n        uint256 amount;\n        uint256[] memory eventIds = _certificates[tokenId].retirementEventIds;\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < eventIds.length; ++i) {\n            amount += _retirements[eventIds[i]].amount;\n        }\n        return amount / kiloDenomination;\n    }\n}\n"
    },
    "contracts/retirements/RetirementCertificatesStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {CertificateData, RetirementEvent} from './interfaces/IRetirementCertificates.sol';\n\nabstract contract RetirementCertificatesStorageV1 {\n    /// @dev id that tracks retirement events\n    uint256 public retireEventCounter;\n\n    /// @dev maps the retireEventCounter to the RetirementEvent data, exposed\n    /// publicly through the `retirements(uint256)` function.\n    mapping(uint256 => RetirementEvent) internal _retirements;\n\n    /// @dev mapping that helps ensure retirement events are not claimed multiple times\n    mapping(uint256 => bool) public claimedEvents;\n\n    /// @dev List all the events belonging to user (maybe this could be better inferred via a subgraph)\n    mapping(address => uint256[]) eventsOfUser;\n\n    string public baseURI;\n    address public contractRegistry;\n    uint256 internal _tokenIds;\n\n    /// @dev Mapping of tokenId to CertificateData, exposed publicly\n    /// through the `certificates(uint256)` function.\n    mapping(uint256 => CertificateData) internal _certificates;\n\n    uint256 public minValidRetirementAmount;\n}\n\n/// @dev Kept separate from RetirementCertificatesStorageV1 to\n/// add ReentrancyGuardUpgradeable in between.\nabstract contract RetirementCertificatesStorage {\n\n}\n"
    },
    "contracts/testing/ERC1155AllowableTest.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '../token/ERC1155Allowable.sol';\n\n/// @title ERC1155AllowableTest\n/// @notice This contract is a wrapper around the abstract ERC1155Allowable contract\n/// to allow for testing of ERC1155Allowable's functions\ncontract ERC1155AllowableTest is ERC1155Allowable {\n    function mint(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) external {\n        _mint(account, id, amount, '');\n    }\n}\n"
    },
    "contracts/testing/FXGenArt721Test.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport {ERC721, IERC721} from '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\n\nimport {IFxGenArt721} from '../periphery/FxHashNFTCarbonExtension.sol';\n\n/**\n * @title FxGenArt721\n * @author fx(hash)\n * @notice See the documentation in {IFxGenArt721}\n */\ncontract FxGenArt721Test is IFxGenArt721, ERC721 {\n    uint96 public totalSupply;\n\n    constructor() ERC721('FxGenArt721', 'FXHASH') {}\n\n    function mint(\n        address _to,\n        uint256 _amount,\n        uint256 /* _payment */\n    ) external {\n        uint96 currentId = totalSupply;\n        for (uint256 i; i < _amount; ++i) {\n            _mint(_to, ++currentId);\n        }\n        totalSupply = currentId;\n    }\n\n    /**\n     * @inheritdoc ERC721\n     */\n    function tokenURI(uint256 _tokenId)\n        public\n        pure\n        override\n        returns (string memory)\n    {\n        return\n            string(\n                abi.encodePacked('https://test/', Strings.toString(_tokenId))\n            );\n    }\n}\n"
    },
    "contracts/testing/PoolComposabilityTest.sol": {
      "content": "// SPDX-FileCopyrightText: 2022 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\n\nimport '../retirements/interfaces/IRetirementCertificates.sol';\n\ninterface IToucanPoolTest {\n    function getScoredTCO2s() external view returns (address[] memory);\n\n    function redeemAuto(uint256 amount) external;\n\n    function redeemAuto2(uint256 amount)\n        external\n        returns (address[] memory, uint256[] memory);\n\n    function redeemAndRetireMany(\n        address[] memory tco2s,\n        uint256[] memory amounts\n    )\n        external\n        returns (\n            uint256[] memory retirementIds,\n            uint256[] memory redeemedAmounts\n        );\n\n    function redeemMany(address[] memory tco2s, uint256[] memory amounts)\n        external\n        returns (uint256[] memory redeemedAmounts);\n\n    function feeRedeemPercentageInBase() external view returns (uint256);\n}\n\ninterface IToucanCarbonOffsetsTest {\n    function retire(uint256 amount) external;\n\n    function approve(address spender, uint256 amount) external returns (bool);\n}\n\n/// Example contract that performs carbon retirement fully on-chain\n/// Meant to be used to test various composability scenarios between\n/// pool and TCO2 functions\ncontract PoolComposabilityTest {\n    address public immutable _poolToken;\n    address public immutable _retirementCertificates;\n\n    constructor(address poolToken, address retirementCertificates) {\n        _poolToken = poolToken;\n        _retirementCertificates = retirementCertificates;\n    }\n\n    function testRedeemAuto(uint256 _totalAmount) external {\n        address[] memory listTCO2 = IToucanPoolTest(_poolToken)\n            .getScoredTCO2s();\n\n        // Redeem pool tokens\n        IToucanPoolTest(_poolToken).redeemAuto(_totalAmount);\n\n        // Retire TCO2\n        for (uint256 i = 0; _totalAmount > 0; i++) {\n            uint256 balance = IERC20Upgradeable(listTCO2[i]).balanceOf(\n                address(this)\n            );\n\n            IToucanCarbonOffsetsTest(listTCO2[i]).retire(balance);\n            _totalAmount -= balance;\n        }\n    }\n\n    function testRedeemAuto2(uint256 _totalAmount, uint256 expectedLength)\n        external\n    {\n        // Redeem pool tokens\n        (address[] memory tco2s, uint256[] memory amounts) = IToucanPoolTest(\n            _poolToken\n        ).redeemAuto2(_totalAmount);\n\n        require(tco2s.length == expectedLength, 'Unexpected tco2 length');\n        require(amounts.length == expectedLength, 'Unexpected amounts length');\n\n        // Retire TCO2\n        for (uint256 i = 0; i < tco2s.length; i++) {\n            IToucanCarbonOffsetsTest(tco2s[i]).retire(amounts[i]);\n        }\n    }\n\n    function testRedeemManyArgs(\n        address[] calldata tco2s,\n        uint256[] calldata amounts\n    ) external {\n        uint256[] memory redeemedAmounts = IToucanPoolTest(_poolToken)\n            .redeemMany(tco2s, amounts);\n\n        uint256 feeRedeemPercentageInBase = IToucanPoolTest(_poolToken)\n            .feeRedeemPercentageInBase();\n        for (uint256 i = 0; i < redeemedAmounts.length; ++i) {\n            uint256 expectedAmount = amounts[i] -\n                ((amounts[i] * feeRedeemPercentageInBase) / 1e4);\n            require(\n                redeemedAmounts[i] == expectedAmount,\n                'Unexpected redeemed amount'\n            );\n        }\n    }\n\n    function testRedeemRetireAndMintCertificate(\n        address[] calldata tco2s,\n        uint256[] calldata amounts\n    ) external {\n        // for all tco2s and amounts we need to approve the pool to spend them\n        for (uint256 i = 0; i < tco2s.length; ++i) {\n            require(\n                IToucanCarbonOffsetsTest(tco2s[i]).approve(\n                    _poolToken,\n                    amounts[i]\n                )\n            );\n        }\n\n        // redeem and retire from the pool\n        //slither-disable-next-line unused-return\n        (uint256[] memory retirementIds, ) = IToucanPoolTest(_poolToken)\n            .redeemAndRetireMany(tco2s, amounts);\n\n        // mint certificate for the retirements we just did\n        uint256 tokenId = IRetirementCertificates(_retirementCertificates)\n            .mintCertificate(\n                address(this),\n                'Testing Contract',\n                msg.sender,\n                'Tester',\n                'Just testing',\n                retirementIds\n            );\n        IERC721(_retirementCertificates).safeTransferFrom(\n            address(this),\n            msg.sender,\n            tokenId\n        );\n    }\n\n    function testRedeemRetireAndMintCertificateN(\n        address[] calldata tco2s,\n        uint256[] calldata amounts\n    ) external {\n        // for all tco2s and amounts we need to approve the pool to spend them\n        for (uint256 i = 0; i < tco2s.length; ++i) {\n            require(\n                IToucanCarbonOffsetsTest(tco2s[i]).approve(\n                    _poolToken,\n                    amounts[i]\n                )\n            );\n        }\n\n        // redeem and retire from the pool\n        //slither-disable-next-line unused-return\n        (uint256[] memory retirementIds, ) = IToucanPoolTest(_poolToken)\n            .redeemAndRetireMany(tco2s, amounts);\n\n        // mint certificates for the retirements we just did\n        for (uint256 i = 0; i < retirementIds.length; ++i) {\n            uint256[] memory ids = new uint256[](1);\n            ids[0] = retirementIds[i];\n            uint256 tokenId = IRetirementCertificates(_retirementCertificates)\n                .mintCertificate(\n                    address(this),\n                    'Testing Contract',\n                    msg.sender,\n                    'Tester',\n                    'Just testing',\n                    ids\n                );\n            IERC721(_retirementCertificates).safeTransferFrom(\n                address(this),\n                msg.sender,\n                tokenId\n            );\n        }\n    }\n\n    // Implement the ERC721Receiver interface\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/testing/TestREDDCarbonOffset.sol": {
      "content": "// SPDX-FileCopyrightText: 2024 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC1155/ERC1155.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport {IEcoCarbonCredit} from '../pools/interfaces/IEcoCarbonCredit.sol';\n\ncontract TestREDDCarbonOffset is IEcoCarbonCredit, ERC1155, Ownable {\n    uint256 public immutable projectId;\n\n    constructor(uint256 _projectId) ERC1155('test') {\n        projectId = _projectId;\n\n        uint256 initialMintAmount = 100_000_000;\n        _mint(msg.sender, 1, initialMintAmount, '');\n        _mint(msg.sender, 2, initialMintAmount, '');\n    }\n}\n"
    },
    "contracts/testing/TestToken.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport {VintageData} from '../interfaces/IToucanCarbonOffsets.sol';\n\ncontract TestToken is ERC20, Ownable {\n    address public router;\n\n    event RouterUpdated(address router);\n\n    modifier onlyRouter() {\n        require(msg.sender == router, 'Only router can functionality');\n        _;\n    }\n\n    constructor() ERC20('TestToken', 'TT') {\n        uint256 initialMintAmount = 100_000_000;\n        _mint(msg.sender, initialMintAmount);\n    }\n\n    function setRouter(address _router) external onlyOwner {\n        require(_router != address(0), 'Router cannot be zero address');\n        router = _router;\n        emit RouterUpdated(router);\n    }\n\n    function bridgeBurn(address _account, uint256 _amount) external onlyRouter {\n        _burn(_account, _amount);\n    }\n\n    function bridgeMint(address _account, uint256 _amount) external onlyRouter {\n        _mint(_account, _amount);\n    }\n\n    function getVintageData() external returns (VintageData memory) {}\n}\n"
    },
    "contracts/token/ERC1155Allowable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n// This contract is based on the original work by enjin:\n// https://github.com/enjin/erc-1155/blob/master/contracts/ERC1155AllowanceWrapper.sol\n// The original work is licensed under the Apache License, Version 2.0\n// You may obtain a copy of the License at:\n// http://www.apache.org/licenses/LICENSE-2.0\n\n// SPDX-FileCopyrightText: 2024 Toucan Labs\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol';\n\n/// @title ERC1155Allowable\n/// @notice This contract is a wrapper around the ERC1155 contract to allow for\n/// specific allowances to be set for each token ID, expanding the ERC1155 standard\n/// which only allows for a global allowance to be set for all token IDs.\nabstract contract ERC1155Allowable is ERC1155Upgradeable {\n    // from => operator => token id => allowance\n    mapping(address => mapping(address => mapping(uint256 => uint256)))\n        public allowances;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 indexed id,\n        uint256 oldValue,\n        uint256 amount\n    );\n\n    /// @notice Approve an address to spend a specific amount of a Token\n    /// @param spender The address allowed to spend\n    /// @param id ID of the Token\n    /// @param currentAmount The current spending limit\n    /// @param amount The new spending limit\n    function approve(\n        address spender,\n        uint256 id,\n        uint256 currentAmount,\n        uint256 amount\n    ) external {\n        require(\n            allowances[_msgSender()][spender][id] == currentAmount,\n            'ERC1155Allowable: invalid current amount'\n        );\n        allowances[_msgSender()][spender][id] = amount;\n\n        emit Approval(_msgSender(), spender, id, currentAmount, amount);\n    }\n\n    /// @notice Transfer a single Token from one address to another. The caller\n    /// must be the owner, approved for all or have a sufficient allowance.\n    /// @param from Source address\n    /// @param to Target address\n    /// @param id ID of the Token\n    /// @param amount Transfer amount\n    /// @param data Additional data with no specified format\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        if (from != _msgSender() && !isApprovedForAll(from, _msgSender())) {\n            _decreaseAllowance(from, _msgSender(), id, amount);\n        }\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /// @notice Transfer a batch of Tokens from one address to another. The caller\n    /// must be the owner, approved for all or have sufficient allowances.\n    /// @param from Source address\n    /// @param to Target address\n    /// @param ids IDs of the Tokens\n    /// @param amounts Transfer amounts\n    /// @param data Additional data with no specified format\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        if (_msgSender() != from && !isApprovedForAll(from, _msgSender())) {\n            uint256 length = ids.length;\n            for (uint256 i = 0; i < length; ++i) {\n                _decreaseAllowance(from, _msgSender(), ids[i], amounts[i]);\n            }\n        }\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    function _decreaseAllowance(\n        address from,\n        address spender,\n        uint256 id,\n        uint256 amount\n    ) internal {\n        uint256 allowance = allowances[from][spender][id];\n        require(\n            allowance >= amount,\n            'ERC1155Allowable: caller has no sufficient allowance'\n        );\n        unchecked {\n            allowances[from][spender][id] = allowance - amount;\n        }\n    }\n}\n"
    },
    "contracts/ToucanCarbonOffsets.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport './bases/ToucanCarbonOffsetsDirectRetirements.sol';\nimport './bases/ToucanCarbonOffsetsWithBatchBase.sol';\n\n/// @notice Implementation contract of the TCO2 tokens (ERC20)\n/// These tokenized carbon offsets are specific to a vintage and its associated attributes\n/// In order to mint TCO2s a user must deposit a matching CarbonOffsetBatch\n/// @dev Each TCO2 contract is deployed via a Beacon Proxy in `ToucanCarbonOffsetsFactory`\ncontract ToucanCarbonOffsets is\n    ToucanCarbonOffsetsWithBatchBase,\n    ToucanCarbonOffsetsDirectRetirements\n{\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.6.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    // ----------------------------------------\n    //       Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        uint256 projectVintageTokenId_,\n        address contractRegistry_\n    ) external virtual initializer {\n        __ERC20_init_unchained(name_, symbol_);\n        _projectVintageTokenId = projectVintageTokenId_;\n        contractRegistry = contractRegistry_;\n    }\n\n    /// @dev function to achieve backwards compatibility\n    /// Converts retired amount to an event that can be attached to an NFT\n    function convertAmountToEvent()\n        internal\n        returns (uint256 retirementEventId)\n    {\n        uint256 amount = retiredAmount[msg.sender];\n        retiredAmount[msg.sender] = 0;\n\n        address certAddr = IToucanContractRegistry(contractRegistry)\n            .retirementCertificatesAddress();\n        retirementEventId = IRetirementCertificates(certAddr).registerEvent(\n            msg.sender,\n            _projectVintageTokenId,\n            amount,\n            true\n        );\n    }\n\n    /// @notice Mint an NFT showing how many tonnes of CO2 have been retired/cancelled\n    /// Going forward users should mint NFT directly in the RetirementCertificates contract.\n    /// @param retiringEntityString An identifiable string for the retiring entity, eg. their name.\n    /// @param beneficiary The beneficiary to set in the NFT.\n    /// @param beneficiaryString The beneficiaryString to set in the NFT.\n    /// @param retirementMessage The retirementMessage to set in the NFT.\n    function mintCertificateLegacy(\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage\n    ) external whenNotPaused {\n        uint256 retirementEventId = convertAmountToEvent();\n        uint256[] memory retirementEventIds = new uint256[](1);\n        retirementEventIds[0] = retirementEventId;\n\n        address certAddr = IToucanContractRegistry(contractRegistry)\n            .retirementCertificatesAddress();\n        //slither-disable-next-line unused-return\n        IRetirementCertificates(certAddr).mintCertificate(\n            msg.sender,\n            retiringEntityString,\n            beneficiary,\n            beneficiaryString,\n            retirementMessage,\n            retirementEventIds\n        );\n    }\n\n    function standardRegistry() public pure override returns (string memory) {\n        return 'verra';\n    }\n\n    function standardRegistryDecimals() public pure override returns (uint8) {\n        return 18;\n    }\n}\n"
    },
    "contracts/ToucanCarbonOffsetsEscrow.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\n\nimport './bases/RoleInitializer.sol';\nimport {Errors} from './libraries/Errors.sol';\nimport {SerialNumber, PuroSerialNumbers} from './libraries/PuroSerialNumbers.sol';\nimport {ICarbonOffsetBatches} from './interfaces/ICarbonOffsetBatches.sol';\nimport './interfaces/IToucanCarbonOffsets.sol';\nimport './interfaces/IToucanCarbonOffsetsEscrow.sol';\nimport './interfaces/IToucanContractRegistry.sol';\nimport {BatchStatus} from './CarbonOffsetBatchesTypes.sol';\nimport './ToucanCarbonOffsetsEscrowStorage.sol';\n\n/// @notice Contract for escrowing TCO2s during detokenization\n/// or retirement until the off-chain registry confirms the\n/// detokenization or retirement request.\ncontract ToucanCarbonOffsetsEscrow is\n    IToucanCarbonOffsetsEscrow,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    UUPSUpgradeable,\n    RoleInitializer,\n    ToucanCarbonOffsetsEscrowStorage\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using PuroSerialNumbers for *;\n\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.3.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    /// @dev All roles related to accessing this contract\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n\n    // ----------------------------------------\n    //              Events\n    // ----------------------------------------\n\n    event ContractRegistryUpdated(address contractRegistry);\n\n    // ----------------------------------------\n    //              Modifiers\n    // ----------------------------------------\n\n    modifier onlyTCO2() {\n        require(\n            IToucanContractRegistry(contractRegistry).isValidERC20(msg.sender),\n            'Not TCO2'\n        );\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    // ----------------------------------------\n    //       Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(\n        address _contractRegistry,\n        address[] calldata _accounts,\n        bytes32[] calldata _roles\n    ) external virtual initializer {\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n        __RoleInitializer_init_unchained(_accounts, _roles);\n\n        contractRegistry = _contractRegistry;\n        emit ContractRegistryUpdated(_contractRegistry);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ----------------------------------------\n    //           Admin functions\n    // ----------------------------------------\n\n    function pause() external onlyRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    function setToucanContractRegistry(address _address) external onlyOwner {\n        contractRegistry = _address;\n        emit ContractRegistryUpdated(_address);\n    }\n\n    // ----------------------------------------\n    //           Internal functions\n    // ----------------------------------------\n\n    /// @dev Check conditions for a detokenization or retirement request and update\n    /// batch statuses.\n    ///\n    /// The following conditions are checked:\n    /// - amount requested is greater than zero\n    /// - amount requested is equal to or less than the total amount of the batches\n    /// - if amount requested is strictly less than total amount, it must be smaller\n    ///   than the total amount of all the  batches except the last one\n    function _validateAndUpdateBatches(\n        uint256 amount,\n        uint256[] calldata tokenIds,\n        BatchStatus status\n    ) internal {\n        require(amount != 0, Errors.TCO2_BATCH_AMT_INVALID);\n        (\n            uint256 totalBatchAmount,\n            uint256 lastBatchAmount\n        ) = _updateBatchStatuses(tokenIds, status);\n\n        // Check that amount requested is equal to or less than the total amount of\n        // the batches.\n        if (amount > totalBatchAmount) revert(Errors.TCO2_BATCH_AMT_INVALID);\n        // If amount requested is less than total amount, it means we will split the\n        // last batch, and so we need the amount of the rest of the batches to be less\n        // than the amount requested. This should help mitigate grieving attacks where\n        // any user with a fraction of TCO2 can request to lock all batches for a TCO2.\n        // In case the amount requested is equal to the total amount, this check will\n        // always pass.\n        // NOTE: no-op in case there's only 1 batch in the request\n        if (totalBatchAmount - lastBatchAmount >= amount)\n            revert(Errors.TCO2_BATCH_AMT_INVALID);\n    }\n\n    function _updateBatchStatuses(\n        uint256[] memory tokenIds,\n        BatchStatus newStatus\n    ) internal returns (uint256 totalAmount, uint256 lastBatchAmount) {\n        address batchNFT = IToucanContractRegistry(contractRegistry)\n            .carbonOffsetBatchesAddress();\n        // Loop through batches in the request and set them to the batch status provided\n        // while keeping track of the total amount to transfer from the user\n        uint256 batchIdLength = tokenIds.length;\n        for (uint256 i = 0; i < batchIdLength; ++i) {\n            uint256 tokenId = tokenIds[i];\n            (, uint256 batchAmount, ) = _getNormalizedDataFromBatch(\n                batchNFT,\n                tokenId\n            );\n\n            // Update amounts to be returned\n            totalAmount += batchAmount;\n            lastBatchAmount = batchAmount;\n\n            // Transition batch status to updated status\n            ICarbonOffsetBatches(batchNFT)\n                .setStatusForDetokenizationOrRetirement(tokenId, newStatus);\n        }\n    }\n\n    // TODO: Move in the COB contract\n    function _getNormalizedDataFromBatch(address cob, uint256 tokenId)\n        internal\n        view\n        returns (\n            uint256,\n            uint256,\n            BatchStatus\n        )\n    {\n        (\n            uint256 vintageTokenId,\n            uint256 quantity,\n            BatchStatus status\n        ) = ICarbonOffsetBatches(cob).getBatchNFTData(tokenId);\n        return (vintageTokenId, quantity * 1e18, status);\n    }\n\n    /// @dev Check if splitting is required and split the last batch if so\n    function _splitIfNeeded(uint256 amount, uint256[] memory batchTokenIds)\n        internal\n        returns (uint256[] memory)\n    {\n        ICarbonOffsetBatches carbonOffsetBatches = ICarbonOffsetBatches(\n            IToucanContractRegistry(contractRegistry)\n                .carbonOffsetBatchesAddress()\n        );\n        (\n            uint256 totalBatchesAmount,\n            uint256 lastBatchAmount\n        ) = _getTotalBatchesAmount(carbonOffsetBatches, batchTokenIds);\n        uint256 normalizedAmount = amount / 1e18;\n        // if the amount requested is not equal to the total amount of TCO2 in the batches, we need to split the last\n        // batch\n        // NOTE: the batches are split according to normalized amounts, so if the amount requested is not a multiple of\n        // the TCO2 decimals, the batches retired will not match the amount of TCO2 burnt\n        if (totalBatchesAmount > normalizedAmount) {\n            uint256 surplus = totalBatchesAmount - normalizedAmount;\n            uint256 newTokenId = _executeSplit(\n                carbonOffsetBatches,\n                batchTokenIds[batchTokenIds.length - 1],\n                lastBatchAmount - surplus\n            );\n            batchTokenIds[batchTokenIds.length - 1] = newTokenId;\n        }\n\n        return batchTokenIds;\n    }\n\n    function _getTotalBatchesAmount(\n        ICarbonOffsetBatches carbonOffsetBatches,\n        uint256[] memory batchTokenIds\n    )\n        internal\n        view\n        returns (uint256 totalBatchesAmount, uint256 lastBatchAmount)\n    {\n        for (uint256 i = 0; i < batchTokenIds.length; ++i) {\n            //slither-disable-next-line unused-return\n            (, uint256 batchAmount, ) = carbonOffsetBatches.getBatchNFTData(\n                batchTokenIds[i]\n            );\n            totalBatchesAmount += batchAmount;\n            lastBatchAmount = batchAmount;\n        }\n    }\n\n    function _executeSplit(\n        ICarbonOffsetBatches carbonOffsetBatches,\n        uint256 tokenId,\n        uint256 balancingAmount\n    ) internal returns (uint256 newTokenId) {\n        string memory serialNumber = carbonOffsetBatches.getSerialNumber(\n            tokenId\n        );\n\n        // Determine the new serial numbers on the fly\n        (\n            string memory balancingSerialNumber,\n            string memory remainingSerialNumber\n        ) = splitSerialNumber(serialNumber, balancingAmount);\n\n        // Execute the split\n        newTokenId = carbonOffsetBatches.split(\n            tokenId,\n            remainingSerialNumber,\n            balancingSerialNumber,\n            balancingAmount\n        );\n\n        // Change the status of the existing batch with the remaining amount\n        // to Confirmed so it can be used by other requests in parallel that\n        // can be still serviced by the batch.\n        //\n        // Imagine the following scenario:\n        // 1. Frontend A selects a batch to use in its request\n        // 2. Client B selects the same batch to use in its request\n        // 3. Frontend A submits its request onchain\n        // 4. Client B submits its request onchain\n        //\n        // The scenario above will work because we set the batch that both\n        // clients selected back to Confirmed here and as long as the\n        // remaining amount in the batch is still big enough.\n        //\n        // Obviously, clients can still have race conditions if they can select\n        // multiple overlapping batches for which no batch splitting needs to\n        // be performed, eg., in a scenario where a TCO2 owns many small batches.\n        // We could mitigate race conditions in that case by defragmenting the\n        // batches.\n        carbonOffsetBatches.setStatusForDetokenizationOrRetirement(\n            tokenId,\n            BatchStatus.Confirmed\n        );\n    }\n\n    // ----------------------------------------\n    //           TCO2 functions\n    // ----------------------------------------\n\n    /// @notice Create a new detokenization request.\n    /// @dev Only a TCO2 contract can call this function.\n    /// Additionally, the escrow contract must have been\n    /// approved to transfer the amount of TCO2 to detokenize.\n    /// @param user The user that is requesting the detokenization.\n    /// @param amount The amount of TCO2 to detokenize.\n    /// @param batchTokenIds The ids of the batches to detokenize.\n    function createDetokenizationRequest(\n        address user,\n        uint256 amount,\n        uint256[] calldata batchTokenIds\n    ) external virtual override onlyTCO2 returns (uint256) {\n        // Bump request id\n        uint256 requestId = detokenizationRequestIdCounter;\n        unchecked {\n            ++requestId;\n        }\n        detokenizationRequestIdCounter = requestId;\n\n        // Validate the amount matches the batch quantities and update the batch statuses\n        _validateAndUpdateBatches(\n            amount,\n            batchTokenIds,\n            BatchStatus.DetokenizationRequested\n        );\n\n        // Split the last batch if needed\n        uint256[] memory updatedBatchTokenIds = _splitIfNeeded(\n            amount,\n            batchTokenIds\n        );\n\n        // Keep track of the project vintage token id\n        uint256 projectVintageTokenId = getProjectVintageTokenId(msg.sender);\n\n        // Store detokenization request data\n        _detokenizationRequests[requestId] = DetokenizationRequest(\n            user,\n            amount,\n            RequestStatus.Pending,\n            updatedBatchTokenIds,\n            projectVintageTokenId\n        );\n\n        // Transfer TCO2 from user to escrow contract\n        //slither-disable-next-line arbitrary-send-erc20\n        IERC20Upgradeable(msg.sender).safeTransferFrom(\n            user,\n            address(this),\n            amount\n        );\n\n        return requestId;\n    }\n\n    /// @notice Create a new retirement request.\n    /// @dev Only a TCO2 contract can call this function.\n    /// Additionally, the escrow contract must have been\n    /// approved to transfer the amount of TCO2 to retire.\n    /// @param user The user that is requesting the retirement.\n    /// @param params Retirement request params.\n    function createRetirementRequest(\n        address user,\n        CreateRetirementRequestParams calldata params\n    ) external virtual override onlyTCO2 returns (uint256 requestId) {\n        // Bump request id\n        requestId = retirementRequestIdCounter;\n        unchecked {\n            ++requestId;\n        }\n        retirementRequestIdCounter = requestId;\n\n        // Validate the amount matches the batch quantities and update the batch statuses\n        _validateAndUpdateBatches(\n            params.amount,\n            params.tokenIds,\n            BatchStatus.RetirementRequested\n        );\n\n        // Split the last batch if needed\n        uint256[] memory updatedBatchTokenIds = _splitIfNeeded(\n            params.amount,\n            params.tokenIds\n        );\n\n        // Keep track of the project vintage token id\n        uint256 projectVintageTokenId = getProjectVintageTokenId(msg.sender);\n\n        // Store retirement request data\n        _retirementRequests[requestId] = RetirementRequest(\n            user,\n            params.amount,\n            RequestStatus.Pending,\n            updatedBatchTokenIds,\n            params.retiringEntityString,\n            params.beneficiary,\n            params.beneficiaryString,\n            params.retirementMessage,\n            params.beneficiaryLocation,\n            params.consumptionCountryCode,\n            params.consumptionPeriodStart,\n            params.consumptionPeriodEnd,\n            projectVintageTokenId\n        );\n\n        // Transfer TCO2 from user to escrow contract\n        //slither-disable-next-line arbitrary-send-erc20\n        IERC20Upgradeable(msg.sender).safeTransferFrom(\n            user,\n            address(this),\n            params.amount\n        );\n\n        return requestId;\n    }\n\n    /// @notice Finalize a retirement request by calling\n    /// the retire and mint certificate function in respective\n    /// TCO2 Batch, which can only be invoked by the escrow\n    /// After retiring the amount of TCO2 is burned.\n    /// @dev Only the TCO2 contract can call this function.\n    /// @param requestId The id of the request to finalize.\n    function finalizeRetirementRequest(uint256 requestId)\n        external\n        virtual\n        override\n        onlyTCO2\n    {\n        RetirementRequest storage request = _retirementRequests[requestId];\n        require(request.status == RequestStatus.Pending, 'Not pending request');\n\n        request.status = RequestStatus.Finalized;\n\n        _updateBatchStatuses(\n            request.batchTokenIds,\n            BatchStatus.RetirementFinalized\n        );\n\n        CreateRetirementRequestParams\n            memory params = CreateRetirementRequestParams({\n                tokenIds: request.batchTokenIds,\n                amount: request.amount,\n                retiringEntityString: request.retiringEntityString,\n                beneficiary: request.beneficiary,\n                beneficiaryString: request.beneficiaryString,\n                retirementMessage: request.retirementMessage,\n                beneficiaryLocation: request.beneficiaryLocation,\n                consumptionCountryCode: request.consumptionCountryCode,\n                consumptionPeriodStart: request.consumptionPeriodStart,\n                consumptionPeriodEnd: request.consumptionPeriodEnd\n            });\n        IToucanCarbonOffsets(msg.sender).retireAndMintCertificateForEntity(\n            request.user,\n            params\n        );\n    }\n\n    /// @notice Finalize a detokenization request by burning\n    /// its amount of TCO2.\n    /// @dev Only the TCO2 contract can call this function.\n    /// @param requestId The id of the request to finalize.\n    function finalizeDetokenizationRequest(uint256 requestId)\n        external\n        virtual\n        override\n        onlyTCO2\n    {\n        DetokenizationRequest storage request = _detokenizationRequests[\n            requestId\n        ];\n        require(request.status == RequestStatus.Pending, 'Not pending request');\n\n        request.status = RequestStatus.Finalized;\n\n        _updateBatchStatuses(\n            request.batchTokenIds,\n            BatchStatus.DetokenizationFinalized\n        );\n\n        uint256 amount = request.amount;\n        IERC20Upgradeable(msg.sender).safeApprove(address(this), amount);\n        IToucanCarbonOffsets(msg.sender).burnFrom(address(this), amount);\n    }\n\n    /// @notice Revert a retirement request by transfering amount of TCO2\n    /// back to the user.\n    /// @dev Only the TCO2 contract can call this function.\n    /// @param requestId The id of the request to revert.\n    function revertRetirementRequest(uint256 requestId)\n        external\n        virtual\n        override\n        onlyTCO2\n    {\n        RetirementRequest storage request = _retirementRequests[requestId];\n        require(request.status == RequestStatus.Pending, 'Not pending request');\n\n        request.status = RequestStatus.Reverted;\n\n        _updateBatchStatuses(request.batchTokenIds, BatchStatus.Confirmed);\n\n        IERC20Upgradeable(msg.sender).safeTransfer(\n            request.user,\n            request.amount\n        );\n    }\n\n    /// @notice Revert a detokenization request by transfering amount of TCO2\n    /// back to the user.\n    /// @dev Only the TCO2 contract can call this function.\n    /// @param requestId The id of the request to revert.\n    function revertDetokenizationRequest(uint256 requestId)\n        external\n        virtual\n        override\n        onlyTCO2\n    {\n        DetokenizationRequest storage request = _detokenizationRequests[\n            requestId\n        ];\n        require(request.status == RequestStatus.Pending, 'Not pending request');\n\n        request.status = RequestStatus.Reverted;\n\n        _updateBatchStatuses(request.batchTokenIds, BatchStatus.Confirmed);\n\n        IERC20Upgradeable(msg.sender).safeTransfer(\n            request.user,\n            request.amount\n        );\n    }\n\n    // ----------------------------------------\n    //           Read-only functions\n    // ----------------------------------------\n\n    /// @notice Split a serial number range into two parts based on\n    /// the given amount.\n    /// @param serialNumber The serial number to split.\n    /// @param amount The amount to split by.\n    /// @return balancingSerialNumber remainingSerialNumber The serial\n    /// numbers split from the original serial number.\n    function splitSerialNumber(string memory serialNumber, uint256 amount)\n        public\n        pure\n        returns (\n            string memory balancingSerialNumber,\n            string memory remainingSerialNumber\n        )\n    {\n        SerialNumber memory typedSerialNumber = serialNumber\n            .parseSerialNumber();\n        (balancingSerialNumber, remainingSerialNumber) = typedSerialNumber\n            .splitSerialNumber(amount);\n    }\n\n    function getProjectVintageTokenId(address tco2)\n        internal\n        view\n        returns (uint256)\n    {\n        return IToucanCarbonOffsets(tco2).projectVintageTokenId();\n    }\n\n    function detokenizationRequests(uint256 requestId)\n        external\n        view\n        virtual\n        override\n        returns (DetokenizationRequest memory)\n    {\n        return _detokenizationRequests[requestId];\n    }\n\n    function retirementRequests(uint256 requestId)\n        external\n        view\n        virtual\n        override\n        returns (RetirementRequest memory)\n    {\n        return _retirementRequests[requestId];\n    }\n}\n"
    },
    "contracts/ToucanCarbonOffsetsEscrowStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport {DetokenizationRequest, RetirementRequest} from './ToucanCarbonOffsetsEscrowTypes.sol';\n\nabstract contract ToucanCarbonOffsetsEscrowStorageV1 {\n    address public contractRegistry;\n    // Monotonically increasing request id counter\n    uint256 public detokenizationRequestIdCounter;\n    // Request id to request data\n    mapping(uint256 => DetokenizationRequest) internal _detokenizationRequests;\n    // Retirement request id counter\n    uint256 public retirementRequestIdCounter;\n    // Request id to request data\n    mapping(uint256 => RetirementRequest) internal _retirementRequests;\n}\n\nabstract contract ToucanCarbonOffsetsEscrowStorage is\n    ToucanCarbonOffsetsEscrowStorageV1\n{}\n"
    },
    "contracts/ToucanCarbonOffsetsEscrowTypes.sol": {
      "content": "// SPDX-FileCopyrightText: 2023 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nstruct DetokenizationRequest {\n    address user;\n    uint256 amount;\n    RequestStatus status;\n    // The request may optionally be associated with one or more batches.\n    uint256[] batchTokenIds;\n    uint256 projectVintageTokenId;\n}\n\nstruct RetirementRequest {\n    address user;\n    uint256 amount;\n    RequestStatus status;\n    // The request may optionally be associated with one or more batches.\n    // This may need to be limited to one batch for registries which don't\n    // support atomic retirement of multiple batches in one go, since\n    // retiring one batch at a time might create a situation where our\n    // RetirementRequest is only partially fulfilled, and then we would be\n    // stuck with no way forwards and no way to roll back.\n    uint256[] batchTokenIds;\n    // Optional\n    string retiringEntityString;\n    // Optional\n    address beneficiary;\n    // Optional\n    string beneficiaryString;\n    // Optional\n    string retirementMessage;\n    // Optional\n    string beneficiaryLocation;\n    // Optional\n    string consumptionCountryCode;\n    // Optional\n    uint256 consumptionPeriodStart;\n    // Optional\n    uint256 consumptionPeriodEnd;\n    uint256 projectVintageTokenId;\n}\n\nenum RequestStatus {\n    Pending,\n    Finalized,\n    Reverted\n}\n"
    },
    "contracts/ToucanCarbonOffsetsFactory.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\n// ============ External Imports ============\nimport './bases/ToucanCarbonOffsetsFactoryBase.sol';\n\n/// @notice This TCO2 factory creates project-vintage-specific ERC20 contracts for Batch-NFT fractionalization\n/// Locks in received ERC721 Batch-NFTs and can mint corresponding quantity of ERC20s\n/// Permissionless, anyone can deploy new ERC20s unless they do not yet exist and pid exists\ncontract ToucanCarbonOffsetsFactory is ToucanCarbonOffsetsFactoryBase {\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.3.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(\n        address _contractRegistry,\n        address[] calldata _accounts,\n        bytes32[] calldata _roles\n    ) external virtual initializer {\n        __ToucanCarbonOffsetsFactoryBase_init(_accounts, _roles);\n\n        contractRegistry = _contractRegistry;\n    }\n\n    function setAdmin(address _user) external onlyOwner {\n        grantRole(DEFAULT_ADMIN_ROLE, _user);\n    }\n\n    function standardRegistry() public pure override returns (string memory) {\n        return 'verra';\n    }\n\n    function supportedStandards()\n        public\n        pure\n        override\n        returns (string[] memory)\n    {\n        string[] memory standards = new string[](1);\n        standards[0] = 'VCS';\n        return standards;\n    }\n}\n"
    },
    "contracts/ToucanCarbonOffsetsFactoryStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity 0.8.14;\n\n/// @dev V1 Storage contract for ToucanCarbonOffsetsFactory v.1.0\nabstract contract ToucanCarbonOffsetsFactoryStorageV1 {\n    address public contractRegistry;\n    address[] public deployedContracts;\n    mapping(uint256 => address) public pvIdtoERC20;\n}\n\n/// @dev V2 Storage contract for ToucanCarbonOffsetsFactory v.1.1\nabstract contract ToucanCarbonOffsetsFactoryStorageV2 {\n    address public beacon;\n\n    address public bridgeFeeReceiver;\n    uint256 public bridgeFeePercentageInBase;\n    address public bridgeFeeBurnAddress;\n    uint256 public bridgeFeeBurnPercentageInBase;\n    //slither-disable-next-line constable-states\n    uint256 private DEPRECATED_TotalRetired;\n}\n\n/// @dev V3 Storage contract for ToucanCarbonOffsetsFactory v.1.2\nabstract contract ToucanCarbonOffsetsFactoryStorageV3 {\n    /// @notice meant to be used only for cross-chain bridging\n    mapping(address => bool) public allowedBridges;\n}\n\n/// @dev Main storage contract inheriting new versions\n/// @dev V1 is not inherited as it was inherited in the main contract\nabstract contract ToucanCarbonOffsetsFactoryStorage is\n    ToucanCarbonOffsetsFactoryStorageV2,\n    ToucanCarbonOffsetsFactoryStorageV3\n{\n    /// @dev add a storage gap so future upgrades can introduce new variables\n    /// This is also allows for other dependencies to be inherited after this one\n    uint256[44] private __gap;\n}\n"
    },
    "contracts/ToucanCarbonOffsetsStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity 0.8.14;\n\n/// @dev Separate storage contract to improve upgrade safety\nabstract contract ToucanCarbonOffsetsStorage {\n    uint256 internal _projectVintageTokenId;\n    address public contractRegistry;\n\n    mapping(address => uint256) public minterToId;\n    /// @dev deprecated field; retirements are now tracked\n    /// as events in the RetirementCertificatesStorage contract\n    mapping(address => uint256) internal retiredAmount;\n}\n"
    },
    "contracts/ToucanContractRegistry.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\n\nimport './bases/RoleInitializer.sol';\nimport './interfaces/IPausable.sol';\nimport './interfaces/IToucanCarbonOffsetsFactory.sol';\nimport './interfaces/IToucanContractRegistry.sol';\nimport './libraries/Strings.sol';\nimport './ToucanContractRegistryStorage.sol';\n\n/// @dev The ToucanContractRegistry is queried by other contracts for current addresses\ncontract ToucanContractRegistry is\n    ToucanContractRegistryStorageLegacy,\n    OwnableUpgradeable,\n    RoleInitializer,\n    IToucanContractRegistry,\n    UUPSUpgradeable,\n    ToucanContractRegistryStorage\n{\n    using Strings for string;\n\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev Version-related parameters. VERSION keeps track of production\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\n    /// of a VERSION in our staging environment.\n    string public constant VERSION = '1.3.0';\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 2;\n\n    /// @dev All roles related to accessing this contract\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event TCO2FactoryAdded(address indexed factory, string indexed standard);\n\n    // ----------------------------------------\n    //      Modifiers\n    // ----------------------------------------\n\n    modifier onlyBy(address _factory, address _owner) {\n        require(\n            _factory == msg.sender || _owner == msg.sender,\n            'Caller is not the factory'\n        );\n        _;\n    }\n\n    /// @dev modifier that only lets the contract's owner and granted pausers pause the system\n    modifier onlyPausers() {\n        require(\n            hasRole(PAUSER_ROLE, msg.sender) || owner() == msg.sender,\n            'Caller is not authorized'\n        );\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @notice security function that pauses all contracts part of the carbon bridge\n    function pauseSystem() external onlyPausers {\n        IPausable cpv = IPausable(_carbonProjectVintagesAddress);\n        if (!cpv.paused()) cpv.pause();\n\n        IPausable cp = IPausable(_carbonProjectsAddress);\n        if (!cp.paused()) cp.pause();\n\n        IPausable cob = IPausable(_carbonOffsetBatchesAddress);\n        if (!cob.paused()) cob.pause();\n\n        uint256 standardRegistriesLen = standardRegistries.length;\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < standardRegistriesLen; ) {\n            string memory standardRegistry = standardRegistries[i];\n            address factory = toucanCarbonOffsetFactories[standardRegistry];\n\n            IPausable tcof = IPausable(factory);\n            if (!tcof.paused()) tcof.pause();\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice security function that unpauses all contracts part of the carbon bridge\n    function unpauseSystem() external onlyOwner {\n        IPausable cpv = IPausable(_carbonProjectVintagesAddress);\n        if (cpv.paused()) cpv.unpause();\n\n        IPausable cp = IPausable(_carbonProjectsAddress);\n        if (cp.paused()) cp.unpause();\n\n        IPausable cob = IPausable(_carbonOffsetBatchesAddress);\n        if (cob.paused()) cob.unpause();\n\n        uint256 standardRegistriesLen = standardRegistries.length;\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < standardRegistriesLen; ) {\n            string memory standardRegistry = standardRegistries[i];\n            address factory = toucanCarbonOffsetFactories[standardRegistry];\n\n            IPausable tcof = IPausable(factory);\n            if (tcof.paused()) tcof.unpause();\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(address[] calldata _accounts, bytes32[] calldata _roles)\n        external\n        virtual\n        initializer\n    {\n        __Ownable_init();\n        __RoleInitializer_init_unchained(_accounts, _roles);\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ----------------------------------------\n    //              Setters\n    // ----------------------------------------\n    function setCarbonOffsetBatchesAddress(address _address)\n        external\n        onlyOwner\n    {\n        require(_address != address(0), 'Zero address');\n        _carbonOffsetBatchesAddress = _address;\n    }\n\n    function setCarbonProjectsAddress(address _address) external onlyOwner {\n        require(_address != address(0), 'Zero address');\n        _carbonProjectsAddress = _address;\n    }\n\n    function setCarbonProjectVintagesAddress(address _address)\n        external\n        onlyOwner\n    {\n        require(_address != address(0), 'Zero address');\n        _carbonProjectVintagesAddress = _address;\n    }\n\n    function setToucanCarbonOffsetsFactoryAddress(address tco2Factory)\n        external\n        onlyOwner\n    {\n        require(tco2Factory != address(0), 'Zero address');\n\n        // Get the standard registry from the factory\n        string memory standardRegistry = IToucanCarbonOffsetsFactory(\n            tco2Factory\n        ).standardRegistry();\n        require(bytes(standardRegistry).length != 0, 'Empty standard registry');\n\n        if (!standardRegistryExists(standardRegistry)) {\n            standardRegistries.push(standardRegistry);\n        }\n        toucanCarbonOffsetFactories[standardRegistry] = tco2Factory;\n\n        emit TCO2FactoryAdded(tco2Factory, standardRegistry);\n    }\n\n    function standardRegistryExists(string memory standard)\n        private\n        view\n        returns (bool)\n    {\n        uint256 standardRegistriesLen = standardRegistries.length;\n        //slither-disable-next-line uninitialized-local\n        for (uint256 i; i < standardRegistriesLen; ) {\n            if (standardRegistries[i].equals(standard)) {\n                return true;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n        return false;\n    }\n\n    function setToucanCarbonOffsetsEscrowAddress(address _address)\n        external\n        onlyOwner\n    {\n        require(_address != address(0), 'Zero address');\n        _toucanCarbonOffsetsEscrowAddress = _address;\n    }\n\n    function setRetirementCertificatesAddress(address _address)\n        external\n        onlyOwner\n    {\n        require(_address != address(0), 'Zero address');\n        _retirementCertificatesAddress = _address;\n    }\n\n    function setRetirementCertificateFractionalizerAddress(address _address)\n        external\n        onlyOwner\n    {\n        require(_address != address(0), 'Zero address');\n        _retirementCertificateFractionalizerAddress = _address;\n    }\n\n    function setRetirementCertificateFractionsAddress(address _address)\n        external\n        onlyOwner\n    {\n        require(_address != address(0), 'Zero address');\n        _retirementCertificateFractionsAddress = _address;\n    }\n\n    /// @notice Keep track of TCO2s per standard\n    function addERC20(address erc20, string calldata standardRegistry)\n        external\n        onlyBy(toucanCarbonOffsetFactories[standardRegistry], owner())\n    {\n        projectVintageERC20Registry[erc20] = true;\n    }\n\n    // ----------------------------------------\n    //              Getters\n    // ----------------------------------------\n\n    function carbonOffsetBatchesAddress()\n        external\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return _carbonOffsetBatchesAddress;\n    }\n\n    function carbonProjectsAddress()\n        external\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return _carbonProjectsAddress;\n    }\n\n    function carbonProjectVintagesAddress()\n        external\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return _carbonProjectVintagesAddress;\n    }\n\n    /// @dev return the TCO2 factory address for the provided standard\n    function toucanCarbonOffsetsFactoryAddress(string memory standardRegistry)\n        external\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return toucanCarbonOffsetFactories[standardRegistry];\n    }\n\n    function toucanCarbonOffsetsEscrowAddress()\n        external\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return _toucanCarbonOffsetsEscrowAddress;\n    }\n\n    function retirementCertificatesAddress()\n        external\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return _retirementCertificatesAddress;\n    }\n\n    function retirementCertificateFractionalizerAddress()\n        external\n        view\n        virtual\n        returns (address)\n    {\n        return _retirementCertificateFractionalizerAddress;\n    }\n\n    function retirementCertificateFractionsAddress()\n        external\n        view\n        virtual\n        returns (address)\n    {\n        return _retirementCertificateFractionsAddress;\n    }\n\n    /// TODO: Kept for backwards-compatibility; will be removed in a future\n    /// upgrade in favor of isValidERC20(erc20)\n    function checkERC20(address erc20) external view virtual returns (bool) {\n        return projectVintageERC20Registry[erc20];\n    }\n\n    function isValidERC20(address erc20)\n        external\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return projectVintageERC20Registry[erc20];\n    }\n\n    function supportedStandardRegistries()\n        external\n        view\n        returns (string[] memory)\n    {\n        return standardRegistries;\n    }\n}\n"
    },
    "contracts/ToucanContractRegistryStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity 0.8.14;\n\nabstract contract ToucanContractRegistryStorageLegacy {\n    address internal _carbonOffsetBatchesAddress;\n    address internal _carbonProjectsAddress;\n    address internal _carbonProjectVintagesAddress;\n    // Deprecated in favor of toucanCarbonOffsetFactories\n    //slither-disable-next-line uninitialized-state,constable-states\n    address internal DEPRECATED_toucanCarbonOffsetsFactoryAddress;\n    address internal _retirementCertificatesAddress;\n    mapping(address => bool) public projectVintageERC20Registry;\n}\n\nabstract contract ToucanContractRegistryStorageV1 {\n    /// @notice map of standard registries to tco2 factory addresses\n    mapping(string => address) public toucanCarbonOffsetFactories;\n    /// @dev make it easy to get the supported standard registries\n    string[] internal standardRegistries;\n}\n\nabstract contract ToucanContractRegistryStorageV2 {\n    address internal _toucanCarbonOffsetsEscrowAddress;\n}\n\nabstract contract ToucanContractRegistryStorageV3 {\n    address internal _retirementCertificateFractionalizerAddress;\n    address internal _retirementCertificateFractionsAddress;\n}\n\nabstract contract ToucanContractRegistryStorage is\n    ToucanContractRegistryStorageV1,\n    ToucanContractRegistryStorageV2,\n    ToucanContractRegistryStorageV3\n{}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}