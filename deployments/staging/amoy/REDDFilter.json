{
  "address": "0x914F0C325553947b4200506959b59F2bd98e4786",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "methodology",
          "type": "string"
        }
      ],
      "name": "AttributeMethodologyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "methodology",
          "type": "string"
        }
      ],
      "name": "AttributeMethodologyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "region",
          "type": "string"
        }
      ],
      "name": "AttributeRegionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "region",
          "type": "string"
        }
      ],
      "name": "AttributeRegionRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "standard",
          "type": "string"
        }
      ],
      "name": "AttributeStandardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "standard",
          "type": "string"
        }
      ],
      "name": "AttributeStandardRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20addr",
          "type": "address"
        }
      ],
      "name": "ExternalAddressAllowlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20addr",
          "type": "address"
        }
      ],
      "name": "ExternalAddressRemovedFromAllowlist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ExternalERC1155TokenAllowlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ExternalERC1155TokenRemovedFromAllowlist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20addr",
          "type": "address"
        }
      ],
      "name": "InternalAddressAllowlisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20addr",
          "type": "address"
        }
      ],
      "name": "InternalAddressBlocklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20addr",
          "type": "address"
        }
      ],
      "name": "InternalAddressRemovedFromAllowlist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20addr",
          "type": "address"
        }
      ],
      "name": "InternalAddressRemovedFromBlocklist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "mappingName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        }
      ],
      "name": "MappingSwitched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumVintageStartTime",
          "type": "uint256"
        }
      ],
      "name": "MinimumVintageStartTimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "ToucanRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_RELEASE_CANDIDATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "addToList",
          "type": "bool"
        },
        {
          "internalType": "string[]",
          "name": "_regions",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_standards",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_methodologies",
          "type": "string[]"
        }
      ],
      "name": "addAttributes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc20Addr",
          "type": "address[]"
        }
      ],
      "name": "addToExternalAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "addToExternalERC1155Allowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc20Addr",
          "type": "address[]"
        }
      ],
      "name": "addToInternalAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc20Addr",
          "type": "address[]"
        }
      ],
      "name": "addToInternalBlocklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Addr",
          "type": "address"
        }
      ],
      "name": "checkAttributeMatching",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "checkERC1155Eligible",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Addr",
          "type": "address"
        }
      ],
      "name": "checkEligible",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "externalAllowlist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "externalERC1155Allowlist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "roles",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "internalAllowlist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "internalBlocklist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "methodologies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "methodologiesIsAcceptedMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumVintageStartTime",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "regions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "regionsIsAcceptedMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc20Addr",
          "type": "address[]"
        }
      ],
      "name": "removeFromExternalAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "removeFromExternalERC1155Allowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc20Addr",
          "type": "address[]"
        }
      ],
      "name": "removeFromInternalAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "erc20Addr",
          "type": "address[]"
        }
      ],
      "name": "removeFromInternalBlocklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_minimumVintageStartTime",
          "type": "uint64"
        }
      ],
      "name": "setMinimumVintageStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setToucanContractRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "standards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "standardsIsAcceptedMapping",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_mappingName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        }
      ],
      "name": "switchMapping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "687537be65231256f5c3e880214d0213",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodology\",\"type\":\"string\"}],\"name\":\"AttributeMethodologyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"methodology\",\"type\":\"string\"}],\"name\":\"AttributeMethodologyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"AttributeRegionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"}],\"name\":\"AttributeRegionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"standard\",\"type\":\"string\"}],\"name\":\"AttributeStandardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"standard\",\"type\":\"string\"}],\"name\":\"AttributeStandardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20addr\",\"type\":\"address\"}],\"name\":\"ExternalAddressAllowlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20addr\",\"type\":\"address\"}],\"name\":\"ExternalAddressRemovedFromAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ExternalERC1155TokenAllowlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ExternalERC1155TokenRemovedFromAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20addr\",\"type\":\"address\"}],\"name\":\"InternalAddressAllowlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20addr\",\"type\":\"address\"}],\"name\":\"InternalAddressBlocklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20addr\",\"type\":\"address\"}],\"name\":\"InternalAddressRemovedFromAllowlist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20addr\",\"type\":\"address\"}],\"name\":\"InternalAddressRemovedFromBlocklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mappingName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"MappingSwitched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumVintageStartTime\",\"type\":\"uint256\"}],\"name\":\"MinimumVintageStartTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"ToucanRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_RELEASE_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"addToList\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"_regions\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_standards\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_methodologies\",\"type\":\"string[]\"}],\"name\":\"addAttributes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addr\",\"type\":\"address[]\"}],\"name\":\"addToExternalAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"addToExternalERC1155Allowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addr\",\"type\":\"address[]\"}],\"name\":\"addToInternalAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addr\",\"type\":\"address[]\"}],\"name\":\"addToInternalBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"}],\"name\":\"checkAttributeMatching\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"checkERC1155Eligible\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"}],\"name\":\"checkEligible\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"externalAllowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"externalERC1155Allowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"roles\",\"type\":\"bytes32[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"internalAllowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"internalBlocklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"methodologies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"methodologiesIsAcceptedMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumVintageStartTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"regions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regionsIsAcceptedMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addr\",\"type\":\"address[]\"}],\"name\":\"removeFromExternalAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"removeFromExternalERC1155Allowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addr\",\"type\":\"address[]\"}],\"name\":\"removeFromInternalAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"erc20Addr\",\"type\":\"address[]\"}],\"name\":\"removeFromInternalBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_minimumVintageStartTime\",\"type\":\"uint64\"}],\"name\":\"setMinimumVintageStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setToucanContractRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"standards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardsIsAcceptedMapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_mappingName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"}],\"name\":\"switchMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAttributes(bool,string[],string[],string[])\":{\"params\":{\"addToList\":\"determines whether attribute should be added or removed Other params are arrays of attributes to be added\"}},\"addToExternalAllowlist(address[])\":{\"params\":{\"erc20Addr\":\"accepts an array of contract addresses\"}},\"addToExternalERC1155Allowlist(address[],uint256[])\":{\"details\":\"Both arrays must be of the same length. Each token address is associated with the token ID at the same index.\",\"params\":{\"tokenAddresses\":\"An array of contract addresses\",\"tokenIds\":\"An array of token IDs\"}},\"addToInternalAllowlist(address[])\":{\"params\":{\"erc20Addr\":\"accepts an array of contract addresses\"}},\"addToInternalBlocklist(address[])\":{\"params\":{\"erc20Addr\":\"accepts an array of contract addresses\"}},\"checkAttributeMatching(address)\":{\"params\":{\"erc20Addr\":\"The ERC20 token\"},\"returns\":{\"_0\":\"String with error code if any error occurs, else empty string\"}},\"checkERC1155Eligible(address,uint256)\":{\"params\":{\"tokenAddress\":\"address of the ERC1155 token\",\"tokenId\":\"ID of the ERC1155 token\"},\"returns\":{\"_0\":\"String with error code if any error occurs, else empty string\"}},\"checkEligible(address)\":{\"params\":{\"erc20Addr\":\"The ERC20 token\"},\"returns\":{\"_0\":\"String with error code if any error occurs, else empty string\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"removeFromExternalAllowlist(address[])\":{\"params\":{\"erc20Addr\":\"accepts an array of contract addresses\"}},\"removeFromExternalERC1155Allowlist(address[],uint256[])\":{\"details\":\"Both arrays must be of the same length. Each token address is associated with the token ID at the same index.\",\"params\":{\"tokenAddresses\":\"An array of contract addresses\",\"tokenIds\":\"An array of token IDs\"}},\"removeFromInternalAllowlist(address[])\":{\"params\":{\"erc20Addr\":\"accepts an array of contract addressesc\"}},\"removeFromInternalBlocklist(address[])\":{\"params\":{\"erc20Addr\":\"accepts an array of contract addresses\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setMinimumVintageStartTime(uint64)\":{\"params\":{\"_minimumVintageStartTime\":\"unix time format\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"switchMapping(string,bool)\":{\"params\":{\"_mappingName\":\"attribute mapping of project-vintage data\",\"accepted\":\"determines if mapping works as a blocklist or allowlist\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAttributes(bool,string[],string[],string[])\":{\"notice\":\"Function to add attributes for filtering (does not support complex AttributeSets)\"},\"addToExternalAllowlist(address[])\":{\"notice\":\"Function to allowlist selected external non-TCO2 contracts by their address\"},\"addToExternalERC1155Allowlist(address[],uint256[])\":{\"notice\":\"Add ERC-1155 tokens to external allowlist\"},\"addToInternalAllowlist(address[])\":{\"notice\":\"Function to allowlist certain TCO2 contracts by their address\"},\"addToInternalBlocklist(address[])\":{\"notice\":\"Function to blocklist certain TCO2 contracts by their address\"},\"checkAttributeMatching(address)\":{\"notice\":\"Checks whether incoming ERC20s match the accepted criteria/attributes\"},\"checkERC1155Eligible(address,uint256)\":{\"notice\":\"Checks if an ERC-1155 token is eligible for this pool\"},\"checkEligible(address)\":{\"notice\":\"Checks if an ERC20 token is eligible for this pool\"},\"removeFromExternalAllowlist(address[])\":{\"notice\":\"Function to remove ERC20 addresses from external allowlist\"},\"removeFromExternalERC1155Allowlist(address[],uint256[])\":{\"notice\":\"Remove ERC-1155 tokens from external allowlist\"},\"removeFromInternalAllowlist(address[])\":{\"notice\":\"Function to remove TCO2 addresses from internal allowlist\"},\"removeFromInternalBlocklist(address[])\":{\"notice\":\"Function to remove TCO2 addresses from internal blocklist\"},\"setMinimumVintageStartTime(uint64)\":{\"notice\":\"Determines the minimum vintage start time acceptance criteria of ERC20s\"},\"switchMapping(string,bool)\":{\"notice\":\"Generic function to switch attributes mappings into either acceptance or rejection criteria\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/REDDFilter.sol\":\"REDDFilter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/CarbonProjectTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\n/// @dev CarbonProject related data and attributes\\nstruct ProjectData {\\n    string projectId;\\n    string standard;\\n    string methodology;\\n    string region;\\n    string storageMethod;\\n    string method;\\n    string emissionType;\\n    string category;\\n    string uri;\\n    address beneficiary;\\n}\\n\",\"keccak256\":\"0x01ef59ad96e26a2ab791ba600413c5a4bde90c66535b30f322a1a01407be6879\",\"license\":\"UNLICENSED\"},\"contracts/CarbonProjectVintageTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct VintageData {\\n    /// @dev A human-readable string which differentiates this from other vintages in\\n    /// the same project, and helps build the corresponding TCO2 name and symbol.\\n    string name;\\n    uint64 startTime; // UNIX timestamp\\n    uint64 endTime; // UNIX timestamp\\n    uint256 projectTokenId;\\n    uint64 totalVintageQuantity;\\n    bool isCorsiaCompliant;\\n    bool isCCPcompliant;\\n    string coBenefits;\\n    string correspAdjustment;\\n    string additionalCertification;\\n    string uri;\\n    string registry;\\n}\\n\",\"keccak256\":\"0x5be4a7578aa12ae4d9e06e53672c46198c5c0c524065cec87fbc8cb1826619f6\",\"license\":\"UNLICENSED\"},\"contracts/bases/RoleInitializer.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\nabstract contract RoleInitializer is AccessControlUpgradeable {\\n    function __RoleInitializer_init_unchained(\\n        address[] calldata accounts,\\n        bytes32[] calldata roles\\n    ) internal {\\n        require(accounts.length == roles.length, 'Array length mismatch');\\n\\n        __AccessControl_init_unchained();\\n\\n        bool hasDefaultAdmin = false;\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            _grantRole(roles[i], accounts[i]);\\n            if (roles[i] == DEFAULT_ADMIN_ROLE) hasDefaultAdmin = true;\\n        }\\n        require(hasDefaultAdmin, 'No admin specified');\\n    }\\n}\\n\",\"keccak256\":\"0x72276b98471db1c8cfe18d4a1244c3986514c8b8d72e578517daae4973fd8b06\",\"license\":\"UNLICENSED\"},\"contracts/bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct CreateRetirementRequestParams {\\n    uint256[] tokenIds;\\n    uint256 amount;\\n    string retiringEntityString;\\n    address beneficiary;\\n    string beneficiaryString;\\n    string retirementMessage;\\n    string beneficiaryLocation;\\n    string consumptionCountryCode;\\n    uint256 consumptionPeriodStart;\\n    uint256 consumptionPeriodEnd;\\n}\\n\",\"keccak256\":\"0xc7702b775ffda42d217c4671b846d93f691f8271cae9537dbd2b15930dbe582e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanCarbonOffsets.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {VintageData} from '../CarbonProjectVintageTypes.sol';\\nimport {ProjectData} from '../CarbonProjectTypes.sol';\\nimport {CreateRetirementRequestParams} from '../bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol';\\n\\ninterface IToucanCarbonOffsets {\\n    function retireFrom(address account, uint256 amount)\\n        external\\n        returns (uint256 retirementEventId);\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function getAttributes()\\n        external\\n        view\\n        returns (ProjectData memory, VintageData memory);\\n\\n    /// @notice Get the vintage data of the TCO2\\n    function getVintageData()\\n        external\\n        view\\n        returns (VintageData memory vintageData);\\n\\n    function standardRegistry() external view returns (string memory);\\n\\n    function retireAndMintCertificate(\\n        string calldata retiringEntityString,\\n        address beneficiary,\\n        string calldata beneficiaryString,\\n        string calldata retirementMessage,\\n        uint256 amount\\n    ) external;\\n\\n    function retireAndMintCertificateForEntity(\\n        address retiringEntity,\\n        CreateRetirementRequestParams calldata params\\n    ) external;\\n\\n    function projectVintageTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2aa8807a01eefdff9a79985ffad737b324f6fc59e4c416b3124a315d055a3b6e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanContractRegistry.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IToucanContractRegistry {\\n    function carbonOffsetBatchesAddress() external view returns (address);\\n\\n    function carbonProjectsAddress() external view returns (address);\\n\\n    function carbonProjectVintagesAddress() external view returns (address);\\n\\n    function toucanCarbonOffsetsFactoryAddress(string memory standardRegistry)\\n        external\\n        view\\n        returns (address);\\n\\n    function retirementCertificatesAddress() external view returns (address);\\n\\n    function toucanCarbonOffsetsEscrowAddress() external view returns (address);\\n\\n    function isValidERC20(address erc20) external view returns (bool);\\n\\n    function addERC20(address erc20, string memory standardRegistry) external;\\n}\\n\",\"keccak256\":\"0xccb58bbb200ab282120834e8eb9b7c41c776669dc4e6ac8440927ad2587d0d89\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts of the Toucan protocol\\n * @dev Inspired by the AAVE error library:\\n * https://github.com/aave/protocol-v2/blob/5df59ec74a0c635d877dc1c5ee4a165d41488352/contracts/protocol/libraries/helpers/Errors.sol\\n * Error messages prefix glossary:\\n *  - CP = CarbonPool\\n *  - COB = CarbonOffsetBatches\\n *  - TCO2 = TCO2\\n */\\nlibrary Errors {\\n    // User is not authorized\\n    string public constant CP_UNAUTHORIZED = '1';\\n    // Empty array provided as input\\n    string public constant CP_EMPTY_ARRAY = '2';\\n    // Pool is full of TCO2s\\n    string public constant CP_FULL_POOL = '3';\\n    // ERC20 is blocklisted in the pool. This error\\n    // is returned for TCO2s that have been blocklisted\\n    // like the HFC-23 project.\\n    string public constant CP_BLOCKLISTED = '4';\\n    // ERC20 is not allowlisted in the pool\\n    // This error is returned in case the ERC20 is\\n    // not a TCO2 in which case it has to be manually\\n    // allowlisted in order to be allowed in the pool.\\n    string public constant CP_NOT_ALLOWLISTED = '5';\\n    // Vintage start time of a TCO2 is too old\\n    string public constant CP_START_TIME_TOO_OLD = '6';\\n    string public constant CP_REGION_NOT_ACCEPTED = '7';\\n    string public constant CP_STANDARD_NOT_ACCEPTED = '8';\\n    string public constant CP_METHODOLOGY_NOT_ACCEPTED = '9';\\n    // Provided fee is invalid, not in a basis points format: [0,10000)\\n    string public constant CP_INVALID_FEE = '10';\\n    // Provided address needs to be non-zero\\n    string public constant CP_EMPTY_ADDRESS = '11';\\n    // Validation check to ensure array lengths match\\n    string public constant CP_LENGTH_MISMATCH = '12';\\n    // TCO2 not exempted from redeem fees\\n    string public constant CP_NOT_EXEMPTED = '13';\\n    // A contract has been paused\\n    string public constant CP_PAUSED_CONTRACT = '14';\\n    // Redemption has leftover unredeemed value\\n    string public constant CP_NON_ZERO_REMAINING = '15';\\n    // Redemption exceeds deposited TCO2 supply\\n    string public constant CP_EXCEEDS_TCO2_SUPPLY = '16';\\n    // User must be a router\\n    string public constant CP_ONLY_ROUTER = '17';\\n    // User must be the owner\\n    string public constant CP_ONLY_OWNER = '18';\\n    // Zero destination address is invalid for pool token transfers\\n    string public constant CP_INVALID_DESTINATION_ZERO = '19';\\n    // Self destination address is invalid for pool token transfers\\n    string public constant CP_INVALID_DESTINATION_SELF = '20';\\n    // Zero amount provided as an input (eg., in redemptions) in invalid\\n    string public constant CP_ZERO_AMOUNT = '21';\\n    // ERC20 is not eligible to be pooled\\n    string public constant CP_NOT_ELIGIBLE = '22';\\n    // Carbon registry is already supported in COB\\n    string public constant COB_ALREADY_SUPPORTED = '23';\\n    // The caller is not granted the VERIFIER_ROLE in COB\\n    string public constant COB_NOT_VERIFIER_OR_BATCH_OWNER = '24';\\n    // The caller does not own the provided batch\\n    string public constant COB_NOT_BATCH_OWNER = '25';\\n    // The owner of the batch is invalid (not a TCO2 contract)\\n    string public constant COB_INVALID_BATCH_OWNER = '26';\\n    // The batch is not in Confirmed status\\n    string public constant COB_NOT_CONFIRMED = '27';\\n    // The batch is not in a requested status (DetokenizationRequested or RetirementRequested)\\n    string public constant COB_NOT_REQUESTED_STATUS = '28';\\n    // The batch does not exist\\n    string public constant COB_NOT_EXISTS = '29';\\n    // The batch has an invalid status based on the action requested\\n    string public constant COB_INVALID_STATUS = '30';\\n    // The batch is missing an associated project vintage\\n    string public constant COB_MISSING_VINTAGE = '31';\\n    // The serial number in the batch is already approved\\n    string public constant COB_ALREADY_APPROVED = '32';\\n    // The batch is not in Pending status\\n    string public constant COB_NOT_PENDING = '33';\\n    // The batch is already fractionalized\\n    string public constant COB_ALREADY_FRACTIONALIZED = '34';\\n    // The batch is not in Rejected status\\n    string public constant COB_NOT_REJECTED = '35';\\n    // The project vintage is already set in the batch\\n    string public constant COB_VINTAGE_ALREADY_SET = '36';\\n    // The transfer is not approved\\n    string public constant COB_TRANSFER_NOT_APPROVED = '37';\\n    // The COB contract is paused\\n    string public constant COB_PAUSED_CONTRACT = '38';\\n    // The caller is invalid\\n    string public constant COB_INVALID_CALLER = '39';\\n    // The TCO2 for the batch is not found\\n    string public constant COB_TCO2_NOT_FOUND = '40';\\n    // The registry for the provided vintage is not supported\\n    string public constant COB_REGISTRY_NOT_SUPPORTED = '41';\\n    // No TCO2 was minted as part of tokenization\\n    string public constant COB_NO_TCO2_MINTED = '42';\\n    // Only mints are supported for the batch contract to receive an NFT\\n    string public constant COB_ONLY_MINTS = '43';\\n    // New batch status is invalid\\n    string public constant COB_INVALID_NEW_STATUS = '44';\\n    // The TCO2 batch amount is invalid\\n    string public constant TCO2_BATCH_AMT_INVALID = '45';\\n    // The TCO2 batch amount approval has failed\\n    string public constant TCO2_APPROVAL_AMT_FAILED = '46';\\n    // The TCO2 batch not confirmed\\n    string public constant TCO2_BATCH_NOT_CONFIRMED = '47';\\n    // The TCO2 batch not whitelisted\\n    string public constant TCO2_BATCH_NOT_WHITELISTED = '48';\\n    // The TCO2 is non matching NFT\\n    string public constant TCO2_NON_MATCHING_NFT = '49';\\n    // The TCO2 Quantity in batch is higher than total vintages\\n    string public constant TCO2_QTY_HIGHER = '50';\\n    // The fee to be charged is too high\\n    string public constant CP_FEE_TOO_HIGH = '51';\\n    // The max fee to be paid is invalid\\n    string public constant CP_INVALID_MAX_FEE = '52';\\n    // The pool feature is not supported\\n    string public constant CP_NOT_SUPPORTED = '53';\\n    // Used for instance to check for sub-tonnage retirement requests\\n    string public constant TCO2_INVALID_DECIMALS = '54';\\n    // The TCO2 Quantity in the batch is invalid\\n    string public constant COB_INVALID_QUANTITY = '55';\\n    // Splitting is required on detokenization/retirement finalization, but 2 new serial numbers\\n    // were not provided\\n    string public constant TCO2_MISSING_SERIALS = '56';\\n    // The score set for the ERC-1155 token in the pool is invalid\\n    string public constant INVALID_ERC1155_SCORE = '57';\\n    // The score of the ERC-1155 token in the pool is not set\\n    string public constant EMPTY_ERC155_SCORE = '58';\\n    // The underlying decimals are too high for the pool\\n    string public constant UNDERLYING_DECIMALS_TOO_HIGH = '59';\\n    // The provided supply cap is invalid and should match the underlying token decimals\\n    // eg., for an ERC-1155 token whose smallest denomination is tonnes, the pool supply\\n    // cap should not include decimals of lower fidelity than tonnes.\\n    string public constant INVALID_SUPPLY_CAP = '60';\\n}\\n\",\"keccak256\":\"0x52c89bbc5d78cfa6d74274ce692c46d661bec10d40bbeb33801813421bff218f\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Strings.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\\n\\nlibrary Strings {\\n    /// @notice Compare two strings\\n    /// @param a The string to compare\\n    /// @param b The string to compare to\\n    /// @return True if the strings are equal, false otherwise\\n    function equals(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            (bytes(a).length == bytes(b).length) &&\\n            (keccak256(bytes(a)) == keccak256(bytes(b)));\\n    }\\n\\n    /// @notice Convert a string to an integer\\n    /// @param numString The string to convert\\n    /// @return The integer value of the string\\n    function toInteger(string memory numString)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 val = 0;\\n        bytes memory stringBytes = bytes(numString);\\n        uint256 stringBytesLen = stringBytes.length;\\n        for (uint256 i = 0; i < stringBytesLen; ++i) {\\n            uint256 exp = stringBytesLen - i;\\n            bytes1 ival = stringBytes[i];\\n            uint8 uval = uint8(ival);\\n            uint256 jval = uval - uint256(0x30);\\n\\n            val += (uint256(jval) * (10**(exp - 1)));\\n        }\\n        return val;\\n    }\\n\\n    /// @notice Convert an integer to a string\\n    /// @param value The integer to convert\\n    /// @return The string value of the integer\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// @notice Get a substring of a string\\n    /// @param text The string to get a substring from\\n    /// @param begin The start index of the substring\\n    /// @param end The end index of the substring\\n    /// @return The substring\\n    function slice(\\n        string memory text,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (string memory) {\\n        uint256 length = end - begin;\\n        bytes memory a = new bytes(length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            a[i] = bytes(text)[i + begin];\\n        }\\n        return string(a);\\n    }\\n\\n    /// @notice Pad a string with a character\\n    /// @param text The string to pad\\n    /// @param length The length to pad to\\n    /// @param padChar The character to pad with\\n    /// @return The padded string\\n    function pad(\\n        string memory text,\\n        uint256 length,\\n        string memory padChar\\n    ) internal pure returns (string memory) {\\n        uint256 textLen = bytes(text).length;\\n        require(bytes(padChar).length == 1, 'Invalid padChar length');\\n        require(length >= textLen, 'Invalid text length');\\n\\n        for (uint256 i = textLen; i < length; ++i) {\\n            text = string.concat(padChar, text);\\n        }\\n\\n        return text;\\n    }\\n\\n    /// @notice Count the occurrences of a character in a string\\n    /// @param text The string to count occurrences of char in\\n    /// @param char The character to count\\n    /// @return nums The number of occurrences\\n    function count(string memory text, string memory char)\\n        internal\\n        pure\\n        returns (uint256 nums)\\n    {\\n        require(bytes(char).length == 1, 'Invalid char length');\\n        bytes1 c = bytes(char)[0];\\n\\n        uint256 textLen = bytes(text).length;\\n        for (uint256 i = 0; i < textLen; ++i) {\\n            if (bytes(text)[i] == c) {\\n                ++nums;\\n            }\\n        }\\n    }\\n\\n    /// @notice Split a string into two parts. The first occurrence of the delimiter\\n    /// is used to split the string into first and last.\\n    /// @param text The string to split\\n    /// @param delimiter The character to split on\\n    /// @return first last The two parts of the string\\n    function split(string memory text, string memory delimiter)\\n        internal\\n        pure\\n        returns (string memory first, string memory last)\\n    {\\n        require(bytes(delimiter).length == 1, 'Invalid delimiter length');\\n        bytes1 d = bytes(delimiter)[0];\\n\\n        uint256 textLen = bytes(text).length;\\n        for (uint256 i = 0; i < textLen; ++i) {\\n            if (bytes(text)[i] == d) {\\n                first = slice(text, 0, i);\\n                last = slice(text, i + 1, textLen);\\n                return (first, last);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc92c0e80003911ed43df923ad4692f3d9a3fec1fa4d79bc01d6b3706fa034010\",\"license\":\"UNLICENSED\"},\"contracts/pools/PoolFilter.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\n\\nimport '../bases/RoleInitializer.sol';\\nimport '../interfaces/IToucanCarbonOffsets.sol';\\nimport '../interfaces/IToucanContractRegistry.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\nimport '../libraries/Strings.sol';\\nimport './PoolFilterStorage.sol';\\n\\nabstract contract PoolFilter is\\n    ContextUpgradeable,\\n    OwnableUpgradeable,\\n    PausableUpgradeable,\\n    RoleInitializer,\\n    UUPSUpgradeable,\\n    PoolFilterStorage\\n{\\n    using Strings for string;\\n\\n    // ----------------------------------------\\n    //      Events\\n    // ----------------------------------------\\n\\n    event AttributeMethodologyAdded(string methodology);\\n    event AttributeMethodologyRemoved(string methodology);\\n    event AttributeRegionAdded(string region);\\n    event AttributeRegionRemoved(string region);\\n    event AttributeStandardAdded(string standard);\\n    event AttributeStandardRemoved(string standard);\\n    event ExternalAddressRemovedFromAllowlist(address erc20addr);\\n    event ExternalAddressAllowlisted(address erc20addr);\\n    event ExternalERC1155TokenAllowlisted(\\n        address tokenAddress,\\n        uint256 tokenId\\n    );\\n    event ExternalERC1155TokenRemovedFromAllowlist(\\n        address tokenAddress,\\n        uint256 tokenId\\n    );\\n    event InternalAddressBlocklisted(address erc20addr);\\n    event InternalAddressRemovedFromBlocklist(address erc20addr);\\n    event InternalAddressRemovedFromAllowlist(address erc20addr);\\n    event InternalAddressAllowlisted(address erc20addr);\\n    event MappingSwitched(string mappingName, bool accepted);\\n    event MinimumVintageStartTimeUpdated(uint256 minimumVintageStartTime);\\n    event ToucanRegistrySet(address registry);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function __PoolFilter_init_unchained(\\n        address[] calldata accounts,\\n        bytes32[] calldata roles\\n    ) internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __RoleInitializer_init_unchained(accounts, roles);\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    // ----------------------------------------\\n    //      Upgradable related functions\\n    // ----------------------------------------\\n\\n    function _authorizeUpgrade(address) internal virtual override {\\n        onlyPoolOwner();\\n    }\\n\\n    // ------------------------\\n    // Poor person's modifiers\\n    // ------------------------\\n\\n    /// @dev function that checks whether the caller is the\\n    /// contract owner\\n    function onlyPoolOwner() internal view virtual {\\n        require(owner() == msg.sender, Errors.CP_ONLY_OWNER);\\n    }\\n\\n    // ----------------------------------------\\n    //      Read-only functions\\n    // ----------------------------------------\\n\\n    /// @notice Checks if an ERC20 token is eligible for this pool\\n    /// @param erc20Addr The ERC20 token\\n    /// @return String with error code if any error occurs, else empty string\\n    function checkEligible(address erc20Addr)\\n        external\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        bool isToucanContract = IToucanContractRegistry(contractRegistry)\\n            .isValidERC20(erc20Addr);\\n\\n        if (isToucanContract) {\\n            if (internalAllowlist[erc20Addr]) {\\n                return '';\\n            }\\n\\n            if (internalBlocklist[erc20Addr]) {\\n                return Errors.CP_BLOCKLISTED;\\n            }\\n\\n            return checkAttributeMatching(erc20Addr);\\n        } else {\\n            /// @dev If not Toucan native contract, check if address is allowlisted\\n            if (!externalAllowlist[erc20Addr]) {\\n                return Errors.CP_NOT_ALLOWLISTED;\\n            }\\n        }\\n\\n        return '';\\n    }\\n\\n    /// @notice Checks if an ERC-1155 token is eligible for this pool\\n    /// @param tokenAddress address of the ERC1155 token\\n    /// @param tokenId ID of the ERC1155 token\\n    /// @return String with error code if any error occurs, else empty string\\n    function checkERC1155Eligible(address tokenAddress, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n        if (!externalERC1155Allowlist[tokenAddress][tokenId])\\n            return Errors.CP_NOT_ALLOWLISTED;\\n\\n        return '';\\n    }\\n\\n    /// @notice Checks whether incoming ERC20s match the accepted criteria/attributes\\n    /// @param erc20Addr The ERC20 token\\n    /// @return String with error code if any error occurs, else empty string\\n    function checkAttributeMatching(address erc20Addr)\\n        public\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        ProjectData memory projectData;\\n        VintageData memory vintageData;\\n        (projectData, vintageData) = IToucanCarbonOffsets(erc20Addr)\\n            .getAttributes();\\n\\n        /// @dev checks if any one of the attributes are blocklisted.\\n        /// If mappings are set to \\\"allowlist\\\"-mode, require the opposite\\n        if (vintageData.startTime < minimumVintageStartTime)\\n            return Errors.CP_START_TIME_TOO_OLD;\\n\\n        if (regions[projectData.region] != regionsIsAcceptedMapping)\\n            return Errors.CP_REGION_NOT_ACCEPTED;\\n\\n        if (standards[projectData.standard] != standardsIsAcceptedMapping)\\n            return Errors.CP_STANDARD_NOT_ACCEPTED;\\n\\n        if (\\n            methodologies[projectData.methodology] !=\\n            methodologiesIsAcceptedMapping\\n        ) return Errors.CP_METHODOLOGY_NOT_ACCEPTED;\\n\\n        return '';\\n    }\\n\\n    // ----------------------------------------\\n    //      Admin functions\\n    // ----------------------------------------\\n\\n    function setToucanContractRegistry(address _address) external virtual {\\n        onlyPoolOwner();\\n        contractRegistry = _address;\\n        emit ToucanRegistrySet(_address);\\n    }\\n\\n    /// @notice Generic function to switch attributes mappings into either\\n    /// acceptance or rejection criteria\\n    /// @param _mappingName attribute mapping of project-vintage data\\n    /// @param accepted determines if mapping works as a blocklist or allowlist\\n    function switchMapping(string memory _mappingName, bool accepted)\\n        external\\n        virtual\\n    {\\n        onlyPoolOwner();\\n        if (_mappingName.equals('regions')) {\\n            accepted\\n                ? regionsIsAcceptedMapping = true\\n                : regionsIsAcceptedMapping = false;\\n        } else if (_mappingName.equals('standards')) {\\n            accepted\\n                ? standardsIsAcceptedMapping = true\\n                : standardsIsAcceptedMapping = false;\\n        } else if (_mappingName.equals('methodologies')) {\\n            accepted\\n                ? methodologiesIsAcceptedMapping = true\\n                : methodologiesIsAcceptedMapping = false;\\n        }\\n        emit MappingSwitched(_mappingName, accepted);\\n    }\\n\\n    /// @notice Function to add attributes for filtering (does not support complex AttributeSets)\\n    /// @param addToList determines whether attribute should be added or removed\\n    /// Other params are arrays of attributes to be added\\n    function addAttributes(\\n        bool addToList,\\n        string[] memory _regions,\\n        string[] memory _standards,\\n        string[] memory _methodologies\\n    ) external virtual {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < _standards.length; ++i) {\\n            if (addToList == true) {\\n                standards[_standards[i]] = true;\\n                emit AttributeStandardAdded(_standards[i]);\\n            } else {\\n                standards[_standards[i]] = false;\\n                emit AttributeStandardRemoved(_standards[i]);\\n            }\\n        }\\n\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < _methodologies.length; ++i) {\\n            if (addToList == true) {\\n                methodologies[_methodologies[i]] = true;\\n                emit AttributeMethodologyAdded(_methodologies[i]);\\n            } else {\\n                methodologies[_methodologies[i]] = false;\\n                emit AttributeMethodologyRemoved(_methodologies[i]);\\n            }\\n        }\\n\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < _regions.length; ++i) {\\n            if (addToList == true) {\\n                regions[_regions[i]] = true;\\n                emit AttributeRegionAdded(_regions[i]);\\n            } else {\\n                regions[_regions[i]] = false;\\n                emit AttributeRegionRemoved(_regions[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Function to allowlist selected external non-TCO2 contracts by their address\\n    /// @param erc20Addr accepts an array of contract addresses\\n    function addToExternalAllowlist(address[] memory erc20Addr) external {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < erc20Addr.length; ++i) {\\n            externalAllowlist[erc20Addr[i]] = true;\\n            emit ExternalAddressAllowlisted(erc20Addr[i]);\\n        }\\n    }\\n\\n    /// @notice Add ERC-1155 tokens to external allowlist\\n    /// @param tokenAddresses An array of contract addresses\\n    /// @param tokenIds An array of token IDs\\n    /// @dev Both arrays must be of the same length. Each token address is associated\\n    /// with the token ID at the same index.\\n    function addToExternalERC1155Allowlist(\\n        address[] calldata tokenAddresses,\\n        uint256[] calldata tokenIds\\n    ) external {\\n        onlyPoolOwner();\\n        uint256 tokensLen = tokenAddresses.length;\\n        if (tokensLen != tokenIds.length) revert(Errors.CP_LENGTH_MISMATCH);\\n\\n        for (uint256 i = 0; i < tokensLen; ++i) {\\n            externalERC1155Allowlist[tokenAddresses[i]][tokenIds[i]] = true;\\n            emit ExternalERC1155TokenAllowlisted(\\n                tokenAddresses[i],\\n                tokenIds[i]\\n            );\\n        }\\n    }\\n\\n    /// @notice Function to allowlist certain TCO2 contracts by their address\\n    /// @param erc20Addr accepts an array of contract addresses\\n    function addToInternalAllowlist(address[] memory erc20Addr) external {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < erc20Addr.length; ++i) {\\n            internalAllowlist[erc20Addr[i]] = true;\\n            emit InternalAddressAllowlisted(erc20Addr[i]);\\n        }\\n    }\\n\\n    /// @notice Function to blocklist certain TCO2 contracts by their address\\n    /// @param erc20Addr accepts an array of contract addresses\\n    function addToInternalBlocklist(address[] memory erc20Addr) external {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < erc20Addr.length; ++i) {\\n            internalBlocklist[erc20Addr[i]] = true;\\n            emit InternalAddressBlocklisted(erc20Addr[i]);\\n        }\\n    }\\n\\n    /// @notice Function to remove ERC20 addresses from external allowlist\\n    /// @param erc20Addr accepts an array of contract addresses\\n    function removeFromExternalAllowlist(address[] memory erc20Addr) external {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < erc20Addr.length; ++i) {\\n            externalAllowlist[erc20Addr[i]] = false;\\n            emit ExternalAddressRemovedFromAllowlist(erc20Addr[i]);\\n        }\\n    }\\n\\n    /// @notice Remove ERC-1155 tokens from external allowlist\\n    /// @param tokenAddresses An array of contract addresses\\n    /// @param tokenIds An array of token IDs\\n    /// @dev Both arrays must be of the same length. Each token address is associated\\n    /// with the token ID at the same index.\\n    function removeFromExternalERC1155Allowlist(\\n        address[] calldata tokenAddresses,\\n        uint256[] calldata tokenIds\\n    ) external {\\n        onlyPoolOwner();\\n        uint256 tokensLen = tokenAddresses.length;\\n        if (tokensLen != tokenIds.length) revert(Errors.CP_LENGTH_MISMATCH);\\n\\n        for (uint256 i = 0; i < tokensLen; ++i) {\\n            externalERC1155Allowlist[tokenAddresses[i]][tokenIds[i]] = false;\\n            emit ExternalERC1155TokenRemovedFromAllowlist(\\n                tokenAddresses[i],\\n                tokenIds[i]\\n            );\\n        }\\n    }\\n\\n    /// @notice Function to remove TCO2 addresses from internal blocklist\\n    /// @param erc20Addr accepts an array of contract addresses\\n    function removeFromInternalBlocklist(address[] memory erc20Addr) external {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < erc20Addr.length; ++i) {\\n            internalBlocklist[erc20Addr[i]] = false;\\n            emit InternalAddressRemovedFromBlocklist(erc20Addr[i]);\\n        }\\n    }\\n\\n    /// @notice Function to remove TCO2 addresses from internal allowlist\\n    /// @param erc20Addr accepts an array of contract addressesc\\n    function removeFromInternalAllowlist(address[] memory erc20Addr) external {\\n        onlyPoolOwner();\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < erc20Addr.length; ++i) {\\n            internalAllowlist[erc20Addr[i]] = false;\\n            emit InternalAddressRemovedFromAllowlist(erc20Addr[i]);\\n        }\\n    }\\n\\n    /// @notice Determines the minimum vintage start time acceptance criteria of ERC20s\\n    /// @param _minimumVintageStartTime unix time format\\n    function setMinimumVintageStartTime(uint64 _minimumVintageStartTime)\\n        external\\n        virtual\\n    {\\n        onlyPoolOwner();\\n        minimumVintageStartTime = _minimumVintageStartTime;\\n        emit MinimumVintageStartTimeUpdated(_minimumVintageStartTime);\\n    }\\n}\\n\",\"keccak256\":\"0x4680f7e31d3f072ed881a68476423248323d9ac33ccc45629157ba208efc58e1\",\"license\":\"UNLICENSED\"},\"contracts/pools/PoolFilterStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nabstract contract PoolFilterStorageV1 {\\n    /// @dev Mappings for attributes that can be included or excluded\\n    /// if set to `false`, attribute-values are blocklisted/rejected\\n    /// if set to `true`, attribute-values are allowlisted/accepted\\n    mapping(string => bool) public regions;\\n    mapping(string => bool) public standards;\\n    mapping(string => bool) public methodologies;\\n\\n    /// @dev mapping to allowlist external non-TCO2 contracts by address\\n    mapping(address => bool) public externalAllowlist;\\n\\n    /// @dev mapping to include certain TCO2 contracts by address,\\n    /// overriding attribute matching checks\\n    mapping(address => bool) public internalAllowlist;\\n\\n    /// @dev mapping to exclude certain TCO2 contracts by address,\\n    /// even if the attribute matching would pass\\n    mapping(address => bool) public internalBlocklist;\\n\\n    /// @dev address of the registry contract that knows\\n    /// the list of TCO2s\\n    address public contractRegistry;\\n\\n    uint64 public minimumVintageStartTime;\\n    /// @dev These booleans control the direction of the criteria as\\n    /// they are defined in regions, standards, and methodologies.\\n    ///\\n    /// Two examples:\\n    ///\\n    /// 1. methodologiesIsAcceptedMapping=false\\n    ///    methodologies['VM0002']=true\\n    /// This means the pool will reject any project that follows the\\n    /// 'VM0002' methodology and accept anything else\\n    ///\\n    /// 2. methodologiesIsAcceptedMapping=true\\n    ///    methodologies['VM0002']=true\\n    /// This means the pool will accept only any project that follows the\\n    /// 'VM0002' methodology.\\n    bool public regionsIsAcceptedMapping;\\n    bool public standardsIsAcceptedMapping;\\n    bool public methodologiesIsAcceptedMapping;\\n}\\n\\nabstract contract PoolFilterStorageV2 {\\n    /// @dev mapping to allowlist external ERC-1155 tokens\\n    mapping(address => mapping(uint256 => bool))\\n        public externalERC1155Allowlist;\\n}\\n\\nabstract contract PoolFilterStorage is\\n    PoolFilterStorageV1,\\n    PoolFilterStorageV2\\n{}\\n\",\"keccak256\":\"0x8617ab7abb5aace3fc4ec9404a57ecc2f42d8ca1b218d84803a810e981f1ef53\",\"license\":\"UNLICENSED\"},\"contracts/pools/REDDFilter.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2024 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport './PoolFilter.sol';\\n\\ncontract REDDFilter is PoolFilter {\\n    // ----------------------------------------\\n    //      Constants\\n    // ----------------------------------------\\n\\n    string public constant VERSION = '1.0.0';\\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 2;\\n\\n    // ----------------------------------------\\n    //      Upgradable related functions\\n    // ----------------------------------------\\n\\n    function initialize(address[] calldata accounts, bytes32[] calldata roles)\\n        external\\n        virtual\\n        initializer\\n    {\\n        __PoolFilter_init_unchained(accounts, roles);\\n    }\\n}\\n\",\"keccak256\":\"0x90a2da5e0afbf37c5860697ec4ff19ac5d3a1c4ddf9878efa638f4b264943247\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b62000156565b6200003260ff62000035565b50565b60008054610100900460ff1615620000ce578160ff1660011480156200006e57506200006c306200014760201b620021371760201c565b155b620000c65760405162461bcd60e51b815260206004820152602e60248201526000805160206200398883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106200012d5760405162461bcd60e51b815260206004820152602e60248201526000805160206200398883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000bd565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b6080516137fa6200018e60003960008181610a3301528181610a7301528181610dfa01528181610e3a0152610ec901526137fa6000f3fe6080604052600436106102675760003560e01c80639deb50bf11610144578063d4e457ec116100b6578063e882e37b1161007a578063e882e37b146107cf578063f141b84f146107ef578063f2fde38b14610811578063f3edb9ec14610831578063f75991cd1461086d578063ffa1ad74146108a957600080fd5b8063d4e457ec1461072d578063d547741f1461074f578063d6d10f3a1461076f578063dc5f560e1461078f578063e0051e2a146107af57600080fd5b8063abf410e511610108578063abf410e514610659578063bab5adc31461067a578063bd64648e1461069a578063c36a2573146106ba578063c42f358a146106dc578063ccbaa818146106fc57600080fd5b80639deb50bf1461057b578063a1631e4b1461059b578063a217fddf146105db578063a9a484c5146105f0578063abd840211461061d57600080fd5b80635c975abb116101dd578063850c3864116101a1578063850c38641461048d5780638662522f146104ad5780638da5cb5b146104e957806391d148541461051b57806395f187a51461053b5780639891fd121461055b57600080fd5b80635c975abb146103fa57806365918979146104125780636ca0b0d714610443578063715018a61461045857806381e48e901461046d57600080fd5b80633659cfe61161022f5780633659cfe61461034157806336c63c701461036157806339cd7a8a14610392578063437d0366146103b25780634f1ef286146103d257806352d1902d146103e557600080fd5b806301ffc9a71461026c5780630c0efecc146102a1578063248a9ca3146102c35780632f2ff15d1461030157806336568abe14610321575b600080fd5b34801561027857600080fd5b5061028c610287366004612b33565b6108da565b60405190151581526020015b60405180910390f35b3480156102ad57600080fd5b506102c16102bc366004612b72565b610911565b005b3480156102cf57600080fd5b506102f36102de366004612b8f565b600090815260c9602052604090206001015490565b604051908152602001610298565b34801561030d57600080fd5b506102c161031c366004612bbd565b61097c565b34801561032d57600080fd5b506102c161033c366004612bbd565b6109a6565b34801561034d57600080fd5b506102c161035c366004612bed565b610a29565b34801561036d57600080fd5b5061028c61037c366004612bed565b6101646020526000908152604090205460ff1681565b34801561039e57600080fd5b506102c16103ad366004612d2f565b610b08565b3480156103be57600080fd5b506102c16103cd366004612dc0565b610c7c565b6102c16103e0366004612e2b565b610df0565b3480156103f157600080fd5b506102f3610ebc565b34801561040657600080fd5b5060655460ff1661028c565b34801561041e57600080fd5b5061028c61042d366004612bed565b6101636020526000908152604090205460ff1681565b34801561044f57600080fd5b506102f3600281565b34801561046457600080fd5b506102c1610f6f565b34801561047957600080fd5b506102c1610488366004612f3b565b610fd5565b34801561049957600080fd5b506102c16104a8366004612fd5565b611430565b3480156104b957600080fd5b5061028c6104c836600461306e565b805160208183018101805161015f8252928201919093012091525460ff1681565b3480156104f557600080fd5b506033546001600160a01b03165b6040516001600160a01b039091168152602001610298565b34801561052757600080fd5b5061028c610536366004612bbd565b61150b565b34801561054757600080fd5b506102c1610556366004612fd5565b611536565b34801561056757600080fd5b506102c1610576366004612fd5565b611611565b34801561058757600080fd5b506102c1610596366004612fd5565b6116ec565b3480156105a757600080fd5b50610165546105c390600160a01b90046001600160401b031681565b6040516001600160401b039091168152602001610298565b3480156105e757600080fd5b506102f3600081565b3480156105fc57600080fd5b5061061061060b366004612bed565b6117c7565b6040516102989190613102565b34801561062957600080fd5b5061028c610638366004613115565b61016660209081526000928352604080842090915290825290205460ff1681565b34801561066557600080fd5b5061016554610503906001600160a01b031681565b34801561068657600080fd5b506102c1610695366004612dc0565b611a97565b3480156106a657600080fd5b506106106106b5366004613115565b611b13565b3480156106c657600080fd5b506101655461028c90600160e81b900460ff1681565b3480156106e857600080fd5b506102c16106f7366004612fd5565b611b76565b34801561070857600080fd5b5061028c610717366004612bed565b6101626020526000908152604090205460ff1681565b34801561073957600080fd5b506101655461028c90600160f01b900460ff1681565b34801561075b57600080fd5b506102c161076a366004612bbd565b611c51565b34801561077b57600080fd5b506102c161078a366004612fd5565b611c76565b34801561079b57600080fd5b506106106107aa366004612bed565b611d51565b3480156107bb57600080fd5b506102c16107ca366004612dc0565b611eac565b3480156107db57600080fd5b506102c16107ea366004612bed565b612018565b3480156107fb57600080fd5b506101655461028c90600160e01b900460ff1681565b34801561081d57600080fd5b506102c161082c366004612bed565b61206f565b34801561083d57600080fd5b5061028c61084c36600461306e565b80516020818301810180516101608252928201919093012091525460ff1681565b34801561087957600080fd5b5061028c61088836600461306e565b80516020818301810180516101618252928201919093012091525460ff1681565b3480156108b557600080fd5b50610610604051806040016040528060058152602001640312e302e360dc1b81525081565b60006001600160e01b03198216637965db0b60e01b148061090b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b610919612146565b610165805467ffffffffffffffff60a01b1916600160a01b6001600160401b038416908102919091179091556040519081527f87f670402a6c72fff3b60ba5223165f062b58d671871fc2c49ea96101fdd19a0906020015b60405180910390a150565b600082815260c960205260409020600101546109978161219c565b6109a183836121a6565b505050565b6001600160a01b0381163314610a1b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610a25828261222c565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a715760405162461bcd60e51b8152600401610a1290613141565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610aba60008051602061377e833981519152546001600160a01b031690565b6001600160a01b031614610ae05760405162461bcd60e51b8152600401610a129061318d565b610ae981612293565b60408051600080825260208201909252610b059183919061229b565b50565b610b10612146565b604080518082019091526007815266726567696f6e7360c81b6020820152610b39908390612406565b15610b755780610b5857610165805460ff60e01b191690556000610b6f565b610165805460ff60e01b1916600160e01b17905560015b50610c3f565b6040805180820190915260098152687374616e646172647360b81b6020820152610ba0908390612406565b15610bd85780610bbf57610165805460ff60e81b191690556000610b6f565b610165805460ff60e81b1916600160e81b179055610c3f565b60408051808201909152600d81526c6d6574686f646f6c6f6769657360981b6020820152610c07908390612406565b15610c3f5780610c2657610165805460ff60f01b191690556000610c3d565b610165805460ff60f01b1916600160f01b17905560015b505b7fcdc35455a1217219a4240bb18a7d2978eb98208f22f7ec36d6a1381c28f9d0f58282604051610c709291906131d9565b60405180910390a15050565b610c84612146565b82818114610cbc576040805180820182526002815261189960f11b6020820152905162461bcd60e51b8152610a129190600401613102565b60005b81811015610de85760016101666000888885818110610ce057610ce06131fd565b9050602002016020810190610cf59190612bed565b6001600160a01b03166001600160a01b031681526020019081526020016000206000868685818110610d2957610d296131fd565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055507f198e97d55459e132457f017a1cba6e960ac569ae89045a8b978702ffd7ea7977868683818110610d8857610d886131fd565b9050602002016020810190610d9d9190612bed565b858584818110610daf57610daf6131fd565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1610de181613229565b9050610cbf565b505050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610e385760405162461bcd60e51b8152600401610a1290613141565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e8160008051602061377e833981519152546001600160a01b031690565b6001600160a01b031614610ea75760405162461bcd60e51b8152600401610a129061318d565b610eb082612293565b610a258282600161229b565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f5c5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a12565b5060008051602061377e83398151915290565b6033546001600160a01b03163314610fc95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a12565b610fd3600061242c565b565b610fdd612146565b60005b825181101561114b5784151560010361109957600161016084838151811061100a5761100a6131fd565b602002602001015160405161101f9190613242565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507fa27e97999993c298fae0b7088ff732fe078cc1585665ee1554220b3cbe6317a9838281518110611077576110776131fd565b602002602001015160405161108c9190613102565b60405180910390a161113b565b60006101608483815181106110b0576110b06131fd565b60200260200101516040516110c59190613242565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f0127ddc00426c693b5becb26ba43a260c781ebc323b61d3b24b61e4dc5c93c7183828151811061111d5761111d6131fd565b60200260200101516040516111329190613102565b60405180910390a15b61114481613229565b9050610fe0565b5060005b81518110156112ba57841515600103611208576001610161838381518110611179576111796131fd565b602002602001015160405161118e9190613242565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f156643e9a7f860e95993739893595e6ee1d04d9ff1b98567dbe9d5681cd152b28282815181106111e6576111e66131fd565b60200260200101516040516111fb9190613102565b60405180910390a16112aa565b600061016183838151811061121f5761121f6131fd565b60200260200101516040516112349190613242565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f21a77ac4edf49633047cc4e32b10dfe633811216214400e0e1f507c3f7287b6182828151811061128c5761128c6131fd565b60200260200101516040516112a19190613102565b60405180910390a15b6112b381613229565b905061114f565b5060005b83518110156114295784151560010361137757600161015f8583815181106112e8576112e86131fd565b60200260200101516040516112fd9190613242565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f3df7a1330febee3646ae4a0f0e46c94c046f0ee810b2b7f1fa10fa8f34d7b7ef848281518110611355576113556131fd565b602002602001015160405161136a9190613102565b60405180910390a1611419565b600061015f85838151811061138e5761138e6131fd565b60200260200101516040516113a39190613242565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507fc84badb33408cce6e89b30a735d8f06e094fa4a19c01c2da66718f490c672f658482815181106113fb576113fb6131fd565b60200260200101516040516114109190613102565b60405180910390a15b61142281613229565b90506112be565b5050505050565b611438612146565b60005b8151811015610a25576001610164600084848151811061145d5761145d6131fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f85fc56aecce1ef094be244fd6b70c13cbc3786dacfb5ddb457eaa6e81924b6728282815181106114cf576114cf6131fd565b60200260200101516040516114f391906001600160a01b0391909116815260200190565b60405180910390a161150481613229565b905061143b565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61153e612146565b60005b8151811015610a255760016101626000848481518110611563576115636131fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f96c62648e20245db42813046d53ed1697aab1c1a06b53092fd5f74f76d9f0e138282815181106115d5576115d56131fd565b60200260200101516040516115f991906001600160a01b0391909116815260200190565b60405180910390a161160a81613229565b9050611541565b611619612146565b60005b8151811015610a25576000610162600084848151811061163e5761163e6131fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f25add64d709821cd4d2f0456865755a330b78c8fb0f438088364f480710acc408282815181106116b0576116b06131fd565b60200260200101516040516116d491906001600160a01b0391909116815260200190565b60405180910390a16116e581613229565b905061161c565b6116f4612146565b60005b8151811015610a255760006101636000848481518110611719576117196131fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f8c23715cef0c44b9a0c13ba0edb2d13490a2ff75434e8dc238e3dfce2896b23382828151811061178b5761178b6131fd565b60200260200101516040516117af91906001600160a01b0391909116815260200190565b60405180910390a16117c081613229565b90506116f7565b606061182860405180610140016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160006001600160a01b031681525090565b6118ab6040518061018001604052806060815260200160006001600160401b0316815260200160006001600160401b031681526020016000815260200160006001600160401b0316815260200160001515815260200160001515815260200160608152602001606081526020016060815260200160608152602001606081525090565b836001600160a01b031663152583de6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156118e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611911919081019061342e565b6101655460208201519294509092506001600160401b03600160a01b90910481169116101561195a5750506040805180820190915260018152601b60f91b602082015292915050565b610165601c9054906101000a900460ff16151561015f83606001516040516119829190613242565b9081526040519081900360200190205460ff161515146119bc5750506040805180820190915260018152603760f81b602082015292915050565b610165601d9054906101000a900460ff16151561016083602001516040516119e49190613242565b9081526040519081900360200190205460ff16151514611a1e5750506040805180820190915260018152600760fb1b602082015292915050565b610165601e9054906101000a900460ff1615156101618360400151604051611a469190613242565b9081526040519081900360200190205460ff16151514611a805750506040805180820190915260018152603960f81b602082015292915050565b505060408051602081019091526000815292915050565b6000611aa3600161247e565b90508015611abb576000805461ff0019166101001790555b611ac78585858561250b565b8015611429576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6001600160a01b03821660009081526101666020908152604080832084845290915290205460609060ff16611b6057506040805180820190915260018152603560f81b602082015261090b565b5060408051602081019091526000815292915050565b611b7e612146565b60005b8151811015610a255760016101636000848481518110611ba357611ba36131fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f6e22096f78ca0e0ca190f9724d8a2ded2155ade3a469817cb9e95989a5124823828281518110611c1557611c156131fd565b6020026020010151604051611c3991906001600160a01b0391909116815260200190565b60405180910390a1611c4a81613229565b9050611b81565b600082815260c96020526040902060010154611c6c8161219c565b6109a1838361222c565b611c7e612146565b60005b8151811015610a255760006101646000848481518110611ca357611ca36131fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f4a522111770e286506eab11ca1d3cb5ca4a24a84458affbb5372bec78340102e828281518110611d1557611d156131fd565b6020026020010151604051611d3991906001600160a01b0391909116815260200190565b60405180910390a1611d4a81613229565b9050611c81565b61016554604051633a37b16d60e11b81526001600160a01b03838116600483015260609260009291169063746f62da90602401602060405180830381865afa158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc591906135eb565b90508015611e56576001600160a01b0383166000908152610163602052604090205460ff1615611e05575050604080516020810190915260008152919050565b6001600160a01b0383166000908152610164602052604090205460ff1615611e465750506040805180820190915260018152600d60fa1b6020820152919050565b611e4f836117c7565b9392505050565b6001600160a01b0383166000908152610162602052604090205460ff16611e965750506040805180820190915260018152603560f81b6020820152919050565b5050604080516020810190915260008152919050565b611eb4612146565b82818114611eec576040805180820182526002815261189960f11b6020820152905162461bcd60e51b8152610a129190600401613102565b60005b81811015610de85760006101666000888885818110611f1057611f106131fd565b9050602002016020810190611f259190612bed565b6001600160a01b03166001600160a01b031681526020019081526020016000206000868685818110611f5957611f596131fd565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055507ff62e4e7e6461caa7928ab1decfa538ceda320c494d2e23ecf29dc5a11a24bdcd868683818110611fb857611fb86131fd565b9050602002016020810190611fcd9190612bed565b858584818110611fdf57611fdf6131fd565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a161201181613229565b9050611eef565b612020612146565b61016580546001600160a01b0319166001600160a01b0383169081179091556040519081527f86907b53cf2024579968511876daf0b4620d65803b550e33101baf70aeb6f5eb90602001610971565b6033546001600160a01b031633146120c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a12565b6001600160a01b03811661212e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a12565b610b058161242c565b6001600160a01b03163b151590565b336121596033546001600160a01b031690565b6001600160a01b03161460405180604001604052806002815260200161062760f31b81525090610b055760405162461bcd60e51b8152600401610a129190613102565b610b05813361255b565b6121b0828261150b565b610a2557600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556121e83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612236828261150b565b15610a2557600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b610b05612146565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156122ce576109a1836125bf565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612328575060408051601f3d908101601f1916820190925261232591810190613608565b60015b61238b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a12565b60008051602061377e83398151915281146123fa5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a12565b506109a183838361265b565b600081518351148015611e4f575081805190602001208380519060200120149392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156124c5578160ff1660011480156124a15750303b155b6124bd5760405162461bcd60e51b8152600401610a1290613621565b506000919050565b60005460ff8084169116106124ec5760405162461bcd60e51b8152600401610a1290613621565b506000805460ff191660ff92909216919091179055600190565b919050565b6000612517600161247e565b9050801561252f576000805461ff0019166101001790555b612537612686565b61253f6126ad565b6125476126dd565b61255385858585612710565b611ac7612686565b612565828261150b565b610a255761257d816001600160a01b0316601461282b565b61258883602061282b565b60405160200161259992919061366f565b60408051601f198184030181529082905262461bcd60e51b8252610a1291600401613102565b6001600160a01b0381163b61262c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a12565b60008051602061377e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612664836129c6565b6000825111806126715750805b156109a1576126808383612a06565b50505050565b600054610100900460ff16610fd35760405162461bcd60e51b8152600401610a12906136e4565b600054610100900460ff166126d45760405162461bcd60e51b8152600401610a12906136e4565b610fd33361242c565b600054610100900460ff166127045760405162461bcd60e51b8152600401610a12906136e4565b6065805460ff19169055565b8281146127575760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606401610a12565b61275f612686565b6000805b848110156127e8576127b3848483818110612780576127806131fd565b90506020020135878784818110612799576127996131fd565b90506020020160208101906127ae9190612bed565b6121a6565b60008484838181106127c7576127c76131fd565b90506020020135036127d857600191505b6127e181613229565b9050612763565b50806114295760405162461bcd60e51b8152602060048201526012602482015271139bc818591b5a5b881cdc1958da599a595960721b6044820152606401610a12565b6060600061283a83600261372f565b61284590600261374e565b6001600160401b0381111561285c5761285c612c0a565b6040519080825280601f01601f191660200182016040528015612886576020820181803683370190505b509050600360fc1b816000815181106128a1576128a16131fd565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128d0576128d06131fd565b60200101906001600160f81b031916908160001a90535060006128f484600261372f565b6128ff90600161374e565b90505b6001811115612977576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612933576129336131fd565b1a60f81b828281518110612949576129496131fd565b60200101906001600160f81b031916908160001a90535060049490941c9361297081613766565b9050612902565b508315611e4f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a12565b6129cf816125bf565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612a6e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a12565b600080846001600160a01b031684604051612a899190613242565b600060405180830381855af49150503d8060008114612ac4576040519150601f19603f3d011682016040523d82523d6000602084013e612ac9565b606091505b5091509150612af1828260405180606001604052806027815260200161379e60279139612afa565b95945050505050565b60608315612b09575081611e4f565b825115612b195782518084602001fd5b8160405162461bcd60e51b8152600401610a129190613102565b600060208284031215612b4557600080fd5b81356001600160e01b031981168114611e4f57600080fd5b6001600160401b0381168114610b0557600080fd5b600060208284031215612b8457600080fd5b8135611e4f81612b5d565b600060208284031215612ba157600080fd5b5035919050565b6001600160a01b0381168114610b0557600080fd5b60008060408385031215612bd057600080fd5b823591506020830135612be281612ba8565b809150509250929050565b600060208284031215612bff57600080fd5b8135611e4f81612ba8565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b0381118282101715612c4357612c43612c0a565b60405290565b60405161014081016001600160401b0381118282101715612c4357612c43612c0a565b604051601f8201601f191681016001600160401b0381118282101715612c9457612c94612c0a565b604052919050565b60006001600160401b03821115612cb557612cb5612c0a565b50601f01601f191660200190565b6000612cd6612cd184612c9c565b612c6c565b9050828152838383011115612cea57600080fd5b828260208301376000602084830101529392505050565b600082601f830112612d1257600080fd5b611e4f83833560208501612cc3565b8015158114610b0557600080fd5b60008060408385031215612d4257600080fd5b82356001600160401b03811115612d5857600080fd5b612d6485828601612d01565b9250506020830135612be281612d21565b60008083601f840112612d8757600080fd5b5081356001600160401b03811115612d9e57600080fd5b6020830191508360208260051b8501011115612db957600080fd5b9250929050565b60008060008060408587031215612dd657600080fd5b84356001600160401b0380821115612ded57600080fd5b612df988838901612d75565b90965094506020870135915080821115612e1257600080fd5b50612e1f87828801612d75565b95989497509550505050565b60008060408385031215612e3e57600080fd5b8235612e4981612ba8565b915060208301356001600160401b03811115612e6457600080fd5b8301601f81018513612e7557600080fd5b612e8485823560208401612cc3565b9150509250929050565b60006001600160401b03821115612ea757612ea7612c0a565b5060051b60200190565b600082601f830112612ec257600080fd5b81356020612ed2612cd183612e8e565b82815260059290921b84018101918181019086841115612ef157600080fd5b8286015b84811015612f305780356001600160401b03811115612f145760008081fd5b612f228986838b0101612d01565b845250918301918301612ef5565b509695505050505050565b60008060008060808587031215612f5157600080fd5b8435612f5c81612d21565b935060208501356001600160401b0380821115612f7857600080fd5b612f8488838901612eb1565b94506040870135915080821115612f9a57600080fd5b612fa688838901612eb1565b93506060870135915080821115612fbc57600080fd5b50612fc987828801612eb1565b91505092959194509250565b60006020808385031215612fe857600080fd5b82356001600160401b03811115612ffe57600080fd5b8301601f8101851361300f57600080fd5b803561301d612cd182612e8e565b81815260059190911b8201830190838101908783111561303c57600080fd5b928401925b8284101561306357833561305481612ba8565b82529284019290840190613041565b979650505050505050565b60006020828403121561308057600080fd5b81356001600160401b0381111561309657600080fd5b6130a284828501612d01565b949350505050565b60005b838110156130c55781810151838201526020016130ad565b838111156126805750506000910152565b600081518084526130ee8160208601602086016130aa565b601f01601f19169290920160200192915050565b602081526000611e4f60208301846130d6565b6000806040838503121561312857600080fd5b823561313381612ba8565b946020939093013593505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6040815260006131ec60408301856130d6565b905082151560208301529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161323b5761323b613213565b5060010190565b600082516132548184602087016130aa565b9190910192915050565b600082601f83011261326f57600080fd5b815161327d612cd182612c9c565b81815284602083860101111561329257600080fd5b6130a28260208301602087016130aa565b805161250681612ba8565b805161250681612b5d565b805161250681612d21565b600061018082840312156132d757600080fd5b6132df612c20565b905081516001600160401b03808211156132f857600080fd5b6133048583860161325e565b8352613312602085016132ae565b6020840152613323604085016132ae565b60408401526060840151606084015261333e608085016132ae565b608084015261334f60a085016132b9565b60a084015261336060c085016132b9565b60c084015260e084015191508082111561337957600080fd5b6133858583860161325e565b60e0840152610100915081840151818111156133a057600080fd5b6133ac8682870161325e565b8385015250610120915081840151818111156133c757600080fd5b6133d38682870161325e565b8385015250610140915081840151818111156133ee57600080fd5b6133fa8682870161325e565b83850152506101609150818401518181111561341557600080fd5b6134218682870161325e565b8385015250505092915050565b6000806040838503121561344157600080fd5b82516001600160401b038082111561345857600080fd5b90840190610140828703121561346d57600080fd5b613475612c49565b82518281111561348457600080fd5b6134908882860161325e565b8252506020830151828111156134a557600080fd5b6134b18882860161325e565b6020830152506040830151828111156134c957600080fd5b6134d58882860161325e565b6040830152506060830151828111156134ed57600080fd5b6134f98882860161325e565b60608301525060808301518281111561351157600080fd5b61351d8882860161325e565b60808301525060a08301518281111561353557600080fd5b6135418882860161325e565b60a08301525060c08301518281111561355957600080fd5b6135658882860161325e565b60c08301525060e08301518281111561357d57600080fd5b6135898882860161325e565b60e08301525061010080840151838111156135a357600080fd5b6135af8982870161325e565b8284015250506101206135c38185016132a3565b9082015260208601519094509150808211156135de57600080fd5b50612e84858286016132c4565b6000602082840312156135fd57600080fd5b8151611e4f81612d21565b60006020828403121561361a57600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516136a78160178501602088016130aa565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516136d88160288401602088016130aa565b01602801949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600081600019048311821515161561374957613749613213565b500290565b6000821982111561376157613761613213565b500190565b60008161377557613775613213565b50600019019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d051ea7fe446609972795714bdbc5a65fa4a511a3ff19b60dc2751da363b407c64736f6c634300080e0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x6080604052600436106102675760003560e01c80639deb50bf11610144578063d4e457ec116100b6578063e882e37b1161007a578063e882e37b146107cf578063f141b84f146107ef578063f2fde38b14610811578063f3edb9ec14610831578063f75991cd1461086d578063ffa1ad74146108a957600080fd5b8063d4e457ec1461072d578063d547741f1461074f578063d6d10f3a1461076f578063dc5f560e1461078f578063e0051e2a146107af57600080fd5b8063abf410e511610108578063abf410e514610659578063bab5adc31461067a578063bd64648e1461069a578063c36a2573146106ba578063c42f358a146106dc578063ccbaa818146106fc57600080fd5b80639deb50bf1461057b578063a1631e4b1461059b578063a217fddf146105db578063a9a484c5146105f0578063abd840211461061d57600080fd5b80635c975abb116101dd578063850c3864116101a1578063850c38641461048d5780638662522f146104ad5780638da5cb5b146104e957806391d148541461051b57806395f187a51461053b5780639891fd121461055b57600080fd5b80635c975abb146103fa57806365918979146104125780636ca0b0d714610443578063715018a61461045857806381e48e901461046d57600080fd5b80633659cfe61161022f5780633659cfe61461034157806336c63c701461036157806339cd7a8a14610392578063437d0366146103b25780634f1ef286146103d257806352d1902d146103e557600080fd5b806301ffc9a71461026c5780630c0efecc146102a1578063248a9ca3146102c35780632f2ff15d1461030157806336568abe14610321575b600080fd5b34801561027857600080fd5b5061028c610287366004612b33565b6108da565b60405190151581526020015b60405180910390f35b3480156102ad57600080fd5b506102c16102bc366004612b72565b610911565b005b3480156102cf57600080fd5b506102f36102de366004612b8f565b600090815260c9602052604090206001015490565b604051908152602001610298565b34801561030d57600080fd5b506102c161031c366004612bbd565b61097c565b34801561032d57600080fd5b506102c161033c366004612bbd565b6109a6565b34801561034d57600080fd5b506102c161035c366004612bed565b610a29565b34801561036d57600080fd5b5061028c61037c366004612bed565b6101646020526000908152604090205460ff1681565b34801561039e57600080fd5b506102c16103ad366004612d2f565b610b08565b3480156103be57600080fd5b506102c16103cd366004612dc0565b610c7c565b6102c16103e0366004612e2b565b610df0565b3480156103f157600080fd5b506102f3610ebc565b34801561040657600080fd5b5060655460ff1661028c565b34801561041e57600080fd5b5061028c61042d366004612bed565b6101636020526000908152604090205460ff1681565b34801561044f57600080fd5b506102f3600281565b34801561046457600080fd5b506102c1610f6f565b34801561047957600080fd5b506102c1610488366004612f3b565b610fd5565b34801561049957600080fd5b506102c16104a8366004612fd5565b611430565b3480156104b957600080fd5b5061028c6104c836600461306e565b805160208183018101805161015f8252928201919093012091525460ff1681565b3480156104f557600080fd5b506033546001600160a01b03165b6040516001600160a01b039091168152602001610298565b34801561052757600080fd5b5061028c610536366004612bbd565b61150b565b34801561054757600080fd5b506102c1610556366004612fd5565b611536565b34801561056757600080fd5b506102c1610576366004612fd5565b611611565b34801561058757600080fd5b506102c1610596366004612fd5565b6116ec565b3480156105a757600080fd5b50610165546105c390600160a01b90046001600160401b031681565b6040516001600160401b039091168152602001610298565b3480156105e757600080fd5b506102f3600081565b3480156105fc57600080fd5b5061061061060b366004612bed565b6117c7565b6040516102989190613102565b34801561062957600080fd5b5061028c610638366004613115565b61016660209081526000928352604080842090915290825290205460ff1681565b34801561066557600080fd5b5061016554610503906001600160a01b031681565b34801561068657600080fd5b506102c1610695366004612dc0565b611a97565b3480156106a657600080fd5b506106106106b5366004613115565b611b13565b3480156106c657600080fd5b506101655461028c90600160e81b900460ff1681565b3480156106e857600080fd5b506102c16106f7366004612fd5565b611b76565b34801561070857600080fd5b5061028c610717366004612bed565b6101626020526000908152604090205460ff1681565b34801561073957600080fd5b506101655461028c90600160f01b900460ff1681565b34801561075b57600080fd5b506102c161076a366004612bbd565b611c51565b34801561077b57600080fd5b506102c161078a366004612fd5565b611c76565b34801561079b57600080fd5b506106106107aa366004612bed565b611d51565b3480156107bb57600080fd5b506102c16107ca366004612dc0565b611eac565b3480156107db57600080fd5b506102c16107ea366004612bed565b612018565b3480156107fb57600080fd5b506101655461028c90600160e01b900460ff1681565b34801561081d57600080fd5b506102c161082c366004612bed565b61206f565b34801561083d57600080fd5b5061028c61084c36600461306e565b80516020818301810180516101608252928201919093012091525460ff1681565b34801561087957600080fd5b5061028c61088836600461306e565b80516020818301810180516101618252928201919093012091525460ff1681565b3480156108b557600080fd5b50610610604051806040016040528060058152602001640312e302e360dc1b81525081565b60006001600160e01b03198216637965db0b60e01b148061090b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b610919612146565b610165805467ffffffffffffffff60a01b1916600160a01b6001600160401b038416908102919091179091556040519081527f87f670402a6c72fff3b60ba5223165f062b58d671871fc2c49ea96101fdd19a0906020015b60405180910390a150565b600082815260c960205260409020600101546109978161219c565b6109a183836121a6565b505050565b6001600160a01b0381163314610a1b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610a25828261222c565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a715760405162461bcd60e51b8152600401610a1290613141565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610aba60008051602061377e833981519152546001600160a01b031690565b6001600160a01b031614610ae05760405162461bcd60e51b8152600401610a129061318d565b610ae981612293565b60408051600080825260208201909252610b059183919061229b565b50565b610b10612146565b604080518082019091526007815266726567696f6e7360c81b6020820152610b39908390612406565b15610b755780610b5857610165805460ff60e01b191690556000610b6f565b610165805460ff60e01b1916600160e01b17905560015b50610c3f565b6040805180820190915260098152687374616e646172647360b81b6020820152610ba0908390612406565b15610bd85780610bbf57610165805460ff60e81b191690556000610b6f565b610165805460ff60e81b1916600160e81b179055610c3f565b60408051808201909152600d81526c6d6574686f646f6c6f6769657360981b6020820152610c07908390612406565b15610c3f5780610c2657610165805460ff60f01b191690556000610c3d565b610165805460ff60f01b1916600160f01b17905560015b505b7fcdc35455a1217219a4240bb18a7d2978eb98208f22f7ec36d6a1381c28f9d0f58282604051610c709291906131d9565b60405180910390a15050565b610c84612146565b82818114610cbc576040805180820182526002815261189960f11b6020820152905162461bcd60e51b8152610a129190600401613102565b60005b81811015610de85760016101666000888885818110610ce057610ce06131fd565b9050602002016020810190610cf59190612bed565b6001600160a01b03166001600160a01b031681526020019081526020016000206000868685818110610d2957610d296131fd565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055507f198e97d55459e132457f017a1cba6e960ac569ae89045a8b978702ffd7ea7977868683818110610d8857610d886131fd565b9050602002016020810190610d9d9190612bed565b858584818110610daf57610daf6131fd565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1610de181613229565b9050610cbf565b505050505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610e385760405162461bcd60e51b8152600401610a1290613141565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e8160008051602061377e833981519152546001600160a01b031690565b6001600160a01b031614610ea75760405162461bcd60e51b8152600401610a129061318d565b610eb082612293565b610a258282600161229b565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f5c5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a12565b5060008051602061377e83398151915290565b6033546001600160a01b03163314610fc95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a12565b610fd3600061242c565b565b610fdd612146565b60005b825181101561114b5784151560010361109957600161016084838151811061100a5761100a6131fd565b602002602001015160405161101f9190613242565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507fa27e97999993c298fae0b7088ff732fe078cc1585665ee1554220b3cbe6317a9838281518110611077576110776131fd565b602002602001015160405161108c9190613102565b60405180910390a161113b565b60006101608483815181106110b0576110b06131fd565b60200260200101516040516110c59190613242565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f0127ddc00426c693b5becb26ba43a260c781ebc323b61d3b24b61e4dc5c93c7183828151811061111d5761111d6131fd565b60200260200101516040516111329190613102565b60405180910390a15b61114481613229565b9050610fe0565b5060005b81518110156112ba57841515600103611208576001610161838381518110611179576111796131fd565b602002602001015160405161118e9190613242565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f156643e9a7f860e95993739893595e6ee1d04d9ff1b98567dbe9d5681cd152b28282815181106111e6576111e66131fd565b60200260200101516040516111fb9190613102565b60405180910390a16112aa565b600061016183838151811061121f5761121f6131fd565b60200260200101516040516112349190613242565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f21a77ac4edf49633047cc4e32b10dfe633811216214400e0e1f507c3f7287b6182828151811061128c5761128c6131fd565b60200260200101516040516112a19190613102565b60405180910390a15b6112b381613229565b905061114f565b5060005b83518110156114295784151560010361137757600161015f8583815181106112e8576112e86131fd565b60200260200101516040516112fd9190613242565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f3df7a1330febee3646ae4a0f0e46c94c046f0ee810b2b7f1fa10fa8f34d7b7ef848281518110611355576113556131fd565b602002602001015160405161136a9190613102565b60405180910390a1611419565b600061015f85838151811061138e5761138e6131fd565b60200260200101516040516113a39190613242565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507fc84badb33408cce6e89b30a735d8f06e094fa4a19c01c2da66718f490c672f658482815181106113fb576113fb6131fd565b60200260200101516040516114109190613102565b60405180910390a15b61142281613229565b90506112be565b5050505050565b611438612146565b60005b8151811015610a25576001610164600084848151811061145d5761145d6131fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f85fc56aecce1ef094be244fd6b70c13cbc3786dacfb5ddb457eaa6e81924b6728282815181106114cf576114cf6131fd565b60200260200101516040516114f391906001600160a01b0391909116815260200190565b60405180910390a161150481613229565b905061143b565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61153e612146565b60005b8151811015610a255760016101626000848481518110611563576115636131fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f96c62648e20245db42813046d53ed1697aab1c1a06b53092fd5f74f76d9f0e138282815181106115d5576115d56131fd565b60200260200101516040516115f991906001600160a01b0391909116815260200190565b60405180910390a161160a81613229565b9050611541565b611619612146565b60005b8151811015610a25576000610162600084848151811061163e5761163e6131fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f25add64d709821cd4d2f0456865755a330b78c8fb0f438088364f480710acc408282815181106116b0576116b06131fd565b60200260200101516040516116d491906001600160a01b0391909116815260200190565b60405180910390a16116e581613229565b905061161c565b6116f4612146565b60005b8151811015610a255760006101636000848481518110611719576117196131fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f8c23715cef0c44b9a0c13ba0edb2d13490a2ff75434e8dc238e3dfce2896b23382828151811061178b5761178b6131fd565b60200260200101516040516117af91906001600160a01b0391909116815260200190565b60405180910390a16117c081613229565b90506116f7565b606061182860405180610140016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160006001600160a01b031681525090565b6118ab6040518061018001604052806060815260200160006001600160401b0316815260200160006001600160401b031681526020016000815260200160006001600160401b0316815260200160001515815260200160001515815260200160608152602001606081526020016060815260200160608152602001606081525090565b836001600160a01b031663152583de6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156118e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611911919081019061342e565b6101655460208201519294509092506001600160401b03600160a01b90910481169116101561195a5750506040805180820190915260018152601b60f91b602082015292915050565b610165601c9054906101000a900460ff16151561015f83606001516040516119829190613242565b9081526040519081900360200190205460ff161515146119bc5750506040805180820190915260018152603760f81b602082015292915050565b610165601d9054906101000a900460ff16151561016083602001516040516119e49190613242565b9081526040519081900360200190205460ff16151514611a1e5750506040805180820190915260018152600760fb1b602082015292915050565b610165601e9054906101000a900460ff1615156101618360400151604051611a469190613242565b9081526040519081900360200190205460ff16151514611a805750506040805180820190915260018152603960f81b602082015292915050565b505060408051602081019091526000815292915050565b6000611aa3600161247e565b90508015611abb576000805461ff0019166101001790555b611ac78585858561250b565b8015611429576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6001600160a01b03821660009081526101666020908152604080832084845290915290205460609060ff16611b6057506040805180820190915260018152603560f81b602082015261090b565b5060408051602081019091526000815292915050565b611b7e612146565b60005b8151811015610a255760016101636000848481518110611ba357611ba36131fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f6e22096f78ca0e0ca190f9724d8a2ded2155ade3a469817cb9e95989a5124823828281518110611c1557611c156131fd565b6020026020010151604051611c3991906001600160a01b0391909116815260200190565b60405180910390a1611c4a81613229565b9050611b81565b600082815260c96020526040902060010154611c6c8161219c565b6109a1838361222c565b611c7e612146565b60005b8151811015610a255760006101646000848481518110611ca357611ca36131fd565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f4a522111770e286506eab11ca1d3cb5ca4a24a84458affbb5372bec78340102e828281518110611d1557611d156131fd565b6020026020010151604051611d3991906001600160a01b0391909116815260200190565b60405180910390a1611d4a81613229565b9050611c81565b61016554604051633a37b16d60e11b81526001600160a01b03838116600483015260609260009291169063746f62da90602401602060405180830381865afa158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc591906135eb565b90508015611e56576001600160a01b0383166000908152610163602052604090205460ff1615611e05575050604080516020810190915260008152919050565b6001600160a01b0383166000908152610164602052604090205460ff1615611e465750506040805180820190915260018152600d60fa1b6020820152919050565b611e4f836117c7565b9392505050565b6001600160a01b0383166000908152610162602052604090205460ff16611e965750506040805180820190915260018152603560f81b6020820152919050565b5050604080516020810190915260008152919050565b611eb4612146565b82818114611eec576040805180820182526002815261189960f11b6020820152905162461bcd60e51b8152610a129190600401613102565b60005b81811015610de85760006101666000888885818110611f1057611f106131fd565b9050602002016020810190611f259190612bed565b6001600160a01b03166001600160a01b031681526020019081526020016000206000868685818110611f5957611f596131fd565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055507ff62e4e7e6461caa7928ab1decfa538ceda320c494d2e23ecf29dc5a11a24bdcd868683818110611fb857611fb86131fd565b9050602002016020810190611fcd9190612bed565b858584818110611fdf57611fdf6131fd565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a161201181613229565b9050611eef565b612020612146565b61016580546001600160a01b0319166001600160a01b0383169081179091556040519081527f86907b53cf2024579968511876daf0b4620d65803b550e33101baf70aeb6f5eb90602001610971565b6033546001600160a01b031633146120c95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a12565b6001600160a01b03811661212e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a12565b610b058161242c565b6001600160a01b03163b151590565b336121596033546001600160a01b031690565b6001600160a01b03161460405180604001604052806002815260200161062760f31b81525090610b055760405162461bcd60e51b8152600401610a129190613102565b610b05813361255b565b6121b0828261150b565b610a2557600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556121e83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612236828261150b565b15610a2557600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b610b05612146565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156122ce576109a1836125bf565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612328575060408051601f3d908101601f1916820190925261232591810190613608565b60015b61238b5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a12565b60008051602061377e83398151915281146123fa5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a12565b506109a183838361265b565b600081518351148015611e4f575081805190602001208380519060200120149392505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff16156124c5578160ff1660011480156124a15750303b155b6124bd5760405162461bcd60e51b8152600401610a1290613621565b506000919050565b60005460ff8084169116106124ec5760405162461bcd60e51b8152600401610a1290613621565b506000805460ff191660ff92909216919091179055600190565b919050565b6000612517600161247e565b9050801561252f576000805461ff0019166101001790555b612537612686565b61253f6126ad565b6125476126dd565b61255385858585612710565b611ac7612686565b612565828261150b565b610a255761257d816001600160a01b0316601461282b565b61258883602061282b565b60405160200161259992919061366f565b60408051601f198184030181529082905262461bcd60e51b8252610a1291600401613102565b6001600160a01b0381163b61262c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a12565b60008051602061377e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612664836129c6565b6000825111806126715750805b156109a1576126808383612a06565b50505050565b600054610100900460ff16610fd35760405162461bcd60e51b8152600401610a12906136e4565b600054610100900460ff166126d45760405162461bcd60e51b8152600401610a12906136e4565b610fd33361242c565b600054610100900460ff166127045760405162461bcd60e51b8152600401610a12906136e4565b6065805460ff19169055565b8281146127575760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606401610a12565b61275f612686565b6000805b848110156127e8576127b3848483818110612780576127806131fd565b90506020020135878784818110612799576127996131fd565b90506020020160208101906127ae9190612bed565b6121a6565b60008484838181106127c7576127c76131fd565b90506020020135036127d857600191505b6127e181613229565b9050612763565b50806114295760405162461bcd60e51b8152602060048201526012602482015271139bc818591b5a5b881cdc1958da599a595960721b6044820152606401610a12565b6060600061283a83600261372f565b61284590600261374e565b6001600160401b0381111561285c5761285c612c0a565b6040519080825280601f01601f191660200182016040528015612886576020820181803683370190505b509050600360fc1b816000815181106128a1576128a16131fd565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106128d0576128d06131fd565b60200101906001600160f81b031916908160001a90535060006128f484600261372f565b6128ff90600161374e565b90505b6001811115612977576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612933576129336131fd565b1a60f81b828281518110612949576129496131fd565b60200101906001600160f81b031916908160001a90535060049490941c9361297081613766565b9050612902565b508315611e4f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a12565b6129cf816125bf565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612a6e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a12565b600080846001600160a01b031684604051612a899190613242565b600060405180830381855af49150503d8060008114612ac4576040519150601f19603f3d011682016040523d82523d6000602084013e612ac9565b606091505b5091509150612af1828260405180606001604052806027815260200161379e60279139612afa565b95945050505050565b60608315612b09575081611e4f565b825115612b195782518084602001fd5b8160405162461bcd60e51b8152600401610a129190613102565b600060208284031215612b4557600080fd5b81356001600160e01b031981168114611e4f57600080fd5b6001600160401b0381168114610b0557600080fd5b600060208284031215612b8457600080fd5b8135611e4f81612b5d565b600060208284031215612ba157600080fd5b5035919050565b6001600160a01b0381168114610b0557600080fd5b60008060408385031215612bd057600080fd5b823591506020830135612be281612ba8565b809150509250929050565b600060208284031215612bff57600080fd5b8135611e4f81612ba8565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b0381118282101715612c4357612c43612c0a565b60405290565b60405161014081016001600160401b0381118282101715612c4357612c43612c0a565b604051601f8201601f191681016001600160401b0381118282101715612c9457612c94612c0a565b604052919050565b60006001600160401b03821115612cb557612cb5612c0a565b50601f01601f191660200190565b6000612cd6612cd184612c9c565b612c6c565b9050828152838383011115612cea57600080fd5b828260208301376000602084830101529392505050565b600082601f830112612d1257600080fd5b611e4f83833560208501612cc3565b8015158114610b0557600080fd5b60008060408385031215612d4257600080fd5b82356001600160401b03811115612d5857600080fd5b612d6485828601612d01565b9250506020830135612be281612d21565b60008083601f840112612d8757600080fd5b5081356001600160401b03811115612d9e57600080fd5b6020830191508360208260051b8501011115612db957600080fd5b9250929050565b60008060008060408587031215612dd657600080fd5b84356001600160401b0380821115612ded57600080fd5b612df988838901612d75565b90965094506020870135915080821115612e1257600080fd5b50612e1f87828801612d75565b95989497509550505050565b60008060408385031215612e3e57600080fd5b8235612e4981612ba8565b915060208301356001600160401b03811115612e6457600080fd5b8301601f81018513612e7557600080fd5b612e8485823560208401612cc3565b9150509250929050565b60006001600160401b03821115612ea757612ea7612c0a565b5060051b60200190565b600082601f830112612ec257600080fd5b81356020612ed2612cd183612e8e565b82815260059290921b84018101918181019086841115612ef157600080fd5b8286015b84811015612f305780356001600160401b03811115612f145760008081fd5b612f228986838b0101612d01565b845250918301918301612ef5565b509695505050505050565b60008060008060808587031215612f5157600080fd5b8435612f5c81612d21565b935060208501356001600160401b0380821115612f7857600080fd5b612f8488838901612eb1565b94506040870135915080821115612f9a57600080fd5b612fa688838901612eb1565b93506060870135915080821115612fbc57600080fd5b50612fc987828801612eb1565b91505092959194509250565b60006020808385031215612fe857600080fd5b82356001600160401b03811115612ffe57600080fd5b8301601f8101851361300f57600080fd5b803561301d612cd182612e8e565b81815260059190911b8201830190838101908783111561303c57600080fd5b928401925b8284101561306357833561305481612ba8565b82529284019290840190613041565b979650505050505050565b60006020828403121561308057600080fd5b81356001600160401b0381111561309657600080fd5b6130a284828501612d01565b949350505050565b60005b838110156130c55781810151838201526020016130ad565b838111156126805750506000910152565b600081518084526130ee8160208601602086016130aa565b601f01601f19169290920160200192915050565b602081526000611e4f60208301846130d6565b6000806040838503121561312857600080fd5b823561313381612ba8565b946020939093013593505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6040815260006131ec60408301856130d6565b905082151560208301529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161323b5761323b613213565b5060010190565b600082516132548184602087016130aa565b9190910192915050565b600082601f83011261326f57600080fd5b815161327d612cd182612c9c565b81815284602083860101111561329257600080fd5b6130a28260208301602087016130aa565b805161250681612ba8565b805161250681612b5d565b805161250681612d21565b600061018082840312156132d757600080fd5b6132df612c20565b905081516001600160401b03808211156132f857600080fd5b6133048583860161325e565b8352613312602085016132ae565b6020840152613323604085016132ae565b60408401526060840151606084015261333e608085016132ae565b608084015261334f60a085016132b9565b60a084015261336060c085016132b9565b60c084015260e084015191508082111561337957600080fd5b6133858583860161325e565b60e0840152610100915081840151818111156133a057600080fd5b6133ac8682870161325e565b8385015250610120915081840151818111156133c757600080fd5b6133d38682870161325e565b8385015250610140915081840151818111156133ee57600080fd5b6133fa8682870161325e565b83850152506101609150818401518181111561341557600080fd5b6134218682870161325e565b8385015250505092915050565b6000806040838503121561344157600080fd5b82516001600160401b038082111561345857600080fd5b90840190610140828703121561346d57600080fd5b613475612c49565b82518281111561348457600080fd5b6134908882860161325e565b8252506020830151828111156134a557600080fd5b6134b18882860161325e565b6020830152506040830151828111156134c957600080fd5b6134d58882860161325e565b6040830152506060830151828111156134ed57600080fd5b6134f98882860161325e565b60608301525060808301518281111561351157600080fd5b61351d8882860161325e565b60808301525060a08301518281111561353557600080fd5b6135418882860161325e565b60a08301525060c08301518281111561355957600080fd5b6135658882860161325e565b60c08301525060e08301518281111561357d57600080fd5b6135898882860161325e565b60e08301525061010080840151838111156135a357600080fd5b6135af8982870161325e565b8284015250506101206135c38185016132a3565b9082015260208601519094509150808211156135de57600080fd5b50612e84858286016132c4565b6000602082840312156135fd57600080fd5b8151611e4f81612d21565b60006020828403121561361a57600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516136a78160178501602088016130aa565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516136d88160288401602088016130aa565b01602801949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600081600019048311821515161561374957613749613213565b500290565b6000821982111561376157613761613213565b500190565b60008161377557613775613213565b50600019019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d051ea7fe446609972795714bdbc5a65fa4a511a3ff19b60dc2751da363b407c64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAttributes(bool,string[],string[],string[])": {
        "params": {
          "addToList": "determines whether attribute should be added or removed Other params are arrays of attributes to be added"
        }
      },
      "addToExternalAllowlist(address[])": {
        "params": {
          "erc20Addr": "accepts an array of contract addresses"
        }
      },
      "addToExternalERC1155Allowlist(address[],uint256[])": {
        "details": "Both arrays must be of the same length. Each token address is associated with the token ID at the same index.",
        "params": {
          "tokenAddresses": "An array of contract addresses",
          "tokenIds": "An array of token IDs"
        }
      },
      "addToInternalAllowlist(address[])": {
        "params": {
          "erc20Addr": "accepts an array of contract addresses"
        }
      },
      "addToInternalBlocklist(address[])": {
        "params": {
          "erc20Addr": "accepts an array of contract addresses"
        }
      },
      "checkAttributeMatching(address)": {
        "params": {
          "erc20Addr": "The ERC20 token"
        },
        "returns": {
          "_0": "String with error code if any error occurs, else empty string"
        }
      },
      "checkERC1155Eligible(address,uint256)": {
        "params": {
          "tokenAddress": "address of the ERC1155 token",
          "tokenId": "ID of the ERC1155 token"
        },
        "returns": {
          "_0": "String with error code if any error occurs, else empty string"
        }
      },
      "checkEligible(address)": {
        "params": {
          "erc20Addr": "The ERC20 token"
        },
        "returns": {
          "_0": "String with error code if any error occurs, else empty string"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "removeFromExternalAllowlist(address[])": {
        "params": {
          "erc20Addr": "accepts an array of contract addresses"
        }
      },
      "removeFromExternalERC1155Allowlist(address[],uint256[])": {
        "details": "Both arrays must be of the same length. Each token address is associated with the token ID at the same index.",
        "params": {
          "tokenAddresses": "An array of contract addresses",
          "tokenIds": "An array of token IDs"
        }
      },
      "removeFromInternalAllowlist(address[])": {
        "params": {
          "erc20Addr": "accepts an array of contract addressesc"
        }
      },
      "removeFromInternalBlocklist(address[])": {
        "params": {
          "erc20Addr": "accepts an array of contract addresses"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setMinimumVintageStartTime(uint64)": {
        "params": {
          "_minimumVintageStartTime": "unix time format"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "switchMapping(string,bool)": {
        "params": {
          "_mappingName": "attribute mapping of project-vintage data",
          "accepted": "determines if mapping works as a blocklist or allowlist"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAttributes(bool,string[],string[],string[])": {
        "notice": "Function to add attributes for filtering (does not support complex AttributeSets)"
      },
      "addToExternalAllowlist(address[])": {
        "notice": "Function to allowlist selected external non-TCO2 contracts by their address"
      },
      "addToExternalERC1155Allowlist(address[],uint256[])": {
        "notice": "Add ERC-1155 tokens to external allowlist"
      },
      "addToInternalAllowlist(address[])": {
        "notice": "Function to allowlist certain TCO2 contracts by their address"
      },
      "addToInternalBlocklist(address[])": {
        "notice": "Function to blocklist certain TCO2 contracts by their address"
      },
      "checkAttributeMatching(address)": {
        "notice": "Checks whether incoming ERC20s match the accepted criteria/attributes"
      },
      "checkERC1155Eligible(address,uint256)": {
        "notice": "Checks if an ERC-1155 token is eligible for this pool"
      },
      "checkEligible(address)": {
        "notice": "Checks if an ERC20 token is eligible for this pool"
      },
      "removeFromExternalAllowlist(address[])": {
        "notice": "Function to remove ERC20 addresses from external allowlist"
      },
      "removeFromExternalERC1155Allowlist(address[],uint256[])": {
        "notice": "Remove ERC-1155 tokens from external allowlist"
      },
      "removeFromInternalAllowlist(address[])": {
        "notice": "Function to remove TCO2 addresses from internal allowlist"
      },
      "removeFromInternalBlocklist(address[])": {
        "notice": "Function to remove TCO2 addresses from internal blocklist"
      },
      "setMinimumVintageStartTime(uint64)": {
        "notice": "Determines the minimum vintage start time acceptance criteria of ERC20s"
      },
      "switchMapping(string,bool)": {
        "notice": "Generic function to switch attributes mappings into either acceptance or rejection criteria"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2390,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2393,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5494,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1881,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1993,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2682,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 2771,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5801,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1497,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1492_storage)"
      },
      {
        "astId": 1796,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2372,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2660,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 28198,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "regions",
        "offset": 0,
        "slot": "351",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 28202,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "standards",
        "offset": 0,
        "slot": "352",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 28206,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "methodologies",
        "offset": 0,
        "slot": "353",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 28211,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "externalAllowlist",
        "offset": 0,
        "slot": "354",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 28216,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "internalAllowlist",
        "offset": 0,
        "slot": "355",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 28221,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "internalBlocklist",
        "offset": 0,
        "slot": "356",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 28224,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "contractRegistry",
        "offset": 0,
        "slot": "357",
        "type": "t_address"
      },
      {
        "astId": 28226,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "minimumVintageStartTime",
        "offset": 20,
        "slot": "357",
        "type": "t_uint64"
      },
      {
        "astId": 28229,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "regionsIsAcceptedMapping",
        "offset": 28,
        "slot": "357",
        "type": "t_bool"
      },
      {
        "astId": 28231,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "standardsIsAcceptedMapping",
        "offset": 29,
        "slot": "357",
        "type": "t_bool"
      },
      {
        "astId": 28233,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "methodologiesIsAcceptedMapping",
        "offset": 30,
        "slot": "357",
        "type": "t_bool"
      },
      {
        "astId": 28241,
        "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
        "label": "externalERC1155Allowlist",
        "offset": 0,
        "slot": "358",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1492_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1492_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)1492_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 1489,
            "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1491,
            "contract": "contracts/pools/REDDFilter.sol:REDDFilter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}