{
  "address": "0x48E04110aa4691ec3E9493187e6e9A3dB613e6e4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "standard",
          "type": "string"
        }
      ],
      "name": "TCO2FactoryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_RELEASE_CANDIDATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "standardRegistry",
          "type": "string"
        }
      ],
      "name": "addERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "carbonOffsetBatchesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "carbonProjectVintagesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "carbonProjectsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "checkERC20",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accounts",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_roles",
          "type": "bytes32[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "isValidERC20",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseSystem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "projectVintageERC20Registry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retirementCertificateSlicerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retirementCertificateSlicesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retirementCertificatesAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setCarbonOffsetBatchesAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setCarbonProjectVintagesAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setCarbonProjectsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setRetirementCertificateSlicerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setRetirementCertificateSlicesAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setRetirementCertificatesAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setToucanCarbonOffsetsEscrowAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tco2Factory",
          "type": "address"
        }
      ],
      "name": "setToucanCarbonOffsetsFactoryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supportedStandardRegistries",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "toucanCarbonOffsetFactories",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toucanCarbonOffsetsEscrowAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "standardRegistry",
          "type": "string"
        }
      ],
      "name": "toucanCarbonOffsetsFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpauseSystem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 4,
  "solcInputHash": "9b7531bafc755de0611b41ccc25dd072",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"standard\",\"type\":\"string\"}],\"name\":\"TCO2FactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_RELEASE_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"standardRegistry\",\"type\":\"string\"}],\"name\":\"addERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carbonOffsetBatchesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carbonProjectVintagesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carbonProjectsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"checkERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_roles\",\"type\":\"bytes32[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"isValidERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectVintageERC20Registry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retirementCertificateSlicerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retirementCertificateSlicesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retirementCertificatesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCarbonOffsetBatchesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCarbonProjectVintagesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setCarbonProjectsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRetirementCertificateSlicerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRetirementCertificateSlicesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRetirementCertificatesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setToucanCarbonOffsetsEscrowAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tco2Factory\",\"type\":\"address\"}],\"name\":\"setToucanCarbonOffsetsFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedStandardRegistries\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"toucanCarbonOffsetFactories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toucanCarbonOffsetsEscrowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"standardRegistry\",\"type\":\"string\"}],\"name\":\"toucanCarbonOffsetsFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The ToucanContractRegistry is queried by other contracts for current addresses\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"toucanCarbonOffsetsFactoryAddress(string)\":{\"details\":\"return the TCO2 factory address for the provided standard\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"PAUSER_ROLE\":{\"details\":\"All roles related to accessing this contract\"},\"VERSION\":{\"details\":\"Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addERC20(address,string)\":{\"notice\":\"Keep track of TCO2s per standard\"},\"checkERC20(address)\":{\"notice\":\"TODO: Kept for backwards-compatibility; will be removed in a future upgrade in favor of isValidERC20(erc20)\"},\"pauseSystem()\":{\"notice\":\"security function that pauses all contracts part of the carbon bridge\"},\"toucanCarbonOffsetFactories(string)\":{\"notice\":\"map of standard registries to tco2 factory addresses\"},\"unpauseSystem()\":{\"notice\":\"security function that unpauses all contracts part of the carbon bridge\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ToucanContractRegistry.sol\":\"ToucanContractRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/ToucanContractRegistry.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\n\\nimport './bases/RoleInitializer.sol';\\nimport './interfaces/IPausable.sol';\\nimport './interfaces/IToucanCarbonOffsetsFactory.sol';\\nimport './interfaces/IToucanContractRegistry.sol';\\nimport './libraries/Strings.sol';\\nimport './ToucanContractRegistryStorage.sol';\\n\\n/// @dev The ToucanContractRegistry is queried by other contracts for current addresses\\ncontract ToucanContractRegistry is\\n    ToucanContractRegistryStorageLegacy,\\n    OwnableUpgradeable,\\n    RoleInitializer,\\n    IToucanContractRegistry,\\n    UUPSUpgradeable,\\n    ToucanContractRegistryStorage\\n{\\n    using Strings for string;\\n\\n    // ----------------------------------------\\n    //      Constants\\n    // ----------------------------------------\\n\\n    /// @dev Version-related parameters. VERSION keeps track of production\\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\\n    /// of a VERSION in our staging environment.\\n    string public constant VERSION = '1.3.0';\\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\\n\\n    /// @dev All roles related to accessing this contract\\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\\n\\n    // ----------------------------------------\\n    //      Events\\n    // ----------------------------------------\\n\\n    event TCO2FactoryAdded(address indexed factory, string indexed standard);\\n\\n    // ----------------------------------------\\n    //      Modifiers\\n    // ----------------------------------------\\n\\n    modifier onlyBy(address _factory, address _owner) {\\n        require(\\n            _factory == msg.sender || _owner == msg.sender,\\n            'Caller is not the factory'\\n        );\\n        _;\\n    }\\n\\n    /// @dev modifier that only lets the contract's owner and granted pausers pause the system\\n    modifier onlyPausers() {\\n        require(\\n            hasRole(PAUSER_ROLE, msg.sender) || owner() == msg.sender,\\n            'Caller is not authorized'\\n        );\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice security function that pauses all contracts part of the carbon bridge\\n    function pauseSystem() external onlyPausers {\\n        IPausable cpv = IPausable(_carbonProjectVintagesAddress);\\n        if (!cpv.paused()) cpv.pause();\\n\\n        IPausable cp = IPausable(_carbonProjectsAddress);\\n        if (!cp.paused()) cp.pause();\\n\\n        IPausable cob = IPausable(_carbonOffsetBatchesAddress);\\n        if (!cob.paused()) cob.pause();\\n\\n        uint256 standardRegistriesLen = standardRegistries.length;\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < standardRegistriesLen; ) {\\n            string memory standardRegistry = standardRegistries[i];\\n            address factory = toucanCarbonOffsetFactories[standardRegistry];\\n\\n            IPausable tcof = IPausable(factory);\\n            if (!tcof.paused()) tcof.pause();\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @notice security function that unpauses all contracts part of the carbon bridge\\n    function unpauseSystem() external onlyOwner {\\n        IPausable cpv = IPausable(_carbonProjectVintagesAddress);\\n        if (cpv.paused()) cpv.unpause();\\n\\n        IPausable cp = IPausable(_carbonProjectsAddress);\\n        if (cp.paused()) cp.unpause();\\n\\n        IPausable cob = IPausable(_carbonOffsetBatchesAddress);\\n        if (cob.paused()) cob.unpause();\\n\\n        uint256 standardRegistriesLen = standardRegistries.length;\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < standardRegistriesLen; ) {\\n            string memory standardRegistry = standardRegistries[i];\\n            address factory = toucanCarbonOffsetFactories[standardRegistry];\\n\\n            IPausable tcof = IPausable(factory);\\n            if (tcof.paused()) tcof.unpause();\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // ----------------------------------------\\n    //      Upgradable related functions\\n    // ----------------------------------------\\n\\n    function initialize(address[] calldata _accounts, bytes32[] calldata _roles)\\n        external\\n        virtual\\n        initializer\\n    {\\n        __Ownable_init();\\n        __RoleInitializer_init_unchained(_accounts, _roles);\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        virtual\\n        override\\n        onlyOwner\\n    {}\\n\\n    // ----------------------------------------\\n    //              Setters\\n    // ----------------------------------------\\n    function setCarbonOffsetBatchesAddress(address _address)\\n        external\\n        onlyOwner\\n    {\\n        require(_address != address(0), 'Zero address');\\n        _carbonOffsetBatchesAddress = _address;\\n    }\\n\\n    function setCarbonProjectsAddress(address _address) external onlyOwner {\\n        require(_address != address(0), 'Zero address');\\n        _carbonProjectsAddress = _address;\\n    }\\n\\n    function setCarbonProjectVintagesAddress(address _address)\\n        external\\n        onlyOwner\\n    {\\n        require(_address != address(0), 'Zero address');\\n        _carbonProjectVintagesAddress = _address;\\n    }\\n\\n    function setToucanCarbonOffsetsFactoryAddress(address tco2Factory)\\n        external\\n        onlyOwner\\n    {\\n        require(tco2Factory != address(0), 'Zero address');\\n\\n        // Get the standard registry from the factory\\n        string memory standardRegistry = IToucanCarbonOffsetsFactory(\\n            tco2Factory\\n        ).standardRegistry();\\n        require(bytes(standardRegistry).length != 0, 'Empty standard registry');\\n\\n        if (!standardRegistryExists(standardRegistry)) {\\n            standardRegistries.push(standardRegistry);\\n        }\\n        toucanCarbonOffsetFactories[standardRegistry] = tco2Factory;\\n\\n        emit TCO2FactoryAdded(tco2Factory, standardRegistry);\\n    }\\n\\n    function standardRegistryExists(string memory standard)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        uint256 standardRegistriesLen = standardRegistries.length;\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < standardRegistriesLen; ) {\\n            if (standardRegistries[i].equals(standard)) {\\n                return true;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function setToucanCarbonOffsetsEscrowAddress(address _address)\\n        external\\n        onlyOwner\\n    {\\n        require(_address != address(0), 'Zero address');\\n        _toucanCarbonOffsetsEscrowAddress = _address;\\n    }\\n\\n    function setRetirementCertificatesAddress(address _address)\\n        external\\n        onlyOwner\\n    {\\n        require(_address != address(0), 'Zero address');\\n        _retirementCertificatesAddress = _address;\\n    }\\n\\n    function setRetirementCertificateSlicerAddress(address _address)\\n        external\\n        onlyOwner\\n    {\\n        require(_address != address(0), 'Zero address');\\n        _retirementCertificateSlicerAddress = _address;\\n    }\\n\\n    function setRetirementCertificateSlicesAddress(address _address)\\n        external\\n        onlyOwner\\n    {\\n        require(_address != address(0), 'Zero address');\\n        _retirementCertificateSlicesAddress = _address;\\n    }\\n\\n    /// @notice Keep track of TCO2s per standard\\n    function addERC20(address erc20, string calldata standardRegistry)\\n        external\\n        onlyBy(toucanCarbonOffsetFactories[standardRegistry], owner())\\n    {\\n        projectVintageERC20Registry[erc20] = true;\\n    }\\n\\n    // ----------------------------------------\\n    //              Getters\\n    // ----------------------------------------\\n\\n    function carbonOffsetBatchesAddress()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return _carbonOffsetBatchesAddress;\\n    }\\n\\n    function carbonProjectsAddress()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return _carbonProjectsAddress;\\n    }\\n\\n    function carbonProjectVintagesAddress()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return _carbonProjectVintagesAddress;\\n    }\\n\\n    /// @dev return the TCO2 factory address for the provided standard\\n    function toucanCarbonOffsetsFactoryAddress(string memory standardRegistry)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return toucanCarbonOffsetFactories[standardRegistry];\\n    }\\n\\n    function toucanCarbonOffsetsEscrowAddress()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return _toucanCarbonOffsetsEscrowAddress;\\n    }\\n\\n    function retirementCertificatesAddress()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return _retirementCertificatesAddress;\\n    }\\n\\n    function retirementCertificateSlicerAddress()\\n        external\\n        view\\n        virtual\\n        returns (address)\\n    {\\n        return _retirementCertificateSlicerAddress;\\n    }\\n\\n    function retirementCertificateSlicesAddress()\\n        external\\n        view\\n        virtual\\n        returns (address)\\n    {\\n        return _retirementCertificateSlicesAddress;\\n    }\\n\\n    /// TODO: Kept for backwards-compatibility; will be removed in a future\\n    /// upgrade in favor of isValidERC20(erc20)\\n    function checkERC20(address erc20) external view virtual returns (bool) {\\n        return projectVintageERC20Registry[erc20];\\n    }\\n\\n    function isValidERC20(address erc20)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return projectVintageERC20Registry[erc20];\\n    }\\n\\n    function supportedStandardRegistries()\\n        external\\n        view\\n        returns (string[] memory)\\n    {\\n        return standardRegistries;\\n    }\\n}\\n\",\"keccak256\":\"0xc99cbfa37ec59ac658d2e53dab5bb979fe24991786a2ec39cc328d654681720c\",\"license\":\"UNLICENSED\"},\"contracts/ToucanContractRegistryStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nabstract contract ToucanContractRegistryStorageLegacy {\\n    address internal _carbonOffsetBatchesAddress;\\n    address internal _carbonProjectsAddress;\\n    address internal _carbonProjectVintagesAddress;\\n    // Deprecated in favor of toucanCarbonOffsetFactories\\n    //slither-disable-next-line uninitialized-state,constable-states\\n    address internal DEPRECATED_toucanCarbonOffsetsFactoryAddress;\\n    address internal _retirementCertificatesAddress;\\n    mapping(address => bool) public projectVintageERC20Registry;\\n}\\n\\nabstract contract ToucanContractRegistryStorageV1 {\\n    /// @notice map of standard registries to tco2 factory addresses\\n    mapping(string => address) public toucanCarbonOffsetFactories;\\n    /// @dev make it easy to get the supported standard registries\\n    string[] internal standardRegistries;\\n}\\n\\nabstract contract ToucanContractRegistryStorageV2 {\\n    address internal _toucanCarbonOffsetsEscrowAddress;\\n}\\n\\nabstract contract ToucanContractRegistryStorageV3 {\\n    address internal _retirementCertificateSlicerAddress;\\n    address internal _retirementCertificateSlicesAddress;\\n}\\n\\nabstract contract ToucanContractRegistryStorage is\\n    ToucanContractRegistryStorageV1,\\n    ToucanContractRegistryStorageV2,\\n    ToucanContractRegistryStorageV3\\n{}\\n\",\"keccak256\":\"0x1e25cf8fc38c1325cc38c3a335caecac3e30dabd81dfd8901190d74565ea1f18\",\"license\":\"UNLICENSED\"},\"contracts/bases/RoleInitializer.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\nabstract contract RoleInitializer is AccessControlUpgradeable {\\n    function __RoleInitializer_init_unchained(\\n        address[] calldata accounts,\\n        bytes32[] calldata roles\\n    ) internal {\\n        require(accounts.length == roles.length, 'Array length mismatch');\\n\\n        __AccessControl_init_unchained();\\n\\n        bool hasDefaultAdmin = false;\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            _grantRole(roles[i], accounts[i]);\\n            if (roles[i] == DEFAULT_ADMIN_ROLE) hasDefaultAdmin = true;\\n        }\\n        require(hasDefaultAdmin, 'No admin specified');\\n    }\\n}\\n\",\"keccak256\":\"0x72276b98471db1c8cfe18d4a1244c3986514c8b8d72e578517daae4973fd8b06\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x905979d2895b0fc4917054840429c6bbaff6082d9024d4d0889b46039db73748\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanCarbonOffsetsFactory.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\ninterface IToucanCarbonOffsetsFactory is IAccessControlUpgradeable {\\n    function bridgeFeeReceiverAddress()\\n        external\\n        view\\n        returns (address receiver);\\n\\n    function bridgeFeeBurnAddress() external view returns (address burner);\\n\\n    function getBridgeFeeAndBurnAmount(uint256 quantity)\\n        external\\n        view\\n        returns (uint256 feeAmount, uint256 burnAmount);\\n\\n    function allowedBridges(address user) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function standardRegistry() external returns (string memory);\\n\\n    function pvIdtoERC20(uint256 pvId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x60b3e3d5487da43bfd95f07a4d152ed8333dcf5437d0f31778477179d7d38341\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanContractRegistry.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IToucanContractRegistry {\\n    function carbonOffsetBatchesAddress() external view returns (address);\\n\\n    function carbonProjectsAddress() external view returns (address);\\n\\n    function carbonProjectVintagesAddress() external view returns (address);\\n\\n    function toucanCarbonOffsetsFactoryAddress(string memory standardRegistry)\\n        external\\n        view\\n        returns (address);\\n\\n    function retirementCertificatesAddress() external view returns (address);\\n\\n    function toucanCarbonOffsetsEscrowAddress() external view returns (address);\\n\\n    function retirementCertificateSlicerAddress()\\n        external\\n        view\\n        returns (address);\\n\\n    function retirementCertificateSlicesAddress()\\n        external\\n        view\\n        returns (address);\\n\\n    function isValidERC20(address erc20) external view returns (bool);\\n\\n    function addERC20(address erc20, string memory standardRegistry) external;\\n}\\n\",\"keccak256\":\"0xa818a6fa6f358f297eddf6b6fef4c09f5f5046f336b516b79edaeb32be8886ca\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Strings.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\\n\\nlibrary Strings {\\n    /// @notice Compare two strings\\n    /// @param a The string to compare\\n    /// @param b The string to compare to\\n    /// @return True if the strings are equal, false otherwise\\n    function equals(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            (bytes(a).length == bytes(b).length) &&\\n            (keccak256(bytes(a)) == keccak256(bytes(b)));\\n    }\\n\\n    /// @notice Convert a string to an integer\\n    /// @param numString The string to convert\\n    /// @return The integer value of the string\\n    function toInteger(string memory numString)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 val = 0;\\n        bytes memory stringBytes = bytes(numString);\\n        uint256 stringBytesLen = stringBytes.length;\\n        for (uint256 i = 0; i < stringBytesLen; ++i) {\\n            uint256 exp = stringBytesLen - i;\\n            bytes1 ival = stringBytes[i];\\n            uint8 uval = uint8(ival);\\n            uint256 jval = uval - uint256(0x30);\\n\\n            val += (uint256(jval) * (10**(exp - 1)));\\n        }\\n        return val;\\n    }\\n\\n    /// @notice Convert an integer to a string\\n    /// @param value The integer to convert\\n    /// @return The string value of the integer\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// @notice Get a substring of a string\\n    /// @param text The string to get a substring from\\n    /// @param begin The start index of the substring\\n    /// @param end The end index of the substring\\n    /// @return The substring\\n    function slice(\\n        string memory text,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (string memory) {\\n        uint256 length = end - begin;\\n        bytes memory a = new bytes(length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            a[i] = bytes(text)[i + begin];\\n        }\\n        return string(a);\\n    }\\n\\n    /// @notice Pad a string with a character\\n    /// @param text The string to pad\\n    /// @param length The length to pad to\\n    /// @param padChar The character to pad with\\n    /// @return The padded string\\n    function pad(\\n        string memory text,\\n        uint256 length,\\n        string memory padChar\\n    ) internal pure returns (string memory) {\\n        uint256 textLen = bytes(text).length;\\n        require(bytes(padChar).length == 1, 'Invalid padChar length');\\n        require(length >= textLen, 'Invalid text length');\\n\\n        for (uint256 i = textLen; i < length; ++i) {\\n            text = string.concat(padChar, text);\\n        }\\n\\n        return text;\\n    }\\n\\n    /// @notice Count the occurrences of a character in a string\\n    /// @param text The string to count occurrences of char in\\n    /// @param char The character to count\\n    /// @return nums The number of occurrences\\n    function count(string memory text, string memory char)\\n        internal\\n        pure\\n        returns (uint256 nums)\\n    {\\n        require(bytes(char).length == 1, 'Invalid char length');\\n        bytes1 c = bytes(char)[0];\\n\\n        uint256 textLen = bytes(text).length;\\n        for (uint256 i = 0; i < textLen; ++i) {\\n            if (bytes(text)[i] == c) {\\n                ++nums;\\n            }\\n        }\\n    }\\n\\n    /// @notice Split a string into two parts. The first occurrence of the delimiter\\n    /// is used to split the string into first and last.\\n    /// @param text The string to split\\n    /// @param delimiter The character to split on\\n    /// @return first last The two parts of the string\\n    function split(string memory text, string memory delimiter)\\n        internal\\n        pure\\n        returns (string memory first, string memory last)\\n    {\\n        require(bytes(delimiter).length == 1, 'Invalid delimiter length');\\n        bytes1 d = bytes(delimiter)[0];\\n\\n        uint256 textLen = bytes(text).length;\\n        for (uint256 i = 0; i < textLen; ++i) {\\n            if (bytes(text)[i] == d) {\\n                first = slice(text, 0, i);\\n                last = slice(text, i + 1, textLen);\\n                return (first, last);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc92c0e80003911ed43df923ad4692f3d9a3fec1fa4d79bc01d6b3706fa034010\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b62000158565b6200003260ff62000035565b50565b600654600090610100900460ff1615620000d0578160ff1660011480156200007057506200006e306200014960201b62001c661760201c565b155b620000c85760405162461bcd60e51b815260206004820152602e60248201526000805160206200311b83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60065460ff8084169116106200012f5760405162461bcd60e51b815260206004820152602e60248201526000805160206200311b83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000bf565b506006805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b608051612f8b6200019060003960008181610ad401528181610b1401528181610fea0152818161102a01526110b90152612f8b6000f3fe6080604052600436106102465760003560e01c8063715018a611610139578063bab5adc3116100b6578063e72994e21161007a578063e72994e2146106b9578063f0782ba8146106d8578063f2fde38b146106f8578063f5e7663214610718578063fc11ad8e1461075a578063ffa1ad741461077957600080fd5b8063bab5adc314610611578063c03b5eff14610631578063d547741f14610650578063dc1d4fb714610670578063e63ab1e91461068557600080fd5b806391148b27116100fd57806391148b271461057e57806391d148541461059e578063a0ad2599146105be578063a0af2560146105de578063a217fddf146105fc57600080fd5b8063715018a6146104f257806371b15b1c14610507578063746f62da14610527578063787d8713146105275780638da5cb5b1461056057600080fd5b80633659cfe6116101c757806352d1902d1161018b57806352d1902d14610466578063551f63ea1461047b5780636989d8011461049b5780636c07adfa146104bb5780636ca0b0d7146104dd57600080fd5b80633659cfe6146103e2578063376b5dce146104025780634be4e3dd146104205780634c7612401461043e5780634f1ef2861461045357600080fd5b8063248a9ca31161020e578063248a9ca3146103245780632c60df23146103625780632f2ff15d14610382578063344dd6cb146103a257806336568abe146103c257600080fd5b806301157a831461024b57806301f07b2f1461028257806301ffc9a7146102a45780630f5fcf0a146102d45780631cf743db146102f4575b600080fd5b34801561025757600080fd5b506001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561028e57600080fd5b506102a261029d366004612779565b6107b7565b005b3480156102b057600080fd5b506102c46102bf366004612794565b610832565b6040519015158152602001610279565b3480156102e057600080fd5b506102a26102ef366004612779565b610869565b34801561030057600080fd5b506102c461030f366004612779565b60056020526000908152604090205460ff1681565b34801561033057600080fd5b5061035461033f3660046127be565b6000908152609d602052604090206001015490565b604051908152602001610279565b34801561036e57600080fd5b506102a261037d366004612779565b6108dc565b34801561038e57600080fd5b506102a261039d3660046127d7565b61094f565b3480156103ae57600080fd5b506102a26103bd366004612803565b610979565b3480156103ce57600080fd5b506102a26103dd3660046127d7565b610a4c565b3480156103ee57600080fd5b506102a26103fd366004612779565b610aca565b34801561040e57600080fd5b506004546001600160a01b0316610265565b34801561042c57600080fd5b506000546001600160a01b0316610265565b34801561044a57600080fd5b506102a2610ba9565b6102a2610461366004612933565b610fe0565b34801561047257600080fd5b506103546110ac565b34801561048757600080fd5b506102a2610496366004612779565b61115f565b3480156104a757600080fd5b506102a26104b6366004612779565b6111d2565b3480156104c757600080fd5b506104d0611244565b60405161027991906129ed565b3480156104e957600080fd5b50610354600181565b3480156104fe57600080fd5b506102a261131e565b34801561051357600080fd5b506102a2610522366004612779565b611354565b34801561053357600080fd5b506102c4610542366004612779565b6001600160a01b031660009081526005602052604090205460ff1690565b34801561056c57600080fd5b506039546001600160a01b0316610265565b34801561058a57600080fd5b50610265610599366004612a4f565b6113c6565b3480156105aa57600080fd5b506102c46105b93660046127d7565b6113f8565b3480156105ca57600080fd5b506102a26105d9366004612779565b611423565b3480156105ea57600080fd5b506002546001600160a01b0316610265565b34801561060857600080fd5b50610354600081565b34801561061d57600080fd5b506102a261062c366004612aec565b611495565b34801561063d57600080fd5b50610137546001600160a01b0316610265565b34801561065c57600080fd5b506102a261066b3660046127d7565b611521565b34801561067c57600080fd5b506102a2611546565b34801561069157600080fd5b506103547f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b3480156106c557600080fd5b50610135546001600160a01b0316610265565b3480156106e457600080fd5b506102a26106f3366004612779565b6119e2565b34801561070457600080fd5b506102a2610713366004612779565b611bce565b34801561072457600080fd5b50610265610733366004612a4f565b8051602081830181018051610133825292820191909301209152546001600160a01b031681565b34801561076657600080fd5b50610136546001600160a01b0316610265565b34801561078557600080fd5b506107aa604051806040016040528060058152602001640312e332e360dc1b81525081565b6040516102799190612b58565b6039546001600160a01b031633146107ea5760405162461bcd60e51b81526004016107e190612b6b565b60405180910390fd5b6001600160a01b0381166108105760405162461bcd60e51b81526004016107e190612ba0565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061086357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6039546001600160a01b031633146108935760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b0381166108b95760405162461bcd60e51b81526004016107e190612ba0565b61013580546001600160a01b0319166001600160a01b0392909216919091179055565b6039546001600160a01b031633146109065760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b03811661092c5760405162461bcd60e51b81526004016107e190612ba0565b61013780546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152609d602052604090206001015461096a81611c75565b6109748383611c7f565b505050565b610133828260405161098c929190612bc6565b908152604051908190036020019020546001600160a01b03166109b76039546001600160a01b031690565b6001600160a01b0382163314806109d657506001600160a01b03811633145b610a225760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f742074686520666163746f72790000000000000060448201526064016107e1565b5050506001600160a01b039091166000908152600560205260409020805460ff1916600117905550565b6001600160a01b0381163314610abc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107e1565b610ac68282611d05565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b125760405162461bcd60e51b81526004016107e190612bd6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b5b600080516020612f0f833981519152546001600160a01b031690565b6001600160a01b031614610b815760405162461bcd60e51b81526004016107e190612c22565b610b8a81611d6c565b60408051600080825260208201909252610ba691839190611d96565b50565b6039546001600160a01b03163314610bd35760405162461bcd60e51b81526004016107e190612b6b565b60025460408051635c975abb60e01b815290516001600160a01b03909216918291635c975abb9160048083019260209291908290030181865afa158015610c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c429190612c6e565b15610c9b57806001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c8257600080fd5b505af1158015610c96573d6000803e3d6000fd5b505050505b60015460408051635c975abb60e01b815290516001600160a01b03909216918291635c975abb9160048083019260209291908290030181865afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190612c6e565b15610d6357806001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d4a57600080fd5b505af1158015610d5e573d6000803e3d6000fd5b505050505b60005460408051635c975abb60e01b815290516001600160a01b03909216918291635c975abb9160048083019260209291908290030181865afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd29190612c6e565b15610e2b57806001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e1257600080fd5b505af1158015610e26573d6000803e3d6000fd5b505050505b6101345460005b81811015610fd95760006101348281548110610e5057610e50612c90565b906000526020600020018054610e6590612ca6565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9190612ca6565b8015610ede5780601f10610eb357610100808354040283529160200191610ede565b820191906000526020600020905b815481529060010190602001808311610ec157829003601f168201915b50505050509050600061013382604051610ef89190612ce0565b908152604080516020928190038301812054635c975abb60e01b825291516001600160a01b03909216935083928392635c975abb9260048082019392918290030181865afa158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f729190612c6e565b15610fcb57806001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fb257600080fd5b505af1158015610fc6573d6000803e3d6000fd5b505050505b836001019350505050610e32565b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036110285760405162461bcd60e51b81526004016107e190612bd6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611071600080516020612f0f833981519152546001600160a01b031690565b6001600160a01b0316146110975760405162461bcd60e51b81526004016107e190612c22565b6110a082611d6c565b610ac682826001611d96565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461114c5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016107e1565b50600080516020612f0f83398151915290565b6039546001600160a01b031633146111895760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b0381166111af5760405162461bcd60e51b81526004016107e190612ba0565b61013680546001600160a01b0319166001600160a01b0392909216919091179055565b6039546001600160a01b031633146111fc5760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b0381166112225760405162461bcd60e51b81526004016107e190612ba0565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060610134805480602002602001604051908101604052809291908181526020016000905b8282101561131557838290600052602060002001805461128890612ca6565b80601f01602080910402602001604051908101604052809291908181526020018280546112b490612ca6565b80156113015780601f106112d657610100808354040283529160200191611301565b820191906000526020600020905b8154815290600101906020018083116112e457829003601f168201915b505050505081526020019060010190611269565b50505050905090565b6039546001600160a01b031633146113485760405162461bcd60e51b81526004016107e190612b6b565b6113526000611f01565b565b6039546001600160a01b0316331461137e5760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b0381166113a45760405162461bcd60e51b81526004016107e190612ba0565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000610133826040516113d99190612ce0565b908152604051908190036020019020546001600160a01b031692915050565b6000918252609d602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6039546001600160a01b0316331461144d5760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b0381166114735760405162461bcd60e51b81526004016107e190612ba0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006114a16001611f53565b905080156114b9576006805461ff0019166101001790555b6114c1611fe2565b6114cd85858585612011565b6114d561212c565b8015610fd9576006805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6000828152609d602052604090206001015461153c81611c75565b6109748383611d05565b6115707f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336113f8565b806115945750336115896039546001600160a01b031690565b6001600160a01b0316145b6115e05760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206973206e6f7420617574686f72697a6564000000000000000060448201526064016107e1565b60025460408051635c975abb60e01b815290516001600160a01b03909216918291635c975abb9160048083019260209291908290030181865afa15801561162b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164f9190612c6e565b6116a757806001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561168e57600080fd5b505af11580156116a2573d6000803e3d6000fd5b505050505b60015460408051635c975abb60e01b815290516001600160a01b03909216918291635c975abb9160048083019260209291908290030181865afa1580156116f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117169190612c6e565b61176e57806001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561175557600080fd5b505af1158015611769573d6000803e3d6000fd5b505050505b60005460408051635c975abb60e01b815290516001600160a01b03909216918291635c975abb9160048083019260209291908290030181865afa1580156117b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117dd9190612c6e565b61183557806001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561181c57600080fd5b505af1158015611830573d6000803e3d6000fd5b505050505b6101345460005b81811015610fd9576000610134828154811061185a5761185a612c90565b90600052602060002001805461186f90612ca6565b80601f016020809104026020016040519081016040528092919081815260200182805461189b90612ca6565b80156118e85780601f106118bd576101008083540402835291602001916118e8565b820191906000526020600020905b8154815290600101906020018083116118cb57829003601f168201915b505050505090506000610133826040516119029190612ce0565b908152604080516020928190038301812054635c975abb60e01b825291516001600160a01b03909216935083928392635c975abb9260048082019392918290030181865afa158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197c9190612c6e565b6119d457806001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b505050505b83600101935050505061183c565b6039546001600160a01b03163314611a0c5760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b038116611a325760405162461bcd60e51b81526004016107e190612ba0565b6000816001600160a01b0316633c31175e6040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611a74573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a9c9190810190612cfc565b90508051600003611aef5760405162461bcd60e51b815260206004820152601760248201527f456d707479207374616e6461726420726567697374727900000000000000000060448201526064016107e1565b611af881612153565b611b425761013480546001810182556000919091528151611b40917fe1c588fe1269da19c317f679b04e226f5e48296f9b2c8351127eb010907c472f019060208401906126c9565b505b8161013382604051611b549190612ce0565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b031990931692909217909155611b8f908290612ce0565b604051908190038120906001600160a01b038416907f330abee6414b34f936df7009380419f0583327419d70619b3e543b1cb26d3a1590600090a35050565b6039546001600160a01b03163314611bf85760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b038116611c5d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107e1565b610ba681611f01565b6001600160a01b03163b151590565b610ba6813361223e565b611c8982826113f8565b610ac6576000828152609d602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611cc13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611d0f82826113f8565b15610ac6576000828152609d602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6039546001600160a01b03163314610ba65760405162461bcd60e51b81526004016107e190612b6b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611dc957610974836122a2565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611e23575060408051601f3d908101601f19168201909252611e2091810190612d6a565b60015b611e865760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016107e1565b600080516020612f0f8339815191528114611ef55760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016107e1565b5061097483838361233e565b603980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600654600090610100900460ff1615611f9c578160ff166001148015611f785750303b155b611f945760405162461bcd60e51b81526004016107e190612d83565b506000919050565b60065460ff808416911610611fc35760405162461bcd60e51b81526004016107e190612d83565b506006805460ff191660ff92909216919091179055600190565b919050565b600654610100900460ff166120095760405162461bcd60e51b81526004016107e190612dd1565b611352612369565b8281146120585760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60448201526064016107e1565b61206061212c565b6000805b848110156120e9576120b484848381811061208157612081612c90565b9050602002013587878481811061209a5761209a612c90565b90506020020160208101906120af9190612779565b611c7f565b60008484838181106120c8576120c8612c90565b90506020020135036120d957600191505b6120e281612e32565b9050612064565b5080610fd95760405162461bcd60e51b8152602060048201526012602482015271139bc818591b5a5b881cdc1958da599a595960721b60448201526064016107e1565b600654610100900460ff166113525760405162461bcd60e51b81526004016107e190612dd1565b61013454600090815b818110156122345761221d84610134838154811061217c5761217c612c90565b90600052602060002001805461219190612ca6565b80601f01602080910402602001604051908101604052809291908181526020018280546121bd90612ca6565b801561220a5780601f106121df5761010080835404028352916020019161220a565b820191906000526020600020905b8154815290600101906020018083116121ed57829003601f168201915b505050505061239990919063ffffffff16565b1561222c575060019392505050565b60010161215c565b5060009392505050565b61224882826113f8565b610ac657612260816001600160a01b031660146123c0565b61226b8360206123c0565b60405160200161227c929190612e4b565b60408051601f198184030181529082905262461bcd60e51b82526107e191600401612b58565b6001600160a01b0381163b61230f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107e1565b600080516020612f0f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6123478361255c565b6000825111806123545750805b1561097457612363838361259c565b50505050565b600654610100900460ff166123905760405162461bcd60e51b81526004016107e190612dd1565b61135233611f01565b6000815183511480156123b9575081805190602001208380519060200120145b9392505050565b606060006123cf836002612ec0565b6123da906002612edf565b67ffffffffffffffff8111156123f2576123f2612886565b6040519080825280601f01601f19166020018201604052801561241c576020820181803683370190505b509050600360fc1b8160008151811061243757612437612c90565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061246657612466612c90565b60200101906001600160f81b031916908160001a905350600061248a846002612ec0565b612495906001612edf565b90505b600181111561250d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106124c9576124c9612c90565b1a60f81b8282815181106124df576124df612c90565b60200101906001600160f81b031916908160001a90535060049490941c9361250681612ef7565b9050612498565b5083156123b95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107e1565b612565816122a2565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6126045760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107e1565b600080846001600160a01b03168460405161261f9190612ce0565b600060405180830381855af49150503d806000811461265a576040519150601f19603f3d011682016040523d82523d6000602084013e61265f565b606091505b50915091506126878282604051806060016040528060278152602001612f2f60279139612690565b95945050505050565b6060831561269f5750816123b9565b8251156126af5782518084602001fd5b8160405162461bcd60e51b81526004016107e19190612b58565b8280546126d590612ca6565b90600052602060002090601f0160209004810192826126f7576000855561273d565b82601f1061271057805160ff191683800117855561273d565b8280016001018555821561273d579182015b8281111561273d578251825591602001919060010190612722565b5061274992915061274d565b5090565b5b80821115612749576000815560010161274e565b80356001600160a01b0381168114611fdd57600080fd5b60006020828403121561278b57600080fd5b6123b982612762565b6000602082840312156127a657600080fd5b81356001600160e01b0319811681146123b957600080fd5b6000602082840312156127d057600080fd5b5035919050565b600080604083850312156127ea57600080fd5b823591506127fa60208401612762565b90509250929050565b60008060006040848603121561281857600080fd5b61282184612762565b9250602084013567ffffffffffffffff8082111561283e57600080fd5b818601915086601f83011261285257600080fd5b81358181111561286157600080fd5b87602082850101111561287357600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156128c5576128c5612886565b604052919050565b600067ffffffffffffffff8211156128e7576128e7612886565b50601f01601f191660200190565b6000612908612903846128cd565b61289c565b905082815283838301111561291c57600080fd5b828260208301376000602084830101529392505050565b6000806040838503121561294657600080fd5b61294f83612762565b9150602083013567ffffffffffffffff81111561296b57600080fd5b8301601f8101851361297c57600080fd5b61298b858235602084016128f5565b9150509250929050565b60005b838110156129b0578181015183820152602001612998565b838111156123635750506000910152565b600081518084526129d9816020860160208601612995565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612a4257603f19888603018452612a308583516129c1565b94509285019290850190600101612a14565b5092979650505050505050565b600060208284031215612a6157600080fd5b813567ffffffffffffffff811115612a7857600080fd5b8201601f81018413612a8957600080fd5b612a98848235602084016128f5565b949350505050565b60008083601f840112612ab257600080fd5b50813567ffffffffffffffff811115612aca57600080fd5b6020830191508360208260051b8501011115612ae557600080fd5b9250929050565b60008060008060408587031215612b0257600080fd5b843567ffffffffffffffff80821115612b1a57600080fd5b612b2688838901612aa0565b90965094506020870135915080821115612b3f57600080fd5b50612b4c87828801612aa0565b95989497509550505050565b6020815260006123b960208301846129c1565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b8183823760009101908152919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215612c8057600080fd5b815180151581146123b957600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680612cba57607f821691505b602082108103612cda57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251612cf2818460208701612995565b9190910192915050565b600060208284031215612d0e57600080fd5b815167ffffffffffffffff811115612d2557600080fd5b8201601f81018413612d3657600080fd5b8051612d44612903826128cd565b818152856020838501011115612d5957600080fd5b612687826020830160208601612995565b600060208284031215612d7c57600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600060018201612e4457612e44612e1c565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612e83816017850160208801612995565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612eb4816028840160208801612995565b01602801949350505050565b6000816000190483118215151615612eda57612eda612e1c565b500290565b60008219821115612ef257612ef2612e1c565b500190565b600081612f0657612f06612e1c565b50600019019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a8803cd983ad3d5a1d0cb16437bb6261b254106596e9596fc12de22e90b38fa664736f6c634300080e0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x6080604052600436106102465760003560e01c8063715018a611610139578063bab5adc3116100b6578063e72994e21161007a578063e72994e2146106b9578063f0782ba8146106d8578063f2fde38b146106f8578063f5e7663214610718578063fc11ad8e1461075a578063ffa1ad741461077957600080fd5b8063bab5adc314610611578063c03b5eff14610631578063d547741f14610650578063dc1d4fb714610670578063e63ab1e91461068557600080fd5b806391148b27116100fd57806391148b271461057e57806391d148541461059e578063a0ad2599146105be578063a0af2560146105de578063a217fddf146105fc57600080fd5b8063715018a6146104f257806371b15b1c14610507578063746f62da14610527578063787d8713146105275780638da5cb5b1461056057600080fd5b80633659cfe6116101c757806352d1902d1161018b57806352d1902d14610466578063551f63ea1461047b5780636989d8011461049b5780636c07adfa146104bb5780636ca0b0d7146104dd57600080fd5b80633659cfe6146103e2578063376b5dce146104025780634be4e3dd146104205780634c7612401461043e5780634f1ef2861461045357600080fd5b8063248a9ca31161020e578063248a9ca3146103245780632c60df23146103625780632f2ff15d14610382578063344dd6cb146103a257806336568abe146103c257600080fd5b806301157a831461024b57806301f07b2f1461028257806301ffc9a7146102a45780630f5fcf0a146102d45780631cf743db146102f4575b600080fd5b34801561025757600080fd5b506001546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561028e57600080fd5b506102a261029d366004612779565b6107b7565b005b3480156102b057600080fd5b506102c46102bf366004612794565b610832565b6040519015158152602001610279565b3480156102e057600080fd5b506102a26102ef366004612779565b610869565b34801561030057600080fd5b506102c461030f366004612779565b60056020526000908152604090205460ff1681565b34801561033057600080fd5b5061035461033f3660046127be565b6000908152609d602052604090206001015490565b604051908152602001610279565b34801561036e57600080fd5b506102a261037d366004612779565b6108dc565b34801561038e57600080fd5b506102a261039d3660046127d7565b61094f565b3480156103ae57600080fd5b506102a26103bd366004612803565b610979565b3480156103ce57600080fd5b506102a26103dd3660046127d7565b610a4c565b3480156103ee57600080fd5b506102a26103fd366004612779565b610aca565b34801561040e57600080fd5b506004546001600160a01b0316610265565b34801561042c57600080fd5b506000546001600160a01b0316610265565b34801561044a57600080fd5b506102a2610ba9565b6102a2610461366004612933565b610fe0565b34801561047257600080fd5b506103546110ac565b34801561048757600080fd5b506102a2610496366004612779565b61115f565b3480156104a757600080fd5b506102a26104b6366004612779565b6111d2565b3480156104c757600080fd5b506104d0611244565b60405161027991906129ed565b3480156104e957600080fd5b50610354600181565b3480156104fe57600080fd5b506102a261131e565b34801561051357600080fd5b506102a2610522366004612779565b611354565b34801561053357600080fd5b506102c4610542366004612779565b6001600160a01b031660009081526005602052604090205460ff1690565b34801561056c57600080fd5b506039546001600160a01b0316610265565b34801561058a57600080fd5b50610265610599366004612a4f565b6113c6565b3480156105aa57600080fd5b506102c46105b93660046127d7565b6113f8565b3480156105ca57600080fd5b506102a26105d9366004612779565b611423565b3480156105ea57600080fd5b506002546001600160a01b0316610265565b34801561060857600080fd5b50610354600081565b34801561061d57600080fd5b506102a261062c366004612aec565b611495565b34801561063d57600080fd5b50610137546001600160a01b0316610265565b34801561065c57600080fd5b506102a261066b3660046127d7565b611521565b34801561067c57600080fd5b506102a2611546565b34801561069157600080fd5b506103547f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b3480156106c557600080fd5b50610135546001600160a01b0316610265565b3480156106e457600080fd5b506102a26106f3366004612779565b6119e2565b34801561070457600080fd5b506102a2610713366004612779565b611bce565b34801561072457600080fd5b50610265610733366004612a4f565b8051602081830181018051610133825292820191909301209152546001600160a01b031681565b34801561076657600080fd5b50610136546001600160a01b0316610265565b34801561078557600080fd5b506107aa604051806040016040528060058152602001640312e332e360dc1b81525081565b6040516102799190612b58565b6039546001600160a01b031633146107ea5760405162461bcd60e51b81526004016107e190612b6b565b60405180910390fd5b6001600160a01b0381166108105760405162461bcd60e51b81526004016107e190612ba0565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160e01b03198216637965db0b60e01b148061086357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6039546001600160a01b031633146108935760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b0381166108b95760405162461bcd60e51b81526004016107e190612ba0565b61013580546001600160a01b0319166001600160a01b0392909216919091179055565b6039546001600160a01b031633146109065760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b03811661092c5760405162461bcd60e51b81526004016107e190612ba0565b61013780546001600160a01b0319166001600160a01b0392909216919091179055565b6000828152609d602052604090206001015461096a81611c75565b6109748383611c7f565b505050565b610133828260405161098c929190612bc6565b908152604051908190036020019020546001600160a01b03166109b76039546001600160a01b031690565b6001600160a01b0382163314806109d657506001600160a01b03811633145b610a225760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f742074686520666163746f72790000000000000060448201526064016107e1565b5050506001600160a01b039091166000908152600560205260409020805460ff1916600117905550565b6001600160a01b0381163314610abc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107e1565b610ac68282611d05565b5050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610b125760405162461bcd60e51b81526004016107e190612bd6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610b5b600080516020612f0f833981519152546001600160a01b031690565b6001600160a01b031614610b815760405162461bcd60e51b81526004016107e190612c22565b610b8a81611d6c565b60408051600080825260208201909252610ba691839190611d96565b50565b6039546001600160a01b03163314610bd35760405162461bcd60e51b81526004016107e190612b6b565b60025460408051635c975abb60e01b815290516001600160a01b03909216918291635c975abb9160048083019260209291908290030181865afa158015610c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c429190612c6e565b15610c9b57806001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c8257600080fd5b505af1158015610c96573d6000803e3d6000fd5b505050505b60015460408051635c975abb60e01b815290516001600160a01b03909216918291635c975abb9160048083019260209291908290030181865afa158015610ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0a9190612c6e565b15610d6357806001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d4a57600080fd5b505af1158015610d5e573d6000803e3d6000fd5b505050505b60005460408051635c975abb60e01b815290516001600160a01b03909216918291635c975abb9160048083019260209291908290030181865afa158015610dae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd29190612c6e565b15610e2b57806001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610e1257600080fd5b505af1158015610e26573d6000803e3d6000fd5b505050505b6101345460005b81811015610fd95760006101348281548110610e5057610e50612c90565b906000526020600020018054610e6590612ca6565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9190612ca6565b8015610ede5780601f10610eb357610100808354040283529160200191610ede565b820191906000526020600020905b815481529060010190602001808311610ec157829003601f168201915b50505050509050600061013382604051610ef89190612ce0565b908152604080516020928190038301812054635c975abb60e01b825291516001600160a01b03909216935083928392635c975abb9260048082019392918290030181865afa158015610f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f729190612c6e565b15610fcb57806001600160a01b0316633f4ba83a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fb257600080fd5b505af1158015610fc6573d6000803e3d6000fd5b505050505b836001019350505050610e32565b5050505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036110285760405162461bcd60e51b81526004016107e190612bd6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611071600080516020612f0f833981519152546001600160a01b031690565b6001600160a01b0316146110975760405162461bcd60e51b81526004016107e190612c22565b6110a082611d6c565b610ac682826001611d96565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461114c5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016107e1565b50600080516020612f0f83398151915290565b6039546001600160a01b031633146111895760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b0381166111af5760405162461bcd60e51b81526004016107e190612ba0565b61013680546001600160a01b0319166001600160a01b0392909216919091179055565b6039546001600160a01b031633146111fc5760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b0381166112225760405162461bcd60e51b81526004016107e190612ba0565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6060610134805480602002602001604051908101604052809291908181526020016000905b8282101561131557838290600052602060002001805461128890612ca6565b80601f01602080910402602001604051908101604052809291908181526020018280546112b490612ca6565b80156113015780601f106112d657610100808354040283529160200191611301565b820191906000526020600020905b8154815290600101906020018083116112e457829003601f168201915b505050505081526020019060010190611269565b50505050905090565b6039546001600160a01b031633146113485760405162461bcd60e51b81526004016107e190612b6b565b6113526000611f01565b565b6039546001600160a01b0316331461137e5760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b0381166113a45760405162461bcd60e51b81526004016107e190612ba0565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000610133826040516113d99190612ce0565b908152604051908190036020019020546001600160a01b031692915050565b6000918252609d602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6039546001600160a01b0316331461144d5760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b0381166114735760405162461bcd60e51b81526004016107e190612ba0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006114a16001611f53565b905080156114b9576006805461ff0019166101001790555b6114c1611fe2565b6114cd85858585612011565b6114d561212c565b8015610fd9576006805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6000828152609d602052604090206001015461153c81611c75565b6109748383611d05565b6115707f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336113f8565b806115945750336115896039546001600160a01b031690565b6001600160a01b0316145b6115e05760405162461bcd60e51b815260206004820152601860248201527f43616c6c6572206973206e6f7420617574686f72697a6564000000000000000060448201526064016107e1565b60025460408051635c975abb60e01b815290516001600160a01b03909216918291635c975abb9160048083019260209291908290030181865afa15801561162b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164f9190612c6e565b6116a757806001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561168e57600080fd5b505af11580156116a2573d6000803e3d6000fd5b505050505b60015460408051635c975abb60e01b815290516001600160a01b03909216918291635c975abb9160048083019260209291908290030181865afa1580156116f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117169190612c6e565b61176e57806001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561175557600080fd5b505af1158015611769573d6000803e3d6000fd5b505050505b60005460408051635c975abb60e01b815290516001600160a01b03909216918291635c975abb9160048083019260209291908290030181865afa1580156117b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117dd9190612c6e565b61183557806001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561181c57600080fd5b505af1158015611830573d6000803e3d6000fd5b505050505b6101345460005b81811015610fd9576000610134828154811061185a5761185a612c90565b90600052602060002001805461186f90612ca6565b80601f016020809104026020016040519081016040528092919081815260200182805461189b90612ca6565b80156118e85780601f106118bd576101008083540402835291602001916118e8565b820191906000526020600020905b8154815290600101906020018083116118cb57829003601f168201915b505050505090506000610133826040516119029190612ce0565b908152604080516020928190038301812054635c975abb60e01b825291516001600160a01b03909216935083928392635c975abb9260048082019392918290030181865afa158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197c9190612c6e565b6119d457806001600160a01b0316638456cb596040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119bb57600080fd5b505af11580156119cf573d6000803e3d6000fd5b505050505b83600101935050505061183c565b6039546001600160a01b03163314611a0c5760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b038116611a325760405162461bcd60e51b81526004016107e190612ba0565b6000816001600160a01b0316633c31175e6040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611a74573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a9c9190810190612cfc565b90508051600003611aef5760405162461bcd60e51b815260206004820152601760248201527f456d707479207374616e6461726420726567697374727900000000000000000060448201526064016107e1565b611af881612153565b611b425761013480546001810182556000919091528151611b40917fe1c588fe1269da19c317f679b04e226f5e48296f9b2c8351127eb010907c472f019060208401906126c9565b505b8161013382604051611b549190612ce0565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b031990931692909217909155611b8f908290612ce0565b604051908190038120906001600160a01b038416907f330abee6414b34f936df7009380419f0583327419d70619b3e543b1cb26d3a1590600090a35050565b6039546001600160a01b03163314611bf85760405162461bcd60e51b81526004016107e190612b6b565b6001600160a01b038116611c5d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107e1565b610ba681611f01565b6001600160a01b03163b151590565b610ba6813361223e565b611c8982826113f8565b610ac6576000828152609d602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611cc13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611d0f82826113f8565b15610ac6576000828152609d602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6039546001600160a01b03163314610ba65760405162461bcd60e51b81526004016107e190612b6b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611dc957610974836122a2565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611e23575060408051601f3d908101601f19168201909252611e2091810190612d6a565b60015b611e865760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016107e1565b600080516020612f0f8339815191528114611ef55760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016107e1565b5061097483838361233e565b603980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600654600090610100900460ff1615611f9c578160ff166001148015611f785750303b155b611f945760405162461bcd60e51b81526004016107e190612d83565b506000919050565b60065460ff808416911610611fc35760405162461bcd60e51b81526004016107e190612d83565b506006805460ff191660ff92909216919091179055600190565b919050565b600654610100900460ff166120095760405162461bcd60e51b81526004016107e190612dd1565b611352612369565b8281146120585760405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b60448201526064016107e1565b61206061212c565b6000805b848110156120e9576120b484848381811061208157612081612c90565b9050602002013587878481811061209a5761209a612c90565b90506020020160208101906120af9190612779565b611c7f565b60008484838181106120c8576120c8612c90565b90506020020135036120d957600191505b6120e281612e32565b9050612064565b5080610fd95760405162461bcd60e51b8152602060048201526012602482015271139bc818591b5a5b881cdc1958da599a595960721b60448201526064016107e1565b600654610100900460ff166113525760405162461bcd60e51b81526004016107e190612dd1565b61013454600090815b818110156122345761221d84610134838154811061217c5761217c612c90565b90600052602060002001805461219190612ca6565b80601f01602080910402602001604051908101604052809291908181526020018280546121bd90612ca6565b801561220a5780601f106121df5761010080835404028352916020019161220a565b820191906000526020600020905b8154815290600101906020018083116121ed57829003601f168201915b505050505061239990919063ffffffff16565b1561222c575060019392505050565b60010161215c565b5060009392505050565b61224882826113f8565b610ac657612260816001600160a01b031660146123c0565b61226b8360206123c0565b60405160200161227c929190612e4b565b60408051601f198184030181529082905262461bcd60e51b82526107e191600401612b58565b6001600160a01b0381163b61230f5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016107e1565b600080516020612f0f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6123478361255c565b6000825111806123545750805b1561097457612363838361259c565b50505050565b600654610100900460ff166123905760405162461bcd60e51b81526004016107e190612dd1565b61135233611f01565b6000815183511480156123b9575081805190602001208380519060200120145b9392505050565b606060006123cf836002612ec0565b6123da906002612edf565b67ffffffffffffffff8111156123f2576123f2612886565b6040519080825280601f01601f19166020018201604052801561241c576020820181803683370190505b509050600360fc1b8160008151811061243757612437612c90565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061246657612466612c90565b60200101906001600160f81b031916908160001a905350600061248a846002612ec0565b612495906001612edf565b90505b600181111561250d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106124c9576124c9612c90565b1a60f81b8282815181106124df576124df612c90565b60200101906001600160f81b031916908160001a90535060049490941c9361250681612ef7565b9050612498565b5083156123b95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107e1565b612565816122a2565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6126045760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016107e1565b600080846001600160a01b03168460405161261f9190612ce0565b600060405180830381855af49150503d806000811461265a576040519150601f19603f3d011682016040523d82523d6000602084013e61265f565b606091505b50915091506126878282604051806060016040528060278152602001612f2f60279139612690565b95945050505050565b6060831561269f5750816123b9565b8251156126af5782518084602001fd5b8160405162461bcd60e51b81526004016107e19190612b58565b8280546126d590612ca6565b90600052602060002090601f0160209004810192826126f7576000855561273d565b82601f1061271057805160ff191683800117855561273d565b8280016001018555821561273d579182015b8281111561273d578251825591602001919060010190612722565b5061274992915061274d565b5090565b5b80821115612749576000815560010161274e565b80356001600160a01b0381168114611fdd57600080fd5b60006020828403121561278b57600080fd5b6123b982612762565b6000602082840312156127a657600080fd5b81356001600160e01b0319811681146123b957600080fd5b6000602082840312156127d057600080fd5b5035919050565b600080604083850312156127ea57600080fd5b823591506127fa60208401612762565b90509250929050565b60008060006040848603121561281857600080fd5b61282184612762565b9250602084013567ffffffffffffffff8082111561283e57600080fd5b818601915086601f83011261285257600080fd5b81358181111561286157600080fd5b87602082850101111561287357600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156128c5576128c5612886565b604052919050565b600067ffffffffffffffff8211156128e7576128e7612886565b50601f01601f191660200190565b6000612908612903846128cd565b61289c565b905082815283838301111561291c57600080fd5b828260208301376000602084830101529392505050565b6000806040838503121561294657600080fd5b61294f83612762565b9150602083013567ffffffffffffffff81111561296b57600080fd5b8301601f8101851361297c57600080fd5b61298b858235602084016128f5565b9150509250929050565b60005b838110156129b0578181015183820152602001612998565b838111156123635750506000910152565b600081518084526129d9816020860160208601612995565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612a4257603f19888603018452612a308583516129c1565b94509285019290850190600101612a14565b5092979650505050505050565b600060208284031215612a6157600080fd5b813567ffffffffffffffff811115612a7857600080fd5b8201601f81018413612a8957600080fd5b612a98848235602084016128f5565b949350505050565b60008083601f840112612ab257600080fd5b50813567ffffffffffffffff811115612aca57600080fd5b6020830191508360208260051b8501011115612ae557600080fd5b9250929050565b60008060008060408587031215612b0257600080fd5b843567ffffffffffffffff80821115612b1a57600080fd5b612b2688838901612aa0565b90965094506020870135915080821115612b3f57600080fd5b50612b4c87828801612aa0565b95989497509550505050565b6020815260006123b960208301846129c1565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b8183823760009101908152919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215612c8057600080fd5b815180151581146123b957600080fd5b634e487b7160e01b600052603260045260246000fd5b600181811c90821680612cba57607f821691505b602082108103612cda57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251612cf2818460208701612995565b9190910192915050565b600060208284031215612d0e57600080fd5b815167ffffffffffffffff811115612d2557600080fd5b8201601f81018413612d3657600080fd5b8051612d44612903826128cd565b818152856020838501011115612d5957600080fd5b612687826020830160208601612995565b600060208284031215612d7c57600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600060018201612e4457612e44612e1c565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612e83816017850160208801612995565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612eb4816028840160208801612995565b01602801949350505050565b6000816000190483118215151615612eda57612eda612e1c565b500290565b60008219821115612ef257612ef2612e1c565b500190565b600081612f0657612f06612e1c565b50600019019056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a8803cd983ad3d5a1d0cb16437bb6261b254106596e9596fc12de22e90b38fa664736f6c634300080e0033",
  "devdoc": {
    "details": "The ToucanContractRegistry is queried by other contracts for current addresses",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "toucanCarbonOffsetsFactoryAddress(string)": {
        "details": "return the TCO2 factory address for the provided standard"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "PAUSER_ROLE": {
        "details": "All roles related to accessing this contract"
      },
      "VERSION": {
        "details": "Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addERC20(address,string)": {
        "notice": "Keep track of TCO2s per standard"
      },
      "checkERC20(address)": {
        "notice": "TODO: Kept for backwards-compatibility; will be removed in a future upgrade in favor of isValidERC20(erc20)"
      },
      "pauseSystem()": {
        "notice": "security function that pauses all contracts part of the carbon bridge"
      },
      "toucanCarbonOffsetFactories(string)": {
        "notice": "map of standard registries to tco2 factory addresses"
      },
      "unpauseSystem()": {
        "notice": "security function that unpauses all contracts part of the carbon bridge"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18660,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "_carbonOffsetBatchesAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 18662,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "_carbonProjectsAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18664,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "_carbonProjectVintagesAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 18666,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "DEPRECATED_toucanCarbonOffsetsFactoryAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 18668,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "_retirementCertificatesAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 18672,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "projectVintageERC20Registry",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2390,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 2393,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 7094,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1881,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 1993,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7401,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1497,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1492_storage)"
      },
      {
        "astId": 1796,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "158",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2372,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2660,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18678,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "toucanCarbonOffsetFactories",
        "offset": 0,
        "slot": "307",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 18682,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "standardRegistries",
        "offset": 0,
        "slot": "308",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 18685,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "_toucanCarbonOffsetsEscrowAddress",
        "offset": 0,
        "slot": "309",
        "type": "t_address"
      },
      {
        "astId": 18688,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "_retirementCertificateSlicerAddress",
        "offset": 0,
        "slot": "310",
        "type": "t_address"
      },
      {
        "astId": 18690,
        "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
        "label": "_retirementCertificateSlicesAddress",
        "offset": 0,
        "slot": "311",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1492_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1492_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)1492_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 1489,
            "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1491,
            "contract": "contracts/ToucanContractRegistry.sol:ToucanContractRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}