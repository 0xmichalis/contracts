{
  "language": "Solidity",
  "sources": {
    "contracts/CarbonOffsetBatches.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\nimport './interfaces/IToucanContractRegistry.sol';\nimport './interfaces/ICarbonOffsetBatches.sol';\nimport './ToucanCarbonOffsetsFactory.sol';\nimport './CarbonOffsetBatchesStorage.sol';\nimport './libraries/ProjectVintageUtils.sol';\nimport './libraries/Modifiers.sol';\n\n/// @notice Also referred to as Batch-Contract (formerly BatchCollection)\n/// Contract that tokenizes retired/cancelled CO2 credits into NFTs via a claims process\ncontract CarbonOffsetBatches is\n    ICarbonOffsetBatches,\n    ERC721EnumerableUpgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    UUPSUpgradeable,\n    ProjectVintageUtils,\n    Modifiers,\n    CarbonOffsetBatchesStorage\n{\n    using AddressUpgradeable for address;\n\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    bytes32 public constant VERIFIER_ROLE = keccak256('VERIFIER_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event BatchMinted(address sender, uint256 tokenId);\n    event BatchUpdated(uint256 tokenId, string serialNumber, uint256 quantity);\n    event BatchLinkedWithVintage(\n        uint256 tokenId,\n        uint256 projectVintageTokenId\n    );\n    event BatchComment(\n        uint256 tokenId,\n        uint256 commentId,\n        address sender,\n        string comment\n    );\n    event BatchStatusUpdate(uint256 tokenId, RetirementStatus status);\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    /// @dev Returns the current version of the smart contract\n    function version() public pure returns (string memory) {\n        return '1.2.0';\n    }\n\n    function initialize(address _contractRegistry) public virtual initializer {\n        __Context_init_unchained();\n        __ERC721_init_unchained(\n            'Toucan Protocol: Carbon Offset Batches',\n            'TOUCAN-COB'\n        );\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        contractRegistry = _contractRegistry;\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev    wraps _pause(), only Admin\n    function pause() public virtual onlyBy(contractRegistry, owner()) {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() public virtual onlyBy(contractRegistry, owner()) {\n        _unpause();\n    }\n\n    function setToucanContractRegistry(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        contractRegistry = _address;\n    }\n\n    /// @dev The verifier has the authority to confirm NFTs so ERC20's can be minted\n    modifier onlyVerifier() {\n        require(\n            hasRole(VERIFIER_ROLE, _msgSender()),\n            'Error: caller is not the verifier'\n        );\n        _;\n    }\n\n    /// @dev internal helper function to set the status and emit an event\n    function updateStatus(uint256 tokenId, RetirementStatus newStatus)\n        internal\n        virtual\n    {\n        nftList[tokenId].status = newStatus;\n        emit BatchStatusUpdate(tokenId, newStatus);\n    }\n\n    /// @notice Function to approve a Batch-NFT after validation.\n    /// Fractionalization requires status Confirmed.\n    /// @dev    This flow requires a previous linking with a `projectVintageTokenId`.\n    function confirmRetirement(uint256 tokenId)\n        public\n        virtual\n        onlyVerifier\n        whenNotPaused\n    {\n        require(\n            _exists(tokenId),\n            'ERC721: approved query for nonexistent token'\n        );\n        require(\n            nftList[tokenId].status != RetirementStatus.Confirmed,\n            'Batch retirement is already confirmed'\n        );\n        require(\n            nftList[tokenId].projectVintageTokenId != 0,\n            'Cannot retire batch without project vintage'\n        );\n        require(\n            serialNumberApproved[nftList[tokenId].serialNumber] == false,\n            'Serialnumber has already been approved'\n        );\n        /// @dev setting serialnumber as unique after confirmation\n        serialNumberApproved[nftList[tokenId].serialNumber] = true;\n        updateStatus(tokenId, RetirementStatus.Confirmed);\n    }\n\n    /// @notice Function to reject Batch-NFTs, e.g. if the serial number entered is incorrect.\n    function rejectRetirement(uint256 tokenId)\n        public\n        virtual\n        onlyVerifier\n        whenNotPaused\n    {\n        require(\n            nftList[tokenId].status == RetirementStatus.Pending,\n            'Batch must be in pending state to be rejected'\n        );\n        /// @dev unsetting serialnumber with rejection\n        serialNumberApproved[nftList[tokenId].serialNumber] = false;\n        updateStatus(tokenId, RetirementStatus.Rejected);\n    }\n\n    /// @notice Function to reject Batch-NFTs, including a reason to be displayed to the user.\n    function rejectWithComment(uint256 tokenId, string memory comment)\n        public\n        virtual\n        onlyVerifier\n        whenNotPaused\n    {\n        rejectRetirement(tokenId);\n        addComment(tokenId, comment);\n    }\n\n    /// @dev admin function to reject a previously approved batch\n    /// Requires that the Batch-NFT has not been fractionalized yet\n    function rejectApprovedWithComment(uint256 tokenId, string memory comment)\n        public\n        virtual\n        onlyOwner\n        whenNotPaused\n    {\n        require(\n            nftList[tokenId].status == RetirementStatus.Confirmed,\n            'Batch must be in confirmed state to be rejected'\n        );\n        require(\n            IToucanContractRegistry(contractRegistry).checkERC20(\n                ownerOf(tokenId)\n            ) == false,\n            'Batch has already been fractionalized'\n        );\n        updateStatus(tokenId, RetirementStatus.Rejected);\n        addComment(tokenId, comment);\n    }\n\n    /// @notice Set batches back to pending after a rejection. This can\n    /// be useful if there was an issue unrelated to the on-chain data of the\n    /// batch, e.g. the batch was incorrectly rejected.\n    function setToPending(uint256 tokenId)\n        external\n        virtual\n        onlyVerifier\n        whenNotPaused\n    {\n        require(\n            nftList[tokenId].status == RetirementStatus.Rejected,\n            'Can only reset rejected batches to pending'\n        );\n        updateStatus(tokenId, RetirementStatus.Pending);\n    }\n\n    /// @dev Function for alternative flow where Batch-NFT approval is done separately.\n    function linkWithVintage(uint256 tokenId, uint256 projectVintageTokenId)\n        public\n        virtual\n        onlyVerifier\n        whenNotPaused\n    {\n        checkProjectVintageTokenExists(contractRegistry, projectVintageTokenId);\n        nftList[tokenId].projectVintageTokenId = projectVintageTokenId;\n        emit BatchLinkedWithVintage(tokenId, projectVintageTokenId);\n    }\n\n    /// @dev Function for main approval flow, which requires passing a `projectVintageTokenId`.\n    function confirmRetirementWithVintage(\n        uint256 tokenId,\n        uint256 projectVintageTokenId\n    ) public virtual onlyVerifier whenNotPaused {\n        require(\n            nftList[tokenId].status != RetirementStatus.Confirmed,\n            'Batch retirement is already confirmed'\n        );\n        // We don't want this to be a \"backdoor\" for modifying the vintage; it\n        // could be insecure or allow accidents to happen, and it would also\n        // result in BatchLinkedWithVintage being emitted more than once per\n        // batch.\n        require(\n            nftList[tokenId].projectVintageTokenId == 0,\n            'Vintage is already set and cannot be changed; use confirmRetirement instead'\n        );\n        linkWithVintage(tokenId, projectVintageTokenId);\n        confirmRetirement(tokenId);\n    }\n\n    /// @dev Function to remove uniqueness for previously set serialnumbers.\n    /// N.B. even though (technically speaking) calling this to complete the\n    /// upgrade to a fixed contract is the responsibility of the contract's\n    /// owner (deployer), in practice that is a multi-sig even before upgrade,\n    /// and unsetting a bunch of serials via multi-sig is not practical.\n    /// So instead we allow the verifiers to do it.\n    function unsetSerialNumber(string memory serialNumber) public onlyVerifier {\n        serialNumberApproved[serialNumber] = false;\n    }\n\n    // ----------------------------------\n    //  (Semi-)Permissionless functions\n    // ----------------------------------\n\n    /// @notice     Permissionlessly mint empty BatchNFTs\n    /// Entry point to the carbon bridging process.\n    /// @dev        To be updated by NFT owner after serial number has been provided\n    /// @param to   The address the NFT should be minted to. This should be the user.\n    function mintEmptyBatch(address to) external virtual whenNotPaused {\n        uint256 newItemId = batchTokenCounter;\n        unchecked {\n            ++newItemId;\n        }\n        batchTokenCounter = newItemId;\n\n        _safeMint(to, newItemId);\n        nftList[newItemId].status = RetirementStatus.Pending;\n\n        emit BatchMinted(to, newItemId);\n    }\n\n    /// @notice Updates BatchNFT after Serialnumber has been verified\n    /// @dev    Data is usually inserted by the user (NFT owner) via the UI\n    /// @param tokenId the Batch-NFT\n    /// @param serialNumber the serial number received from the registry/credit cancellation\n    /// @param quantity quantity in tCO2e\n    /// @param uri optional tokenURI with additional information\n    function updateBatchWithData(\n        uint256 tokenId,\n        string memory serialNumber,\n        uint256 quantity,\n        string memory uri\n    ) public virtual whenNotPaused {\n        require(\n            ownerOf(tokenId) == _msgSender() ||\n                hasRole(VERIFIER_ROLE, _msgSender()),\n            'Error: update only by owner or verifier'\n        );\n        RetirementStatus status = nftList[tokenId].status;\n        require(\n            status != RetirementStatus.Confirmed,\n            'Error: cannot change data after confirmation'\n        );\n        require(\n            serialNumberApproved[serialNumber] == false,\n            'Serialnumber has already been approved'\n        );\n        nftList[tokenId].serialNumber = serialNumber;\n        nftList[tokenId].quantity = quantity;\n\n        /// @dev Make sure metadata does not exist twice\n        if (!strcmp(uri, nftList[tokenId].uri)) {\n            require(URIs[uri] == false, 'Error: uri already exists');\n            nftList[tokenId].uri = uri;\n            URIs[uri] = true;\n        }\n\n        if (status == RetirementStatus.Rejected) {\n            updateStatus(tokenId, RetirementStatus.Pending);\n        }\n\n        emit BatchUpdated(tokenId, serialNumber, quantity);\n    }\n\n    /// @dev Function to just update serial number and quantity and not the URI,\n    /// does not work for rejected bat\n    function setSerialandQuantity(\n        uint256 tokenId,\n        string memory newSerialNumber,\n        uint256 newQuantity\n    ) external virtual whenNotPaused {\n        require(\n            ownerOf(tokenId) == _msgSender() ||\n                hasRole(VERIFIER_ROLE, _msgSender()),\n            'Error: update only by owner or verifier'\n        );\n        require(\n            nftList[tokenId].status != RetirementStatus.Confirmed,\n            'Error: cannot change data after confirmation'\n        );\n        require(\n            serialNumberApproved[newSerialNumber] == false,\n            'Serialnumber has already been approved'\n        );\n        nftList[tokenId].serialNumber = newSerialNumber;\n        nftList[tokenId].quantity = newQuantity;\n\n        emit BatchUpdated(tokenId, newSerialNumber, newQuantity);\n    }\n\n    /// @notice Returns just the confirmation (approval) status of Batch-NFT\n    function getConfirmationStatus(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (RetirementStatus)\n    {\n        return nftList[tokenId].status;\n    }\n\n    /// @notice Returns all data from Batch-NFT\n    /// @dev Used in TCO2 contract's receive hook `onERC721Received`\n    function getBatchNFTData(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (\n            uint256,\n            uint256,\n            RetirementStatus\n        )\n    {\n        return (\n            nftList[tokenId].projectVintageTokenId,\n            nftList[tokenId].quantity,\n            nftList[tokenId].status\n        );\n    }\n\n    /// @dev This is necessary because the automatically generated nftList\n    /// getter will not include an array of comments in the returned tuple for\n    /// gas reasons:\n    /// https://docs.soliditylang.org/en/latest/contracts.html#visibility-and-getters\n    function getComments(uint256 tokenId)\n        public\n        view\n        virtual\n        returns (string[] memory, address[] memory)\n    {\n        return (nftList[tokenId].comments, nftList[tokenId].commentAuthors);\n    }\n\n    /// @dev Overridden here because of function overloading issues with ethers.js\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            'ERC721: transfer caller is not owner nor approved'\n        );\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /// @notice Function that automatically converts Batch-NFT to TCO2 (ERC20)\n    /// @dev Queries the factory to find the corresponding TCO2 contract\n    /// Fractionalization happens via receive hook on `safeTransferFrom`\n    function fractionalize(uint256 tokenId) external virtual {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            'ERC721: transfer caller is not owner nor approved'\n        );\n        require(\n            nftList[tokenId].status == RetirementStatus.Confirmed,\n            'Error: cannot fractionalize before confirmation'\n        );\n\n        address ERC20Factory = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsFactoryAddress();\n        uint256 pvId = nftList[tokenId].projectVintageTokenId;\n        address pvERC20 = ToucanCarbonOffsetsFactory(ERC20Factory).pvIdtoERC20(\n            pvId\n        );\n\n        safeTransferFrom(_msgSender(), pvERC20, tokenId, '');\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlUpgradeable, ERC721EnumerableUpgradeable)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IAccessControlUpgradeable).interfaceId ||\n            ERC721Upgradeable.supportsInterface(interfaceId);\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    function setBaseURI(string memory gateway) external virtual onlyOwner {\n        baseURI = gateway;\n    }\n\n    /// @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n    /// based on the ERC721URIStorage implementation\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            'ERC721URIStorage: URI query for nonexistent token'\n        );\n\n        string memory uri = nftList[tokenId].uri;\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return uri;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(uri).length > 0) {\n            return string(abi.encodePacked(base, uri));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /// @dev Utilized here in order to disable transfers when paused\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), 'ERC20Pausable: token transfer while paused');\n    }\n\n    /// @notice Append a comment to a Batch-NFT\n    /// @dev Don't allow the contract owner to comment.  When the contract owner\n    /// can also be a verifier they should add them as a verifier first; this\n    /// should prevent accidental comments from the wrong account.\n    function addComment(uint256 tokenId, string memory comment) public virtual {\n        require(\n            hasRole(VERIFIER_ROLE, _msgSender()) ||\n                _msgSender() == ownerOf(tokenId) ||\n                _msgSender() == owner(),\n            'Only the batch owner, contract owner and verifiers can comment'\n        );\n        require(_exists(tokenId), 'Cannot comment on non-existent batch');\n        nftList[tokenId].comments.push() = comment;\n        nftList[tokenId].commentAuthors.push() = _msgSender();\n        emit BatchComment(\n            tokenId,\n            nftList[tokenId].comments.length,\n            _msgSender(),\n            comment\n        );\n    }\n\n    // -----------------------------\n    //      Helper Functions\n    // -----------------------------\n\n    /// @dev internal helper for string comparison\n    function strcmp(string memory a, string memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return memcmp(bytes(a), bytes(b));\n    }\n\n    /// @dev internal helper for string comparison\n    function memcmp(bytes memory a, bytes memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return (a.length == b.length) && (keccak256(a) == keccak256(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721Upgradeable.sol\";\nimport \"./IERC721EnumerableUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\n    function __ERC721Enumerable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721Enumerable_init_unchained();\n    }\n\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\n    }\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Upgradeable.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721Upgradeable.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n    uint256[46] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n        __ERC1967Upgrade_init_unchained();\n        __UUPSUpgradeable_init_unchained();\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallSecure(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IToucanContractRegistry.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\ninterface IToucanContractRegistry {\n    function carbonOffsetBatchesAddress() external view returns (address);\n\n    function carbonProjectsAddress() external view returns (address);\n\n    function carbonProjectVintagesAddress() external view returns (address);\n\n    function toucanCarbonOffsetsFactoryAddress()\n        external\n        view\n        returns (address);\n\n    function carbonOffsetBadgesAddress() external view returns (address);\n\n    function checkERC20(address _address) external view returns (bool);\n\n    function addERC20(address _address) external;\n}\n"
    },
    "contracts/interfaces/ICarbonOffsetBatches.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '../CarbonOffsetBatchesTypes.sol';\n\ninterface ICarbonOffsetBatches {\n    function getConfirmationStatus(uint256 tokenId)\n        external\n        view\n        returns (RetirementStatus);\n\n    function getBatchNFTData(uint256 tokenId)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            RetirementStatus\n        );\n}\n"
    },
    "contracts/ToucanCarbonOffsetsFactory.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\n// ============ External Imports ============\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\n\n// ============ Internal Imports ============\nimport './interfaces/IToucanContractRegistry.sol';\nimport './interfaces/ICarbonOffsetBatches.sol';\nimport './libraries/ProjectUtils.sol';\nimport './libraries/ProjectVintageUtils.sol';\nimport './libraries/Modifiers.sol';\nimport './ToucanCarbonOffsets.sol';\nimport './ToucanCarbonOffsetsFactoryStorage.sol';\n\n/// @notice This TCO2 factory creates project-vintage-specific ERC20 contracts for Batch-NFT fractionalization\n/// Locks in received ERC721 Batch-NFTs and can mint corresponding quantity of ERC20s\n/// Permissionless, anyone can deploy new ERC20s unless they do not yet exist and pid exists\ncontract ToucanCarbonOffsetsFactory is\n    ToucanCarbonOffsetsFactoryStorageV1,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    UUPSUpgradeable,\n    ProjectUtils,\n    ProjectVintageUtils,\n    Modifiers,\n    ToucanCarbonOffsetsFactoryStorage\n{\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    uint256 public constant bridgeFeeDivider = 1e4;\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event TokenCreated(uint256 vintageTokenId, address tokenAddress);\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    /// @dev Returns the current version of the smart contract\n    function version() public pure returns (string memory) {\n        return '1.1.0';\n    }\n\n    function initialize(address _contractRegistry) public virtual initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        contractRegistry = _contractRegistry;\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    /// @dev sets the Beacon that tracks the current implementation logic of the TCO2s\n    function setBeacon(address _beacon) external virtual onlyOwner {\n        beacon = _beacon;\n    }\n\n    // ----------------------------------------\n    //           Admin functions\n    // ----------------------------------------\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() public virtual onlyBy(contractRegistry, owner()) {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() public virtual onlyBy(contractRegistry, owner()) {\n        _unpause();\n    }\n\n    /// @dev set the registry contract to be tracked\n    function setToucanContractRegistry(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        contractRegistry = _address;\n    }\n\n    // ----------------------------------------\n    //       Permissionless functions\n    // ----------------------------------------\n\n    /// @notice internal factory function to deploy new TCO2 (ERC20) contracts\n    /// @dev the function creates a new BeaconProxy for each TCO2\n    /// @param projectVintageTokenId links the vintage-specific data to the TCO2 contract\n    function deployNewProxy(uint256 projectVintageTokenId)\n        internal\n        virtual\n        whenNotPaused\n    {\n        require(beacon != address(0), 'Error: Beacon for proxy not set');\n        require(\n            !checkExistence(projectVintageTokenId),\n            'pvERC20 already exists'\n        );\n        checkProjectVintageTokenExists(contractRegistry, projectVintageTokenId);\n\n        /// @dev generate payload for initialize function\n        string memory signature = 'initialize(string,string,uint256,address)';\n        bytes memory payload = abi.encodeWithSignature(\n            signature,\n            'Toucan Protocol: TCO2',\n            'TCO2',\n            projectVintageTokenId,\n            contractRegistry\n        );\n\n        BeaconProxy proxyTCO2 = new BeaconProxy(beacon, payload);\n\n        IToucanContractRegistry(contractRegistry).addERC20(address(proxyTCO2));\n\n        deployedContracts.push(address(proxyTCO2));\n        pvIdtoERC20[projectVintageTokenId] = address(proxyTCO2);\n\n        emit TokenCreated(projectVintageTokenId, address(proxyTCO2));\n    }\n\n    /// @dev Deploys a TCO2 contract based on a project vintage\n    /// @param projectVintageTokenId numeric tokenId from vintage in `CarbonProjectVintages`\n    function deployFromVintage(uint256 projectVintageTokenId)\n        public\n        virtual\n        whenNotPaused\n    {\n        deployNewProxy(projectVintageTokenId);\n    }\n\n    /// @dev Checks if same project vintage has already been deployed\n    function checkExistence(uint256 projectVintageTokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        if (pvIdtoERC20[projectVintageTokenId] == address(0)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function increaseTotalRetired(uint256 amount) external {\n        bool isTCO2 = IToucanContractRegistry(contractRegistry).checkERC20(\n            msg.sender\n        );\n        require(isTCO2 || msg.sender == owner(), 'Invalid sender');\n        totalRetired += amount;\n    }\n\n    /// @dev Returns all addresses of deployed TCO2 contracts\n    function getContracts() public view virtual returns (address[] memory) {\n        return deployedContracts;\n    }\n\n    function bridgeFeeReceiverAddress() public view virtual returns (address) {\n        return bridgeFeeReceiver;\n    }\n\n    function getBridgeFeeAndBurnAmount(uint256 _quantity)\n        public\n        view\n        virtual\n        returns (uint256, uint256)\n    {\n        uint256 feeDivider = bridgeFeeDivider;\n        uint256 feeAmount = (_quantity * bridgeFeePercentageInBase) /\n            feeDivider;\n        uint256 burnAmount = (feeAmount * bridgeFeeBurnPercentageInBase) /\n            feeDivider;\n        return (feeAmount, burnAmount);\n    }\n\n    /// @notice Update the bridge fee percentage\n    /// @param _bridgeFeePercentageInBase percentage of bridge fee in base\n    function setBridgeFeePercentage(uint256 _bridgeFeePercentageInBase)\n        public\n        virtual\n        onlyOwner\n    {\n        require(\n            _bridgeFeePercentageInBase < bridgeFeeDivider,\n            'bridge fee percentage must be lower than bridge fee divider'\n        );\n        bridgeFeePercentageInBase = _bridgeFeePercentageInBase;\n    }\n\n    /// @notice Update the bridge fee receiver\n    /// @param _bridgeFeeReceiver address to transfer the fees\n    function setBridgeFeeReceiver(address _bridgeFeeReceiver)\n        public\n        virtual\n        onlyOwner\n    {\n        bridgeFeeReceiver = _bridgeFeeReceiver;\n    }\n\n    /// @notice Update the bridge fee burning percentage\n    /// @param _bridgeFeeBurnPercentageInBase percentage of bridge fee in base\n    function setBridgeFeeBurnPercentage(uint256 _bridgeFeeBurnPercentageInBase)\n        public\n        virtual\n        onlyOwner\n    {\n        require(\n            _bridgeFeeBurnPercentageInBase < bridgeFeeDivider,\n            'burn fee percentage must be lower than bridge fee divider'\n        );\n        bridgeFeeBurnPercentageInBase = _bridgeFeeBurnPercentageInBase;\n    }\n\n    /// @notice Update the bridge fee burn address\n    /// @param _bridgeFeeBurnAddress address to transfer the fees to burn\n    function setBridgeFeeBurnAddress(address _bridgeFeeBurnAddress)\n        public\n        virtual\n        onlyOwner\n    {\n        bridgeFeeBurnAddress = _bridgeFeeBurnAddress;\n    }\n}\n"
    },
    "contracts/CarbonOffsetBatchesStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport './CarbonOffsetBatchesTypes.sol';\n\n/// @dev Separate storage contract to improve upgrade safety\ncontract CarbonOffsetBatchesStorage {\n    uint256 public batchTokenCounter;\n    /// @custom:oz-upgrades-renamed-from serialNumberExist\n    mapping(string => bool) public serialNumberApproved;\n    mapping(string => bool) public URIs;\n    mapping(address => bool) public verifiers; // has been removed, but must stay here because of storage layout\n\n    string public baseURI;\n    address public contractRegistry;\n\n    struct NFTData {\n        uint256 projectVintageTokenId;\n        string serialNumber;\n        uint256 quantity;\n        RetirementStatus status;\n        string uri;\n        string[] comments;\n        address[] commentAuthors;\n    }\n\n    mapping(uint256 => NFTData) public nftList;\n}\n"
    },
    "contracts/libraries/ProjectVintageUtils.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '../interfaces/IToucanContractRegistry.sol';\nimport '../interfaces/ICarbonProjectVintages.sol';\n\ncontract ProjectVintageUtils {\n    function checkProjectVintageTokenExists(\n        address contractRegistry,\n        uint256 tokenId\n    ) internal virtual {\n        address c = IToucanContractRegistry(contractRegistry)\n            .carbonProjectVintagesAddress();\n        require(\n            ICarbonProjectVintages(c).exists(tokenId),\n            'Carbon project vintage does not yet exist'\n        );\n    }\n}\n"
    },
    "contracts/libraries/Modifiers.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\ncontract Modifiers {\n    modifier onlyBy(address _contractRegistry, address _owner) {\n        require(\n            _contractRegistry == msg.sender || _owner == msg.sender,\n            'Caller is not the registry, nor owner'\n        );\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n        __ERC1967Upgrade_init_unchained();\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            _functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "contracts/CarbonOffsetBatchesTypes.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity >=0.8.4 <0.9.0;\n\nenum RetirementStatus {\n    Pending, // 0\n    Rejected, // 1\n    Confirmed // 2\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "contracts/libraries/ProjectUtils.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '../interfaces/IToucanContractRegistry.sol';\nimport '../interfaces/ICarbonProjects.sol';\n\ncontract ProjectUtils {\n    function checkProjectTokenExists(address contractRegistry, uint256 tokenId)\n        internal\n        virtual\n    {\n        address c = IToucanContractRegistry(contractRegistry)\n            .carbonProjectsAddress();\n        bool isValidProjectTokenId = ICarbonProjects(c).isValidProjectTokenId(\n            tokenId\n        );\n        require(isValidProjectTokenId == true, 'Error: Project does not exist');\n    }\n\n    function getProjectId(address contractRegistry, uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (string memory)\n    {\n        address c = IToucanContractRegistry(contractRegistry)\n            .carbonProjectsAddress();\n        return ICarbonProjects(c).getProjectId(tokenId);\n    }\n}\n"
    },
    "contracts/ToucanCarbonOffsets.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\nimport './interfaces/IToucanContractRegistry.sol';\nimport './interfaces/ICarbonOffsetBatches.sol';\nimport './interfaces/ICarbonProjects.sol';\nimport './interfaces/ICarbonProjectVintages.sol';\nimport './interfaces/IRetirementCertificates.sol';\nimport './CarbonProjectTypes.sol';\nimport './CarbonProjectVintageTypes.sol';\nimport './ToucanCarbonOffsetsStorage.sol';\nimport './ToucanCarbonOffsetsFactory.sol';\nimport './CarbonOffsetBatchesTypes.sol';\n\n/// @notice Implementation contract of the TCO2 tokens (ERC20)\n/// These tokenized carbon offsets are specific to a vintage and its associated attributes\n/// In order to mint TCO2s a user must deposit a matching CarbonOffsetBatch\n/// @dev Each TCO2 contract is deployed via a Beacon Proxy in `ToucanCarbonOffsetsFactory`\ncontract ToucanCarbonOffsets is\n    ERC20Upgradeable,\n    IERC721Receiver,\n    ToucanCarbonOffsetsStorage\n{\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event Retired(address sender, uint256 amount, uint256 eventId);\n    event FeePaid(address bridger, uint256 fees);\n    event FeeBurnt(address bridger, uint256 fees);\n\n    // ----------------------------------------\n    //              Modifiers\n    // ----------------------------------------\n\n    /// @dev modifier checks whether the `ToucanCarbonOffsetsFactory` is paused\n    /// Since TCO2 contracts are permissionless, pausing does not function individually\n    modifier whenNotPaused() {\n        address ToucanCarbonOffsetsFactoryAddress = IToucanContractRegistry(\n            contractRegistry\n        ).toucanCarbonOffsetsFactoryAddress();\n        bool _paused = ToucanCarbonOffsetsFactory(\n            ToucanCarbonOffsetsFactoryAddress\n        ).paused();\n        require(!_paused, 'Error: TCO2 contract is paused');\n        _;\n    }\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    /// @dev Returns the current version of the smart contract\n    function version() public pure virtual returns (string memory) {\n        return '1.2.0';\n    }\n\n    // ----------------------------------------\n    //       Permissionless functions\n    // ----------------------------------------\n\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        uint256 _projectVintageTokenId,\n        address _contractRegistry\n    ) public virtual initializer {\n        __ERC20_init_unchained(name_, symbol_);\n        projectVintageTokenId = _projectVintageTokenId;\n        contractRegistry = _contractRegistry;\n    }\n\n    /// @notice Token name getter overriden to return the a name based on the carbon project data\n    function name() public view virtual override returns (string memory) {\n        string memory globalProjectId;\n        string memory vintageName;\n        (globalProjectId, vintageName) = getGlobalProjectVintageIdentifiers();\n        return\n            string(\n                abi.encodePacked(\n                    'Toucan Protocol: TCO2-',\n                    globalProjectId,\n                    '-',\n                    vintageName\n                )\n            );\n    }\n\n    /// @notice Token symbol getter overriden to return the a symbol based on the carbon project data\n    function symbol() public view virtual override returns (string memory) {\n        string memory globalProjectId;\n        string memory vintageName;\n        (globalProjectId, vintageName) = getGlobalProjectVintageIdentifiers();\n        return\n            string(\n                abi.encodePacked('TCO2-', globalProjectId, '-', vintageName)\n            );\n    }\n\n    /// @dev Helper function to retrieve data fragments for `name()` and `symbol()`\n    function getGlobalProjectVintageIdentifiers()\n        public\n        view\n        virtual\n        returns (string memory, string memory)\n    {\n        ProjectData memory projectData;\n        VintageData memory vintageData;\n        (projectData, vintageData) = getAttributes();\n        return (projectData.projectId, vintageData.name);\n    }\n\n    /// @dev Function to get corresponding attributes from the CarbonProjects\n    function getAttributes()\n        public\n        view\n        virtual\n        returns (ProjectData memory, VintageData memory)\n    {\n        address pc = IToucanContractRegistry(contractRegistry)\n            .carbonProjectsAddress();\n        address vc = IToucanContractRegistry(contractRegistry)\n            .carbonProjectVintagesAddress();\n\n        VintageData memory vintageData = ICarbonProjectVintages(vc)\n            .getProjectVintageDataByTokenId(projectVintageTokenId);\n        ProjectData memory projectData = ICarbonProjects(pc)\n            .getProjectDataByTokenId(vintageData.projectTokenId);\n\n        return (projectData, vintageData);\n    }\n\n    /// @notice Receive hook to fractionalize Batch-NFTs into ERC20's\n    /// @dev Function is called with `operator` as `_msgSender()` in a reference implementation by OZ\n    /// `from` is the previous owner, not necessarily the same as operator.\n    /// The hook checks if NFT collection is whitelisted and next if attributes are matching this ERC20 contract\n    function onERC721Received(\n        address, /* operator */\n        address from,\n        uint256 tokenId,\n        bytes calldata /* data */\n    ) external virtual override whenNotPaused returns (bytes4) {\n        // msg.sender is the CarbonOffsetBatches contract\n        require(\n            checkWhiteListed(msg.sender),\n            'Error: Batch-NFT not from whitelisted contract'\n        );\n\n        (\n            uint256 gotVintageTokenId,\n            uint256 quantity,\n            RetirementStatus status\n        ) = ICarbonOffsetBatches(msg.sender).getBatchNFTData(tokenId);\n        require(\n            gotVintageTokenId == projectVintageTokenId,\n            'Error: non-matching NFT'\n        );\n        require(\n            status == RetirementStatus.Confirmed,\n            'BatchNFT not yet confirmed'\n        );\n\n        minterToId[from] = tokenId;\n        /// @dev multiply tonne quantity with decimals\n        quantity = quantity * 10**decimals();\n\n        require(\n            getRemaining() >= quantity,\n            'Error: Quantity in batch is higher than total vintages'\n        );\n\n        ToucanCarbonOffsetsFactory tco2Factory = ToucanCarbonOffsetsFactory(\n            IToucanContractRegistry(contractRegistry)\n                .toucanCarbonOffsetsFactoryAddress()\n        );\n        address bridgeFeeReceiver = tco2Factory.bridgeFeeReceiverAddress();\n\n        if (bridgeFeeReceiver == address(0x0)) {\n            // @dev if no bridge fee receiver address is set, mint without fees\n            _mint(from, quantity);\n        } else {\n            // @dev calculate bridge fees\n            (uint256 feeAmount, uint256 feeBurnAmount) = tco2Factory\n                .getBridgeFeeAndBurnAmount(quantity);\n            _mint(from, quantity - feeAmount);\n            address bridgeFeeBurnAddress = tco2Factory.bridgeFeeBurnAddress();\n            if (bridgeFeeBurnAddress != address(0x0) && feeBurnAmount > 0) {\n                feeAmount -= feeBurnAmount;\n                _mint(bridgeFeeReceiver, feeAmount);\n                _mint(bridgeFeeBurnAddress, feeBurnAmount);\n                emit FeePaid(from, feeAmount);\n                emit FeeBurnt(from, feeBurnAmount);\n            } else if (feeAmount > 0) {\n                _mint(bridgeFeeReceiver, feeAmount);\n                emit FeePaid(from, feeAmount);\n            }\n        }\n\n        return this.onERC721Received.selector;\n    }\n\n    /// @dev Internal helper to check if CarbonOffsetBatches is whitelisted (official)\n    function checkWhiteListed(address collection)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        if (\n            collection ==\n            IToucanContractRegistry(contractRegistry)\n                .carbonOffsetBatchesAddress()\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /// @dev Returns the remaining space in TCO2 contract before hitting the cap\n    function getRemaining() public view returns (uint256 remaining) {\n        uint256 cap = getDepositCap();\n        remaining = cap - totalSupply();\n    }\n\n    /// @dev Returns the cap for TCO2s based on `totalVintageQuantity`\n    /// Returns `~unlimited` if the value for the vintage is not set\n    function getDepositCap() public view returns (uint256) {\n        VintageData memory vintageData;\n        (, vintageData) = getAttributes();\n        uint64 totalVintageQuantity = vintageData.totalVintageQuantity;\n\n        ///@dev multipliying tonnes with decimals\n        uint256 cap = totalVintageQuantity * 10**decimals();\n\n        /// @dev if totalVintageQuantity is not set (=0), remove cap\n        if (cap == 0) {\n            return (2**256 - 1);\n        } else {\n            return cap;\n        }\n    }\n\n    /// @dev function to achieve backwards compatibility\n    /// Converts provided retired amount to an event that can be attached to an NFT\n    function convertAmountToEvent(uint256 amount)\n        internal\n        returns (uint256 retirementEventId)\n    {\n        retiredAmount[msg.sender] -= amount;\n\n        address certAddr = IToucanContractRegistry(contractRegistry)\n            .carbonOffsetBadgesAddress();\n        retirementEventId = IRetirementCertificates(certAddr).registerEvent(\n            msg.sender,\n            projectVintageTokenId,\n            amount,\n            true\n        );\n    }\n\n    /// @notice Retirement/Cancellation of TCO2 tokens (the actual offsetting),\n    /// which results in the tokens being burnt\n    function retire(uint256 amount)\n        public\n        virtual\n        whenNotPaused\n        returns (uint256 retirementEventId)\n    {\n        retirementEventId = _retire(_msgSender(), amount);\n    }\n\n    /// @dev Allow for pools or third party contracts to retire for the user\n    /// Requires approval\n    function retireFrom(address account, uint256 amount)\n        public\n        virtual\n        whenNotPaused\n        returns (uint256 retirementEventId)\n    {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(\n            currentAllowance >= amount,\n            'TCO2: retire amount exceeds allowance'\n        );\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        retirementEventId = _retire(account, amount);\n    }\n\n    /// @dev Internal function for the burning of TCO2 tokens\n    function _retire(address account, uint256 amount)\n        internal\n        virtual\n        returns (uint256 retirementEventId)\n    {\n        _burn(account, amount);\n\n        // Track total retirement amount in TCO2 factory\n        address TCO2FactoryAddress = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsFactoryAddress();\n        ToucanCarbonOffsetsFactory(TCO2FactoryAddress).increaseTotalRetired(\n            amount\n        );\n\n        // Register retirement event in the certificates contract\n        address certAddr = IToucanContractRegistry(contractRegistry)\n            .carbonOffsetBadgesAddress();\n        retirementEventId = IRetirementCertificates(certAddr).registerEvent(\n            account,\n            projectVintageTokenId,\n            amount,\n            false\n        );\n\n        emit Retired(account, amount, retirementEventId);\n    }\n\n    /// @notice Mint an NFT showing how many tonnes of CO2 have been retired/cancelled\n    /// amount is deprecated and used only for backwards-compatibility reasons\n    /// Going forward users should mint NFT directly in the RetirementCertificates contract.\n    /// @param retiringEntityString An identifiable string for the retiring entity, eg. their name.\n    /// @param beneficiary The beneficiary to set in the NFT.\n    /// @param beneficiaryString The beneficiaryString to set in the NFT.\n    /// @param retirementMessage The retirementMessage to set in the NFT.\n    /// @param amount The amount to issue an NFT certificate for.\n    function mintCertificateLegacy(\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256 amount\n    ) external whenNotPaused {\n        uint256 retirementEventId = convertAmountToEvent(amount);\n        uint256[] memory retirementEventIds = new uint256[](1);\n        retirementEventIds[0] = retirementEventId;\n        _mintCertificate(\n            retiringEntityString,\n            beneficiary,\n            beneficiaryString,\n            retirementMessage,\n            retirementEventIds\n        );\n    }\n\n    function _mintCertificate(\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256[] memory retirementEventIds\n    ) internal virtual whenNotPaused {\n        address certAddr = IToucanContractRegistry(contractRegistry)\n            .carbonOffsetBadgesAddress();\n        IRetirementCertificates(certAddr).mintCertificate(\n            msg.sender, /// @dev retiringEntity set automatically\n            retiringEntityString,\n            beneficiary,\n            beneficiaryString,\n            retirementMessage,\n            retirementEventIds\n        );\n    }\n\n    /// @notice Retire an amount of TCO2s, register an retirement event\n    /// then mint a certificate passing a single retirementEventId.\n    /// @param retiringEntityString An identifiable string for the retiring entity, eg. their name.\n    /// @param beneficiary The beneficiary to set in the NFT.\n    /// @param beneficiaryString The beneficiaryString to set in the NFT.\n    /// @param retirementMessage The retirementMessage to set in the NFT.\n    /// @param amount The amount to retire and issue an NFT certificate for.\n    function retireAndMintCertificate(\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256 amount\n    ) external virtual whenNotPaused {\n        // Retire provided amount\n        uint256 retirementEventId = retire(amount);\n        uint256[] memory retirementEventIds = new uint256[](1);\n        retirementEventIds[0] = retirementEventId;\n\n        // Mint certificate\n        _mintCertificate(\n            retiringEntityString,\n            beneficiary,\n            beneficiaryString,\n            retirementMessage,\n            retirementEventIds\n        );\n    }\n\n    // -----------------------------\n    //      Locked ERC20 safety\n    // -----------------------------\n\n    /// @dev Modifier to disallowing sending tokens to either the 0-address\n    /// or this contract itself\n    modifier validDestination(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        _;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        validDestination(recipient)\n        whenNotPaused\n        returns (bool)\n    {\n        super.transfer(recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    )\n        public\n        virtual\n        override\n        validDestination(recipient)\n        whenNotPaused\n        returns (bool)\n    {\n        super.transferFrom(sender, recipient, amount);\n        return true;\n    }\n}\n"
    },
    "contracts/ToucanCarbonOffsetsFactoryStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity >=0.8.4 <0.9.0;\n\n/// @dev V1 Storage contract for ToucanCarbonOffsetsFactory v.1.0\nabstract contract ToucanCarbonOffsetsFactoryStorageV1 {\n    address public contractRegistry;\n    address[] public deployedContracts;\n    mapping(uint256 => address) public pvIdtoERC20;\n}\n\n/// @dev V2 Storage contract for ToucanCarbonOffsetsFactory v.1.1\nabstract contract ToucanCarbonOffsetsFactoryStorageV2 {\n    address public beacon;\n\n    address public bridgeFeeReceiver;\n    uint256 public bridgeFeePercentageInBase;\n    address public bridgeFeeBurnAddress;\n    uint256 public bridgeFeeBurnPercentageInBase;\n    uint256 public totalRetired;\n}\n\n/// @dev Main storage contract inheriting new versions\n/// @dev V1 is not inherited as it was inherited in the main contract\nabstract contract ToucanCarbonOffsetsFactoryStorage is\n    ToucanCarbonOffsetsFactoryStorageV2\n{\n    /// @dev add a storage gap so future upgrades can introduce new variables\n    /// This is also allows for other dependencies to be inherited after this one\n    uint256[45] private __gap; // reduced by 5, due to V2 of storage\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ICarbonProjects.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\n\nimport '../CarbonProjectTypes.sol';\n\ninterface ICarbonProjects is IERC721Upgradeable {\n    function getProjectId(uint256 tokenId)\n        external\n        view\n        returns (string memory projectId);\n\n    function addNewProject(\n        address to,\n        string memory projectId,\n        string memory standard,\n        string memory methodology,\n        string memory region,\n        string memory storageMethod,\n        string memory method,\n        string memory emissionType,\n        string memory category,\n        string memory metaDataHash\n    ) external returns (uint256);\n\n    function isValidProjectTokenId(uint256 tokenId) external returns (bool);\n\n    function getProjectDataByTokenId(uint256 tokenId)\n        external\n        view\n        returns (ProjectData memory);\n}\n"
    },
    "contracts/CarbonProjectTypes.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity >=0.8.4 <0.9.0;\n\n/// @dev CarbonProject related data and attributes\nstruct ProjectData {\n    string projectId;\n    string standard;\n    string methodology;\n    string region;\n    string storageMethod;\n    string method;\n    string emissionType;\n    string category;\n    string uri;\n    address controller;\n}\n"
    },
    "contracts/interfaces/ICarbonProjectVintages.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\n\nimport '../CarbonProjectVintageTypes.sol';\n\ninterface ICarbonProjectVintages is IERC721Upgradeable {\n    function addNewVintage(\n        address to,\n        uint256 projectTokenId,\n        string memory name,\n        uint64 startTime,\n        uint64 endTime,\n        uint64 totalVintageQuantity,\n        bool isCorsiaCompliant,\n        bool isCCPcompliant,\n        string memory coBenefits,\n        string memory correspAdjustment,\n        string memory additionalCertification,\n        string memory uri\n    ) external returns (uint256);\n\n    function exists(uint256 tokenId) external view returns (bool);\n\n    function getProjectVintageDataByTokenId(uint256 tokenId)\n        external\n        view\n        returns (VintageData memory);\n}\n"
    },
    "contracts/CarbonProjectVintageTypes.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity >=0.8.4 <0.9.0;\n\nstruct VintageData {\n    /// @dev A human-readable string which differentiates this from other vintages in\n    /// the same project, and helps build the corresponding TCO2 name and symbol.\n    string name;\n    uint64 startTime; // UNIX timestamp\n    uint64 endTime; // UNIX timestamp\n    uint256 projectTokenId;\n    uint64 totalVintageQuantity;\n    bool isCorsiaCompliant;\n    bool isCCPcompliant;\n    string coBenefits;\n    string correspAdjustment;\n    string additionalCertification;\n    string uri;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IRetirementCertificates.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\ninterface IRetirementCertificates {\n    function mintCertificate(\n        address retiringEntity,\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256[] calldata retirementEventIds\n    ) external;\n\n    function registerEvent(\n        address retiringEntity,\n        uint256 projectVintageTokenId,\n        uint256 amount,\n        bool isLegacy\n    ) external returns (uint256 retireEventCounter);\n}\n"
    },
    "contracts/ToucanCarbonOffsetsStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity ^0.8.0;\n\n/// @dev Separate storage contract to improve upgrade safety\ncontract ToucanCarbonOffsetsStorage {\n    uint256 public projectVintageTokenId;\n    address public contractRegistry;\n\n    mapping(address => uint256) public minterToId;\n    /// @dev deprecated field; retirements are now tracked\n    /// as events in the RetirementCertificatesStorage contract\n    mapping(address => uint256) public retiredAmount;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/testing/CarbonOffsetBatchesUpgrade.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\n\nimport '../ToucanCarbonOffsetsFactory.sol';\nimport '../CarbonOffsetBatchesStorage.sol';\nimport '../CarbonOffsetBatches.sol';\n\n////////////////////////////////////////////////////\n////////// FOR TESTTING PURPOSES ONLY //////////////\n////////////////////////////////////////////////////\n\nabstract contract CarbonOffsetBatchesStorageV2Test is\n    CarbonOffsetBatchesStorage\n{\n    // add one state var\n    string public dummyVar;\n}\n\n//    ICarbonOffsetBatches,\ncontract CarbonOffsetBatchesV2Test is\n    ERC721EnumerableUpgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    UUPSUpgradeable,\n    ProjectUtils,\n    CarbonOffsetBatchesStorageV2Test\n{\n    // string public dummyVar;\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        override\n        onlyOwner\n    {}\n\n    function writeDummyVar(string memory text) public {\n        dummyVar = text;\n    }\n\n    function readFromStorageV2() public view returns (string memory) {\n        return dummyVar;\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlUpgradeable, ERC721EnumerableUpgradeable)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IAccessControlUpgradeable).interfaceId ||\n            ERC721Upgradeable.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/testing/ToucanCarbonOffsetsV11Test.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\nimport '../interfaces/IToucanContractRegistry.sol';\nimport '../interfaces/ICarbonOffsetBatches.sol';\nimport '../CarbonProjects.sol';\nimport '../CarbonProjectVintages.sol';\nimport '../CarbonProjectVintageTypes.sol';\nimport '../ToucanCarbonOffsetsStorage.sol';\nimport '../ToucanCarbonOffsetsFactory.sol';\nimport '../CarbonOffsetBatchesTypes.sol';\n\ninterface IRetirementCertificatesUnreleasedTest {\n    function mintCertificate(\n        address sender,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256 projectVintageTokenId,\n        uint256 amount\n    ) external;\n}\n\n/// @notice Implementation contract of the TCO2 tokens (ERC20)\n/// These tokenized carbon offsets are specific to a vintage and its associated attributes\n/// In order to mint TCO2s a user must deposit a matching CarbonOffsetBatch\n/// @dev Each TCO2 contract is deployed via a Beacon Proxy in `ToucanCarbonOffsetsFactory`\ncontract ToucanCarbonOffsetsV11Test is\n    ERC20Upgradeable,\n    IERC721Receiver,\n    ToucanCarbonOffsetsStorage\n{\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event Retired(address sender, uint256 tokenId);\n    event FeePaid(address bridger, uint256 fees);\n    event FeeBurnt(address bridger, uint256 fees);\n\n    // ----------------------------------------\n    //              Modifiers\n    // ----------------------------------------\n\n    /// @dev modifier checks whether the `ToucanCarbonOffsetsFactory` is paused\n    /// Since TCO2 contracts are permissionless, pausing does not function individually\n    modifier whenNotPaused() {\n        address ToucanCarbonOffsetsFactoryAddress = IToucanContractRegistry(\n            contractRegistry\n        ).toucanCarbonOffsetsFactoryAddress();\n        bool _paused = ToucanCarbonOffsetsFactory(\n            ToucanCarbonOffsetsFactoryAddress\n        ).paused();\n        require(!_paused, 'Error: TCO2 contract is paused');\n        _;\n    }\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    /// @dev Returns the current version of the smart contract\n    function version() public pure virtual returns (string memory) {\n        return '1.1.0';\n    }\n\n    // ----------------------------------------\n    //       Permissionless functions\n    // ----------------------------------------\n\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        uint256 _projectVintageTokenId,\n        address _contractRegistry\n    ) public virtual initializer {\n        __ERC20_init_unchained(name_, symbol_);\n        projectVintageTokenId = _projectVintageTokenId;\n        contractRegistry = _contractRegistry;\n    }\n\n    /// @notice Token name getter overriden to return the a name based on the carbon project data\n    function name() public view virtual override returns (string memory) {\n        string memory globalProjectId;\n        string memory vintageName;\n        (globalProjectId, vintageName) = getGlobalProjectVintageIdentifiers();\n        return\n            string(\n                abi.encodePacked(\n                    'Toucan Protocol: TCO2-',\n                    globalProjectId,\n                    '-',\n                    vintageName\n                )\n            );\n    }\n\n    /// @notice Token symbol getter overriden to return the a symbol based on the carbon project data\n    function symbol() public view virtual override returns (string memory) {\n        string memory globalProjectId;\n        string memory vintageName;\n        (globalProjectId, vintageName) = getGlobalProjectVintageIdentifiers();\n        return\n            string(\n                abi.encodePacked('TCO2-', globalProjectId, '-', vintageName)\n            );\n    }\n\n    /// @dev Helper function to retrieve data fragments for `name()` and `symbol()`\n    function getGlobalProjectVintageIdentifiers()\n        public\n        view\n        virtual\n        returns (string memory, string memory)\n    {\n        ProjectData memory projectData;\n        VintageData memory vintageData;\n        (projectData, vintageData) = getAttributes();\n        return (projectData.projectId, vintageData.name);\n    }\n\n    /// @dev Function to get corresponding attributes from the CarbonProjects\n    function getAttributes()\n        public\n        view\n        virtual\n        returns (ProjectData memory, VintageData memory)\n    {\n        address pc = IToucanContractRegistry(contractRegistry)\n            .carbonProjectsAddress();\n        address vc = IToucanContractRegistry(contractRegistry)\n            .carbonProjectVintagesAddress();\n\n        VintageData memory vintageData = CarbonProjectVintages(vc)\n            .getProjectVintageDataByTokenId(projectVintageTokenId);\n        ProjectData memory projectData = CarbonProjects(pc)\n            .getProjectDataByTokenId(vintageData.projectTokenId);\n\n        return (projectData, vintageData);\n    }\n\n    /// @notice Receive hook to fractionalize Batch-NFTs into ERC20's\n    /// @dev Function is called with `operator` as `_msgSender()` in a reference implementation by OZ\n    /// `from` is the previous owner, not necessarily the same as operator.\n    /// The hook checks if NFT collection is whitelisted and next if attributes are matching this ERC20 contract\n    function onERC721Received(\n        address, /* operator */\n        address from,\n        uint256 tokenId,\n        bytes calldata /* data */\n    ) external virtual override whenNotPaused returns (bytes4) {\n        // msg.sender is the CarbonOffsetBatches contract\n        require(\n            checkWhiteListed(msg.sender),\n            'Error: Batch-NFT not from whitelisted contract'\n        );\n\n        (\n            uint256 gotVintageTokenId,\n            uint256 quantity,\n            RetirementStatus status\n        ) = ICarbonOffsetBatches(msg.sender).getBatchNFTData(tokenId);\n        require(\n            gotVintageTokenId == projectVintageTokenId,\n            'Error: non-matching NFT'\n        );\n        require(\n            status == RetirementStatus.Confirmed,\n            'BatchNFT not yet confirmed'\n        );\n\n        minterToId[from] = tokenId;\n        /// @dev multiply tonne quantity with decimals\n        quantity = quantity * 10**decimals();\n\n        require(\n            getRemaining() >= quantity,\n            'Error: Quantity in batch is higher than total vintages'\n        );\n\n        ToucanCarbonOffsetsFactory tco2Factory = ToucanCarbonOffsetsFactory(\n            IToucanContractRegistry(contractRegistry)\n                .toucanCarbonOffsetsFactoryAddress()\n        );\n        address bridgeFeeReceiver = tco2Factory.bridgeFeeReceiverAddress();\n\n        if (bridgeFeeReceiver == address(0x0)) {\n            // @dev if no bridge fee receiver address is set, mint without fees\n            _mint(from, quantity);\n        } else {\n            // @dev calculate bridge fees\n            (uint256 feeAmount, uint256 feeBurnAmount) = tco2Factory\n                .getBridgeFeeAndBurnAmount(quantity);\n            _mint(from, quantity - feeAmount);\n            address bridgeFeeBurnAddress = tco2Factory.bridgeFeeBurnAddress();\n            if (bridgeFeeBurnAddress != address(0x0) && feeBurnAmount > 0) {\n                feeAmount -= feeBurnAmount;\n                _mint(bridgeFeeReceiver, feeAmount);\n                _mint(bridgeFeeBurnAddress, feeBurnAmount);\n                emit FeePaid(from, feeAmount);\n                emit FeeBurnt(from, feeBurnAmount);\n            } else if (feeAmount > 0) {\n                _mint(bridgeFeeReceiver, feeAmount);\n                emit FeePaid(from, feeAmount);\n            }\n        }\n\n        return this.onERC721Received.selector;\n    }\n\n    /// @dev Internal helper to check if CarbonOffsetBatches is whitelisted (official)\n    function checkWhiteListed(address collection)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        if (\n            collection ==\n            IToucanContractRegistry(contractRegistry)\n                .carbonOffsetBatchesAddress()\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /// @dev Returns the remaining space in TCO2 contract before hitting the cap\n    function getRemaining() public view returns (uint256 remaining) {\n        uint256 cap = getDepositCap();\n        remaining = cap - totalSupply();\n    }\n\n    /// @dev Returns the cap for TCO2s based on `totalVintageQuantity`\n    /// Returns `~unlimited` if the value for the vintage is not set\n    function getDepositCap() public view returns (uint256) {\n        VintageData memory vintageData;\n        (, vintageData) = getAttributes();\n        uint64 totalVintageQuantity = vintageData.totalVintageQuantity;\n\n        ///@dev multipliying tonnes with decimals\n        uint256 cap = totalVintageQuantity * 10**decimals();\n\n        /// @dev if totalVintageQuantity is not set (=0), remove cap\n        if (cap == 0) {\n            return (2**256 - 1);\n        } else {\n            return cap;\n        }\n    }\n\n    /// @notice Retirement/Cancellation of TCO2 tokens (the actual offsetting),\n    /// which results in the tokens being burnt\n    function retire(uint256 amount) public virtual whenNotPaused {\n        _retire(_msgSender(), amount);\n    }\n\n    /// @dev Allow for pools or third party contracts to retire for the user\n    /// Requires approval\n    function retireFrom(address account, uint256 amount)\n        public\n        virtual\n        whenNotPaused\n    {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(\n            currentAllowance >= amount,\n            'ERC20: retire amount exceeds allowance'\n        );\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _retire(account, amount);\n    }\n\n    /// @dev Internal function for the burning of TCO2 tokens\n    function _retire(address account, uint256 amount) internal virtual {\n        _burn(account, amount);\n        retiredAmount[account] += amount;\n\n        address TCO2FactoryAddress = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsFactoryAddress();\n        ToucanCarbonOffsetsFactory(TCO2FactoryAddress).increaseTotalRetired(\n            amount\n        );\n        emit Retired(account, amount);\n    }\n\n    /// @notice Mint an NFT showing how many tonnes of CO2 have been retired/cancelled\n    function mintCertificate(\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256 amount\n    ) public virtual whenNotPaused {\n        require(\n            retiredAmount[msg.sender] >= amount,\n            'Error: Cannot mint more than user has retired'\n        );\n\n        address certAddr = IToucanContractRegistry(contractRegistry)\n            .carbonOffsetBadgesAddress();\n        IRetirementCertificatesUnreleasedTest(certAddr).mintCertificate(\n            msg.sender, /// @dev retiringEntity set automatically\n            beneficiary,\n            beneficiaryString,\n            retirementMessage,\n            projectVintageTokenId,\n            amount\n        );\n        retiredAmount[msg.sender] -= amount;\n    }\n\n    /// @notice Retire offsets and mint certificate at once\n    function retireAndMintCertificate(\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256 amount\n    ) public virtual whenNotPaused {\n        // Retire provided amount\n        retire(amount);\n        // Mint certificate\n        mintCertificate(\n            beneficiary,\n            beneficiaryString,\n            retirementMessage,\n            amount\n        );\n    }\n\n    // -----------------------------\n    //      Locked ERC20 safety\n    // -----------------------------\n\n    /// @dev Modifier to disallowing sending tokens to either the 0-address\n    /// or this contract itself\n    modifier validDestination(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        _;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        validDestination(recipient)\n        whenNotPaused\n        returns (bool)\n    {\n        super.transfer(recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    )\n        public\n        virtual\n        override\n        validDestination(recipient)\n        whenNotPaused\n        returns (bool)\n    {\n        super.transferFrom(sender, recipient, amount);\n        return true;\n    }\n}\n"
    },
    "contracts/CarbonProjects.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\nimport './CarbonProjectsStorage.sol';\nimport './interfaces/ICarbonProjects.sol';\nimport './libraries/Modifiers.sol';\n\n/// @notice The CarbonProjects contract stores carbon project-specific data\n/// The data is stored in structs via ERC721 tokens\n/// Most contracts in the protocol query the data stored here\n/// The attributes in the Project-NFTs are constant over all vintages of the project\n/// @dev Each project can have up to n vintages, with data stored in the\n/// `CarbonProjectVintages` contract. `vintageTokenId`s are mapped to `projectTokenId`s\n/// via `pvToTokenId` in the vintage contract.\ncontract CarbonProjects is\n    ICarbonProjects,\n    CarbonProjectsStorage,\n    ERC721Upgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    Modifiers,\n    AccessControlUpgradeable,\n    UUPSUpgradeable\n{\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev All roles related to Access Control\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event ProjectMinted(address receiver, uint256 tokenId);\n    event ProjectUpdated(uint256 tokenId);\n    event ProjectIdUpdated(uint256 tokenId);\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize() public virtual initializer {\n        __Context_init_unchained();\n        __ERC721_init_unchained(\n            'Toucan Protocol: Carbon Projects',\n            'TOUCAN-CP'\n        );\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        /// @dev granting the deployer==owner the rights to grant other roles\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n    /// @dev modifier that only lets the contract's owner and elected managers add/update/remove project data\n    modifier onlyManagers() {\n        require(\n            hasRole(MANAGER_ROLE, msg.sender) || owner() == msg.sender,\n            'Caller is not authorized'\n        );\n        _;\n    }\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() public virtual onlyBy(contractRegistry, owner()) {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() public virtual onlyBy(contractRegistry, owner()) {\n        _unpause();\n    }\n\n    function setToucanContractRegistry(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        contractRegistry = _address;\n    }\n\n    /// @notice Adds a new carbon project along with attributes/data\n    /// @dev Projects can be added by data-managers\n    function addNewProject(\n        address to,\n        string memory projectId,\n        string memory standard,\n        string memory methodology,\n        string memory region,\n        string memory storageMethod,\n        string memory method,\n        string memory emissionType,\n        string memory category,\n        string memory uri\n    ) external virtual override onlyManagers whenNotPaused returns (uint256) {\n        require(!strcmp(projectId, ''), 'ProjectId cannot be empty');\n\n        /// @FIXME can we deprecate this check?\n        require(projectIds[projectId] == false, 'Project already exists');\n        projectIds[projectId] = true;\n\n        uint256 newItemId = projectTokenCounter;\n        unchecked {\n            ++newItemId;\n            ++totalSupply;\n        }\n        projectTokenCounter = uint128(newItemId);\n\n        validProjectTokenIds[newItemId] = true;\n\n        _mint(to, newItemId);\n\n        projectData[newItemId].projectId = projectId;\n        projectData[newItemId].standard = standard;\n        projectData[newItemId].methodology = methodology;\n        projectData[newItemId].region = region;\n        projectData[newItemId].storageMethod = storageMethod;\n        projectData[newItemId].method = method;\n        projectData[newItemId].emissionType = emissionType;\n        projectData[newItemId].category = category;\n        projectData[newItemId].uri = uri;\n\n        emit ProjectMinted(to, newItemId);\n        pidToTokenId[projectId] = newItemId;\n        return newItemId;\n    }\n\n    /// @notice Updates and existing carbon project\n    /// @dev Projects can be updated by data-managers\n    function updateProject(\n        uint256 tokenId,\n        string memory newStandard,\n        string memory newMethodology,\n        string memory newRegion,\n        string memory newStorageMethod,\n        string memory newMethod,\n        string memory newEmissionType,\n        string memory newCategory,\n        string memory newUri\n    ) external virtual onlyManagers whenNotPaused {\n        require(_exists(tokenId), 'Project not yet minted');\n        projectData[tokenId].standard = newStandard;\n        projectData[tokenId].methodology = newMethodology;\n        projectData[tokenId].region = newRegion;\n        projectData[tokenId].storageMethod = newStorageMethod;\n        projectData[tokenId].method = newMethod;\n        projectData[tokenId].emissionType = newEmissionType;\n        projectData[tokenId].category = newCategory;\n        projectData[tokenId].uri = newUri;\n\n        emit ProjectUpdated(tokenId);\n    }\n\n    /// @dev Projects and their projectId's must be unique, changing them must be handled carefully\n    function updateProjectId(uint256 tokenId, string memory newProjectId)\n        external\n        virtual\n        onlyManagers\n        whenNotPaused\n    {\n        require(_exists(tokenId), 'Project not yet minted');\n        require(\n            projectIds[newProjectId] == false,\n            'Cant change current projectId to an existing one'\n        );\n\n        string memory oldProjectId = projectData[tokenId].projectId;\n        projectIds[oldProjectId] = false;\n\n        projectData[tokenId].projectId = newProjectId;\n        projectIds[newProjectId] = true;\n\n        emit ProjectIdUpdated(tokenId);\n    }\n\n    /// @dev Removes a project and corresponding data, sets projectTokenId invalid\n    function removeProject(uint256 projectTokenId)\n        external\n        virtual\n        onlyManagers\n        whenNotPaused\n    {\n        delete projectData[projectTokenId];\n        /// @dev set projectTokenId to invalid\n        totalSupply--;\n        validProjectTokenIds[projectTokenId] = false;\n    }\n\n    /// @dev Returns the global project-id, for example'VCS-1418'\n    function getProjectId(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        return projectData[tokenId].projectId;\n    }\n\n    /// @dev Function used by the utility function `checkProjectTokenExists`\n    function isValidProjectTokenId(uint256 projectTokenId)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return validProjectTokenIds[projectTokenId];\n    }\n\n    /// @dev retrieve all data from ProjectData struct\n    function getProjectDataByTokenId(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (ProjectData memory)\n    {\n        return (projectData[tokenId]);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(\n            AccessControlUpgradeable,\n            ERC721Upgradeable,\n            IERC165Upgradeable\n        )\n        returns (bool)\n    {\n        return\n            interfaceId == type(IAccessControlUpgradeable).interfaceId ||\n            ERC721Upgradeable.supportsInterface(interfaceId);\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    function setBaseURI(string memory gateway) external virtual onlyOwner {\n        baseURI = gateway;\n    }\n\n    /// @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n    /// based on the ERC721URIStorage implementation\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            'ERC721URIStorage: URI query for nonexistent token'\n        );\n\n        string memory uri = projectData[tokenId].uri;\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return uri;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(uri).length > 0) {\n            return string(abi.encodePacked(base, uri));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    function memcmp(bytes memory a, bytes memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return (a.length == b.length) && (keccak256(a) == keccak256(b));\n    }\n\n    function strcmp(string memory a, string memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return memcmp(bytes(a), bytes(b));\n    }\n}\n"
    },
    "contracts/CarbonProjectVintages.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\nimport './interfaces/IToucanContractRegistry.sol';\nimport './interfaces/ICarbonProjectVintages.sol';\nimport './CarbonProjectVintagesStorage.sol';\nimport './libraries/ProjectUtils.sol';\nimport './libraries/Modifiers.sol';\n\n/// @notice The CarbonProjectVintages contract stores vintage-specific data\n/// The data is stored in structs via ERC721 tokens\n/// Most contracts in the protocol query the data stored here\n/// Every `vintageData` struct points to a parent `CarbonProject`\ncontract CarbonProjectVintages is\n    CarbonProjectVintagesStorage,\n    ICarbonProjectVintages,\n    ERC721Upgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    UUPSUpgradeable,\n    Modifiers,\n    ProjectUtils\n{\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    /// @dev All roles related to Access Control\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event ProjectVintageMinted(\n        address receiver,\n        uint256 tokenId,\n        uint256 projectTokenId,\n        uint64 startTime\n    );\n    event ProjectVintageUpdated(uint256 tokenId);\n    event ProjectVintageIdUpdated(uint256 tokenId);\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize() public virtual initializer {\n        __Context_init_unchained();\n        __ERC721_init_unchained(\n            'Toucan Protocol: Carbon Project Vintages',\n            'TOUCAN-CPV'\n        );\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        /// @dev granting the deployer==owner the rights to grant other roles\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @dev modifier that only lets the contract's owner and elected managers add/update/remove project data\n    modifier onlyManagers() {\n        require(\n            hasRole(MANAGER_ROLE, msg.sender) || owner() == msg.sender,\n            'Caller is not authorized'\n        );\n        _;\n    }\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() public virtual onlyBy(contractRegistry, owner()) {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() public virtual onlyBy(contractRegistry, owner()) {\n        _unpause();\n    }\n\n    function setToucanContractRegistry(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        contractRegistry = _address;\n    }\n\n    /// @notice Adds a new carbon project-vintage along with attributes/data\n    /// @dev vintages can be added by data-managers\n    function addNewVintage(\n        address to,\n        uint256 projectTokenId,\n        string memory name,\n        uint64 startTime,\n        uint64 endTime,\n        uint64 totalVintageQuantity,\n        bool isCorsiaCompliant,\n        bool isCCPcompliant,\n        string memory coBenefits,\n        string memory correspAdjustment,\n        string memory additionalCertification,\n        string memory uri\n    ) external virtual override onlyManagers whenNotPaused returns (uint256) {\n        checkProjectTokenExists(contractRegistry, projectTokenId);\n\n        require(\n            pvToTokenId[projectTokenId][startTime] == 0,\n            'Error: vintage already added'\n        );\n\n        require(\n            startTime < endTime,\n            'Error: vintage startTime must be less than endTime'\n        );\n\n        /// @dev Increase `projectVintageTokenCounter` and mark current Id as valid\n        uint256 newItemId = projectVintageTokenCounter;\n        unchecked {\n            ++newItemId;\n            ++totalSupply;\n        }\n        projectVintageTokenCounter = uint128(newItemId);\n\n        validProjectVintageIds[newItemId] = true;\n\n        _mint(to, newItemId);\n\n        vintageData[newItemId].name = name;\n        vintageData[newItemId].startTime = startTime;\n        vintageData[newItemId].endTime = endTime;\n        vintageData[newItemId].projectTokenId = projectTokenId;\n        vintageData[newItemId].totalVintageQuantity = totalVintageQuantity;\n        vintageData[newItemId].isCorsiaCompliant = isCorsiaCompliant;\n        vintageData[newItemId].isCCPcompliant = isCCPcompliant;\n        vintageData[newItemId].coBenefits = coBenefits;\n        vintageData[newItemId].correspAdjustment = correspAdjustment;\n        vintageData[newItemId]\n            .additionalCertification = additionalCertification;\n        vintageData[newItemId].uri = uri;\n\n        emit ProjectVintageMinted(to, newItemId, projectTokenId, startTime);\n        pvToTokenId[projectTokenId][startTime] = newItemId;\n\n        return newItemId;\n    }\n\n    /// @dev Function to check whether a projectVintageToken exists,\n    /// to be called by other (external) contracts\n    function exists(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return super._exists(tokenId);\n    }\n\n    /// @notice Updates and existing carbon project\n    /// @dev Only data-managers can update the data for correction\n    /// except the sensitive `projectId`\n    function updateProjectVintage(\n        uint256 tokenId,\n        // uint256 projectTokenId, // @dev commented out because very sensitive data, better via separate function\n        string memory name,\n        uint64 startTime,\n        uint64 endTime,\n        uint64 totalVintageQuantity,\n        bool isCorsiaCompliant,\n        bool isCCPcompliant,\n        string memory coBenefits,\n        string memory correspAdjustment,\n        string memory additionalCertification,\n        string memory uri\n    ) external virtual onlyManagers whenNotPaused {\n        require(_exists(tokenId), 'Project not yet minted');\n        vintageData[tokenId].name = name;\n        vintageData[tokenId].startTime = startTime;\n        vintageData[tokenId].endTime = endTime;\n        vintageData[tokenId].totalVintageQuantity = totalVintageQuantity;\n        vintageData[tokenId].isCorsiaCompliant = isCorsiaCompliant;\n        vintageData[tokenId].isCCPcompliant = isCCPcompliant;\n        vintageData[tokenId].coBenefits = coBenefits;\n        vintageData[tokenId].correspAdjustment = correspAdjustment;\n        vintageData[tokenId].additionalCertification = additionalCertification;\n        vintageData[tokenId].uri = uri;\n\n        emit ProjectVintageUpdated(tokenId);\n    }\n\n    /// @dev Removes a project-vintage and corresponding data\n    function removeVintage(uint256 tokenId)\n        external\n        virtual\n        onlyManagers\n        whenNotPaused\n    {\n        totalSupply--;\n        delete vintageData[tokenId];\n    }\n\n    /// @dev retrieve all data from VintageData struct\n    function getProjectVintageDataByTokenId(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (VintageData memory)\n    {\n        return (vintageData[tokenId]);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(\n            AccessControlUpgradeable,\n            ERC721Upgradeable,\n            IERC165Upgradeable\n        )\n        returns (bool)\n    {\n        return\n            interfaceId == type(IAccessControlUpgradeable).interfaceId ||\n            ERC721Upgradeable.supportsInterface(interfaceId);\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    function setBaseURI(string memory baseURI_) external virtual onlyOwner {\n        baseURI = baseURI_;\n    }\n\n    /// @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n    /// based on the ERC721URIStorage implementation\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            'ERC721URIStorage: URI query for nonexistent token'\n        );\n\n        string memory uri = vintageData[tokenId].uri;\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return uri;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(uri).length > 0) {\n            return string(abi.encodePacked(base, uri));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n}\n"
    },
    "contracts/CarbonProjectsStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\n// Storage contract for CarbonProjects\npragma solidity >=0.8.4 <0.9.0;\n\nimport './CarbonProjectTypes.sol';\n\n/// @dev Separate storage contract to improve upgrade safety\ncontract CarbonProjectsStorage {\n    uint128 public projectTokenCounter;\n    uint128 public totalSupply;\n    address public contractRegistry;\n    string public baseURI;\n\n    /// @dev maps `tokenId` to `ProjectData` struct\n    mapping(uint256 => ProjectData) public projectData;\n\n    /// @dev uniqueness check for globalUniqueIdentifier strings\n    /// Example: `'VCS-01468' -> true`\n    /// Todo: assess if can be deprecated\n    mapping(string => bool) public projectIds;\n\n    /// @dev mapping to identify invalid projectTokenIds\n    /// Examples: projectokenIds that have been removed or non-existent ones\n    mapping(uint256 => bool) public validProjectTokenIds;\n\n    /// @dev Maps a universal/global project-id like 'VCS-1234' to its `tokenId`\n    mapping(string => uint256) public pidToTokenId;\n}\n"
    },
    "contracts/CarbonProjectVintagesStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\n// Storage contract for CarbonProjects\npragma solidity >=0.8.4 <0.9.0;\n\nimport './CarbonProjectVintageTypes.sol';\n\n/// @dev Separate storage contract to improve upgrade safety\ncontract CarbonProjectVintagesStorage {\n    uint128 public projectVintageTokenCounter;\n    uint128 public totalSupply;\n    address public contractRegistry;\n    string public baseURI;\n\n    mapping(uint256 => VintageData) public vintageData;\n\n    /// @dev mapping to identify invalid projectVintageIds\n    /// Examples: projectVintageIds that have been removed or non-existent ones\n    mapping(uint256 => bool) public validProjectVintageIds;\n\n    /// @dev Maps: projectTokenId => vintage startTime => projectVintageTokenId\n    ///\n    /// This is the rough reverse of VintageData.projectTokenId, i.e. it's the\n    /// way that a caller with a projectTokenId and a vintage startTime can\n    /// obtain the corresponding projectVintageTokenId.  This is particularly\n    /// important during the batch NFT approval phase, since prior to\n    /// confirmation, there is no direct association between the batch and the\n    /// project/vintage; only a long serial number containing info which allows\n    /// that association.\n    mapping(uint256 => mapping(uint64 => uint256)) public pvToTokenId;\n}\n"
    },
    "contracts/testing/BatchCollectionUpgrade/CarbonOffsetBatchesV1.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\nimport '../../interfaces/IToucanContractRegistry.sol';\nimport '../../interfaces/ICarbonOffsetBatches.sol';\nimport '../../CarbonProjects.sol';\nimport '../../CarbonProjects.sol';\nimport '../../ToucanCarbonOffsetsFactory.sol';\nimport './CarbonOffsetBatchesStorageV1.sol';\nimport '../../libraries/ProjectVintageUtils.sol';\nimport '../../libraries/Modifiers.sol';\n\ncontract CarbonOffsetBatchesV1Test is\n    ICarbonOffsetBatches,\n    ERC721EnumerableUpgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    UUPSUpgradeable,\n    ProjectVintageUtils,\n    Modifiers,\n    CarbonOffsetBatchesStorageV1Test\n{\n    using AddressUpgradeable for address;\n\n    event BatchMinted(address sender, uint256 tokenId);\n    event BatchUpdated(uint256 tokenId, string serialNumber, uint256 quantity);\n    event BatchLinkedWithVintage(\n        uint256 tokenId,\n        uint256 projectVintageTokenId\n    );\n    event BatchComment(\n        uint256 tokenId,\n        uint256 commentId,\n        address sender,\n        string comment\n    );\n    event BatchStatusUpdate(uint256 tokenId, RetirementStatus status);\n\n    bytes32 public constant VERIFIER_ROLE = keccak256('VERIFIER_ROLE');\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(address _contractRegistry) public virtual initializer {\n        __Context_init_unchained();\n        __ERC721_init_unchained(\n            'Toucan Protocol: Carbon Offset Batches',\n            'TOUCAN-COB'\n        );\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        contractRegistry = _contractRegistry;\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() public virtual onlyBy(contractRegistry, owner()) {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() public virtual onlyBy(contractRegistry, owner()) {\n        _unpause();\n    }\n\n    function setToucanContractRegistry(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        contractRegistry = _address;\n    }\n\n    /// @dev The verifier has the authority to confirm NFTs so ERC20's can be minted\n    modifier onlyVerifier() {\n        require(\n            hasRole(VERIFIER_ROLE, _msgSender()),\n            'Error: caller is not the verifier'\n        );\n        _;\n    }\n\n    /// @dev To confirm that claim about retirement is valid\n    /// fractionalization requires confirmation\n    function confirmRetirement(uint256 tokenId)\n        public\n        virtual\n        onlyVerifier\n        whenNotPaused\n    {\n        require(\n            _exists(tokenId),\n            'ERC721: approved query for nonexistent token'\n        );\n        require(\n            nftList[tokenId].projectVintageTokenId != 0,\n            'Cannot retire batch without project vintage'\n        );\n        nftList[tokenId].status = RetirementStatus.Confirmed;\n        emit BatchStatusUpdate(tokenId, nftList[tokenId].status);\n    }\n\n    function rejectRetirement(uint256 tokenId)\n        public\n        virtual\n        onlyVerifier\n        whenNotPaused\n    {\n        nftList[tokenId].status = RetirementStatus.Rejected;\n        emit BatchStatusUpdate(tokenId, nftList[tokenId].status);\n    }\n\n    function linkWithVintage(uint256 tokenId, uint256 projectVintageTokenId)\n        public\n        virtual\n        onlyVerifier\n        whenNotPaused\n    {\n        checkProjectVintageTokenExists(contractRegistry, projectVintageTokenId);\n        nftList[tokenId].projectVintageTokenId = projectVintageTokenId;\n        emit BatchLinkedWithVintage(tokenId, projectVintageTokenId);\n    }\n\n    function confirmRetirementWithVintage(\n        uint256 tokenId,\n        uint256 projectVintageTokenId\n    ) public virtual onlyVerifier whenNotPaused {\n        // We don't want this to be a \"backdoor\" for modifying the vintage; it\n        // could be insecure or allow accidents to happen, and it would also\n        // result in BatchLinkedWithVintage being emitted more than once per\n        // batch.\n        require(\n            nftList[tokenId].status != RetirementStatus.Confirmed,\n            'Batch retirement is already confirmed'\n        );\n        require(\n            nftList[tokenId].projectVintageTokenId == 0,\n            'Vintage is already set and cannot be changed; use confirmRetirement instead'\n        );\n\n        linkWithVintage(tokenId, projectVintageTokenId);\n        confirmRetirement(tokenId);\n    }\n\n    // ----------------------------------\n    //  (Semi-)Permissionless functions\n    // ----------------------------------\n\n    /// @notice Permissionlessly mint empty BatchNFTs\n    /// @dev    To be updated by NFT owner after serial number has been provided\n    function mintEmptyBatch(address to) external virtual whenNotPaused {\n        batchTokenCounter++;\n        uint256 newItemId = batchTokenCounter;\n        _safeMint(to, newItemId);\n        nftList[newItemId].status = RetirementStatus.Pending;\n\n        emit BatchMinted(to, newItemId);\n    }\n\n    /// @dev  Updates BatchNFT after Serialnumber has been verified\n    /// Data is inserted by the NFT owner or verifier\n    function updateBatchWithData(\n        uint256 tokenId,\n        string memory _serialNumber,\n        uint256 quantity,\n        string memory uri\n    ) public virtual whenNotPaused {\n        require(\n            ownerOf(tokenId) == _msgSender() ||\n                hasRole(VERIFIER_ROLE, _msgSender()),\n            'Error: update only by owner or verifier'\n        );\n        require(\n            nftList[tokenId].status != RetirementStatus.Confirmed,\n            'Error: cannot change data after confirmation'\n        );\n        nftList[tokenId].serialNumber = _serialNumber;\n        nftList[tokenId].quantity = quantity;\n\n        // Make sure metadata does not exist twice\n        if (!strcmp(uri, nftList[tokenId].uri)) {\n            require(URIs[uri] == false, 'Error: uri already exists');\n            nftList[tokenId].uri = uri;\n            URIs[uri] = true;\n        }\n\n        require(\n            checkSerialNumExists(_serialNumber) == false,\n            'Serialnumber has already been used'\n        );\n        serialNumberExist[_serialNumber] = true;\n\n        if (nftList[tokenId].status == RetirementStatus.Rejected) {\n            nftList[tokenId].status = RetirementStatus.Pending;\n        }\n\n        emit BatchUpdated(tokenId, _serialNumber, quantity);\n    }\n\n    /// @dev Alternative flow for minting BatchNFTs\n    /// Can serve as a entry function if serialNumber is already known\n    function mintBatchWithData(\n        address to,\n        uint256 projectVintageTokenId,\n        string memory _serialNumber,\n        uint256 quantity,\n        string memory uri\n    ) external virtual whenNotPaused {\n        checkProjectVintageTokenExists(contractRegistry, projectVintageTokenId);\n\n        batchTokenCounter++;\n        uint256 newItemId = batchTokenCounter;\n\n        require(\n            checkSerialNumExists(_serialNumber) == false,\n            'Serialnumber has already been used'\n        );\n        serialNumberExist[_serialNumber] = true;\n\n        _safeMint(to, newItemId);\n\n        nftList[newItemId].projectVintageTokenId = projectVintageTokenId;\n        nftList[newItemId].serialNumber = _serialNumber;\n        nftList[newItemId].quantity = quantity;\n        nftList[newItemId].status = RetirementStatus.Pending;\n\n        require(URIs[uri] == false, 'Error: URI already exists');\n        nftList[newItemId].uri = uri;\n        URIs[uri] = true;\n    }\n\n    /// @dev internal helper function to check for unique serialNumber\n    /// returns `true` if serial number yet exists and `false` if serial number is new\n    function checkSerialNumExists(string memory serialNo)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        return serialNumberExist[serialNo];\n    }\n\n    function getConfirmationStatus(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (RetirementStatus)\n    {\n        return nftList[tokenId].status;\n    }\n\n    // Used by onERC721Received when batch is transferred to TCO2 contract\n    function getBatchNFTData(uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (\n            uint256,\n            uint256,\n            RetirementStatus\n        )\n    {\n        return (\n            nftList[tokenId].projectVintageTokenId,\n            nftList[tokenId].quantity,\n            nftList[tokenId].status\n        );\n    }\n\n    /// @dev This is necessary because the automatically generated nftList\n    /// getter will not include an array of comments in the returned tuple for\n    /// gas reasons:\n    /// https://docs.soliditylang.org/en/latest/contracts.html#visibility-and-getters\n    function getComments(uint256 tokenId)\n        public\n        view\n        virtual\n        returns (string[] memory, address[] memory)\n    {\n        return (nftList[tokenId].comments, nftList[tokenId].commentAuthors);\n    }\n\n    /// @dev here for debugging/mock purposes. safeTransferFrom(...) is error prone with ethers.js\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            'ERC721: transfer caller is not owner nor approved'\n        );\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /// @notice Function that automatically converts to ERC20s via corresponding contract\n    function fractionalize(uint256 tokenId) external virtual {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            'ERC721: transfer caller is not owner nor approved'\n        );\n        require(\n            nftList[tokenId].status == RetirementStatus.Confirmed,\n            'Error: cannot fractionalize before confirmation'\n        );\n\n        address ERC20Factory = IToucanContractRegistry(contractRegistry)\n            .toucanCarbonOffsetsFactoryAddress();\n        uint256 pvId = nftList[tokenId].projectVintageTokenId;\n        address pvERC20 = ToucanCarbonOffsetsFactory(ERC20Factory).pvIdtoERC20(\n            pvId\n        );\n\n        safeTransferFrom(_msgSender(), pvERC20, tokenId, '');\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlUpgradeable, ERC721EnumerableUpgradeable)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IAccessControlUpgradeable).interfaceId ||\n            ERC721Upgradeable.supportsInterface(interfaceId);\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseURI;\n    }\n\n    function setBaseURI(string memory gateway) external virtual onlyOwner {\n        baseURI = gateway;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     * based on the ERC721URIStorage implementation\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            'ERC721URIStorage: URI query for nonexistent token'\n        );\n\n        string memory uri = nftList[tokenId].uri;\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return uri;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(uri).length > 0) {\n            return string(abi.encodePacked(base, uri));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    // Implemented in order to disable transfers when paused\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), 'ERC20Pausable: token transfer while paused');\n    }\n\n    /// @notice Append a comment to a batch.\n    /// @dev Don't allow the contract owner to comment.  When the contract owner\n    /// can also be a verifier they should add them as a verifier first; this\n    /// should prevent accidental comments from the wrong account.\n    function addComment(uint256 tokenId, string memory comment) public virtual {\n        require(\n            hasRole(VERIFIER_ROLE, _msgSender()) ||\n                _msgSender() == ownerOf(tokenId),\n            'Only the batch owner and verifiers can comment'\n        );\n        require(_exists(tokenId), 'Cannot comment on non-existent batch');\n        nftList[tokenId].comments.push() = comment;\n        nftList[tokenId].commentAuthors.push() = _msgSender();\n        emit BatchComment(\n            tokenId,\n            nftList[tokenId].comments.length,\n            _msgSender(),\n            comment\n        );\n    }\n\n    // -----------------------------\n    //      Helper Functions\n    // -----------------------------\n\n    /// @dev internal helper for string comparison\n    function strcmp(string memory a, string memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return memcmp(bytes(a), bytes(b));\n    }\n\n    /// @dev internal helper for string comparison\n    function memcmp(bytes memory a, bytes memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return (a.length == b.length) && (keccak256(a) == keccak256(b));\n    }\n}\n"
    },
    "contracts/testing/BatchCollectionUpgrade/CarbonOffsetBatchesStorageV1.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport '../../CarbonOffsetBatchesTypes.sol';\n\nabstract contract CarbonOffsetBatchesStorageV1Test {\n    uint256 public batchTokenCounter;\n\n    mapping(string => bool) public serialNumberExist;\n    mapping(string => bool) public URIs;\n    mapping(address => bool) public verifiers;\n\n    string public baseURI;\n    address public contractRegistry;\n\n    struct NFTData {\n        uint256 projectVintageTokenId;\n        string serialNumber;\n        uint256 quantity;\n        RetirementStatus status;\n        string uri;\n        string[] comments;\n        address[] commentAuthors;\n    }\n\n    mapping(uint256 => NFTData) public nftList;\n}\n"
    },
    "contracts/testing/TCO2Upgrade/ToucanCarbonOffsetsFactoryV1Test.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport 'hardhat/console.sol'; // dev & testing\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\n\nimport '../../ToucanCarbonOffsets.sol';\nimport '../../interfaces/IToucanContractRegistry.sol';\nimport '../../interfaces/ICarbonOffsetBatches.sol';\nimport '../../CarbonProjects.sol';\nimport './ToucanCarbonOffsetsFactoryStorageV1Test.sol';\nimport '../../libraries/ProjectUtils.sol';\nimport '../../libraries/ProjectVintageUtils.sol';\nimport '../../libraries/Modifiers.sol';\n\n/// @dev Test contract for upgrade based on original October 2021 deploy\n/// Implementation: https://polygonscan.com/address/0x639dFeA994b139A3d6C3750D4C4E24daEc039BD7\ncontract ToucanCarbonOffsetsFactoryV1Test is\n    ToucanCarbonOffsetsFactoryStorageV1Test,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    UUPSUpgradeable,\n    ProjectUtils,\n    ProjectVintageUtils,\n    Modifiers\n{\n    event TokenCreated(uint256 vintageTokenId, address tokenAddress);\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(address _contractRegistry) public virtual initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        contractRegistry = _contractRegistry;\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    address public beacon;\n\n    /// @dev sets the Beacon that tracks the current implementation logic of the TCO2s\n    function setBeacon(address _beacon) external virtual onlyOwner {\n        beacon = _beacon;\n    }\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() public virtual onlyBy(contractRegistry, owner()) {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() public virtual onlyBy(contractRegistry, owner()) {\n        _unpause();\n    }\n\n    function setToucanContractRegistry(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        contractRegistry = _address;\n    }\n\n    // ------------------------\n    // Permissionless functions\n    // ------------------------\n\n    // Function to deploy new pERC20s\n    // Note: Function could be internal, but that would disallow pre-deploying ERC20s without existing NFTs\n    function deployNewProxy(uint256 projectVintageTokenId)\n        internal\n        virtual\n        whenNotPaused\n    {\n        require(beacon != address(0), 'Error: Beacon for proxy not set');\n        require(\n            !checkExistence(projectVintageTokenId),\n            'pvERC20 already exists'\n        );\n        checkProjectVintageTokenExists(contractRegistry, projectVintageTokenId);\n\n        /// @dev generate payload for initialize function\n        string memory signature = 'initialize(string,string,uint256,address)';\n        bytes memory payload = abi.encodeWithSignature(\n            signature,\n            'Toucan Protocol: TCO2',\n            'TCO2',\n            projectVintageTokenId,\n            contractRegistry\n        );\n\n        /// @dev deploy new proxyTCO2 contract\n        BeaconProxy proxyTCO2 = new BeaconProxy(beacon, payload);\n\n        IToucanContractRegistry(contractRegistry).addERC20(address(proxyTCO2));\n\n        deployedContracts.push(address(proxyTCO2));\n        pvIdtoERC20[projectVintageTokenId] = address(proxyTCO2);\n\n        emit TokenCreated(projectVintageTokenId, address(proxyTCO2));\n    }\n\n    /// @dev Deploys a TCO2 contract based on a project vintage\n    /// @param projectVintageTokenId numeric tokenId from vintage in `CarbonProjectVintages`\n    function deployFromVintage(uint256 projectVintageTokenId)\n        public\n        virtual\n        whenNotPaused\n    {\n        deployNewProxy(projectVintageTokenId);\n    }\n\n    /// @dev Checks if same project vintage has already been deployed\n    function checkExistence(uint256 projectVintageTokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        if (pvIdtoERC20[projectVintageTokenId] == address(0)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    /// @dev Lists addresses of deployed TCO2 contracts\n    function getContracts() public view virtual returns (address[] memory) {\n        return deployedContracts;\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/testing/TCO2Upgrade/ToucanCarbonOffsetsFactoryStorageV1Test.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\n\npragma solidity >=0.8.4 <0.9.0;\n\n/// @dev Storage contract for ToucanCarbonOffsetsFactory (UUPS proxy upgradable)\nabstract contract ToucanCarbonOffsetsFactoryStorageV1Test {\n    address public contractRegistry;\n    address[] public deployedContracts;\n    mapping(uint256 => address) public pvIdtoERC20;\n}\n"
    },
    "contracts/testing/TCO2Upgrade/TCO2V1.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\nimport '../../interfaces/IToucanContractRegistry.sol';\nimport '../../interfaces/ICarbonOffsetBatches.sol';\nimport './ICarbonOffsetBadges.sol';\nimport '../../CarbonProjects.sol';\nimport '../../CarbonProjectVintages.sol';\nimport '../../CarbonProjectVintageTypes.sol';\nimport '../../ToucanCarbonOffsetsStorage.sol'; /// @dev Has not been changed\nimport './ToucanCarbonOffsetsFactoryV1Test.sol';\nimport '../../CarbonOffsetBatchesTypes.sol';\n\n/// @notice Implementation contract of the TCO2 tokens (ERC20)\n/// These tokenized carbon offsets are specific to a vintage and its associated attributes\n/// In order to mint TCO2s a user must deposit a matching CarbonOffsetBatch\n/// @dev Each TCO2 contract is deployed via a Beacon Proxy in `ToucanCarbonOffsetsFactory`\ncontract ToucanCarbonOffsetsV1Test is\n    ERC20Upgradeable,\n    IERC721Receiver,\n    ToucanCarbonOffsetsStorage\n{\n    event Retired(address sender, uint256 tokenId);\n\n    modifier whenNotPaused() {\n        address ToucanCarbonOffsetsFactoryAddress = IToucanContractRegistry(\n            contractRegistry\n        ).toucanCarbonOffsetsFactoryAddress();\n        bool _paused = ToucanCarbonOffsetsFactory(\n            ToucanCarbonOffsetsFactoryAddress\n        ).paused();\n        require(!_paused, 'Error: TCO2 contract is paused');\n        _;\n    }\n\n    function initialize(\n        string memory name_,\n        string memory symbol_,\n        uint256 _projectVintageTokenId,\n        address _contractRegistry\n    ) public virtual initializer {\n        __ERC20_init_unchained(name_, symbol_);\n        projectVintageTokenId = _projectVintageTokenId;\n        contractRegistry = _contractRegistry;\n    }\n\n    /// @notice name getter overriden to return the a name based on the carbon project data\n    function name() public view virtual override returns (string memory) {\n        string memory globalProjectId;\n        string memory vintageName;\n        (globalProjectId, vintageName) = getGlobalProjectVintageIdentifiers();\n        return\n            string(\n                abi.encodePacked(\n                    'Toucan Protocol: TCO2-',\n                    globalProjectId,\n                    '-',\n                    vintageName\n                )\n            );\n    }\n\n    /// @notice symbol getter overriden to return the a symbol based on the carbon project data\n    function symbol() public view virtual override returns (string memory) {\n        string memory globalProjectId;\n        string memory vintageName;\n        (globalProjectId, vintageName) = getGlobalProjectVintageIdentifiers();\n        return\n            string(\n                abi.encodePacked('TCO2-', globalProjectId, '-', vintageName)\n            );\n    }\n\n    function getGlobalProjectVintageIdentifiers()\n        public\n        view\n        virtual\n        returns (string memory, string memory)\n    {\n        ProjectData memory projectData;\n        VintageData memory vintageData;\n        (projectData, vintageData) = getAttributes();\n        return (projectData.projectId, vintageData.name);\n    }\n\n    // Function to get corresponding attributes from the CarbonProjects\n    function getAttributes()\n        public\n        view\n        virtual\n        returns (ProjectData memory, VintageData memory)\n    {\n        address pc = IToucanContractRegistry(contractRegistry)\n            .carbonProjectsAddress();\n        address vc = IToucanContractRegistry(contractRegistry)\n            .carbonProjectVintagesAddress();\n\n        VintageData memory vintageData = CarbonProjectVintages(vc)\n            .getProjectVintageDataByTokenId(projectVintageTokenId);\n        ProjectData memory projectData = CarbonProjects(pc)\n            .getProjectDataByTokenId(vintageData.projectTokenId);\n\n        return (projectData, vintageData);\n    }\n\n    /**\n     * @dev function is called with `operator` as `_msgSender()` in a reference implementation by OZ\n     * `from` is the previous owner, not necessarily the same as operator\n     *  Function checks if NFT collection is whitelisted and next if attributes are matching this erc20 contract\n     **/\n    function onERC721Received(\n        address, /* operator */\n        address from,\n        uint256 tokenId,\n        bytes calldata /* data */\n    ) external virtual override whenNotPaused returns (bytes4) {\n        // msg.sender is the CarbonOffsetBatches contract\n        require(\n            checkWhiteListed(msg.sender),\n            'Error: Batch-NFT not from whitelisted contract'\n        );\n\n        (\n            uint256 projectVintageTokenId,\n            uint256 quantity,\n            RetirementStatus status\n        ) = ICarbonOffsetBatches(msg.sender).getBatchNFTData(tokenId);\n        require(\n            checkMatchingAttributes(projectVintageTokenId),\n            'Error: non-matching NFT'\n        );\n        require(\n            status == RetirementStatus.Confirmed,\n            'BatchNFT not yet confirmed'\n        );\n\n        minterToId[from] = tokenId;\n        /// @dev multiply tonne quantity with decimals\n        quantity = quantity * 10**decimals();\n\n        uint256 remainingSpace = getRemaining();\n        require(\n            remainingSpace > quantity,\n            'Error: Quantity in batch is higher than total vintages'\n        );\n        _mint(from, quantity);\n        return this.onERC721Received.selector;\n    }\n\n    // Check if CarbonOffsetBatches is whitelisted (official)\n    function checkWhiteListed(address collection)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        if (\n            collection ==\n            IToucanContractRegistry(contractRegistry)\n                .carbonOffsetBatchesAddress()\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Checks if attributes of sent NFT are matching the attributes of this ERC20\n     **/\n    function checkMatchingAttributes(uint256 NFTprojectVintageTokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        if (NFTprojectVintageTokenId == projectVintageTokenId) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /// @dev Returns the remaining space in TCO2 contract before hitting the cap\n    function getRemaining() public view returns (uint256 remaining) {\n        uint256 cap = getDepositCap();\n        remaining = cap - totalSupply();\n    }\n\n    function getDepositCap() public view returns (uint256) {\n        VintageData memory vintageData;\n        (, vintageData) = getAttributes();\n        uint64 totalVintageQuantity = vintageData.totalVintageQuantity;\n\n        ///@dev multipliying tonnes with decimals\n        uint256 cap = totalVintageQuantity * 10**decimals();\n\n        /// @dev if totalVintageQuantity is not set (=0), remove cap\n        if (cap == 0) {\n            return (2**256 - 1);\n        } else {\n            return cap;\n        }\n    }\n\n    // Retirement of TCUs (the actual offsetting)\n    function retire(uint256 amount) public virtual whenNotPaused {\n        _retire(_msgSender(), amount);\n    }\n\n    /// @dev Allow for pools or third party contracts to retire for the user\n    // Requires approve\n    function retireFrom(address account, uint256 amount)\n        public\n        virtual\n        whenNotPaused\n    {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(\n            currentAllowance >= amount,\n            'ERC20: retire amount exceeds allowance'\n        );\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _retire(account, amount);\n    }\n\n    // Alternative flow, where tokens are sent to a \"retirement contract\"\n    function _retire(address account, uint256 amount) internal virtual {\n        _burn(account, amount);\n        retiredAmount[account] += amount;\n        emit Retired(account, amount);\n    }\n\n    // Mint the Badge NFT showing how many tokens have been retired\n    function mintBadgeNFT(address to, uint256 amount)\n        public\n        virtual\n        whenNotPaused\n    {\n        address badgeAddr = IToucanContractRegistry(contractRegistry)\n            .carbonOffsetBadgesAddress();\n        require(\n            retiredAmount[msg.sender] >= amount,\n            'Error: Cannot mint more than user has retired'\n        );\n\n        ICarbonOffsetBadgesTest(badgeAddr).mintBadge(\n            to,\n            projectVintageTokenId,\n            amount\n        );\n        retiredAmount[msg.sender] -= amount;\n    }\n\n    // -----------------------------\n    //      Locked ERC20 safety\n    // -----------------------------\n\n    modifier validDestination(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        _;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        validDestination(recipient)\n        whenNotPaused\n        returns (bool)\n    {\n        super.transfer(recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    )\n        public\n        virtual\n        override\n        validDestination(recipient)\n        whenNotPaused\n        returns (bool)\n    {\n        super.transferFrom(sender, recipient, amount);\n        return true;\n    }\n}\n"
    },
    "contracts/testing/TCO2Upgrade/ICarbonOffsetBadges.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\ninterface ICarbonOffsetBadgesTest {\n    function mintBadge(\n        address to,\n        uint256 projectVintageTokenId,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/testing/ToucanCarbonOffsetsUpgrade.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '../ToucanCarbonOffsets.sol';\n\n////////////////////////////////////////////////////\n////////// FOR TESTTING PURPOSES ONLY //////////////\n////////////////////////////////////////////////////\n\ncontract ToucanCarbonOffsetsV2Test is ToucanCarbonOffsets {\n    // add one state var\n    string public dummyVar;\n\n    function writeDummyVar(string memory text) public {\n        dummyVar = text;\n    }\n\n    function readFromStorageV2() public view returns (string memory) {\n        return dummyVar;\n    }\n\n    function version() public pure virtual override returns (string memory) {\n        return 'V2';\n    }\n}\n"
    },
    "contracts/testing/BaseCarbonTonneRedeemAutoUpgrade/BaseCarbonTonneV11Test.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\nimport '../../interfaces/IToucanContractRegistry.sol';\nimport '../../interfaces/ICarbonOffsetBatches.sol';\nimport './../../ToucanCarbonOffsets.sol';\nimport './BaseCarbonTonneStorageV11Test.sol';\n\n/// @notice Base Carbon Tonne for KlimaDAO\n/// Contract is an ERC20 compliant token that acts as a pool for TCO2 tokens\n/// It is possible to whitelist Toucan Protocol external tokenized carbon\ncontract BaseCarbonTonneV11Test is\n    ContextUpgradeable,\n    ERC20Upgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    UUPSUpgradeable,\n    BaseCarbonTonneStorageV11Test\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n    /// @dev fees redeem percentage with 2 fixed decimals precision\n    uint256 public constant feeRedeemDivider = 1e4;\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event Deposited(address erc20Addr, uint256 amount);\n    event Redeemed(address account, address erc20, uint256 amount);\n    event ExternalAddressWhitelisted(address erc20addr);\n    event ExternalAddressRemovedFromWhitelist(address erc20addr);\n    event InternalAddressWhitelisted(address erc20addr);\n    event InternalAddressBlacklisted(address erc20addr);\n    event InternalAddressRemovedFromBlackList(address erc20addr);\n    event InternalAddressRemovedFromWhitelist(address erc20addr);\n    event AttributeStandardAdded(string standard);\n    event AttributeStandardRemoved(string standard);\n    event AttributeMethodologyAdded(string methodology);\n    event AttributeMethodologyRemoved(string methodology);\n    event AttributeRegionAdded(string region);\n    event AttributeRegionRemoved(string region);\n    event RedeemFeePaid(address redeemer, uint256 fees);\n    event RedeemFeeBurnt(address redeemer, uint256 fees);\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(\n        uint64 _minimumVintageStartTime,\n        address _feeRedeemReceiver,\n        uint256 _feeRedeemPercentageInBase,\n        address _feeRedeemBurnAddress,\n        uint256 _feeRedeemBurnPercentageInBase\n    ) public virtual initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20_init_unchained('Toucan Protocol: Base Carbon Tonne', 'BCT');\n        setMinimumVintageStartTime(_minimumVintageStartTime);\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        setFeeRedeemReceiver(_feeRedeemReceiver);\n        setFeeRedeemPercentage(_feeRedeemPercentageInBase);\n        setFeeRedeemBurnAddress(_feeRedeemBurnAddress);\n        setFeeRedeemBurnPercentage(_feeRedeemBurnPercentageInBase);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @dev modifier that only lets the contract's owner and granted pausers pause the system\n    modifier onlyPausers() {\n        require(\n            hasRole(PAUSER_ROLE, msg.sender) || owner() == msg.sender,\n            'Caller is not authorized'\n        );\n        _;\n    }\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() public virtual onlyPausers {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() public virtual onlyPausers {\n        _unpause();\n    }\n\n    function setToucanContractRegistry(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        contractRegistry = _address;\n    }\n\n    /// @notice Generic function to switch attributes mappings into either\n    /// acceptance or rejection criteria\n    /// @param _mappingName attribute mapping of project-vintage data\n    /// @param accepted determines if mapping works as black or whitelist\n    function switchMapping(string memory _mappingName, bool accepted)\n        public\n        virtual\n        onlyOwner\n    {\n        if (strcmp(_mappingName, 'regions')) {\n            accepted\n                ? regionsIsAcceptedMapping = true\n                : regionsIsAcceptedMapping = false;\n        } else if (strcmp(_mappingName, 'standards')) {\n            accepted\n                ? standardsIsAcceptedMapping = true\n                : standardsIsAcceptedMapping = false;\n        } else if (strcmp(_mappingName, 'methodologies')) {\n            accepted\n                ? methodologiesIsAcceptedMapping = true\n                : methodologiesIsAcceptedMapping = false;\n        }\n    }\n\n    /// @notice Function to add attributes for filtering (does not support complex AttributeSets)\n    /// @param addToList determines whether attribute should be added or removed\n    /// Other params are arrays of attributes to be added\n    function addAttributes(\n        bool addToList,\n        string[] memory _regions,\n        string[] memory _standards,\n        string[] memory _methodologies\n    ) public virtual onlyOwner {\n        uint256 standardsLen = _standards.length;\n        if (standardsLen > 0) {\n            for (uint256 i = 0; i < standardsLen; i++) {\n                if (addToList == true) {\n                    standards[_standards[i]] = true;\n                    emit AttributeStandardAdded(_standards[i]);\n                } else {\n                    standards[_standards[i]] = false;\n                    emit AttributeStandardRemoved(_standards[i]);\n                }\n            }\n        }\n\n        uint256 methodologiesLen = _methodologies.length;\n        if (methodologiesLen > 0) {\n            for (uint256 i = 0; i < methodologiesLen; i++) {\n                if (addToList == true) {\n                    methodologies[_methodologies[i]] = true;\n                    emit AttributeMethodologyAdded(_methodologies[i]);\n                } else {\n                    methodologies[_methodologies[i]] = false;\n                    emit AttributeMethodologyRemoved(_methodologies[i]);\n                }\n            }\n        }\n\n        uint256 regionsLen = _regions.length;\n        if (regionsLen > 0) {\n            for (uint256 i = 0; i < regionsLen; i++) {\n                if (addToList == true) {\n                    regions[_regions[i]] = true;\n                    emit AttributeRegionAdded(_regions[i]);\n                } else {\n                    regions[_regions[i]] = false;\n                    emit AttributeRegionRemoved(_regions[i]);\n                }\n            }\n        }\n    }\n\n    /// @notice Function to whitelist selected external non-TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToExternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        uint256 addrLen = erc20Addr.length;\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            externalWhiteList[erc20Addr[i]] = true;\n            emit ExternalAddressWhitelisted(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to whitelist certain TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToInternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        uint256 addrLen = erc20Addr.length;\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            // @TODO check isContract\n            internalWhiteList[erc20Addr[i]] = true;\n            emit InternalAddressWhitelisted(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to blacklist certain TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToInternalBlackList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        uint256 addrLen = erc20Addr.length;\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            // @TODO check isContract\n            internalBlackList[erc20Addr[i]] = true;\n            emit InternalAddressBlacklisted(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to remove ERC20 addresses from external whitelist\n    /// @param erc20Addr accepts an array of contract addresses\n    function removeFromExternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        uint256 addrLen = erc20Addr.length;\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            externalWhiteList[erc20Addr[i]] = false;\n            emit ExternalAddressRemovedFromWhitelist(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to remove TCO2 addresses from internal blacklist\n    /// @param erc20Addr accepts an array of contract addresses\n    function removeFromInternalBlackList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        uint256 addrLen = erc20Addr.length;\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            internalBlackList[erc20Addr[i]] = false;\n            emit InternalAddressRemovedFromBlackList(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to remove TCO2 addresses from internal whitelist\n    /// @param erc20Addr accepts an array of contract addressesc\n    function removeFromInternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        uint256 addrLen = erc20Addr.length;\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            internalWhiteList[erc20Addr[i]] = false;\n            emit InternalAddressRemovedFromWhitelist(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to limit the maximum BCT supply\n    /// @dev supplyCap is initially set to 0 and must be increased before deposits\n    function setSupplyCap(uint256 newCap) external virtual onlyOwner {\n        supplyCap = newCap;\n    }\n\n    /// @notice Determines the minimum vintage start time acceptance criteria of TCO2s\n    /// @param _minimumVintageStartTime unix time format\n    function setMinimumVintageStartTime(uint64 _minimumVintageStartTime)\n        public\n        virtual\n        onlyOwner\n    {\n        minimumVintageStartTime = _minimumVintageStartTime;\n    }\n\n    // ----------------------------\n    //   Permissionless functions\n    // ----------------------------\n\n    /// @notice Deposit function for BCT pool that accepts TCO2s and mints BCT 1:1\n    /// @param erc20Addr ERC20 contract address to be deposited, requires approve\n    /// @dev Eligibility is checked via `checkEligible`, balances are tracked\n    /// for each TCO2 separately\n    function deposit(address erc20Addr, uint256 amount)\n        public\n        virtual\n        whenNotPaused\n    {\n        require(checkEligible(erc20Addr), 'Token rejected');\n\n        uint256 remainingSpace = getRemaining();\n        require(remainingSpace > 0, 'Error: Cannot deposit, Pool is full');\n\n        if (amount > remainingSpace) amount = remainingSpace;\n\n        IERC20Upgradeable(erc20Addr).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n\n        /// @dev Increase balance sheet of individual token\n        tokenBalances[erc20Addr] += amount;\n        _mint(msg.sender, amount);\n        emit Deposited(erc20Addr, amount);\n    }\n\n    /// @notice Internal function that checks if token to be deposited is eligible for this pool\n    function checkEligible(address erc20Addr)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        bool isToucanContract = IToucanContractRegistry(contractRegistry)\n            .checkERC20(erc20Addr);\n\n        if (isToucanContract) {\n            if (internalWhiteList[erc20Addr]) {\n                return true;\n            }\n\n            require(\n                internalBlackList[erc20Addr] == false,\n                'Error: TCO2 token contract blacklisted'\n            );\n\n            require(\n                checkAttributeMatching(erc20Addr) == true,\n                'Error: TCO2 token contract rejected, non-matching attributes'\n            );\n        }\n        /// @dev If not Toucan native contract, check if address is whitelisted\n        else {\n            require(\n                externalWhiteList[erc20Addr] == true,\n                'Error: External carbon credit token not whitelisted'\n            );\n            return true;\n        }\n\n        return true;\n    }\n\n    /// @notice checks whether incoming project-vintage-ERC20 token matches the accepted criteria/attributes\n    function checkAttributeMatching(address erc20Addr)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        ProjectData memory projectData;\n        VintageData memory vintageData;\n        (projectData, vintageData) = ToucanCarbonOffsets(erc20Addr)\n            .getAttributes();\n\n        /// @dev checks if any one of the attributes are blacklisted.\n        /// If mappings are set to \"whitelist\"-mode, require the opposite\n        require(\n            vintageData.startTime >= minimumVintageStartTime,\n            \"Vintage starts before pool's minimum vintage start time\"\n        );\n        require(\n            regions[projectData.region] == regionsIsAcceptedMapping,\n            'Project region failed acceptance test'\n        );\n        require(\n            standards[projectData.standard] == standardsIsAcceptedMapping,\n            'Project standard failed acceptance test'\n        );\n        require(\n            methodologies[projectData.methodology] ==\n                methodologiesIsAcceptedMapping,\n            'Project methodology failed acceptance test'\n        );\n\n        return true;\n    }\n\n    /// @notice Update the fee redeem percentage\n    /// @param _feeRedeemPercentageInBase percentage of fee in base\n    function setFeeRedeemPercentage(uint256 _feeRedeemPercentageInBase)\n        public\n        virtual\n        onlyOwner\n    {\n        require(\n            _feeRedeemPercentageInBase < feeRedeemDivider,\n            'Invalid fee percentage'\n        );\n        feeRedeemPercentageInBase = _feeRedeemPercentageInBase;\n    }\n\n    /// @notice Update the fee redeem receiver\n    /// @param _feeRedeemReceiver address to transfer the fees\n    function setFeeRedeemReceiver(address _feeRedeemReceiver)\n        public\n        virtual\n        onlyOwner\n    {\n        require(_feeRedeemReceiver != address(0), 'Invalid fee address');\n        feeRedeemReceiver = _feeRedeemReceiver;\n    }\n\n    /// @notice Update the fee redeem burn percentage\n    /// @param _feeRedeemBurnPercentageInBase percentage of fee in base\n    function setFeeRedeemBurnPercentage(uint256 _feeRedeemBurnPercentageInBase)\n        public\n        virtual\n        onlyOwner\n    {\n        require(\n            _feeRedeemBurnPercentageInBase < feeRedeemDivider,\n            'Invalid burn percentage'\n        );\n        feeRedeemBurnPercentageInBase = _feeRedeemBurnPercentageInBase;\n    }\n\n    /// @notice Update the fee redeem burn address\n    /// @param _feeRedeemBurnAddress address to transfer the fees to burn\n    function setFeeRedeemBurnAddress(address _feeRedeemBurnAddress)\n        public\n        virtual\n        onlyOwner\n    {\n        require(_feeRedeemBurnAddress != address(0), 'Invalid burn address');\n        feeRedeemBurnAddress = _feeRedeemBurnAddress;\n    }\n\n    /// @notice View function to calculate fees pre-execution\n    /// @dev User specifies in front-end the addresses and amounts they want\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of amounts to redeem for each tco2s\n    /// @return Total fees amount\n    function calculateRedeemFees(\n        address[] memory tco2s,\n        uint256[] memory amounts\n    ) public view virtual whenNotPaused returns (uint256) {\n        uint256 totalFee = 0;\n        require(tco2s.length == amounts.length, 'Length of arrays differ');\n\n        for (uint256 i = 0; i < tco2s.length; i++) {\n            uint256 feeAmount = calculateFeeForSingleAmount(\n                amounts[i],\n                feeRedeemPercentageInBase\n            );\n            totalFee += feeAmount;\n        }\n        return totalFee;\n    }\n\n    /// @notice Redeems Pool tokens for multiple underlying TCO2s 1:1\n    /// @dev User specifies in front-end the addresses and amounts they want\n    /// BCT Pool token in user's wallet get burned\n    function redeemMany(address[] memory erc20s, uint256[] memory amounts)\n        public\n        virtual\n        whenNotPaused\n    {\n        uint256 addrLen = erc20s.length;\n        uint256 amountsLen = amounts.length;\n        uint256 totalFee = 0;\n        require(addrLen == amountsLen, 'Error: Length of arrays not matching');\n        uint256 _feeRedeemPercentageInBase = feeRedeemPercentageInBase;\n        for (uint256 i = 0; i < addrLen; i++) {\n            uint256 feeAmount = calculateFeeForSingleAmount(\n                amounts[i],\n                _feeRedeemPercentageInBase\n            );\n            totalFee += feeAmount;\n            redeemSingle(msg.sender, erc20s[i], amounts[i] - feeAmount);\n        }\n        if (totalFee != 0) {\n            uint256 burnAmount = calculateRedeemFeeBurnAmount(\n                totalFee,\n                feeRedeemBurnPercentageInBase\n            );\n            totalFee -= burnAmount;\n            transfer(feeRedeemReceiver, totalFee);\n            emit RedeemFeePaid(msg.sender, totalFee);\n            if (burnAmount > 0) {\n                transfer(feeRedeemBurnAddress, burnAmount);\n                emit RedeemFeeBurnt(msg.sender, burnAmount);\n            }\n        }\n    }\n\n    function calculateRedeemFeeBurnAmount(\n        uint256 _totalFee,\n        uint256 feeRedeemBurnBp\n    ) internal pure returns (uint256 _burnAmount) {\n        return (_totalFee * feeRedeemBurnBp) / feeRedeemDivider;\n    }\n\n    function calculateFeeForSingleAmount(uint256 _amount, uint256 feeRedeemBp)\n        internal\n        pure\n        returns (uint256 _fees)\n    {\n        if (feeRedeemBp == 0) {\n            return 0;\n        }\n        _fees = (_amount * feeRedeemBp) / feeRedeemDivider;\n    }\n\n    /// @dev Internal function that redeems a single underlying token\n    function redeemSingle(\n        address account,\n        address erc20,\n        uint256 amount\n    ) internal virtual whenNotPaused {\n        require(msg.sender == account, 'Only own funds can be redeemed');\n        require(tokenBalances[erc20] >= amount, 'Amount exceeds supply');\n        _burn(account, amount);\n        tokenBalances[erc20] -= amount;\n        IERC20Upgradeable(erc20).safeTransfer(account, amount);\n        emit Redeemed(account, erc20, amount);\n    }\n\n    /// @dev Implemented in order to disable transfers when paused\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), 'ERC20Pausable: token transfer while paused');\n    }\n\n    /// @dev Returns the remaining space in pool before hitting the cap\n    function getRemaining() public view returns (uint256) {\n        return (supplyCap - totalSupply());\n    }\n\n    // -----------------------------\n    //      Locked ERC20 safety\n    // -----------------------------\n\n    /// @dev Modifier to disallowing sending tokens to either the 0-address\n    /// or this contract itself\n    modifier validDestination(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        _;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        validDestination(recipient)\n        returns (bool)\n    {\n        super.transfer(recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override validDestination(recipient) returns (bool) {\n        super.transferFrom(sender, recipient, amount);\n        return true;\n    }\n\n    // -----------------------------\n    //      Helper Functions\n    // -----------------------------\n    function memcmp(bytes memory a, bytes memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return (a.length == b.length) && (keccak256(a) == keccak256(b));\n    }\n\n    function strcmp(string memory a, string memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return memcmp(bytes(a), bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/testing/BaseCarbonTonneRedeemAutoUpgrade/BaseCarbonTonneStorageV11Test.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\n/// @dev Storage for UUPS Proxy upgradable BaseCarbonTonne\ncontract BaseCarbonTonneStorageV11Test {\n    uint256 public supplyCap;\n    mapping(address => uint256) public tokenBalances;\n    address public contractRegistry;\n\n    uint64 public minimumVintageStartTime;\n\n    /// @dev Mappings for attributes that can be included or excluded\n    /// if set to `false`, attribute-values are blacklisted/rejected\n    /// if set to `true`, attribute-values are whitelisted/accepted\n    bool public regionsIsAcceptedMapping;\n    mapping(string => bool) public regions;\n\n    bool public standardsIsAcceptedMapping;\n    mapping(string => bool) public standards;\n\n    bool public methodologiesIsAcceptedMapping;\n    mapping(string => bool) public methodologies;\n\n    /// @dev mapping to whitelist external non-TCO2 contracts by address\n    mapping(address => bool) public externalWhiteList;\n\n    /// @dev mapping to include certain TCO2 contracts by address,\n    /// overriding attribute matching checks\n    mapping(address => bool) public internalWhiteList;\n\n    /// @dev mapping to exclude certain TCO2 contracts by address,\n    /// even if the attribute matching would pass\n    mapping(address => bool) public internalBlackList;\n\n    /// @dev fees redeem receiver address\n    address public feeRedeemReceiver;\n\n    uint256 public feeRedeemPercentageInBase;\n\n    /// @dev fees redeem burn address\n    address public feeRedeemBurnAddress;\n\n    /// @dev fees redeem burn percentage with 2 fixed decimals precision\n    uint256 public feeRedeemBurnPercentageInBase;\n}\n"
    },
    "contracts/testing/BaseCarbonTonneFeeUpgrade/BaseCarbonTonneV1Test.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport 'hardhat/console.sol'; // dev & testing\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\nimport './../../interfaces/IToucanContractRegistry.sol';\nimport './../../interfaces/ICarbonOffsetBatches.sol';\nimport './../../ToucanCarbonOffsets.sol';\nimport './BaseCarbonTonneStorageV1Test.sol';\n\n/// @notice Base Carbon Tonne for KlimaDAO\n/// Contract is an ERC20 compliant token that acts as a pool for TCO2 tokens\n/// It is possible to whitelist Toucan Protocol external tokenized carbon\ncontract BaseCarbonTonneV1Test is\n    ContextUpgradeable,\n    ERC20Upgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    UUPSUpgradeable,\n    BaseCarbonTonneStorageV1Test\n{\n    using SafeERC20 for IERC20;\n\n    event Deposited(address erc20Addr, uint256 amount);\n    event Redeemed(address account, address erc20, uint256 amount);\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize(uint64 _minimumVintageStartTime)\n        public\n        virtual\n        initializer\n    {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20_init_unchained('Toucan Protocol: Base Carbon Tonne', 'BCT');\n        setMinimumVintageStartTime(_minimumVintageStartTime);\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @dev modifier that only lets the contract's owner and granted pausers pause the system\n    modifier onlyPausers() {\n        require(\n            hasRole(PAUSER_ROLE, msg.sender) || owner() == msg.sender,\n            'Caller is not authorized'\n        );\n        _;\n    }\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() public virtual onlyPausers {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() public virtual onlyPausers {\n        _unpause();\n    }\n\n    function setToucanContractRegistry(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        contractRegistry = _address;\n    }\n\n    /// @dev WIP: Generic function to switch attributes mappings into either\n    /// acceptance or rejection criteria\n    /// @param _mappingName attribute mapping of project-vintage data\n    /// @param accepted determines if mapping works as black or whitelist\n    function switchMapping(string memory _mappingName, bool accepted)\n        public\n        virtual\n        onlyOwner\n    {\n        if (strcmp(_mappingName, 'regions')) {\n            accepted\n                ? regionsIsAcceptedMapping = true\n                : regionsIsAcceptedMapping = false;\n        } else if (strcmp(_mappingName, 'standards')) {\n            accepted\n                ? standardsIsAcceptedMapping = true\n                : standardsIsAcceptedMapping = false;\n        } else if (strcmp(_mappingName, 'methodologies')) {\n            accepted\n                ? methodologiesIsAcceptedMapping = true\n                : methodologiesIsAcceptedMapping = false;\n        }\n    }\n\n    /// @notice function to add attributes for filtering (does not support complex AttributeSets)\n    /// @param addToList determines whether attribute should be added or removed\n    /// Other params are arrays of attributes to be added\n    function addAttributes(\n        bool addToList,\n        string[] memory _regions,\n        string[] memory _standards,\n        string[] memory _methodologies\n    ) public virtual onlyOwner {\n        uint256 standardsLen = _standards.length;\n        if (standardsLen > 0) {\n            for (uint256 i = 0; i < standardsLen; i++) {\n                if (addToList == true) {\n                    standards[_standards[i]] = true;\n                } else {\n                    standards[_standards[i]] = false;\n                }\n            }\n        }\n\n        uint256 methodologiesLen = _methodologies.length;\n        if (methodologiesLen > 0) {\n            for (uint256 i = 0; i < methodologiesLen; i++) {\n                if (addToList == true) {\n                    methodologies[_methodologies[i]] = true;\n                } else {\n                    methodologies[_methodologies[i]] = false;\n                }\n            }\n        }\n\n        uint256 regionsLen = _regions.length;\n        if (regionsLen > 0) {\n            for (uint256 i = 0; i < regionsLen; i++) {\n                if (addToList == true) {\n                    regions[_regions[i]] = true;\n                } else {\n                    regions[_regions[i]] = false;\n                }\n            }\n        }\n    }\n\n    /// @dev whitelist selected external non-TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToExternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        uint256 addrLen = erc20Addr.length;\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            externalWhiteList[erc20Addr[i]] = true;\n        }\n    }\n\n    /// @dev whitelist certain TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToInternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        uint256 addrLen = erc20Addr.length;\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            // @TODO check isContract\n            internalWhiteList[erc20Addr[i]] = true;\n        }\n    }\n\n    /// @dev blacklist certain TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToInternalBlackList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        uint256 addrLen = erc20Addr.length;\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            // @TODO check isContract\n            internalBlackList[erc20Addr[i]] = true;\n        }\n    }\n\n    /// @dev remove ERC20 addresses from external whitelist\n    /// @param erc20Addr accepts an array of contract addresses\n    function removeFromExternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        uint256 addrLen = erc20Addr.length;\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            externalWhiteList[erc20Addr[i]] = false;\n        }\n    }\n\n    /// @dev remove TCO2 addresses from internal blacklist\n    /// @param erc20Addr accepts an array of contract addresses\n    function removeFromInternalBlackList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        uint256 addrLen = erc20Addr.length;\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            internalBlackList[erc20Addr[i]] = false;\n        }\n    }\n\n    /// @dev remove TCO2 addresses from internal whitelist\n    /// @param erc20Addr accepts an array of contract addressesc\n    function removeFromInternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        uint256 addrLen = erc20Addr.length;\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            internalWhiteList[erc20Addr[i]] = false;\n        }\n    }\n\n    /// @dev function to limit the maximum supply for security reasons\n    /// supplyCap is initially set to 0 and must be increased before deposits\n    function setSupplyCap(uint256 newCap) external virtual onlyOwner {\n        supplyCap = newCap;\n    }\n\n    /// @dev determines the minimum vintage (similar to year) of TCO2s\n    /// @param _minimumVintageStartTime unix time format\n    function setMinimumVintageStartTime(uint64 _minimumVintageStartTime)\n        public\n        virtual\n        onlyOwner\n    {\n        minimumVintageStartTime = _minimumVintageStartTime;\n    }\n\n    // ----------------------------\n    //   Permissionless functions\n    // ----------------------------\n\n    /// @notice deposit function for BCT pool that accepts TCTs and mints BCT 1:1\n    /// @param erc20Addr ERC20 contract address to be deposited, requires approve\n    /// Eligibility is checked via `checkEligible`, logic can be external\n    function deposit(address erc20Addr, uint256 amount)\n        public\n        virtual\n        whenNotPaused\n    {\n        require(checkEligible(erc20Addr), 'Token rejected');\n\n        uint256 remainingSpace = getRemaining();\n        require(remainingSpace > 0, 'Error: Cannot deposit, Pool is full');\n\n        if (amount > remainingSpace) amount = remainingSpace;\n\n        IERC20(erc20Addr).safeTransferFrom(msg.sender, address(this), amount);\n\n        // Increasing balance sheet of individual token and overall\n        tokenBalances[erc20Addr] += amount;\n        // mints pool/index token to prev. owner(sender)\n        _mint(msg.sender, amount);\n        emit Deposited(erc20Addr, amount);\n    }\n\n    /// @notice Internal function that checks if token to be deposited is eligible for this pool\n    function checkEligible(address erc20Addr)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        bool isToucanContract = IToucanContractRegistry(contractRegistry)\n            .checkERC20(erc20Addr);\n\n        if (isToucanContract) {\n            if (internalWhiteList[erc20Addr]) {\n                return true;\n            }\n\n            require(\n                internalBlackList[erc20Addr] == false,\n                'Error: TCO2 token contract blacklisted'\n            );\n\n            require(\n                checkAttributeMatching(erc20Addr) == true,\n                'Error: TCO2 token contract rejected, non-matching attributes'\n            );\n        }\n        // If not Toucan native contract, check if address is whitelisted\n        else {\n            require(\n                externalWhiteList[erc20Addr] == true,\n                'Error: External carbon credit token not whitelisted'\n            );\n            return true;\n        }\n\n        return true;\n    }\n\n    /// @notice checks whether incoming project-vintage-ERC20 token matches the accepted criteria/attributes\n    function checkAttributeMatching(address erc20Addr)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        ProjectData memory projectData;\n        VintageData memory vintageData;\n        (projectData, vintageData) = ToucanCarbonOffsets(erc20Addr)\n            .getAttributes();\n\n        /// @dev checks if any one of the attributes are blacklisted.\n        // If mappings are set to \"whitelist\"-mode, require the opposite\n        require(\n            vintageData.startTime >= minimumVintageStartTime,\n            \"Vintage starts before pool's minimum vintage start time\"\n        );\n        require(\n            regions[projectData.region] == regionsIsAcceptedMapping,\n            'Project region failed acceptance test'\n        );\n        require(\n            standards[projectData.standard] == standardsIsAcceptedMapping,\n            'Project standard failed acceptance test'\n        );\n        require(\n            methodologies[projectData.methodology] ==\n                methodologiesIsAcceptedMapping,\n            'Project methodology failed acceptance test'\n        );\n\n        return true;\n    }\n\n    /// @notice Redeems Pool tokens for multiple underlying pERC20s 1:1\n    /// User specifies in front-end the addresses and amounts they want\n    /// Pool token in User's wallet get burned\n    function redeemMany(address[] memory erc20s, uint256[] memory amounts)\n        public\n        virtual\n        whenNotPaused\n    {\n        uint256 addrLen = erc20s.length;\n        uint256 amountsLen = amounts.length;\n        require(addrLen == amountsLen, 'Error: Length of arrays not matching');\n\n        for (uint256 i = 0; i < addrLen; i++) {\n            redeemSingle(msg.sender, erc20s[i], amounts[i]);\n        }\n    }\n\n    // Redeems a single underlying token\n    function redeemSingle(\n        address account,\n        address erc20,\n        uint256 amount\n    ) internal virtual whenNotPaused {\n        require(msg.sender == account, 'Only own funds can be redeemed');\n        require(\n            tokenBalances[erc20] >= amount,\n            'Cannot redeem more than is stored in contract'\n        );\n        _burn(account, amount);\n        tokenBalances[erc20] -= amount;\n        IERC20(erc20).safeTransfer(account, amount);\n        emit Redeemed(account, erc20, amount);\n    }\n\n    // Redeem, and call offset on underlying contracts\n    // Note: Not yet implemented\n    // function offset(uint256 amount) public virtual whenNotPaused {}\n\n    // Implemented in order to disable transfers when paused\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), 'ERC20Pausable: token transfer while paused');\n    }\n\n    /// @dev Returns the remaining space in pool before hitting the cap\n    function getRemaining() public view returns (uint256) {\n        return (supplyCap - totalSupply());\n    }\n\n    // -----------------------------\n    //      Locked ERC20 safety\n    // -----------------------------\n\n    modifier validDestination(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        _;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        validDestination(recipient)\n        returns (bool)\n    {\n        super.transfer(recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override validDestination(recipient) returns (bool) {\n        super.transferFrom(sender, recipient, amount);\n        return true;\n    }\n\n    // -----------------------------\n    //      Helper Functions\n    // -----------------------------\n    function memcmp(bytes memory a, bytes memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return (a.length == b.length) && (keccak256(a) == keccak256(b));\n    }\n\n    function strcmp(string memory a, string memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return memcmp(bytes(a), bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/testing/BaseCarbonTonneFeeUpgrade/BaseCarbonTonneStorageV1Test.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\n/// @dev Storage for UUPS Proxy upgradable BaseCarbonTonne\ncontract BaseCarbonTonneStorageV1Test {\n    uint256 public supplyCap;\n    mapping(address => uint256) public tokenBalances;\n    address public contractRegistry;\n\n    uint64 public minimumVintageStartTime;\n\n    /// @dev Mappings for attributes that can be included or excluded\n    /// if set to `false`, attribute-values are blacklisted/rejected\n    /// if set to `true`, attribute-values are whitelisted/accepted\n    bool public regionsIsAcceptedMapping;\n    mapping(string => bool) public regions;\n\n    bool public standardsIsAcceptedMapping;\n    mapping(string => bool) public standards;\n\n    bool public methodologiesIsAcceptedMapping;\n    mapping(string => bool) public methodologies;\n\n    /// @dev mapping to whitelist external non-TCO2 contracts by address\n    mapping(address => bool) public externalWhiteList;\n\n    /// @dev mapping to include certain TCO2 contracts by address,\n    /// overriding attribute matching checks\n    mapping(address => bool) public internalWhiteList;\n\n    /// @dev mapping to exclude certain TCO2 contracts by address,\n    /// even if the attribute matching would pass\n    mapping(address => bool) public internalBlackList;\n\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/ToucanContractRegistry.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\n\nimport './interfaces/IPausable.sol';\nimport './interfaces/IToucanContractRegistry.sol';\nimport './ToucanContractRegistryStorage.sol';\n\n/// @dev The ToucanContractRegistry is queried by other contracts for current addresses\ncontract ToucanContractRegistry is\n    ToucanContractRegistryStorage,\n    OwnableUpgradeable,\n    AccessControlUpgradeable,\n    IToucanContractRegistry,\n    UUPSUpgradeable\n{\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n\n    // ----------------------------------------\n    //      Modifiers\n    // ----------------------------------------\n\n    modifier onlyBy(address _factory, address _owner) {\n        require(\n            _factory == _msgSender() || _owner == _msgSender(),\n            'Caller is not the factory'\n        );\n        _;\n    }\n\n    /// @dev modifier that only lets the contract's owner and granted pausers pause the system\n    modifier onlyPausers() {\n        require(\n            hasRole(PAUSER_ROLE, msg.sender) || owner() == msg.sender,\n            'Caller is not authorized'\n        );\n        _;\n    }\n\n    /// @notice security function that pauses all contracts part of the carbon bri  dge\n    function pauseSystem() external onlyPausers {\n        IPausable cpv = IPausable(_carbonProjectVintagesAddress);\n        if (!cpv.paused()) cpv.pause();\n\n        IPausable cp = IPausable(_carbonProjectsAddress);\n        if (!cp.paused()) cp.pause();\n\n        IPausable cob = IPausable(_carbonOffsetBatchesAddress);\n        if (!cob.paused()) cob.pause();\n\n        IPausable tcof = IPausable(_toucanCarbonOffsetsFactoryAddress);\n        if (!tcof.paused()) tcof.pause();\n    }\n\n    function unpauseSystem() external onlyOwner {\n        IPausable cpv = IPausable(_carbonProjectVintagesAddress);\n        if (cpv.paused()) cpv.unpause();\n\n        IPausable cp = IPausable(_carbonProjectsAddress);\n        if (cp.paused()) cp.unpause();\n\n        IPausable cob = IPausable(_carbonOffsetBatchesAddress);\n        if (cob.paused()) cob.unpause();\n\n        IPausable tcof = IPausable(_toucanCarbonOffsetsFactoryAddress);\n        if (tcof.paused()) tcof.unpause();\n    }\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    function initialize() public virtual initializer {\n        __Ownable_init();\n        /// @dev granting the deployer==owner the rights to grant other roles\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ----------------------------------------\n    //              Setters\n    // ----------------------------------------\n    function setCarbonOffsetBatchesAddress(address _address)\n        external\n        virtual\n        onlyOwner\n    {\n        require(_address != address(0), 'Error: zero address provided');\n        _carbonOffsetBatchesAddress = _address;\n    }\n\n    function setCarbonProjectsAddress(address _address)\n        external\n        virtual\n        onlyOwner\n    {\n        require(_address != address(0), 'Error: zero address provided');\n        _carbonProjectsAddress = _address;\n    }\n\n    function setCarbonProjectVintagesAddress(address _address)\n        external\n        virtual\n        onlyOwner\n    {\n        require(_address != address(0), 'Error: zero address provided');\n        _carbonProjectVintagesAddress = _address;\n    }\n\n    function setToucanCarbonOffsetsFactoryAddress(address _address)\n        external\n        virtual\n        onlyOwner\n    {\n        require(_address != address(0), 'Error: zero address provided');\n        _toucanCarbonOffsetsFactoryAddress = _address;\n    }\n\n    function setCarbonOffsetBadgesAddress(address _address)\n        external\n        virtual\n        onlyOwner\n    {\n        require(_address != address(0), 'Error: zero address provided');\n        _carbonOffsetBadgesAddress = _address;\n    }\n\n    /// @dev function to add valid TCO2 contracts\n    function addERC20(address _address)\n        external\n        virtual\n        override\n        onlyBy(_toucanCarbonOffsetsFactoryAddress, owner())\n    {\n        projectVintageERC20Registry[_address] = true;\n    }\n\n    // ----------------------------------------\n    //              Getters\n    // ----------------------------------------\n\n    function carbonOffsetBatchesAddress()\n        external\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return _carbonOffsetBatchesAddress;\n    }\n\n    function carbonProjectsAddress()\n        external\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return _carbonProjectsAddress;\n    }\n\n    function carbonProjectVintagesAddress()\n        external\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return _carbonProjectVintagesAddress;\n    }\n\n    function toucanCarbonOffsetsFactoryAddress()\n        external\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return _toucanCarbonOffsetsFactoryAddress;\n    }\n\n    function carbonOffsetBadgesAddress()\n        external\n        view\n        virtual\n        override\n        returns (address)\n    {\n        return _carbonOffsetBadgesAddress;\n    }\n\n    function checkERC20(address _address)\n        external\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return projectVintageERC20Registry[_address];\n    }\n}\n"
    },
    "contracts/interfaces/IPausable.sol": {
      "content": "// SPDX-FileCopyrightText: 2022 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\ninterface IPausable {\n    function paused() external view returns (bool);\n\n    function pause() external;\n\n    function unpause() external;\n}\n"
    },
    "contracts/ToucanContractRegistryStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\n/// @dev  ToucanContractRegistryStorage is used for separation of data and logic\ncontract ToucanContractRegistryStorage {\n    address internal _carbonOffsetBatchesAddress;\n    address internal _carbonProjectsAddress;\n    address internal _carbonProjectVintagesAddress;\n    address internal _toucanCarbonOffsetsFactoryAddress;\n    address internal _carbonOffsetBadgesAddress;\n\n    mapping(address => bool) public projectVintageERC20Registry;\n}\n"
    },
    "contracts/RetirementCertificates.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\n\nimport './interfaces/IToucanContractRegistry.sol';\nimport './RetirementCertificatesStorage.sol';\n\n/// @notice The `RetirementCertificates` contract lets users mint NFTs that act as proof-of-retirement.\n/// These Retirement Certificate NFTs display how many kilos of CO2-equivalent a user has burnt\ncontract RetirementCertificates is\n    ERC721Upgradeable,\n    OwnableUpgradeable,\n    UUPSUpgradeable,\n    RetirementCertificatesStorage\n{\n    // ----------------------------------------\n    //      Libraries\n    // ----------------------------------------\n\n    using AddressUpgradeable for address;\n\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    uint256 public constant tonneDenomination = 1e18;\n    uint256 public constant kiloDenomination = 1e15;\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event CertificateMinted(uint256 tokenId);\n    event CertificateUpdated(uint256 tokenId);\n    event ToucanRegistrySet(address ContractRegistry);\n    event BaseURISet(string baseURI);\n    event MinValidAmountSet(uint256 previousAmount, uint256 newAmount);\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    /// @dev Returns the current version of the smart contract\n    function version() public pure virtual returns (string memory) {\n        return '1.0.0';\n    }\n\n    function initialize(address _contractRegistry, string memory _baseURI)\n        public\n        virtual\n        initializer\n    {\n        __Context_init_unchained();\n        __ERC721_init_unchained(\n            'Toucan Protocol: Retirement Certificates for Tokenized Carbon Offsets',\n            'TOUCAN-CERT'\n        );\n        __Ownable_init_unchained();\n        contractRegistry = _contractRegistry;\n        baseURI = _baseURI;\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    function setToucanContractRegistry(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        contractRegistry = _address;\n        emit ToucanRegistrySet(_address);\n    }\n\n    function setBaseURI(string memory baseURI_) external virtual onlyOwner {\n        baseURI = baseURI_;\n        emit BaseURISet(baseURI_);\n    }\n\n    function setMinValidRetirementAmount(uint256 amount) external onlyOwner {\n        uint256 previousAmount = minValidRetirementAmount;\n        minValidRetirementAmount = amount;\n        emit MinValidAmountSet(previousAmount, amount);\n    }\n\n    // ----------------------------------\n    //     Permissionless functions\n    // ----------------------------------\n\n    /// @notice Register retirement events. This function can only be called by a TC02 contract\n    /// to register retirement events so they can be directly linked to an NFT mint.\n    /// @param retiringEntity The entity that has retired TCO2 and is eligible to mint an NFT.\n    /// @param projectVintageTokenId The vintage id of the TCO2 that is retired.\n    /// @param amount The amount of the TCO2 that is retired.\n    /// @param isLegacy Whether this event registration was executed by using the legacy retired\n    /// amount in the TCO2 contract or utilizes the new retirement event design.\n    /// @dev    The function can either be only called by a valid TCO2 contract.\n    function registerEvent(\n        address retiringEntity,\n        uint256 projectVintageTokenId,\n        uint256 amount,\n        bool isLegacy\n    ) external returns (uint256) {\n        // Logic requires that minting can only originate from a project-vintage ERC20 contract\n        require(\n            IToucanContractRegistry(contractRegistry).checkERC20(\n                _msgSender()\n            ) == true,\n            'Caller not a TCO2'\n        );\n        require(\n            amount != 0 && amount >= minValidRetirementAmount,\n            'Invalid amount'\n        );\n\n        /// Read from storage once, then use everywhere by reading\n        /// from memory.\n        uint256 eventCounter = retireEventCounter;\n        unchecked {\n            /// Realistically, the counter will never overflow\n            ++eventCounter;\n        }\n        /// Store counter back in storage\n        retireEventCounter = eventCounter;\n\n        // Track all events of a user\n        eventsOfUser[retiringEntity].push(eventCounter);\n        // Track retirements\n        if (!isLegacy) {\n            // Avoid tracking timestamps for legacy retirements since these\n            // are inaccurate.\n            retirements[eventCounter].createdAt = block.timestamp;\n        }\n        retirements[eventCounter].retiringEntity = retiringEntity;\n        retirements[eventCounter].amount = amount;\n        retirements[eventCounter].projectVintageTokenId = projectVintageTokenId;\n\n        return eventCounter;\n    }\n\n    /// @notice Attach retirement events to an NFT.\n    /// @param tokenId The id of the NFT to attach events to.\n    /// @param retirementEventIds An array of event ids to associate with the NFT.\n    function attachRetirementEvents(\n        uint256 tokenId,\n        uint256[] calldata retirementEventIds\n    ) external {\n        address tokenOwner = ownerOf(tokenId);\n        require(tokenOwner == msg.sender, 'Unauthorized');\n        _attachRetirementEvents(tokenId, tokenOwner, retirementEventIds);\n    }\n\n    /// @notice Attach retirement events to an NFT.\n    /// @param tokenId The id of the NFT to attach events to.\n    /// @param retiringEntity The entity that has retired TCO2 and is eligible to mint an NFT.\n    /// @param retirementEventIds An array of event ids to associate with the NFT. Currently\n    /// only 1 event is allowed to be provided here.\n    function _attachRetirementEvents(\n        uint256 tokenId,\n        address retiringEntity,\n        uint256[] calldata retirementEventIds\n    ) internal {\n        // 0. Check whether retirementEventIds is empty\n        // 1. Check whether event belongs to user (retiring entity)\n        // 2. Check whether the event has previously been attached\n        require(retirementEventIds.length != 0, 'Empty event array');\n        for (uint256 i; i < retirementEventIds.length; ++i) {\n            require(\n                retirements[retirementEventIds[i]].retiringEntity ==\n                    retiringEntity,\n                'Invalid event to be claimed'\n            );\n            require(\n                !claimedEvents[retirementEventIds[i]],\n                'Already claimed event'\n            );\n            claimedEvents[retirementEventIds[i]] = true;\n            certificates[tokenId].retirementEventIds.push(\n                retirementEventIds[i]\n            );\n        }\n    }\n\n    /// @notice Mint new Retirement Certificate NFT that shows how many TCO2s have been retired.\n    /// @param retiringEntity The entity that has retired TCO2 and is eligible to mint an NFT.\n    /// @param retiringEntityString An identifiable string for the retiring entity, eg. their name.\n    /// @param beneficiary The beneficiary address for whom the TCO2 amount was retired.\n    /// @param beneficiaryString An identifiable string for the beneficiary, eg. their name.\n    /// @param retirementMessage A message to accompany the retirement.\n    /// @param retirementEventIds An array of event ids to associate with the NFT. Currently\n    /// only 1 event is allowed to be provided here.\n    /// @dev    The function can either be called by a valid TCO2 contract or by someone who\n    ///         owns retirement events.\n    function mintCertificate(\n        address retiringEntity,\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage,\n        uint256[] calldata retirementEventIds\n    ) external virtual {\n        // If the provided retiring entity is not the caller, then\n        // ensure the caller is at least a TCO2 contract. This is to\n        // allow TCO2 contracts to call retireAndMintCertificate.\n        require(\n            retiringEntity == msg.sender ||\n                IToucanContractRegistry(contractRegistry).checkERC20(\n                    msg.sender\n                ) ==\n                true,\n            'Invalid caller'\n        );\n\n        uint256 newItemId = _tokenIds;\n        unchecked {\n            ++newItemId;\n        }\n        _tokenIds = newItemId;\n\n        _safeMint(retiringEntity, newItemId);\n\n        // Attach retirement events to the newly minted NFT\n        _attachRetirementEvents(newItemId, retiringEntity, retirementEventIds);\n\n        certificates[newItemId].createdAt = block.timestamp;\n        certificates[newItemId].beneficiary = beneficiary;\n        certificates[newItemId].beneficiaryString = beneficiaryString;\n        certificates[newItemId].retiringEntity = retiringEntity;\n        certificates[newItemId].retiringEntityString = retiringEntityString;\n        certificates[newItemId].retirementMessage = retirementMessage;\n\n        emit CertificateMinted(newItemId);\n    }\n\n    /// @param tokenId The id of the NFT to get the URI.\n    /// @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n    /// based on the ERC721URIStorage implementation\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            'ERC721URIStorage: URI query for nonexistent token'\n        );\n        return\n            string(\n                abi.encodePacked(baseURI, StringsUpgradeable.toString(tokenId))\n            );\n    }\n\n    /// @notice Update retirementMessage, beneficiary, and beneficiaryString of a NFT\n    /// within 24h of creation. Empty values are ignored, ie., will not overwrite the\n    /// existing stored values in the NFT.\n    /// @param tokenId The id of the NFT to update.\n    /// @param retiringEntityString An identifiable string for the retiring entity, eg. their name.\n    /// @param beneficiary The new beneficiary to set in the NFT.\n    /// @param beneficiaryString An identifiable string for the beneficiary, eg. their name.\n    /// @param retirementMessage The new retirementMessage to set in the NFT.\n    function updateCertificate(\n        uint256 tokenId,\n        string calldata retiringEntityString,\n        address beneficiary,\n        string calldata beneficiaryString,\n        string calldata retirementMessage\n    ) external virtual {\n        require(msg.sender == ownerOf(tokenId), 'Sender is not owner');\n        require(\n            block.timestamp < certificates[tokenId].createdAt + 24 hours,\n            '24 hours elapsed'\n        );\n\n        if (bytes(retiringEntityString).length != 0) {\n            certificates[tokenId].retiringEntityString = retiringEntityString;\n        }\n        if (beneficiary != address(0)) {\n            certificates[tokenId].beneficiary = beneficiary;\n        }\n        if (bytes(beneficiaryString).length != 0) {\n            certificates[tokenId].beneficiaryString = beneficiaryString;\n        }\n        if (bytes(retirementMessage).length != 0) {\n            certificates[tokenId].retirementMessage = retirementMessage;\n        }\n\n        emit CertificateUpdated(tokenId);\n    }\n\n    /// @notice Get certificate data for an NFT.\n    /// @param tokenId The id of the NFT to get data for.\n    function getData(uint256 tokenId) public view returns (Data memory) {\n        return certificates[tokenId];\n    }\n\n    /// @notice Get all events for a user.\n    /// @param user The user for whom to fetch all events.\n    function getUserEvents(address user)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        return eventsOfUser[user];\n    }\n\n    /// @notice Get total retired amount for an NFT.\n    /// @param tokenId The id of the NFT to update.\n    /// @return amount Total retired amount for an NFT.\n    /// @dev The return amount is denominated in 18 decimals, similar to amounts\n    /// as they are read in TCO2 contracts.\n    /// For example, 1000000000000000000 means 1 tonne.\n    function getRetiredAmount(uint256 tokenId)\n        external\n        view\n        returns (uint256 amount)\n    {\n        uint256[] memory eventIds = certificates[tokenId].retirementEventIds;\n        for (uint256 i; i < eventIds.length; ++i) {\n            amount += retirements[eventIds[i]].amount;\n        }\n    }\n\n    /// @notice Get total retired amount for an NFT in tonnes.\n    /// @param tokenId The id of the NFT to update.\n    /// @return amount Total retired amount for an NFT in tonnes.\n    function getRetiredAmountInTonnes(uint256 tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 amount;\n        uint256[] memory eventIds = certificates[tokenId].retirementEventIds;\n        for (uint256 i; i < eventIds.length; ++i) {\n            amount += retirements[eventIds[i]].amount;\n        }\n        return amount / tonneDenomination;\n    }\n\n    /// @notice Get total retired amount for an NFT in kilos.\n    /// @param tokenId The id of the NFT to update.\n    /// @return amount Total retired amount for an NFT in kilos.\n    function getRetiredAmountInKilos(uint256 tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 amount;\n        uint256[] memory eventIds = certificates[tokenId].retirementEventIds;\n        for (uint256 i; i < eventIds.length; ++i) {\n            amount += retirements[eventIds[i]].amount;\n        }\n        return amount / kiloDenomination;\n    }\n}\n"
    },
    "contracts/RetirementCertificatesStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nabstract contract RetirementCertificatesStorageV1 {\n    struct Data {\n        uint256[] retirementEventIds;\n        uint256 createdAt;\n        address retiringEntity;\n        address beneficiary;\n        string retiringEntityString;\n        string beneficiaryString;\n        string retirementMessage;\n    }\n\n    /// @dev a RetirementEvent has a clear ownership relationship.\n    /// This relation is less clear in an NFT that already has a beneficiary set\n    struct RetirementEvent {\n        uint256 createdAt;\n        address retiringEntity;\n        /// @dev amount is denominated in 18 decimals, similar to amounts\n        /// in TCO2 contracts.\n        uint256 amount;\n        uint256 projectVintageTokenId;\n    }\n\n    /// @dev id that tracks retirement events\n    uint256 public retireEventCounter;\n\n    /// @dev maps the retireEventCounter to the RetirementEvent data\n    mapping(uint256 => RetirementEvent) public retirements;\n\n    /// @dev mapping that helps ensure retirement events are not claimed multiple times\n    mapping(uint256 => bool) public claimedEvents;\n\n    /// @dev List all the events belonging to user (maybe this could be better inferred via a subgraph)\n    mapping(address => uint256[]) eventsOfUser;\n\n    string public baseURI;\n    address public contractRegistry;\n    uint256 internal _tokenIds;\n\n    mapping(uint256 => Data) public certificates;\n\n    uint256 public minValidRetirementAmount;\n}\n\nabstract contract RetirementCertificatesStorage is\n    RetirementCertificatesStorageV1\n{}\n"
    },
    "contracts/testing/RetirementCertificatesUpgrade.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '../RetirementCertificates.sol';\n\n////////////////////////////////////////////////////\n////////// FOR TESTTING PURPOSES ONLY //////////////\n////////////////////////////////////////////////////\n\ncontract RetirementCertificatesV2Test is RetirementCertificates {\n    uint256 public num;\n    string public dummyVar;\n\n    function version() public pure virtual override returns (string memory) {\n        return 'V2';\n    }\n\n    /// @dev dummy function that overrides\n}\n"
    },
    "contracts/pools/NCT.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\nimport '../interfaces/ICarbonOffsetBatches.sol';\nimport '../interfaces/IToucanCarbonOffsets.sol';\nimport '../interfaces/IToucanContractRegistry.sol';\nimport './NCTStorage.sol';\n\n/// @notice Nature Carbon Tonne (or NatureCarbonTonne)\n/// Contract is an ERC20 compliant token that acts as a pool for TCO2 tokens\ncontract NatureCarbonTonne is\n    ContextUpgradeable,\n    ERC20Upgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    UUPSUpgradeable,\n    NatureCarbonTonneStorage\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\n    /// @dev fees redeem percentage with 2 fixed decimals precision\n    uint256 public constant feeRedeemDivider = 1e4;\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event Deposited(address erc20Addr, uint256 amount);\n    event Redeemed(address account, address erc20, uint256 amount);\n    event ExternalAddressWhitelisted(address erc20addr);\n    event ExternalAddressRemovedFromWhitelist(address erc20addr);\n    event InternalAddressWhitelisted(address erc20addr);\n    event InternalAddressBlacklisted(address erc20addr);\n    event InternalAddressRemovedFromBlackList(address erc20addr);\n    event InternalAddressRemovedFromWhitelist(address erc20addr);\n    event AttributeStandardAdded(string standard);\n    event AttributeStandardRemoved(string standard);\n    event AttributeMethodologyAdded(string methodology);\n    event AttributeMethodologyRemoved(string methodology);\n    event AttributeRegionAdded(string region);\n    event AttributeRegionRemoved(string region);\n    event RedeemFeePaid(address redeemer, uint256 fees);\n    event RedeemFeeBurnt(address redeemer, uint256 fees);\n    event ToucanRegistrySet(address ContractRegistry);\n    event MappingSwitched(string mappingName, bool accepted);\n    event SupplyCapUpdated(uint256 newCap);\n    event MinimumVintageStartTimeUpdated(uint256 minimumVintageStartTime);\n    event TCO2ScoringUpdated(address[] tco2s);\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    /// @dev Returns the current version of the smart contract\n    function version() public pure virtual returns (string memory) {\n        return '1.2.0';\n    }\n\n    function initialize() public virtual initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20_init_unchained('Toucan Protocol: Nature Carbon Tonne', 'NCT');\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @dev modifier that only lets the contract's owner and granted role to execute\n    modifier onlyWithRole(bytes32 role) {\n        require(\n            hasRole(role, msg.sender) || owner() == msg.sender,\n            'Unauthorized'\n        );\n        _;\n    }\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() public virtual onlyWithRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /// @dev Unpause the system, wraps _unpause(), only Admin\n    function unpause() public virtual onlyWithRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    function setToucanContractRegistry(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        contractRegistry = _address;\n        emit ToucanRegistrySet(_address);\n    }\n\n    /// @notice Generic function to switch attributes mappings into either\n    /// acceptance or rejection criteria\n    /// @param _mappingName attribute mapping of project-vintage data\n    /// @param accepted determines if mapping works as black or whitelist\n    function switchMapping(string memory _mappingName, bool accepted)\n        public\n        virtual\n        onlyOwner\n    {\n        if (strcmp(_mappingName, 'regions')) {\n            accepted\n                ? regionsIsAcceptedMapping = true\n                : regionsIsAcceptedMapping = false;\n        } else if (strcmp(_mappingName, 'standards')) {\n            accepted\n                ? standardsIsAcceptedMapping = true\n                : standardsIsAcceptedMapping = false;\n        } else if (strcmp(_mappingName, 'methodologies')) {\n            accepted\n                ? methodologiesIsAcceptedMapping = true\n                : methodologiesIsAcceptedMapping = false;\n        }\n        emit MappingSwitched(_mappingName, accepted);\n    }\n\n    /// @notice Function to add attributes for filtering (does not support complex AttributeSets)\n    /// @param addToList determines whether attribute should be added or removed\n    /// Other params are arrays of attributes to be added\n    function addAttributes(\n        bool addToList,\n        string[] memory _regions,\n        string[] memory _standards,\n        string[] memory _methodologies\n    ) public virtual onlyOwner {\n        for (uint256 i; i < _standards.length; ++i) {\n            if (addToList == true) {\n                standards[_standards[i]] = true;\n                emit AttributeStandardAdded(_standards[i]);\n            } else {\n                standards[_standards[i]] = false;\n                emit AttributeStandardRemoved(_standards[i]);\n            }\n        }\n\n        for (uint256 i; i < _methodologies.length; ++i) {\n            if (addToList == true) {\n                methodologies[_methodologies[i]] = true;\n                emit AttributeMethodologyAdded(_methodologies[i]);\n            } else {\n                methodologies[_methodologies[i]] = false;\n                emit AttributeMethodologyRemoved(_methodologies[i]);\n            }\n        }\n\n        for (uint256 i; i < _regions.length; ++i) {\n            if (addToList == true) {\n                regions[_regions[i]] = true;\n                emit AttributeRegionAdded(_regions[i]);\n            } else {\n                regions[_regions[i]] = false;\n                emit AttributeRegionRemoved(_regions[i]);\n            }\n        }\n    }\n\n    /// @notice Function to whitelist selected external non-TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToExternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            externalWhiteList[erc20Addr[i]] = true;\n            emit ExternalAddressWhitelisted(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to whitelist certain TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToInternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            internalWhiteList[erc20Addr[i]] = true;\n            emit InternalAddressWhitelisted(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to blacklist certain TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToInternalBlackList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            internalBlackList[erc20Addr[i]] = true;\n            emit InternalAddressBlacklisted(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to remove ERC20 addresses from external whitelist\n    /// @param erc20Addr accepts an array of contract addresses\n    function removeFromExternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            externalWhiteList[erc20Addr[i]] = false;\n            emit ExternalAddressRemovedFromWhitelist(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to remove TCO2 addresses from internal blacklist\n    /// @param erc20Addr accepts an array of contract addresses\n    function removeFromInternalBlackList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            internalBlackList[erc20Addr[i]] = false;\n            emit InternalAddressRemovedFromBlackList(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to remove TCO2 addresses from internal whitelist\n    /// @param erc20Addr accepts an array of contract addressesc\n    function removeFromInternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            internalWhiteList[erc20Addr[i]] = false;\n            emit InternalAddressRemovedFromWhitelist(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to limit the maximum NCT supply\n    /// @dev supplyCap is initially set to 0 and must be increased before deposits\n    function setSupplyCap(uint256 newCap) external virtual onlyOwner {\n        supplyCap = newCap;\n        emit SupplyCapUpdated(newCap);\n    }\n\n    /// @notice Determines the minimum vintage start time acceptance criteria of TCO2s\n    /// @param _minimumVintageStartTime unix time format\n    function setMinimumVintageStartTime(uint64 _minimumVintageStartTime)\n        public\n        virtual\n        onlyOwner\n    {\n        minimumVintageStartTime = _minimumVintageStartTime;\n        emit MinimumVintageStartTimeUpdated(_minimumVintageStartTime);\n    }\n\n    /// @notice Allows MANAGERs or the owner to pass an array to hold TCO2 contract addesses that are\n    /// ordered by some form of scoring mechanism\n    /// @param tco2s array of ordered TCO2 addresses\n    function setTCO2Scoring(address[] calldata tco2s)\n        external\n        onlyWithRole(MANAGER_ROLE)\n    {\n        require(tco2s.length > 0, '!tco2s');\n        scoredTCO2s = tco2s;\n        emit TCO2ScoringUpdated(tco2s);\n    }\n\n    // ----------------------------\n    //   Permissionless functions\n    // ----------------------------\n\n    /// @notice Deposit function for NCT pool that accepts TCO2s and mints NCT 1:1\n    /// @param erc20Addr ERC20 contract address to be deposited, requires approve\n    /// @dev Eligibility is checked via `checkEligible`, balances are tracked\n    /// for each TCO2 separately\n    function deposit(address erc20Addr, uint256 amount)\n        public\n        virtual\n        whenNotPaused\n    {\n        require(checkEligible(erc20Addr));\n\n        uint256 remainingSpace = getRemaining();\n        require(remainingSpace > 0, 'Full pool');\n\n        if (amount > remainingSpace) amount = remainingSpace;\n\n        IERC20Upgradeable(erc20Addr).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n\n        /// @dev Increase balance sheet of individual token\n        tokenBalances[erc20Addr] += amount;\n        _mint(msg.sender, amount);\n        emit Deposited(erc20Addr, amount);\n    }\n\n    /// @notice Internal function that checks if token to be deposited is eligible for this pool\n    function checkEligible(address erc20Addr)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        bool isToucanContract = IToucanContractRegistry(contractRegistry)\n            .checkERC20(erc20Addr);\n\n        if (isToucanContract) {\n            if (internalWhiteList[erc20Addr]) {\n                return true;\n            }\n\n            require(internalBlackList[erc20Addr] == false, 'Blacklisted TCO2');\n\n            require(checkAttributeMatching(erc20Addr) == true);\n        }\n        /// @dev If not Toucan native contract, check if address is whitelisted\n        else {\n            require(externalWhiteList[erc20Addr] == true, 'Not whitelisted');\n            return true;\n        }\n\n        return true;\n    }\n\n    /// @notice Checks whether incoming TCO2s match the accepted criteria/attributes\n    function checkAttributeMatching(address erc20Addr)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        ProjectData memory projectData;\n        VintageData memory vintageData;\n        (projectData, vintageData) = IToucanCarbonOffsets(erc20Addr)\n            .getAttributes();\n\n        /// @dev checks if any one of the attributes are blacklisted.\n        /// If mappings are set to \"whitelist\"-mode, require the opposite\n        require(\n            vintageData.startTime >= minimumVintageStartTime,\n            'Start time too old'\n        );\n        require(\n            regions[projectData.region] == regionsIsAcceptedMapping,\n            'Region not accepted'\n        );\n        require(\n            standards[projectData.standard] == standardsIsAcceptedMapping,\n            'Standard not accepted'\n        );\n        require(\n            methodologies[projectData.methodology] ==\n                methodologiesIsAcceptedMapping,\n            'Methodology not accepted'\n        );\n\n        return true;\n    }\n\n    /// @notice Update the fee redeem percentage\n    /// @param _feeRedeemPercentageInBase percentage of fee in base\n    function setFeeRedeemPercentage(uint256 _feeRedeemPercentageInBase)\n        public\n        virtual\n        onlyOwner\n    {\n        require(\n            _feeRedeemPercentageInBase < feeRedeemDivider,\n            'Invalid fee percentage'\n        );\n        feeRedeemPercentageInBase = _feeRedeemPercentageInBase;\n    }\n\n    /// @notice Update the fee redeem receiver\n    /// @param _feeRedeemReceiver address to transfer the fees\n    function setFeeRedeemReceiver(address _feeRedeemReceiver)\n        public\n        virtual\n        onlyOwner\n    {\n        require(_feeRedeemReceiver != address(0), 'Invalid fee address');\n        feeRedeemReceiver = _feeRedeemReceiver;\n    }\n\n    /// @notice Update the fee redeem burn percentage\n    /// @param _feeRedeemBurnPercentageInBase percentage of fee in base\n    function setFeeRedeemBurnPercentage(uint256 _feeRedeemBurnPercentageInBase)\n        public\n        virtual\n        onlyOwner\n    {\n        require(\n            _feeRedeemBurnPercentageInBase < feeRedeemDivider,\n            'Invalid burn percentage'\n        );\n        feeRedeemBurnPercentageInBase = _feeRedeemBurnPercentageInBase;\n    }\n\n    /// @notice Update the fee redeem burn address\n    /// @param _feeRedeemBurnAddress address to transfer the fees to burn\n    function setFeeRedeemBurnAddress(address _feeRedeemBurnAddress)\n        public\n        virtual\n        onlyOwner\n    {\n        require(_feeRedeemBurnAddress != address(0), 'Invalid burn address');\n        feeRedeemBurnAddress = _feeRedeemBurnAddress;\n    }\n\n    /// @notice Adds a new address for redeem fees exemption\n    /// @param _address address to be exempted on redeem fees\n    function addRedeemFeeExemptedAddress(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        redeemFeeExemptedAddresses[_address] = true;\n    }\n\n    /// @notice Removes a new address for redeem fees exemption\n    /// @param _address address to be exempted on redeem fees\n    function removeRedeemFeeExemptedAddress(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        redeemFeeExemptedAddresses[_address] = false;\n    }\n\n    /// @notice View function to calculate fees pre-execution\n    /// @dev User specifies in front-end the addresses and amounts they want\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of amounts to redeem for each tco2s\n    /// @return Total fees amount\n    function calculateRedeemFees(\n        address[] memory tco2s,\n        uint256[] memory amounts\n    ) public view virtual whenNotPaused returns (uint256) {\n        if (redeemFeeExemptedAddresses[msg.sender]) {\n            return 0;\n        }\n        uint256 addrLen = tco2s.length;\n        uint256 amountsLen = amounts.length;\n        uint256 totalFee;\n        require(addrLen == amountsLen, 'Length of arrays differ');\n\n        for (uint256 i; i < addrLen; ++i) {\n            uint256 feeAmount = calculateFeeForSingleAmount(\n                amounts[i],\n                feeRedeemPercentageInBase\n            );\n            totalFee += feeAmount;\n        }\n        return totalFee;\n    }\n\n    /// @notice Redeems Pool tokens for multiple underlying TCO2s 1:1 minus fees\n    /// @dev User specifies in front-end the addresses and amounts they want\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of amounts to redeem for each tco2s\n    /// NCT Pool token in user's wallet get burned\n    function redeemMany(address[] memory tco2s, uint256[] memory amounts)\n        public\n        virtual\n        whenNotPaused\n    {\n        require(tco2s.length == amounts.length, 'Length of arrays differ');\n\n        uint256 totalFee;\n        uint256 _feeRedeemPercentageInBase = feeRedeemPercentageInBase;\n        bool isExempted = redeemFeeExemptedAddresses[msg.sender];\n\n        for (uint256 i; i < tco2s.length; ++i) {\n            uint256 feeAmount;\n            if (!isExempted) {\n                feeAmount = calculateFeeForSingleAmount(\n                    amounts[i],\n                    _feeRedeemPercentageInBase\n                );\n                totalFee += feeAmount;\n            }\n            redeemSingle(tco2s[i], amounts[i] - feeAmount);\n        }\n        if (totalFee != 0) {\n            uint256 burnAmount = calculateRedeemFeeBurnAmount(\n                totalFee,\n                feeRedeemBurnPercentageInBase\n            );\n            totalFee -= burnAmount;\n            transfer(feeRedeemReceiver, totalFee);\n            emit RedeemFeePaid(msg.sender, totalFee);\n            if (burnAmount > 0) {\n                transfer(feeRedeemBurnAddress, burnAmount);\n                emit RedeemFeeBurnt(msg.sender, burnAmount);\n            }\n        }\n    }\n\n    function calculateRedeemFeeBurnAmount(\n        uint256 _totalFee,\n        uint256 feeRedeemBurnBp\n    ) internal pure returns (uint256 _burnAmount) {\n        return (_totalFee * feeRedeemBurnBp) / feeRedeemDivider;\n    }\n\n    function calculateFeeForSingleAmount(uint256 _amount, uint256 feeRedeemBp)\n        internal\n        view\n        returns (uint256 _fees)\n    {\n        if (feeRedeemBp == 0 || redeemFeeExemptedAddresses[msg.sender]) {\n            return 0;\n        }\n        _fees = (_amount * feeRedeemBp) / feeRedeemDivider;\n    }\n\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\n    /// TCO2s from an array of ranked TCO2 contracts\n    /// starting from contract at index 0 until amount is satisfied\n    /// @param amount Total amount to be redeemed\n    /// @dev NCT Pool tokens in user's wallet get burned\n    function redeemAuto(uint256 amount) public virtual whenNotPaused {\n        require(amount <= totalSupply(), 'Amount exceeds totalSupply');\n        uint256 remainingAmount = amount;\n        uint256 i;\n\n        uint256 scoredTCO2Len = scoredTCO2s.length;\n        while (remainingAmount > 0 && i < scoredTCO2Len) {\n            address tco2 = scoredTCO2s[i];\n            uint256 balance = tokenBalances[tco2];\n\n            // Only TCO2s with a balance should be included for a redemption.\n            if (balance != 0) {\n                uint256 amountToRedeem = remainingAmount > balance\n                    ? balance\n                    : remainingAmount;\n                redeemSingle(tco2, amountToRedeem);\n                remainingAmount -= amountToRedeem;\n            }\n\n            unchecked {\n                i += 1;\n            }\n        }\n\n        require(remainingAmount == 0, 'Non-zero remaining amount');\n    }\n\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\n    /// TCO2s from an array of ranked TCO2 contracts starting from contract at\n    /// index 0 until amount is satisfied. redeemAuto2 is slightly more expensive\n    /// than redeemAuto but it is going to be more optimal to use by other on-chain\n    /// contracts.\n    /// @param amount Total amount to be redeemed\n    /// @return tco2s amounts The addresses and amounts of the TCO2s that were\n    /// automatically redeemed\n    function redeemAuto2(uint256 amount)\n        public\n        virtual\n        whenNotPaused\n        returns (address[] memory tco2s, uint256[] memory amounts)\n    {\n        require(amount <= totalSupply(), 'Amount exceeds totalSupply');\n        uint256 remainingAmount = amount;\n        uint256 i;\n\n        uint256 scoredTCO2Len = scoredTCO2s.length;\n        while (remainingAmount > 0 && i < scoredTCO2Len) {\n            address tco2 = scoredTCO2s[i];\n            uint256 balance = tokenBalances[tco2];\n            uint256 amountToRedeem;\n\n            // Only TCO2s with a balance should be included for a redemption.\n            if (balance != 0) {\n                amountToRedeem = remainingAmount > balance\n                    ? balance\n                    : remainingAmount;\n                remainingAmount -= amountToRedeem;\n            }\n\n            unchecked {\n                i += 1;\n            }\n\n            // Create return arrays statically since Solidity does not\n            // support dynamic arrays or mappings in-memory (EIP-1153).\n            // Do it here to avoid having to fill out the last indexes\n            // during the second iteration.\n            if (remainingAmount == 0) {\n                tco2s = new address[](i);\n                amounts = new uint256[](i);\n\n                tco2s[i - 1] = tco2;\n                amounts[i - 1] = amountToRedeem;\n                redeemSingle(tco2, amountToRedeem);\n            }\n        }\n\n        require(remainingAmount == 0, 'Non-zero remaining amount');\n\n        // Execute the second iteration by avoiding to run the last index\n        // since we have already executed that in the first iteration.\n        for (uint256 j; j < i - 1; ++j) {\n            address tco2 = scoredTCO2s[j];\n            // This second loop only gets called when the `remainingAmount` is larger\n            // than the first tco2 balance in the array. Here, in every iteration the\n            // tco2 balance is smaller than the remaining amount while the last bit of\n            // the `remainingAmount` which is smaller than the tco2 balance, got redeemed\n            // in the first loop.\n            uint256 balance = tokenBalances[tco2];\n\n            // Ignore empty balances so we don't generate redundant transactions.\n            if (balance == 0) continue;\n\n            tco2s[j] = tco2;\n            amounts[j] = balance;\n            redeemSingle(tco2, balance);\n        }\n    }\n\n    /// @dev Internal function that redeems a single underlying token\n    function redeemSingle(address erc20, uint256 amount)\n        internal\n        virtual\n        whenNotPaused\n    {\n        require(tokenBalances[erc20] >= amount, 'Amount exceeds supply');\n        _burn(msg.sender, amount);\n        tokenBalances[erc20] -= amount;\n        IERC20Upgradeable(erc20).safeTransfer(msg.sender, amount);\n        emit Redeemed(msg.sender, erc20, amount);\n    }\n\n    /// @dev Implemented in order to disable transfers when paused\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), 'Paused contract');\n    }\n\n    /// @dev Returns the remaining space in pool before hitting the cap\n    function getRemaining() public view returns (uint256) {\n        return (supplyCap - totalSupply());\n    }\n\n    // -----------------------------\n    //      Locked ERC20 safety\n    // -----------------------------\n\n    /// @dev Modifier to disallowing sending tokens to either the 0-address\n    /// or this contract itself\n    modifier validDestination(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        _;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        validDestination(recipient)\n        returns (bool)\n    {\n        super.transfer(recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override validDestination(recipient) returns (bool) {\n        super.transferFrom(sender, recipient, amount);\n        return true;\n    }\n\n    // -----------------------------\n    //      Helper Functions\n    // -----------------------------\n    function memcmp(bytes memory a, bytes memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return (a.length == b.length) && (keccak256(a) == keccak256(b));\n    }\n\n    function strcmp(string memory a, string memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return memcmp(bytes(a), bytes(b));\n    }\n\n    function getScoredTCO2s() public view returns (address[] memory) {\n        return scoredTCO2s;\n    }\n}\n"
    },
    "contracts/interfaces/IToucanCarbonOffsets.sol": {
      "content": "// SPDX-FileCopyrightText: 2022 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '../CarbonProjectVintageTypes.sol';\nimport '../CarbonProjectTypes.sol';\n\ninterface IToucanCarbonOffsets {\n    function getAttributes()\n        external\n        view\n        returns (ProjectData memory, VintageData memory);\n}\n"
    },
    "contracts/pools/NCTStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\n/// @dev Storage for the UUPS Proxy upgradable NCT contract\nabstract contract NatureCarbonTonneStorageV1 {\n    uint256 public supplyCap;\n    mapping(address => uint256) public tokenBalances;\n    address public contractRegistry;\n\n    /// @notice array used to read from when redeeming TCO2s automatically\n    address[] public scoredTCO2s;\n\n    /// @dev Mappings for attributes that can be included or excluded\n    /// if set to `false`, attribute-values are blacklisted/rejected\n    /// if set to `true`, attribute-values are whitelisted/accepted\n    mapping(string => bool) public regions;\n    mapping(string => bool) public standards;\n    mapping(string => bool) public methodologies;\n\n    /// @dev mapping to whitelist external non-TCO2 contracts by address\n    mapping(address => bool) public externalWhiteList;\n\n    /// @dev mapping to include certain TCO2 contracts by address,\n    /// overriding attribute matching checks\n    mapping(address => bool) public internalWhiteList;\n\n    /// @dev mapping to exclude certain TCO2 contracts by address,\n    /// even if the attribute matching would pass\n    mapping(address => bool) public internalBlackList;\n\n    /// @dev fees redeem receiver address\n    address public feeRedeemReceiver;\n\n    uint256 public feeRedeemPercentageInBase;\n\n    /// @dev fees redeem burn address\n    address public feeRedeemBurnAddress;\n\n    /// @dev fees redeem burn percentage with 2 fixed decimals precision\n    uint256 public feeRedeemBurnPercentageInBase;\n\n    /// @dev repacked smaller variables here so new bools can be added below\n    uint64 public minimumVintageStartTime;\n    bool public seedMode;\n    bool public regionsIsAcceptedMapping;\n    bool public standardsIsAcceptedMapping;\n    bool public methodologiesIsAcceptedMapping;\n}\n\nabstract contract NatureCarbonTonneStorageV1_1 {\n    mapping(address => bool) public redeemFeeExemptedAddresses;\n}\n\nabstract contract NatureCarbonTonneStorage is\n    NatureCarbonTonneStorageV1,\n    NatureCarbonTonneStorageV1_1\n{}\n"
    },
    "contracts/pools/PoolFilterAttributeMapping.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport '../interfaces/IPoolFilter.sol';\nimport '../interfaces/IToucanContractRegistry.sol';\nimport '../interfaces/IToucanCarbonOffsets.sol';\n\n// Specific implementation of an external pool filter\n// Allows for filtering based on Toucan compliant attributes\n// Uses mappings instead of Struct nested arrays\ncontract PoolFilterAttributeMapping is Ownable, IPoolFilter {\n    address public contractRegistry;\n\n    uint64 public minimumVintageStartTime;\n\n    // Attributes that can be included or excluded\n    // false = attribute is a blacklisting/rejection criteria\n    bool public regionsIsAcceptedMapping = false;\n    mapping(string => bool) public regions;\n\n    bool public standardsIsAcceptedMapping = false;\n    mapping(string => bool) public standards;\n\n    bool public methodologiesIsAcceptedMapping = false;\n    mapping(string => bool) public methodologies;\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    function setToucanContractRegistry(address _address) public onlyOwner {\n        contractRegistry = _address;\n    }\n\n    /// @dev WIP: Generic function to switch attributes mappings into either\n    /// acceptance or rejection criteria\n    /// Todo: turn into nested mappings to support future attributes\n    function switchMapping(string memory _mappingName, bool accepted)\n        public\n        onlyOwner\n    {\n        if (strcmp(_mappingName, 'regions')) {\n            accepted\n                ? regionsIsAcceptedMapping = true\n                : regionsIsAcceptedMapping = false;\n        } else if (strcmp(_mappingName, 'standards')) {\n            accepted\n                ? standardsIsAcceptedMapping = true\n                : standardsIsAcceptedMapping = false;\n        } else if (strcmp(_mappingName, 'methodologies')) {\n            accepted\n                ? methodologiesIsAcceptedMapping = true\n                : methodologiesIsAcceptedMapping = false;\n        }\n    }\n\n    // Functions\n    function makeRegionsIsAcceptedMapping() public onlyOwner {\n        regionsIsAcceptedMapping = true;\n    }\n\n    function makeStandardsIsAcceptedMapping() public onlyOwner {\n        standardsIsAcceptedMapping = true;\n    }\n\n    function makeMethodologiesIsAcceptedMapping() public onlyOwner {\n        methodologiesIsAcceptedMapping = true;\n    }\n\n    function memcmp(bytes memory a, bytes memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return (a.length == b.length) && (keccak256(a) == keccak256(b));\n    }\n\n    function strcmp(string memory a, string memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return memcmp(bytes(a), bytes(b));\n    }\n\n    // Simple blacklisting function that does not support AttributeSets\n    function blackListAttributes(\n        bool addToList,\n        string[] memory _regions,\n        string[] memory _standards,\n        string[] memory _methodologies\n    ) public onlyOwner {\n        for (uint256 i; i < _standards.length; ++i) {\n            if (addToList == true) {\n                regions[_regions[i]] = true;\n            } else {\n                regions[_regions[i]] = false;\n            }\n        }\n\n        for (uint256 i; i < _methodologies.length; ++i) {\n            if (addToList == true) {\n                regions[_regions[i]] = true;\n            } else {\n                regions[_regions[i]] = false;\n            }\n        }\n\n        //...\n        //...\n    }\n\n    // Function can be updated (while keeping the same signature)\n    function checkEligible(address erc20Addr)\n        external\n        view\n        override\n        returns (bool)\n    {\n        bool isToucanContract = IToucanContractRegistry(contractRegistry)\n            .checkERC20(erc20Addr);\n\n        if (isToucanContract) {\n            require(\n                checkAttributeMatching(erc20Addr) == true,\n                'Toucan contract rejected, non-matching attributes'\n            );\n        }\n        // If not Toucan native contract, check if address is whitelisted\n        else {\n            return false;\n        }\n\n        return true;\n    }\n\n    // ------------------------\n    // Permissionless functions\n    // ------------------------\n\n    // Checks whether incoming project-vintage-ERC20 token matches the accepted criteria/attributes\n    function checkAttributeMatching(address erc20Addr)\n        public\n        view\n        returns (bool)\n    {\n        ProjectData memory projectData;\n        VintageData memory vintageData;\n        (projectData, vintageData) = IToucanCarbonOffsets(erc20Addr)\n            .getAttributes();\n\n        // Check if any one of the attributes is blacklisted\n        // If mappings are set to \"whitelist\"-mode, require the opposite\n        require(vintageData.startTime > minimumVintageStartTime);\n        require(regions[projectData.region] == regionsIsAcceptedMapping);\n        require(standards[projectData.standard] == standardsIsAcceptedMapping);\n        require(\n            methodologies[projectData.methodology] ==\n                methodologiesIsAcceptedMapping\n        );\n\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IPoolFilter.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\ninterface IPoolFilter {\n    function checkEligible(address erc20Addr) external view returns (bool);\n}\n"
    },
    "contracts/pools/PoolFilterAttributeStructs.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport '../interfaces/IPoolFilter.sol';\nimport '../interfaces/IToucanContractRegistry.sol';\nimport './../ToucanCarbonOffsets.sol';\n\n// Specific implementation of an external pool filter\n// Allows for filtering based on Toucan compliant attributes\n// Uses mappings instead of Struct nested arrays\ncontract PoolFilterAttributeStructs is Ownable, IPoolFilter {\n    address public contractRegistry;\n\n    mapping(address => bool) public whiteList;\n    mapping(address => bool) public previouslyAcceptedContracts;\n\n    // Describes the allowe attributes as arrays per set\n    // Note: pids (project identifiers) probably not needed\n    struct AttributeSet {\n        string[] regions;\n        string[] standards;\n        string[] methodologies;\n    }\n\n    // All allowed sets\n    AttributeSet[] allowedSets;\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    function setToucanContractRegistry(address _address) public onlyOwner {\n        contractRegistry = _address;\n    }\n\n    // Function to add a single AttributeSet to allowedSets\n    function addAttributeSet(\n        string[] memory _regions,\n        string[] memory _standards,\n        string[] memory _methodologies\n    ) public onlyOwner {\n        AttributeSet memory set;\n\n        set.regions = _regions;\n        set.standards = _standards;\n        set.methodologies = _methodologies;\n\n        allowedSets.push(set);\n    }\n\n    // Shall give the owner the ability to remove certain attribute sets\n    function removeAttributeSet(uint256 index) public onlyOwner {\n        delete allowedSets[index];\n    }\n\n    // ------------------------\n    // Permissionless functions\n    // ------------------------\n\n    // Function can be updated (while keeping the same signature)\n    function checkEligible(address erc20Addr)\n        external\n        view\n        override\n        returns (bool)\n    {\n        bool isToucanContract = IToucanContractRegistry(contractRegistry)\n            .checkERC20(erc20Addr);\n\n        if (isToucanContract) {\n            require(\n                checkAttributeMatching(erc20Addr) == true,\n                'Toucan contract rejected, non-matching attributes'\n            );\n        }\n        // If not Toucan native contract, check if address is whitelisted\n        else {\n            return false;\n        }\n\n        return true;\n    }\n\n    // Checks whether incoming project-vintage-ERC20 token matches the accepted criteria/attributes\n    function checkAttributeMatching(address erc20Addr)\n        public\n        view\n        returns (bool)\n    {\n        // console.log(\"DEBUG checkAttributeMatching:\", erc20Addr);\n        /// @dev Querying the attributes from the incoming TCO2 token\n        ProjectData memory projectData;\n        (projectData, ) = ToucanCarbonOffsets(erc20Addr).getAttributes();\n\n        // string memory s = projectData.standard;\n        // string memory m = projectData.methodology;\n        // string memory r = projectData.region;\n        // console.log(\"DEBUG vintage,standard:\", v, s);\n        // console.log(\"DEBUG method, region:\", m, projectData.region);\n\n        // Corresponding match variables\n        bool vMatch = false;\n        bool rMatch = false;\n        bool sMatch = false;\n        bool mMatch = false;\n\n        // Length of struct array\n        uint256 setLen = allowedSets.length;\n\n        // Here: For loop, looping through set array\n        for (uint256 x; x < setLen; ++x) {\n            // Every array might have a different length\n            uint256 rlen = allowedSets[x].regions.length;\n            uint256 slen = allowedSets[x].standards.length;\n            uint256 mlen = allowedSets[x].methodologies.length;\n\n            // Jump to next AttributeSet\n            if (vMatch == false) continue;\n\n            for (uint256 i; i < rlen; ++i) {\n                // console.log(\"DEBUG regions:\",i, allowedSets[x].regions[i]);\n\n                if (\n                    keccak256(abi.encodePacked(allowedSets[x].regions[i])) ==\n                    keccak256(abi.encodePacked(projectData.region))\n                ) {\n                    // console.log(\"DEBUG: match in REGIONS in set:\", x);\n                    rMatch = true;\n                    break;\n                } else {\n                    continue;\n                }\n            }\n\n            // Jump to next AttributeSet\n            if (rMatch == false) continue;\n\n            for (uint256 i; i < slen; ++i) {\n                // console.log(\"DEBUG standards:\",i, allowedSets[x].standards[i]);\n\n                if (\n                    keccak256(abi.encodePacked(allowedSets[x].standards[i])) ==\n                    keccak256(abi.encodePacked(projectData.standard))\n                ) {\n                    // console.log(\"DEBUG: match in STANDARDS in set:\", x);\n                    sMatch = true;\n                    break;\n                } else {\n                    continue;\n                }\n            }\n\n            // Jump to next AttributeSet\n            if (sMatch == false) continue;\n\n            for (uint256 i; i < mlen; ++i) {\n                // console.log(\"DEBUG methodologies:\",i, allowedSets[x].methodologies[i]);\n\n                if (\n                    keccak256(\n                        abi.encodePacked(allowedSets[x].methodologies[i])\n                    ) == keccak256(abi.encodePacked(projectData.standard))\n                ) {\n                    // console.log(\"DEBUG: match in METHODOLOGIES in set:\", x);\n                    mMatch = true;\n                    break;\n                } else {\n                    continue;\n                }\n            }\n\n            // Final check if all attributes are matching\n            if (vMatch && rMatch && sMatch && mMatch) {\n                return true;\n            } else continue;\n        }\n        // no matches found during search\n        return false;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/testing/TestERC20.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\n// mock class using ERC20\ncontract ERC20Test is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) payable ERC20(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n\n    function transferInternal(\n        address from,\n        address to,\n        uint256 value\n    ) public {\n        _transfer(from, to, value);\n    }\n\n    function approveInternal(\n        address owner,\n        address spender,\n        uint256 value\n    ) public {\n        _approve(owner, spender, value);\n    }\n}\n"
    },
    "contracts/pools/Pool.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n// import 'hardhat/console.sol'; // dev & testing\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/security/Pausable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\n\nimport '../interfaces/ICarbonOffsetBatches.sol';\nimport '../interfaces/IPoolFilter.sol';\nimport '../interfaces/IToucanContractRegistry.sol';\n\n// General Pool contract that accepts\ncontract Pool is Context, ERC20, Ownable, Pausable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    event Deposited(address erc20Addr, uint256 amount);\n    event Redeemed(address account, address erc20, uint256 amount);\n\n    address public poolFilter;\n\n    // Important if algorithmic redemption gets implemented\n    mapping(address => uint256) public tokenBalances;\n    uint256 public overallAmount;\n    bool public hasExternalFilter;\n\n    constructor(\n        string memory name_,\n        string memory _symbol,\n        bool externalFilter\n    ) ERC20(name_, _symbol) {\n        hasExternalFilter = externalFilter;\n    }\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() public virtual onlyOwner {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() public virtual onlyOwner {\n        _unpause();\n    }\n\n    /// @dev Change the implementation address of the filtering check\n    function setPoolFilter(address newAddress) public virtual onlyOwner {\n        poolFilter = newAddress;\n    }\n\n    // ------------------------\n    // Permissionless functions\n    // ------------------------\n\n    /**\n     * @dev Generic deposit function for all Pool designs\n     *   Calls checkEligible, which either forwards the call to an external contract\n     *   or to an internal function, which is supposed to be overriden by\n     *   the implementing child contract\n     */\n    function deposit(address erc20Addr, uint256 amount)\n        public\n        virtual\n        whenNotPaused\n    {\n        require(checkEligible(erc20Addr), 'Token rejected');\n\n        IERC20Upgradeable(erc20Addr).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n\n        // Increasing balance sheet of individual token and overall\n        tokenBalances[erc20Addr] += amount;\n        overallAmount += amount;\n        // mints pool/index token to prev. owner(sender)\n        _mint(msg.sender, amount);\n        emit Deposited(erc20Addr, amount);\n    }\n\n    // Internal function that can forward to external filter contract\n    function checkEligible(address erc20Addr)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        if (hasExternalFilter) {\n            require(\n                poolFilter != address(0),\n                'Error: pool filter address not set'\n            );\n            require(IPoolFilter(poolFilter).checkEligible(erc20Addr));\n        } else {\n            _checkEligible(erc20Addr);\n        }\n        return true;\n    }\n\n    // Function shall be overriden by child contract\n    // Note: WIP: looking for better implementation\n    function _checkEligible(address erc20Addr)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        // console.log(erc20Addr);\n        return false;\n    }\n\n    /// @notice Redeems Pool tokens for multiple underlying pERC20s 1:1\n    /// User specifies in front-end the addresses and amounts they want\n    /// Pool token in User's wallet get burned\n    function redeemMany(address[] memory erc20s, uint256[] memory amounts)\n        public\n        virtual\n        whenNotPaused\n    {\n        require(erc20s.length == amounts.length, 'Length of arrays differ');\n\n        for (uint256 i; i < erc20s.length; ++i) {\n            redeemSingle(erc20s[i], amounts[i]);\n        }\n    }\n\n    /// @dev internal function called that redeems a single underlying token\n    function redeemSingle(address erc20, uint256 amount)\n        internal\n        virtual\n        whenNotPaused\n    {\n        require(tokenBalances[erc20] >= amount, 'Amount exceeds supply');\n        _burn(msg.sender, amount);\n        tokenBalances[erc20] -= amount;\n        IERC20Upgradeable(erc20).safeTransfer(msg.sender, amount);\n        emit Redeemed(msg.sender, erc20, amount);\n    }\n\n    // Redeem, and call offset on underlying contracts\n    // Note: Not yet implemented\n    // function offset(uint256 amount) public virtual whenNotPaused {}\n\n    // Implemented in order to disable transfers when paused\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), 'ERC20Pausable: token transfer while paused');\n    }\n\n    // -----------------------------\n    //      Locked ERC20 safety\n    // -----------------------------\n\n    modifier validDestination(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        _;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        validDestination(recipient)\n        returns (bool)\n    {\n        super.transfer(recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override validDestination(recipient) returns (bool) {\n        super.transferFrom(sender, recipient, amount);\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/testing/CarbonBurnTest.sol": {
      "content": "// SPDX-FileCopyrightText: 2022 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\n\ninterface IToucanPoolTest {\n    function getScoredTCO2s() external view returns (address[] memory);\n\n    function redeemAuto(uint256 amount) external;\n\n    function redeemAuto2(uint256 amount)\n        external\n        returns (address[] memory, uint256[] memory);\n}\n\ninterface IToucanCarbonOffsetsTest {\n    function retire(uint256 amount) external;\n}\n\n/// Example contract that performs carbon retirement fully on-chain\n/// Meant to be used as a gas benchmark for the different redeemAuto\n/// implementations.\ncontract CarbonBurnTest {\n    address public _poolToken;\n\n    constructor(address poolToken) {\n        _poolToken = poolToken;\n    }\n\n    function testRedeemAuto(uint256 _totalAmount) external {\n        address[] memory listTCO2 = IToucanPoolTest(_poolToken)\n            .getScoredTCO2s();\n\n        // Redeem pool tokens\n        IToucanPoolTest(_poolToken).redeemAuto(_totalAmount);\n\n        // Retire TCO2\n        for (uint256 i = 0; _totalAmount > 0; i++) {\n            uint256 balance = IERC20Upgradeable(listTCO2[i]).balanceOf(\n                address(this)\n            );\n\n            IToucanCarbonOffsetsTest(listTCO2[i]).retire(balance);\n            _totalAmount -= balance;\n        }\n    }\n\n    function testRedeemAuto2(uint256 _totalAmount) external {\n        // Redeem pool tokens\n        (address[] memory tco2s, uint256[] memory amounts) = IToucanPoolTest(\n            _poolToken\n        ).redeemAuto2(_totalAmount);\n\n        // Retire TCO2\n        for (uint256 i = 0; i < tco2s.length; i++) {\n            if (amounts[i] < 1e15) {\n                // Dust check for less than a kilo amounts.\n                // These are invalid retirements since the retirement\n                // certificate's smallest denomination is in kilos.\n                continue;\n            }\n            IToucanCarbonOffsetsTest(tco2s[i]).retire(amounts[i]);\n        }\n    }\n}\n"
    },
    "contracts/pools/BaseCarbonTonne.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\n\nimport '../interfaces/ICarbonOffsetBatches.sol';\nimport '../interfaces/IToucanCarbonOffsets.sol';\nimport '../interfaces/IToucanContractRegistry.sol';\nimport './BaseCarbonTonneStorage.sol';\n\n/// @notice Base Carbon Tonne for KlimaDAO\n/// Contract is an ERC20 compliant token that acts as a pool for TCO2 tokens\n/// It is possible to whitelist Toucan Protocol external tokenized carbon\ncontract BaseCarbonTonne is\n    ContextUpgradeable,\n    ERC20Upgradeable,\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    AccessControlUpgradeable,\n    UUPSUpgradeable,\n    BaseCarbonTonneStorage\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    // ----------------------------------------\n    //      Constants\n    // ----------------------------------------\n\n    bytes32 public constant PAUSER_ROLE = keccak256('PAUSER_ROLE');\n    bytes32 public constant MANAGER_ROLE = keccak256('MANAGER_ROLE');\n    /// @dev fees redeem percentage with 2 fixed decimals precision\n    uint256 public constant feeRedeemDivider = 1e4;\n\n    // ----------------------------------------\n    //      Events\n    // ----------------------------------------\n\n    event Deposited(address erc20Addr, uint256 amount);\n    event Redeemed(address account, address erc20, uint256 amount);\n    event ExternalAddressWhitelisted(address erc20addr);\n    event ExternalAddressRemovedFromWhitelist(address erc20addr);\n    event InternalAddressWhitelisted(address erc20addr);\n    event InternalAddressBlacklisted(address erc20addr);\n    event InternalAddressRemovedFromBlackList(address erc20addr);\n    event InternalAddressRemovedFromWhitelist(address erc20addr);\n    event AttributeStandardAdded(string standard);\n    event AttributeStandardRemoved(string standard);\n    event AttributeMethodologyAdded(string methodology);\n    event AttributeMethodologyRemoved(string methodology);\n    event AttributeRegionAdded(string region);\n    event AttributeRegionRemoved(string region);\n    event RedeemFeePaid(address redeemer, uint256 fees);\n    event RedeemFeeBurnt(address redeemer, uint256 fees);\n    event ToucanRegistrySet(address ContractRegistry);\n    event MappingSwitched(string mappingName, bool accepted);\n    event SupplyCapUpdated(uint256 newCap);\n    event MinimumVintageStartTimeUpdated(uint256 minimumVintageStartTime);\n    event TCO2ScoringUpdated(address[] tco2s);\n\n    // ----------------------------------------\n    //      Upgradable related functions\n    // ----------------------------------------\n\n    /// @dev Returns the current version of the smart contract\n    function version() public pure virtual returns (string memory) {\n        return '1.2.0';\n    }\n\n    function initialize() public virtual initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __Pausable_init_unchained();\n        __ERC20_init_unchained('Toucan Protocol: Base Carbon Tonne', 'BCT');\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        virtual\n        override\n        onlyOwner\n    {}\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    /// @dev modifier that only lets the contract's owner and granted role to execute\n    modifier onlyWithRole(bytes32 role) {\n        require(\n            hasRole(role, msg.sender) || owner() == msg.sender,\n            'Unauthorized'\n        );\n        _;\n    }\n\n    /// @notice Emergency function to disable contract's core functionality\n    /// @dev wraps _pause(), only Admin\n    function pause() public virtual onlyWithRole(PAUSER_ROLE) {\n        _pause();\n    }\n\n    /// @dev unpause the system, wraps _unpause(), only Admin\n    function unpause() public virtual onlyWithRole(PAUSER_ROLE) {\n        _unpause();\n    }\n\n    function setToucanContractRegistry(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        contractRegistry = _address;\n        emit ToucanRegistrySet(_address);\n    }\n\n    /// @notice Generic function to switch attributes mappings into either\n    /// acceptance or rejection criteria\n    /// @param _mappingName attribute mapping of project-vintage data\n    /// @param accepted determines if mapping works as black or whitelist\n    function switchMapping(string memory _mappingName, bool accepted)\n        public\n        virtual\n        onlyOwner\n    {\n        if (strcmp(_mappingName, 'regions')) {\n            accepted\n                ? regionsIsAcceptedMapping = true\n                : regionsIsAcceptedMapping = false;\n        } else if (strcmp(_mappingName, 'standards')) {\n            accepted\n                ? standardsIsAcceptedMapping = true\n                : standardsIsAcceptedMapping = false;\n        } else if (strcmp(_mappingName, 'methodologies')) {\n            accepted\n                ? methodologiesIsAcceptedMapping = true\n                : methodologiesIsAcceptedMapping = false;\n        }\n        emit MappingSwitched(_mappingName, accepted);\n    }\n\n    /// @notice Function to add attributes for filtering (does not support complex AttributeSets)\n    /// @param addToList determines whether attribute should be added or removed\n    /// Other params are arrays of attributes to be added\n    function addAttributes(\n        bool addToList,\n        string[] memory _regions,\n        string[] memory _standards,\n        string[] memory _methodologies\n    ) public virtual onlyOwner {\n        for (uint256 i; i < _standards.length; ++i) {\n            if (addToList == true) {\n                standards[_standards[i]] = true;\n                emit AttributeStandardAdded(_standards[i]);\n            } else {\n                standards[_standards[i]] = false;\n                emit AttributeStandardRemoved(_standards[i]);\n            }\n        }\n\n        for (uint256 i; i < _methodologies.length; ++i) {\n            if (addToList == true) {\n                methodologies[_methodologies[i]] = true;\n                emit AttributeMethodologyAdded(_methodologies[i]);\n            } else {\n                methodologies[_methodologies[i]] = false;\n                emit AttributeMethodologyRemoved(_methodologies[i]);\n            }\n        }\n\n        for (uint256 i; i < _regions.length; ++i) {\n            if (addToList == true) {\n                regions[_regions[i]] = true;\n                emit AttributeRegionAdded(_regions[i]);\n            } else {\n                regions[_regions[i]] = false;\n                emit AttributeRegionRemoved(_regions[i]);\n            }\n        }\n    }\n\n    /// @notice Function to whitelist selected external non-TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToExternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            externalWhiteList[erc20Addr[i]] = true;\n            emit ExternalAddressWhitelisted(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to whitelist certain TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToInternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            // @TODO check isContract\n            internalWhiteList[erc20Addr[i]] = true;\n            emit InternalAddressWhitelisted(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to blacklist certain TCO2 contracts by their address\n    /// @param erc20Addr accepts an array of contract addresses\n    function addToInternalBlackList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            // @TODO check isContract\n            internalBlackList[erc20Addr[i]] = true;\n            emit InternalAddressBlacklisted(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to remove ERC20 addresses from external whitelist\n    /// @param erc20Addr accepts an array of contract addresses\n    function removeFromExternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            externalWhiteList[erc20Addr[i]] = false;\n            emit ExternalAddressRemovedFromWhitelist(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to remove TCO2 addresses from internal blacklist\n    /// @param erc20Addr accepts an array of contract addresses\n    function removeFromInternalBlackList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            internalBlackList[erc20Addr[i]] = false;\n            emit InternalAddressRemovedFromBlackList(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to remove TCO2 addresses from internal whitelist\n    /// @param erc20Addr accepts an array of contract addressesc\n    function removeFromInternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            internalWhiteList[erc20Addr[i]] = false;\n            emit InternalAddressRemovedFromWhitelist(erc20Addr[i]);\n        }\n    }\n\n    /// @notice Function to limit the maximum BCT supply\n    /// @dev supplyCap is initially set to 0 and must be increased before deposits\n    function setSupplyCap(uint256 newCap) external virtual onlyOwner {\n        supplyCap = newCap;\n        emit SupplyCapUpdated(newCap);\n    }\n\n    /// @notice Determines the minimum vintage start time acceptance criteria of TCO2s\n    /// @param _minimumVintageStartTime unix time format\n    function setMinimumVintageStartTime(uint64 _minimumVintageStartTime)\n        public\n        virtual\n        onlyOwner\n    {\n        minimumVintageStartTime = _minimumVintageStartTime;\n        emit MinimumVintageStartTimeUpdated(_minimumVintageStartTime);\n    }\n\n    /// @notice Allows MANAGERs or the owner to pass an array to hold TCO2 contract addesses that are\n    /// ordered by some form of scoring mechanism\n    /// @param tco2s array of ordered TCO2 addresses\n    function setTCO2Scoring(address[] calldata tco2s)\n        external\n        onlyWithRole(MANAGER_ROLE)\n    {\n        require(tco2s.length > 0, '!tco2s');\n        scoredTCO2s = tco2s;\n        emit TCO2ScoringUpdated(tco2s);\n    }\n\n    // ----------------------------\n    //   Permissionless functions\n    // ----------------------------\n\n    /// @notice Deposit function for BCT pool that accepts TCO2s and mints BCT 1:1\n    /// @param erc20Addr ERC20 contract address to be deposited, requires approve\n    /// @dev Eligibility is checked via `checkEligible`, balances are tracked\n    /// for each TCO2 separately\n    function deposit(address erc20Addr, uint256 amount)\n        public\n        virtual\n        whenNotPaused\n    {\n        require(checkEligible(erc20Addr), 'Token rejected');\n\n        uint256 remainingSpace = getRemaining();\n        require(remainingSpace > 0, 'Full pool');\n\n        if (amount > remainingSpace) amount = remainingSpace;\n\n        IERC20Upgradeable(erc20Addr).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n\n        /// @dev Increase balance sheet of individual token\n        tokenBalances[erc20Addr] += amount;\n        _mint(msg.sender, amount);\n        emit Deposited(erc20Addr, amount);\n    }\n\n    /// @notice Internal function that checks if token to be deposited is eligible for this pool\n    function checkEligible(address erc20Addr)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        bool isToucanContract = IToucanContractRegistry(contractRegistry)\n            .checkERC20(erc20Addr);\n\n        if (isToucanContract) {\n            if (internalWhiteList[erc20Addr]) {\n                return true;\n            }\n\n            require(internalBlackList[erc20Addr] == false, 'Blacklisted TCO2');\n\n            require(\n                checkAttributeMatching(erc20Addr) == true,\n                'Non-matching attributes'\n            );\n        }\n        /// @dev If not Toucan native contract, check if address is whitelisted\n        else {\n            require(externalWhiteList[erc20Addr] == true, 'Not whitelisted');\n            return true;\n        }\n\n        return true;\n    }\n\n    /// @notice checks whether incoming project-vintage-ERC20 token matches the accepted criteria/attributes\n    function checkAttributeMatching(address erc20Addr)\n        public\n        view\n        virtual\n        returns (bool)\n    {\n        ProjectData memory projectData;\n        VintageData memory vintageData;\n        (projectData, vintageData) = IToucanCarbonOffsets(erc20Addr)\n            .getAttributes();\n\n        /// @dev checks if any one of the attributes are blacklisted.\n        /// If mappings are set to \"whitelist\"-mode, require the opposite\n        require(\n            vintageData.startTime >= minimumVintageStartTime,\n            'Start time too old'\n        );\n        require(\n            regions[projectData.region] == regionsIsAcceptedMapping,\n            'Region not accepted'\n        );\n        require(\n            standards[projectData.standard] == standardsIsAcceptedMapping,\n            'Standard not accepted'\n        );\n        require(\n            methodologies[projectData.methodology] ==\n                methodologiesIsAcceptedMapping,\n            'Methodology not accepted'\n        );\n\n        return true;\n    }\n\n    /// @notice Update the fee redeem percentage\n    /// @param _feeRedeemPercentageInBase percentage of fee in base\n    function setFeeRedeemPercentage(uint256 _feeRedeemPercentageInBase)\n        public\n        virtual\n        onlyOwner\n    {\n        require(\n            _feeRedeemPercentageInBase < feeRedeemDivider,\n            'Invalid fee percentage'\n        );\n        feeRedeemPercentageInBase = _feeRedeemPercentageInBase;\n    }\n\n    /// @notice Update the fee redeem receiver\n    /// @param _feeRedeemReceiver address to transfer the fees\n    function setFeeRedeemReceiver(address _feeRedeemReceiver)\n        public\n        virtual\n        onlyOwner\n    {\n        require(_feeRedeemReceiver != address(0), 'Invalid fee address');\n        feeRedeemReceiver = _feeRedeemReceiver;\n    }\n\n    /// @notice Update the fee redeem burn percentage\n    /// @param _feeRedeemBurnPercentageInBase percentage of fee in base\n    function setFeeRedeemBurnPercentage(uint256 _feeRedeemBurnPercentageInBase)\n        public\n        virtual\n        onlyOwner\n    {\n        require(\n            _feeRedeemBurnPercentageInBase < feeRedeemDivider,\n            'Invalid burn percentage'\n        );\n        feeRedeemBurnPercentageInBase = _feeRedeemBurnPercentageInBase;\n    }\n\n    /// @notice Update the fee redeem burn address\n    /// @param _feeRedeemBurnAddress address to transfer the fees to burn\n    function setFeeRedeemBurnAddress(address _feeRedeemBurnAddress)\n        public\n        virtual\n        onlyOwner\n    {\n        require(_feeRedeemBurnAddress != address(0), 'Invalid burn address');\n        feeRedeemBurnAddress = _feeRedeemBurnAddress;\n    }\n\n    /// @notice Adds a new address for redeem fees exemption\n    /// @param _address address to be exempted on redeem fees\n    function addRedeemFeeExemptedAddress(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        redeemFeeExemptedAddresses[_address] = true;\n    }\n\n    /// @notice Removes a new address for redeem fees exemption\n    /// @param _address address to be exempted on redeem fees\n    function removeRedeemFeeExemptedAddress(address _address)\n        public\n        virtual\n        onlyOwner\n    {\n        redeemFeeExemptedAddresses[_address] = false;\n    }\n\n    /// @notice View function to calculate fees pre-execution\n    /// @dev User specifies in front-end the addresses and amounts they want\n    /// @param tco2s Array of TCO2 contract addresses\n    /// @param amounts Array of amounts to redeem for each tco2s\n    /// @return Total fees amount\n    function calculateRedeemFees(\n        address[] memory tco2s,\n        uint256[] memory amounts\n    ) public view virtual whenNotPaused returns (uint256) {\n        if (redeemFeeExemptedAddresses[msg.sender]) {\n            return 0;\n        }\n        uint256 totalFee;\n        require(tco2s.length == amounts.length, 'Length of arrays differ');\n\n        for (uint256 i; i < tco2s.length; ++i) {\n            uint256 feeAmount = calculateFeeForSingleAmount(\n                amounts[i],\n                feeRedeemPercentageInBase\n            );\n            totalFee += feeAmount;\n        }\n        return totalFee;\n    }\n\n    /// @notice Redeems Pool tokens for multiple underlying TCO2s 1:1\n    /// @dev User specifies in front-end the addresses and amounts they want\n    /// BCT Pool token in user's wallet get burned\n    function redeemMany(address[] memory erc20s, uint256[] memory amounts)\n        public\n        virtual\n        whenNotPaused\n    {\n        require(erc20s.length == amounts.length, 'Length of arrays differ');\n\n        uint256 totalFee;\n        uint256 _feeRedeemPercentageInBase = feeRedeemPercentageInBase;\n        bool isExempted = redeemFeeExemptedAddresses[msg.sender];\n\n        for (uint256 i; i < erc20s.length; ++i) {\n            uint256 feeAmount;\n            if (!isExempted) {\n                feeAmount = calculateFeeForSingleAmount(\n                    amounts[i],\n                    _feeRedeemPercentageInBase\n                );\n                totalFee += feeAmount;\n            }\n            redeemSingle(erc20s[i], amounts[i] - feeAmount);\n        }\n        if (totalFee != 0) {\n            uint256 burnAmount = calculateRedeemFeeBurnAmount(\n                totalFee,\n                feeRedeemBurnPercentageInBase\n            );\n            totalFee -= burnAmount;\n            transfer(feeRedeemReceiver, totalFee);\n            emit RedeemFeePaid(msg.sender, totalFee);\n            if (burnAmount > 0) {\n                transfer(feeRedeemBurnAddress, burnAmount);\n                emit RedeemFeeBurnt(msg.sender, burnAmount);\n            }\n        }\n    }\n\n    function calculateRedeemFeeBurnAmount(\n        uint256 _totalFee,\n        uint256 feeRedeemBurnBp\n    ) internal pure returns (uint256 _burnAmount) {\n        return (_totalFee * feeRedeemBurnBp) / feeRedeemDivider;\n    }\n\n    function calculateFeeForSingleAmount(uint256 _amount, uint256 feeRedeemBp)\n        internal\n        view\n        returns (uint256 _fees)\n    {\n        if (feeRedeemBp == 0 || redeemFeeExemptedAddresses[msg.sender]) {\n            return 0;\n        }\n        _fees = (_amount * feeRedeemBp) / feeRedeemDivider;\n    }\n\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\n    /// TCO2s from an array of ranked TCO2 contracts\n    /// starting from contract at index 0 until amount is satisfied\n    /// @param amount Total amount to be redeemed\n    /// @dev BCT Pool tokens in user's wallet get burned\n    function redeemAuto(uint256 amount) public virtual whenNotPaused {\n        require(amount <= totalSupply(), 'Amount exceeds totalSupply');\n        uint256 remainingAmount = amount;\n        uint256 i;\n\n        uint256 scoredTCO2Len = scoredTCO2s.length;\n        while (remainingAmount > 0 && i < scoredTCO2Len) {\n            address tco2 = scoredTCO2s[i];\n            uint256 balance = tokenBalances[tco2];\n\n            // Only TCO2s with a balance should be included for a redemption.\n            if (balance != 0) {\n                uint256 amountToRedeem = remainingAmount > balance\n                    ? balance\n                    : remainingAmount;\n                redeemSingle(tco2, amountToRedeem);\n                remainingAmount -= amountToRedeem;\n            }\n\n            unchecked {\n                i += 1;\n            }\n        }\n\n        require(remainingAmount == 0, 'Non-zero remaining amount');\n    }\n\n    /// @notice Automatically redeems an amount of Pool tokens for underlying\n    /// TCO2s from an array of ranked TCO2 contracts starting from contract at\n    /// index 0 until amount is satisfied. redeemAuto2 is slightly more expensive\n    /// than redeemAuto but it is going to be more optimal to use by other on-chain\n    /// contracts.\n    /// @param amount Total amount to be redeemed\n    /// @return tco2s amounts The addresses and amounts of the TCO2s that were\n    /// automatically redeemed\n    function redeemAuto2(uint256 amount)\n        public\n        virtual\n        whenNotPaused\n        returns (address[] memory tco2s, uint256[] memory amounts)\n    {\n        require(amount <= totalSupply(), 'Amount exceeds totalSupply');\n        uint256 remainingAmount = amount;\n        uint256 i;\n\n        uint256 scoredTCO2Len = scoredTCO2s.length;\n        while (remainingAmount > 0 && i < scoredTCO2Len) {\n            address tco2 = scoredTCO2s[i];\n            uint256 balance = tokenBalances[tco2];\n            uint256 amountToRedeem;\n\n            // Only TCO2s with a balance should be included for a redemption.\n            if (balance != 0) {\n                amountToRedeem = remainingAmount > balance\n                    ? balance\n                    : remainingAmount;\n                remainingAmount -= amountToRedeem;\n            }\n\n            unchecked {\n                i += 1;\n            }\n\n            // Create return arrays statically since Solidity does not\n            // support dynamic arrays or mappings in-memory (EIP-1153).\n            // Do it here to avoid having to fill out the last indexes\n            // during the second iteration.\n            if (remainingAmount == 0) {\n                tco2s = new address[](i);\n                amounts = new uint256[](i);\n\n                tco2s[i - 1] = tco2;\n                amounts[i - 1] = amountToRedeem;\n                redeemSingle(tco2, amountToRedeem);\n            }\n        }\n\n        require(remainingAmount == 0, 'Non-zero remaining amount');\n\n        // Execute the second iteration by avoiding to run the last index\n        // since we have already executed that in the first iteration.\n        for (uint256 j; j < i - 1; ++j) {\n            address tco2 = scoredTCO2s[j];\n            // This second loop only gets called when the `remainingAmount` is larger\n            // than the first tco2 balance in the array. Here, in every iteration the\n            // tco2 balance is smaller than the remaining amount while the last bit of\n            // the `remainingAmount` which is smaller than the tco2 balance, got redeemed\n            // in the first loop.\n            uint256 balance = tokenBalances[tco2];\n\n            // Ignore empty balances so we don't generate redundant transactions.\n            if (balance == 0) continue;\n\n            tco2s[j] = tco2;\n            amounts[j] = balance;\n            redeemSingle(tco2, balance);\n        }\n    }\n\n    /// @dev Internal function that redeems a single underlying token\n    function redeemSingle(address erc20, uint256 amount)\n        internal\n        virtual\n        whenNotPaused\n    {\n        require(tokenBalances[erc20] >= amount, 'Amount exceeds supply');\n        _burn(msg.sender, amount);\n        tokenBalances[erc20] -= amount;\n        IERC20Upgradeable(erc20).safeTransfer(msg.sender, amount);\n        emit Redeemed(msg.sender, erc20, amount);\n    }\n\n    /// @dev Implemented in order to disable transfers when paused\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), 'Paused contract');\n    }\n\n    /// @dev Returns the remaining space in pool before hitting the cap\n    function getRemaining() public view returns (uint256) {\n        return (supplyCap - totalSupply());\n    }\n\n    // -----------------------------\n    //      Locked ERC20 safety\n    // -----------------------------\n\n    /// @dev Modifier to disallowing sending tokens to either the 0-address\n    /// or this contract itself\n    modifier validDestination(address to) {\n        require(to != address(0x0));\n        require(to != address(this));\n        _;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        validDestination(recipient)\n        returns (bool)\n    {\n        super.transfer(recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override validDestination(recipient) returns (bool) {\n        super.transferFrom(sender, recipient, amount);\n        return true;\n    }\n\n    // -----------------------------\n    //      Helper Functions\n    // -----------------------------\n    function memcmp(bytes memory a, bytes memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return (a.length == b.length) && (keccak256(a) == keccak256(b));\n    }\n\n    function strcmp(string memory a, string memory b)\n        internal\n        pure\n        returns (bool)\n    {\n        return memcmp(bytes(a), bytes(b));\n    }\n\n    function getScoredTCO2s() public view returns (address[] memory) {\n        return scoredTCO2s;\n    }\n}\n"
    },
    "contracts/pools/BaseCarbonTonneStorage.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\n/// @dev Storage for UUPS Proxy upgradable BaseCarbonTonne\nabstract contract BaseCarbonTonneStorageV1 {\n    uint256 public supplyCap;\n    mapping(address => uint256) public tokenBalances;\n    address public contractRegistry;\n\n    uint64 public minimumVintageStartTime;\n\n    /// @dev Mappings for attributes that can be included or excluded\n    /// if set to `false`, attribute-values are blacklisted/rejected\n    /// if set to `true`, attribute-values are whitelisted/accepted\n    bool public regionsIsAcceptedMapping;\n    mapping(string => bool) public regions;\n\n    bool public standardsIsAcceptedMapping;\n    mapping(string => bool) public standards;\n\n    bool public methodologiesIsAcceptedMapping;\n    mapping(string => bool) public methodologies;\n\n    /// @dev mapping to whitelist external non-TCO2 contracts by address\n    mapping(address => bool) public externalWhiteList;\n\n    /// @dev mapping to include certain TCO2 contracts by address,\n    /// overriding attribute matching checks\n    mapping(address => bool) public internalWhiteList;\n\n    /// @dev mapping to exclude certain TCO2 contracts by address,\n    /// even if the attribute matching would pass\n    mapping(address => bool) public internalBlackList;\n}\n\nabstract contract BaseCarbonTonneStorageV1_1 {\n    /// @dev fees redeem receiver address\n    address public feeRedeemReceiver;\n\n    uint256 public feeRedeemPercentageInBase;\n\n    /// @dev fees redeem burn address\n    address public feeRedeemBurnAddress;\n\n    /// @dev fees redeem burn percentage with 2 fixed decimals precision\n    uint256 public feeRedeemBurnPercentageInBase;\n}\n\nabstract contract BaseCarbonTonneStorageV1_2 {\n    mapping(address => bool) public redeemFeeExemptedAddresses;\n\n    /// @notice array used to read from when redeeming TCO2s automatically\n    address[] public scoredTCO2s;\n}\n\nabstract contract BaseCarbonTonneStorage is\n    BaseCarbonTonneStorageV1,\n    BaseCarbonTonneStorageV1_1,\n    BaseCarbonTonneStorageV1_2\n{}\n"
    },
    "contracts/testing/BaseCarbonTonneUpgrade.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '../pools/BaseCarbonTonne.sol';\n\n////////////////////////////////////////////////////\n////////// FOR TESTTING PURPOSES ONLY //////////////\n////////////////////////////////////////////////////\n\ncontract BaseCarbonTonneDummyTest is BaseCarbonTonne {\n    uint256 public num;\n    string public dummyVar;\n\n    function version() public pure override returns (string memory) {\n        return 'V2';\n    }\n\n    /// @dev dummy function that overrides\n    function deposit(\n        address erc20Addr,\n        uint256 /*amount*/\n    ) public virtual override {\n        require(checkEligible(erc20Addr), 'Token rejected');\n    }\n}\n"
    },
    "contracts/testing/CarbonProjectsUpgrade.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '../CarbonProjects.sol';\n\n////////////////////////////////////////////////////\n////////// FOR TESTTING PURPOSES ONLY //////////////\n////////////////////////////////////////////////////\n\ncontract CarbonProjectsV2Test is CarbonProjects {\n    struct Data {\n        bool var1;\n        uint256 var2;\n    }\n    mapping(uint256 => Data) public dataList;\n    uint256 public num;\n\n    function addData() public {\n        dataList[1].var1 = true;\n        dataList[1].var2 = 1337;\n        num = 10;\n    }\n\n    function version() public pure returns (string memory) {\n        return 'V2';\n    }\n}\n\n////////////////////////////////////\n\ncontract CarbonProjectsV3Test is CarbonProjects {\n    struct Data {\n        bool var1;\n        uint256 var2;\n        string text;\n    }\n    mapping(uint256 => Data) public dataList;\n    uint256 num;\n\n    function changeData() public {\n        dataList[1].var1 = false;\n        dataList[1].var2 = 1;\n    }\n\n    function addText() public {\n        dataList[1].text = 'Hello';\n    }\n\n    function readData()\n        public\n        view\n        returns (\n            bool,\n            uint256,\n            string memory,\n            uint256\n        )\n    {\n        return (dataList[1].var1, dataList[1].var2, dataList[1].text, num);\n    }\n\n    function version() public pure returns (string memory) {\n        return 'V3';\n    }\n}\n\nabstract contract CarbonProjectsStorageV2Test is CarbonProjectsStorage {\n    string public dummyVar;\n}\n\n// Test for upgrade according to data separation pattern\ncontract CarbonProjectsV4Test is\n    CarbonProjectsV3Test,\n    CarbonProjectsStorageV2Test\n{\n    function writeDummyVar(string memory text) public {\n        dummyVar = text;\n    }\n\n    function readFromStorageV2() public view returns (string memory) {\n        return dummyVar;\n    }\n}\n"
    },
    "contracts/pools/ConfigurablePool.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Context.sol';\nimport '@openzeppelin/contracts/security/Pausable.sol';\n\nimport './Pool.sol';\nimport './../interfaces/IToucanContractRegistry.sol';\nimport './../interfaces/ICarbonOffsetBatches.sol';\n\n// ConfigurablePool contracts allow for different tokenized carbon credits to be pooled\n// in order to increase liquidity\n\n// There can be various different pools with different configurations\n// in each configuration different acceptance criteria can be applied\n// NOTE: WIP\ncontract ConfigurablePool is Ownable, Pool {\n    address public contractRegistry;\n\n    bool public isAttributeBenchMarkPool;\n    bool public isWhiteListPool;\n\n    // External Pool Filter set to false\n    constructor(\n        string memory name_,\n        string memory _symbol,\n        address _contractRegistry\n    ) Pool(name_, _symbol, false) {\n        contractRegistry = _contractRegistry;\n    }\n\n    // ------------------------\n    //      Admin functions\n    // ------------------------\n\n    function makeAttributeBenchMarkPool() public onlyOwner {\n        isAttributeBenchMarkPool = true;\n    }\n\n    // Makes this pool accept whitelisted ERC20 carbon tokens\n    function makeAllowExternalPool() public onlyOwner {\n        isWhiteListPool = true;\n    }\n\n    // ------------------------\n    // Permissionless functions\n    // ------------------------\n\n    // WIP: function to check based on configuration\n    // Could be a pool that accepts only Toucan contracts\n    // And later externalWhitelist functionality gets added.\n    function _checkEligible(address erc20Addr)\n        internal\n        view\n        override\n        returns (bool)\n    {\n        IToucanContractRegistry(contractRegistry).checkERC20(erc20Addr);\n        return false;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "contracts/UUPSProxy.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol';\n\n/// @dev Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract UUPSProxy is ERC1967Proxy {\n    constructor(\n        address _logic,\n        address, // This is completely unused by the uups proxy, required to remain compatible with hardhat deploy: https://github.com/wighawag/hardhat-deploy/issues/146\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {}\n}\n"
    },
    "contracts/ToucanCarbonOffsetsBeacon.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol';\n\n/// @dev Beacon contract that tracks the implementation logic of TCO2 contracts\ncontract ToucanCarbonOffsetsBeacon is UpgradeableBeacon {\n    constructor(address implementation_) UpgradeableBeacon(implementation_) {}\n}\n"
    },
    "contracts/pools/PoolFilterAddressWhitelist.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\nimport '../interfaces/IPoolFilter.sol';\nimport '../interfaces/IToucanContractRegistry.sol';\n\n// Specific implementation of an external pool filter for the\n// BaseCarbonTonne (to be used by KlimaDAO)\n// Accepts ANY non-blacklisted Toucan contract\n// Can whitelist external ERC20 compliant carbon-offset token\ncontract PoolFilterAddressWhitelist is Ownable, IPoolFilter {\n    address public contractRegistry;\n\n    // Mapping to whitelist external non-Toucan contracts by address\n    mapping(address => bool) public externalWhiteList;\n\n    // Mapping to exclude certain Toucan contracts by address\n    mapping(address => bool) public internalBlackList;\n\n    function setToucanContractRegistry(address _address) public onlyOwner {\n        contractRegistry = _address;\n    }\n\n    // Function can be updated (while keeping the same signature)\n    function checkEligible(address erc20Addr)\n        external\n        view\n        override\n        returns (bool)\n    {\n        bool isToucanContract = IToucanContractRegistry(contractRegistry)\n            .checkERC20(erc20Addr);\n\n        if (isToucanContract) {\n            require(\n                internalBlackList[erc20Addr] == false,\n                'Toucan contract blacklisted'\n            );\n        }\n        // If not Toucan native contract, check if address is whitelisted\n        else {\n            require(\n                externalWhiteList[erc20Addr] == true,\n                'Token not whitelisted'\n            );\n        }\n\n        return true;\n    }\n\n    // Whitelist selected external non-Toucan contracts by address\n    function addToExternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            externalWhiteList[erc20Addr[i]] = true;\n        }\n    }\n\n    // Blacklist (Reject) certain Toucan contracts by address\n    function addToInternalBlackList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            internalBlackList[erc20Addr[i]] = true;\n        }\n    }\n\n    function removeFromExternalWhiteList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            externalWhiteList[erc20Addr[i]] = false;\n        }\n    }\n\n    function removeFromInternalBlackList(address[] memory erc20Addr)\n        public\n        onlyOwner\n    {\n        for (uint256 i; i < erc20Addr.length; ++i) {\n            internalBlackList[erc20Addr[i]] = false;\n        }\n    }\n}\n"
    },
    "contracts/testing/ToucanContractRegistryUpgrade.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '../ToucanContractRegistry.sol';\n\n////////////////////////////////////////////////////\n////////// FOR TESTTING PURPOSES ONLY //////////////\n////////////////////////////////////////////////////\n\ncontract ToucanContractRegistryV2Test is ToucanContractRegistry {\n    address public myNewContractAddress;\n    address public myNewContractAddress2;\n\n    function version() public pure returns (string memory) {\n        return 'V2';\n    }\n}\n"
    },
    "contracts/testing/CarbonProjectVintagesUpgrades.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Toucan Labs\n//\n// SPDX-License-Identifier: UNLICENSED\n\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\npragma solidity ^0.8.0;\n\nimport '../CarbonProjectVintages.sol';\n\n////////////////////////////////////////////////////\n////////// FOR TESTTING PURPOSES ONLY //////////////\n////////////////////////////////////////////////////\n\ncontract CarbonProjectVintagesV2Test is CarbonProjectVintages {\n    struct Data {\n        bool var1;\n        uint256 var2;\n    }\n    mapping(uint256 => Data) public dataList;\n    uint256 public num;\n\n    function addData() public {\n        dataList[1].var1 = true;\n        dataList[1].var2 = 1337;\n        num = 10;\n    }\n\n    function version() public pure returns (string memory) {\n        return 'V2';\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 300
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}