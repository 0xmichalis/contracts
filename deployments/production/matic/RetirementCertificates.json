{
  "address": "0x5e377f16E4ec6001652befD737341a28889Af002",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "BaseURISet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "CertificateMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "CertificateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "eventIds",
          "type": "uint256[]"
        }
      ],
      "name": "EventsAttached",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "MinValidAmountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "ContractRegistry",
          "type": "address"
        }
      ],
      "name": "ToucanRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_RELEASE_CANDIDATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "retirementEventIds",
          "type": "uint256[]"
        }
      ],
      "name": "attachRetirementEvents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "certificates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "retiringEntity",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "retiringEntityString",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "beneficiaryString",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "retirementMessage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "beneficiaryLocation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "consumptionCountryCode",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "consumptionPeriodStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "consumptionPeriodEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimedEvents",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "retirementEventIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "retiringEntity",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "retiringEntityString",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "beneficiaryString",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "retirementMessage",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "beneficiaryLocation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumptionCountryCode",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodEnd",
              "type": "uint256"
            }
          ],
          "internalType": "struct RetirementCertificatesStorageV1.Data",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRetiredAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRetiredAmountInKilos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRetiredAmountInTonnes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserEvents",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "registries",
          "type": "string[]"
        }
      ],
      "name": "isCertificateForRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kiloDenomination",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minValidRetirementAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "retiringEntity",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "retiringEntityString",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "beneficiaryString",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "retirementMessage",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "retirementEventIds",
          "type": "uint256[]"
        }
      ],
      "name": "mintCertificate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "retiringEntity",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "retiringEntityString",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "beneficiaryString",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "retirementMessage",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "beneficiaryLocation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumptionCountryCode",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodEnd",
              "type": "uint256"
            }
          ],
          "internalType": "struct CreateRetirementRequestParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "uint256[]",
          "name": "retirementEventIds",
          "type": "uint256[]"
        }
      ],
      "name": "mintCertificateWithExtraData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "retiringEntity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "projectVintageTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLegacy",
          "type": "bool"
        }
      ],
      "name": "registerEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retireEventCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "retirements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "retiringEntity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectVintageTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setMinValidRetirementAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setToucanContractRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tonneDenomination",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "retiringEntityString",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "beneficiaryString",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "retirementMessage",
          "type": "string"
        }
      ],
      "name": "updateCertificate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "69fd1caf394a23ba76fd4d5beab86e87",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CertificateMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CertificateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"eventIds\",\"type\":\"uint256[]\"}],\"name\":\"EventsAttached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"MinValidAmountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ContractRegistry\",\"type\":\"address\"}],\"name\":\"ToucanRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_RELEASE_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"retirementEventIds\",\"type\":\"uint256[]\"}],\"name\":\"attachRetirementEvents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"certificates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"retiringEntity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"retiringEntityString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"retirementMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumptionCountryCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedEvents\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"retirementEventIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"retiringEntity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"retiringEntityString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"retirementMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumptionCountryCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct RetirementCertificatesStorageV1.Data\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRetiredAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRetiredAmountInKilos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRetiredAmountInTonnes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserEvents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"registries\",\"type\":\"string[]\"}],\"name\":\"isCertificateForRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kiloDenomination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minValidRetirementAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"retiringEntity\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"retiringEntityString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"retirementMessage\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"retirementEventIds\",\"type\":\"uint256[]\"}],\"name\":\"mintCertificate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"retiringEntity\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"retiringEntityString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"retirementMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumptionCountryCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateRetirementRequestParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"retirementEventIds\",\"type\":\"uint256[]\"}],\"name\":\"mintCertificateWithExtraData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"retiringEntity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"projectVintageTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLegacy\",\"type\":\"bool\"}],\"name\":\"registerEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retireEventCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"retirements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"retiringEntity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectVintageTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinValidRetirementAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setToucanContractRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tonneDenomination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"retiringEntityString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"retirementMessage\",\"type\":\"string\"}],\"name\":\"updateCertificate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The amount of RetirementEvents is denominated in the 18-decimal formGetters in this contract return the corresponding amount in tonnes or kilos\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"attachRetirementEvents(uint256,uint256[])\":{\"params\":{\"retirementEventIds\":\"An array of event ids to associate with the NFT.\",\"tokenId\":\"The id of the NFT to attach events to.\"}},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getData(uint256)\":{\"params\":{\"tokenId\":\"The id of the NFT to get data for.\"}},\"getRetiredAmount(uint256)\":{\"details\":\"The return amount is denominated in 18 decimals, similar to amounts as they are read in TCO2 contracts. For example, 1000000000000000000 means 1 tonne.\",\"params\":{\"tokenId\":\"The id of the NFT to update.\"},\"returns\":{\"amount\":\"Total retired amount for an NFT.\"}},\"getRetiredAmountInKilos(uint256)\":{\"params\":{\"tokenId\":\"The id of the NFT to update.\"},\"returns\":{\"_0\":\"amount Total retired amount for an NFT in kilos.\"}},\"getRetiredAmountInTonnes(uint256)\":{\"params\":{\"tokenId\":\"The id of the NFT to update.\"},\"returns\":{\"_0\":\"amount Total retired amount for an NFT in tonnes.\"}},\"getUserEvents(address)\":{\"params\":{\"user\":\"The user for whom to fetch all events.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mintCertificate(address,string,address,string,string,uint256[])\":{\"details\":\"The function can either be called by a valid TCO2 contract or by someone who         owns retirement events.\",\"params\":{\"beneficiary\":\"The beneficiary address for whom the TCO2 amount was retired.\",\"beneficiaryString\":\"An identifiable string for the beneficiary, eg. their name.\",\"retirementEventIds\":\"An array of event ids to associate with the NFT.\",\"retirementMessage\":\"A message to accompany the retirement.\",\"retiringEntity\":\"The entity that has retired TCO2 and is eligible to mint an NFT.\",\"retiringEntityString\":\"An identifiable string for the retiring entity, eg. their name.\"},\"returns\":{\"_0\":\"The token id of the newly minted NFT.\"}},\"mintCertificateWithExtraData(address,(uint256[],uint256,string,address,string,string,string,string,uint256,uint256),uint256[])\":{\"details\":\"The function can either be called by a valid TCO2 contract or by someone who         owns retirement events.\",\"params\":{\"params\":\"Retirement params\",\"retirementEventIds\":\"An array of event ids to associate with the NFT.\",\"retiringEntity\":\"The entity that has retired TCO2 and is eligible to mint an NFT.\"},\"returns\":{\"_0\":\"The token id of the newly minted NFT.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"registerEvent(address,uint256,uint256,bool)\":{\"details\":\"The function can either be only called by a valid TCO2 contract.\",\"params\":{\"amount\":\"The amount of the TCO2 that is retired.\",\"isLegacy\":\"Whether this event registration was executed by using the legacy retired amount in the TCO2 contract or utilizes the new retirement event design.\",\"projectVintageTokenId\":\"The vintage id of the TCO2 that is retired.\",\"retiringEntity\":\"The entity that has retired TCO2 and is eligible to mint an NFT.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token. based on the ERC721URIStorage implementation\",\"params\":{\"tokenId\":\"The id of the NFT to get the URI.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCertificate(uint256,string,address,string,string)\":{\"params\":{\"beneficiary\":\"The new beneficiary to set in the NFT.\",\"beneficiaryString\":\"An identifiable string for the beneficiary, eg. their name.\",\"retirementMessage\":\"The new retirementMessage to set in the NFT.\",\"retiringEntityString\":\"An identifiable string for the retiring entity, eg. their name.\",\"tokenId\":\"The id of the NFT to update.\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"VERSION\":{\"details\":\"Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment.\"},\"tonneDenomination\":{\"details\":\"dividers to round carbon in human-readable denominations\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"attachRetirementEvents(uint256,uint256[])\":{\"notice\":\"Attach retirement events to an NFT.\"},\"getData(uint256)\":{\"notice\":\"Get certificate data for an NFT.\"},\"getRetiredAmount(uint256)\":{\"notice\":\"Get total retired amount for an NFT.\"},\"getRetiredAmountInKilos(uint256)\":{\"notice\":\"Get total retired amount for an NFT in kilos.\"},\"getRetiredAmountInTonnes(uint256)\":{\"notice\":\"Get total retired amount for an NFT in tonnes.\"},\"getUserEvents(address)\":{\"notice\":\"Get all events for a user.\"},\"mintCertificate(address,string,address,string,string,uint256[])\":{\"notice\":\"Mint new Retirement Certificate NFT that shows how many TCO2s have been retired.\"},\"mintCertificateWithExtraData(address,(uint256[],uint256,string,address,string,string,string,string,uint256,uint256),uint256[])\":{\"notice\":\"Mint new Retirement Certificate NFT that shows how many TCO2s have been retired.\"},\"registerEvent(address,uint256,uint256,bool)\":{\"notice\":\"Register retirement events. This function can only be called by a TC02 contract to register retirement events so they can be directly linked to an NFT mint.\"},\"updateCertificate(uint256,string,address,string,string)\":{\"notice\":\"Update retirementMessage, beneficiary, and beneficiaryString of a NFT within 24h of creation. Empty values are ignored, ie., will not overwrite the existing stored values in the NFT.\"}},\"notice\":\"The `RetirementCertificates` contract lets users mint NFTs that act as proof-of-retirement. These Retirement Certificate NFTs display how many TCO2s a user has burnt\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RetirementCertificates.sol\":\"RetirementCertificates\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0xa9ee8ba9953f4339e308abde06d64195b81852b5c605cfb738582a03ddf20099\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/CarbonProjectTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\n/// @dev CarbonProject related data and attributes\\nstruct ProjectData {\\n    string projectId;\\n    string standard;\\n    string methodology;\\n    string region;\\n    string storageMethod;\\n    string method;\\n    string emissionType;\\n    string category;\\n    string uri;\\n    address beneficiary;\\n}\\n\",\"keccak256\":\"0x01ef59ad96e26a2ab791ba600413c5a4bde90c66535b30f322a1a01407be6879\",\"license\":\"UNLICENSED\"},\"contracts/CarbonProjectVintageTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct VintageData {\\n    /// @dev A human-readable string which differentiates this from other vintages in\\n    /// the same project, and helps build the corresponding TCO2 name and symbol.\\n    string name;\\n    uint64 startTime; // UNIX timestamp\\n    uint64 endTime; // UNIX timestamp\\n    uint256 projectTokenId;\\n    uint64 totalVintageQuantity;\\n    bool isCorsiaCompliant;\\n    bool isCCPcompliant;\\n    string coBenefits;\\n    string correspAdjustment;\\n    string additionalCertification;\\n    string uri;\\n    string registry;\\n}\\n\",\"keccak256\":\"0x5be4a7578aa12ae4d9e06e53672c46198c5c0c524065cec87fbc8cb1826619f6\",\"license\":\"UNLICENSED\"},\"contracts/RetirementCertificates.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\n\\nimport './bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol';\\nimport './interfaces/ICarbonProjectVintages.sol';\\nimport './interfaces/IToucanCarbonOffsets.sol';\\nimport './interfaces/IToucanContractRegistry.sol';\\nimport './libraries/Strings.sol';\\nimport './RetirementCertificatesStorage.sol';\\n\\n/// @notice The `RetirementCertificates` contract lets users mint NFTs that act as proof-of-retirement.\\n/// These Retirement Certificate NFTs display how many TCO2s a user has burnt\\n/// @dev The amount of RetirementEvents is denominated in the 18-decimal form\\n/// @dev Getters in this contract return the corresponding amount in tonnes or kilos\\ncontract RetirementCertificates is\\n    ERC721Upgradeable,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable,\\n    RetirementCertificatesStorageV1,\\n    ReentrancyGuardUpgradeable,\\n    RetirementCertificatesStorage\\n{\\n    // ----------------------------------------\\n    //      Libraries\\n    // ----------------------------------------\\n\\n    using AddressUpgradeable for address;\\n    using Strings for string;\\n\\n    // ----------------------------------------\\n    //      Constants\\n    // ----------------------------------------\\n\\n    /// @dev Version-related parameters. VERSION keeps track of production\\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\\n    /// of a VERSION in our staging environment.\\n    string public constant VERSION = '1.1.0';\\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\\n\\n    /// @dev dividers to round carbon in human-readable denominations\\n    uint256 public constant tonneDenomination = 1e18;\\n    uint256 public constant kiloDenomination = 1e15;\\n\\n    // ----------------------------------------\\n    //      Events\\n    // ----------------------------------------\\n\\n    event CertificateMinted(uint256 tokenId);\\n    event CertificateUpdated(uint256 tokenId);\\n    event ToucanRegistrySet(address ContractRegistry);\\n    event BaseURISet(string baseURI);\\n    event MinValidAmountSet(uint256 previousAmount, uint256 newAmount);\\n    event EventsAttached(uint256 tokenId, uint256[] eventIds);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ----------------------------------------\\n    //      Upgradable related functions\\n    // ----------------------------------------\\n\\n    function initialize(address _contractRegistry, string memory _baseURI)\\n        external\\n        virtual\\n        initializer\\n    {\\n        __Context_init_unchained();\\n        __ERC721_init_unchained(\\n            'Toucan Protocol: Retirement Certificates for Tokenized Carbon Offsets',\\n            'TOUCAN-CERT'\\n        );\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n\\n        contractRegistry = _contractRegistry;\\n        baseURI = _baseURI;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        virtual\\n        override\\n        onlyOwner\\n    {}\\n\\n    // ------------------------\\n    //      Admin functions\\n    // ------------------------\\n\\n    function setToucanContractRegistry(address _address)\\n        external\\n        virtual\\n        onlyOwner\\n    {\\n        contractRegistry = _address;\\n        emit ToucanRegistrySet(_address);\\n    }\\n\\n    function setBaseURI(string memory baseURI_) external virtual onlyOwner {\\n        baseURI = baseURI_;\\n        emit BaseURISet(baseURI_);\\n    }\\n\\n    function setMinValidRetirementAmount(uint256 amount) external onlyOwner {\\n        uint256 previousAmount = minValidRetirementAmount;\\n        require(previousAmount != amount, 'Already set');\\n\\n        minValidRetirementAmount = amount;\\n        emit MinValidAmountSet(previousAmount, amount);\\n    }\\n\\n    // ----------------------------------\\n    //     Permissionless functions\\n    // ----------------------------------\\n\\n    /// @notice Register retirement events. This function can only be called by a TC02 contract\\n    /// to register retirement events so they can be directly linked to an NFT mint.\\n    /// @param retiringEntity The entity that has retired TCO2 and is eligible to mint an NFT.\\n    /// @param projectVintageTokenId The vintage id of the TCO2 that is retired.\\n    /// @param amount The amount of the TCO2 that is retired.\\n    /// @param isLegacy Whether this event registration was executed by using the legacy retired\\n    /// amount in the TCO2 contract or utilizes the new retirement event design.\\n    /// @dev    The function can either be only called by a valid TCO2 contract.\\n    function registerEvent(\\n        address retiringEntity,\\n        uint256 projectVintageTokenId,\\n        uint256 amount,\\n        bool isLegacy\\n    ) external returns (uint256) {\\n        // Logic requires that minting can only originate from a project-vintage ERC20 contract\\n        require(\\n            IToucanContractRegistry(contractRegistry).isValidERC20(msg.sender),\\n            'Caller not a TCO2'\\n        );\\n        require(\\n            amount != 0 && amount >= minValidRetirementAmount,\\n            'Invalid amount'\\n        );\\n\\n        /// Read from storage once, then use everywhere by reading\\n        /// from memory.\\n        uint256 eventCounter = retireEventCounter;\\n        unchecked {\\n            /// Realistically, the counter will never overflow\\n            ++eventCounter;\\n        }\\n        /// Store counter back in storage\\n        retireEventCounter = eventCounter;\\n\\n        // Track all events of a user\\n        eventsOfUser[retiringEntity].push(eventCounter);\\n        // Track retirements\\n        if (!isLegacy) {\\n            // Avoid tracking timestamps for legacy retirements since these\\n            // are inaccurate.\\n            retirements[eventCounter].createdAt = block.timestamp;\\n        }\\n        retirements[eventCounter].retiringEntity = retiringEntity;\\n        retirements[eventCounter].amount = amount;\\n        retirements[eventCounter].projectVintageTokenId = projectVintageTokenId;\\n\\n        return eventCounter;\\n    }\\n\\n    /// @notice Attach retirement events to an NFT.\\n    /// @param tokenId The id of the NFT to attach events to.\\n    /// @param retirementEventIds An array of event ids to associate with the NFT.\\n    function attachRetirementEvents(\\n        uint256 tokenId,\\n        uint256[] calldata retirementEventIds\\n    ) external {\\n        address tokenOwner = ownerOf(tokenId);\\n        require(tokenOwner == msg.sender, 'Unauthorized');\\n        _attachRetirementEvents(tokenId, tokenOwner, retirementEventIds);\\n    }\\n\\n    /// @notice Attach retirement events to an NFT.\\n    /// @param tokenId The id of the NFT to attach events to.\\n    /// @param retiringEntity The entity that has retired TCO2 and is eligible to mint an NFT.\\n    /// @param retirementEventIds An array of event ids to associate with the NFT.\\n    function _attachRetirementEvents(\\n        uint256 tokenId,\\n        address retiringEntity,\\n        uint256[] calldata retirementEventIds\\n    ) internal {\\n        // 0. Check whether retirementEventIds is empty\\n        // 1. Check whether event belongs to user (retiring entity)\\n        // 2. Check whether the event has previously been attached\\n        require(retirementEventIds.length != 0, 'Empty event array');\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < retirementEventIds.length; ++i) {\\n            uint256 eventId = retirementEventIds[i];\\n            require(\\n                retirements[eventId].retiringEntity == retiringEntity,\\n                'Invalid event to be claimed'\\n            );\\n            require(!claimedEvents[eventId], 'Already claimed event');\\n            claimedEvents[eventId] = true;\\n            certificates[tokenId].retirementEventIds.push(eventId);\\n        }\\n        emit EventsAttached(tokenId, retirementEventIds);\\n    }\\n\\n    /// @notice Mint new Retirement Certificate NFT that shows how many TCO2s have been retired.\\n    /// @param retiringEntity The entity that has retired TCO2 and is eligible to mint an NFT.\\n    /// @param retiringEntityString An identifiable string for the retiring entity, eg. their name.\\n    /// @param beneficiary The beneficiary address for whom the TCO2 amount was retired.\\n    /// @param beneficiaryString An identifiable string for the beneficiary, eg. their name.\\n    /// @param retirementMessage A message to accompany the retirement.\\n    /// @param retirementEventIds An array of event ids to associate with the NFT.\\n    /// @return The token id of the newly minted NFT.\\n    /// @dev    The function can either be called by a valid TCO2 contract or by someone who\\n    ///         owns retirement events.\\n    function mintCertificate(\\n        address retiringEntity,\\n        string calldata retiringEntityString,\\n        address beneficiary,\\n        string calldata beneficiaryString,\\n        string calldata retirementMessage,\\n        uint256[] calldata retirementEventIds\\n    ) external virtual nonReentrant returns (uint256) {\\n        CreateRetirementRequestParams\\n            memory params = CreateRetirementRequestParams({\\n                tokenIds: new uint256[](0),\\n                amount: 0,\\n                retiringEntityString: retiringEntityString,\\n                beneficiary: beneficiary,\\n                beneficiaryString: beneficiaryString,\\n                retirementMessage: retirementMessage,\\n                beneficiaryLocation: '',\\n                consumptionCountryCode: '',\\n                consumptionPeriodStart: 0,\\n                consumptionPeriodEnd: 0\\n            });\\n        return _mintCertificate(retiringEntity, params, retirementEventIds);\\n    }\\n\\n    function _mintCertificate(\\n        address retiringEntity,\\n        CreateRetirementRequestParams memory params,\\n        uint256[] calldata retirementEventIds\\n    ) internal returns (uint256) {\\n        // If the provided retiring entity is not the caller, then\\n        // ensure the caller is at least a TCO2 contract. This is to\\n        // allow TCO2 contracts to call retireAndMintCertificate.\\n        require(\\n            retiringEntity == msg.sender ||\\n                IToucanContractRegistry(contractRegistry).isValidERC20(\\n                    msg.sender\\n                ) ==\\n                true,\\n            'Invalid caller'\\n        );\\n\\n        uint256 newItemId = _tokenIds;\\n        unchecked {\\n            ++newItemId;\\n        }\\n        _tokenIds = newItemId;\\n\\n        // Attach retirement events to the newly minted NFT\\n        _attachRetirementEvents(newItemId, retiringEntity, retirementEventIds);\\n\\n        certificates[newItemId].createdAt = block.timestamp;\\n        certificates[newItemId].beneficiary = params.beneficiary;\\n        certificates[newItemId].beneficiaryString = params.beneficiaryString;\\n        certificates[newItemId].retiringEntity = retiringEntity;\\n        certificates[newItemId].retiringEntityString = params\\n            .retiringEntityString;\\n        certificates[newItemId].retirementMessage = params.retirementMessage;\\n        certificates[newItemId].beneficiaryLocation = params\\n            .beneficiaryLocation;\\n        certificates[newItemId].consumptionCountryCode = params\\n            .consumptionCountryCode;\\n        certificates[newItemId].consumptionPeriodStart = params\\n            .consumptionPeriodStart;\\n        certificates[newItemId].consumptionPeriodEnd = params\\n            .consumptionPeriodEnd;\\n\\n        emit CertificateMinted(newItemId);\\n        _safeMint(retiringEntity, newItemId);\\n\\n        return newItemId;\\n    }\\n\\n    /// @notice Mint new Retirement Certificate NFT that shows how many TCO2s have been retired.\\n    /// @param retiringEntity The entity that has retired TCO2 and is eligible to mint an NFT.\\n    /// @param params Retirement params\\n    /// @param retirementEventIds An array of event ids to associate with the NFT.\\n    /// @return The token id of the newly minted NFT.\\n    /// @dev    The function can either be called by a valid TCO2 contract or by someone who\\n    ///         owns retirement events.\\n    function mintCertificateWithExtraData(\\n        address retiringEntity,\\n        CreateRetirementRequestParams calldata params,\\n        uint256[] calldata retirementEventIds\\n    ) external virtual nonReentrant returns (uint256) {\\n        return _mintCertificate(retiringEntity, params, retirementEventIds);\\n    }\\n\\n    /// @param tokenId The id of the NFT to get the URI.\\n    /// @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n    /// based on the ERC721URIStorage implementation\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(\\n            _exists(tokenId),\\n            'ERC721URIStorage: URI query for nonexistent token'\\n        );\\n        return\\n            string(\\n                abi.encodePacked(baseURI, StringsUpgradeable.toString(tokenId))\\n            );\\n    }\\n\\n    /// @notice Update retirementMessage, beneficiary, and beneficiaryString of a NFT\\n    /// within 24h of creation. Empty values are ignored, ie., will not overwrite the\\n    /// existing stored values in the NFT.\\n    /// @param tokenId The id of the NFT to update.\\n    /// @param retiringEntityString An identifiable string for the retiring entity, eg. their name.\\n    /// @param beneficiary The new beneficiary to set in the NFT.\\n    /// @param beneficiaryString An identifiable string for the beneficiary, eg. their name.\\n    /// @param retirementMessage The new retirementMessage to set in the NFT.\\n    function updateCertificate(\\n        uint256 tokenId,\\n        string calldata retiringEntityString,\\n        address beneficiary,\\n        string calldata beneficiaryString,\\n        string calldata retirementMessage\\n    ) external virtual {\\n        string[] memory registries = new string[](1);\\n        registries[0] = 'verra';\\n        require(\\n            isCertificateForRegistry(tokenId, registries),\\n            'Invalid registry'\\n        );\\n        require(msg.sender == ownerOf(tokenId), 'Sender is not owner');\\n        require(\\n            block.timestamp < certificates[tokenId].createdAt + 24 hours,\\n            '24 hours elapsed'\\n        );\\n\\n        if (bytes(retiringEntityString).length != 0) {\\n            certificates[tokenId].retiringEntityString = retiringEntityString;\\n        }\\n        if (beneficiary != address(0)) {\\n            certificates[tokenId].beneficiary = beneficiary;\\n        }\\n        if (bytes(beneficiaryString).length != 0) {\\n            certificates[tokenId].beneficiaryString = beneficiaryString;\\n        }\\n        if (bytes(retirementMessage).length != 0) {\\n            certificates[tokenId].retirementMessage = retirementMessage;\\n        }\\n\\n        emit CertificateUpdated(tokenId);\\n    }\\n\\n    function isCertificateForRegistry(\\n        uint256 tokenId,\\n        string[] memory registries\\n    ) public view returns (bool) {\\n        // Determine the registry of the certificate\\n        uint256 eventId = certificates[tokenId].retirementEventIds[0];\\n        uint256 projectVintageTokenId = retirements[eventId]\\n            .projectVintageTokenId;\\n        VintageData memory data = ICarbonProjectVintages(\\n            IToucanContractRegistry(contractRegistry)\\n                .carbonProjectVintagesAddress()\\n        ).getProjectVintageDataByTokenId(projectVintageTokenId);\\n        string memory registry = data.registry;\\n        if (bytes(registry).length == 0) {\\n            // For backwards-compatibility\\n            registry = 'verra';\\n        }\\n\\n        // Loop through the registries and check if the certificate is for one of them\\n        for (uint256 i = 0; i < registries.length; i++) {\\n            if (registry.equals(registries[i])) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /// @notice Get certificate data for an NFT.\\n    /// @param tokenId The id of the NFT to get data for.\\n    function getData(uint256 tokenId) external view returns (Data memory) {\\n        return certificates[tokenId];\\n    }\\n\\n    /// @notice Get all events for a user.\\n    /// @param user The user for whom to fetch all events.\\n    function getUserEvents(address user)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return eventsOfUser[user];\\n    }\\n\\n    /// @notice Get total retired amount for an NFT.\\n    /// @param tokenId The id of the NFT to update.\\n    /// @return amount Total retired amount for an NFT.\\n    /// @dev The return amount is denominated in 18 decimals, similar to amounts\\n    /// as they are read in TCO2 contracts.\\n    /// For example, 1000000000000000000 means 1 tonne.\\n    function getRetiredAmount(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256 amount)\\n    {\\n        uint256[] memory eventIds = certificates[tokenId].retirementEventIds;\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < eventIds.length; ++i) {\\n            amount += retirements[eventIds[i]].amount;\\n        }\\n    }\\n\\n    /// @notice Get total retired amount for an NFT in tonnes.\\n    /// @param tokenId The id of the NFT to update.\\n    /// @return amount Total retired amount for an NFT in tonnes.\\n    function getRetiredAmountInTonnes(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        //slither-disable-next-line uninitialized-local\\n        uint256 amount;\\n        uint256[] memory eventIds = certificates[tokenId].retirementEventIds;\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < eventIds.length; ++i) {\\n            amount += retirements[eventIds[i]].amount;\\n        }\\n        return amount / tonneDenomination;\\n    }\\n\\n    /// @notice Get total retired amount for an NFT in kilos.\\n    /// @param tokenId The id of the NFT to update.\\n    /// @return amount Total retired amount for an NFT in kilos.\\n    function getRetiredAmountInKilos(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        //slither-disable-next-line uninitialized-local\\n        uint256 amount;\\n        uint256[] memory eventIds = certificates[tokenId].retirementEventIds;\\n        //slither-disable-next-line uninitialized-local\\n        for (uint256 i; i < eventIds.length; ++i) {\\n            amount += retirements[eventIds[i]].amount;\\n        }\\n        return amount / kiloDenomination;\\n    }\\n}\\n\",\"keccak256\":\"0x50b23c5d2c11f04f1d0e8a94943f5bf417cc8e92aee832d9d4d2d7e29ae0616b\",\"license\":\"UNLICENSED\"},\"contracts/RetirementCertificatesStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nabstract contract RetirementCertificatesStorageV1 {\\n    struct Data {\\n        uint256[] retirementEventIds;\\n        uint256 createdAt;\\n        address retiringEntity;\\n        address beneficiary;\\n        string retiringEntityString;\\n        string beneficiaryString;\\n        string retirementMessage;\\n        string beneficiaryLocation;\\n        string consumptionCountryCode;\\n        uint256 consumptionPeriodStart;\\n        uint256 consumptionPeriodEnd;\\n    }\\n\\n    /// @dev a RetirementEvent has a clear ownership relationship.\\n    /// This relation is less clear in an NFT that already has a beneficiary set\\n    struct RetirementEvent {\\n        uint256 createdAt;\\n        address retiringEntity;\\n        /// @dev amount is denominated in 18 decimals, similar to amounts\\n        /// in TCO2 contracts.\\n        uint256 amount;\\n        uint256 projectVintageTokenId;\\n    }\\n\\n    /// @dev id that tracks retirement events\\n    uint256 public retireEventCounter;\\n\\n    /// @dev maps the retireEventCounter to the RetirementEvent data\\n    mapping(uint256 => RetirementEvent) public retirements;\\n\\n    /// @dev mapping that helps ensure retirement events are not claimed multiple times\\n    mapping(uint256 => bool) public claimedEvents;\\n\\n    /// @dev List all the events belonging to user (maybe this could be better inferred via a subgraph)\\n    mapping(address => uint256[]) eventsOfUser;\\n\\n    string public baseURI;\\n    address public contractRegistry;\\n    uint256 internal _tokenIds;\\n\\n    mapping(uint256 => Data) public certificates;\\n\\n    uint256 public minValidRetirementAmount;\\n}\\n\\n/// @dev Kept separate from RetirementCertificatesStorageV1 to\\n/// add ReentrancyGuardUpgradeable in between.\\nabstract contract RetirementCertificatesStorage {\\n\\n}\\n\",\"keccak256\":\"0x8289ac1f7d0457a59fe3618abd5ec8da002b96eef95da7061710161e6797015d\",\"license\":\"UNLICENSED\"},\"contracts/bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct CreateRetirementRequestParams {\\n    uint256[] tokenIds;\\n    uint256 amount;\\n    string retiringEntityString;\\n    address beneficiary;\\n    string beneficiaryString;\\n    string retirementMessage;\\n    string beneficiaryLocation;\\n    string consumptionCountryCode;\\n    uint256 consumptionPeriodStart;\\n    uint256 consumptionPeriodEnd;\\n}\\n\",\"keccak256\":\"0xc7702b775ffda42d217c4671b846d93f691f8271cae9537dbd2b15930dbe582e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ICarbonProjectVintages.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\n\\nimport '../CarbonProjectVintageTypes.sol';\\n\\ninterface ICarbonProjectVintages is IERC721Upgradeable {\\n    function addNewVintage(address to, VintageData memory _vintageData)\\n        external\\n        returns (uint256);\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function getProjectVintageDataByTokenId(uint256 tokenId)\\n        external\\n        view\\n        returns (VintageData memory);\\n}\\n\",\"keccak256\":\"0x8f41b0953817c0a25c0ade7309cf0c8841d4dfdb09a1dd254f67e576bf5361fb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanCarbonOffsets.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '../CarbonProjectVintageTypes.sol';\\nimport '../CarbonProjectTypes.sol';\\nimport '../bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol';\\n\\ninterface IToucanCarbonOffsets {\\n    function retireFrom(address account, uint256 amount)\\n        external\\n        returns (uint256 retirementEventId);\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function getAttributes()\\n        external\\n        view\\n        returns (ProjectData memory, VintageData memory);\\n\\n    function standardRegistry() external view returns (string memory);\\n\\n    function retireAndMintCertificate(\\n        string calldata retiringEntityString,\\n        address beneficiary,\\n        string calldata beneficiaryString,\\n        string calldata retirementMessage,\\n        uint256 amount\\n    ) external;\\n\\n    function retireAndMintCertificateForEntity(\\n        address retiringEntity,\\n        CreateRetirementRequestParams calldata params\\n    ) external;\\n\\n    function projectVintageTokenId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfe0dd284d1e03ebafb3e04d29ae3056050123104001a194d0f9d1fb85691014b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanContractRegistry.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IToucanContractRegistry {\\n    function carbonOffsetBatchesAddress() external view returns (address);\\n\\n    function carbonProjectsAddress() external view returns (address);\\n\\n    function carbonProjectVintagesAddress() external view returns (address);\\n\\n    function toucanCarbonOffsetsFactoryAddress()\\n        external\\n        view\\n        returns (address);\\n\\n    function toucanCarbonOffsetsFactoryAddress(string memory standardRegistry)\\n        external\\n        view\\n        returns (address);\\n\\n    function retirementCertificatesAddress() external view returns (address);\\n\\n    function toucanCarbonOffsetsEscrowAddress() external view returns (address);\\n\\n    function isValidERC20(address erc20) external view returns (bool);\\n\\n    function addERC20(address erc20, string memory standardRegistry) external;\\n}\\n\",\"keccak256\":\"0xcad36560d9d473330e23f4b0a3948266263165e5b7c49e3a539885145abb97cb\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Strings.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nlibrary Strings {\\n    function equals(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            (bytes(a).length == bytes(b).length) &&\\n            (keccak256(bytes(a)) == keccak256(bytes(b)));\\n    }\\n}\\n\",\"keccak256\":\"0xb7afaab11333729758832f9c35cb49c7e9bce57f44822faea2897a8eda0268ad\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506200002062000026565b62000156565b6200003260ff62000035565b50565b60008054610100900460ff1615620000ce578160ff1660011480156200006e57506200006c306200014760201b620025f41760201c565b155b620000c65760405162461bcd60e51b815260206004820152602e602482015260008051602062004d0683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106200012d5760405162461bcd60e51b815260206004820152602e602482015260008051602062004d0683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000bd565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b608051614b786200018e600039600081816113c701528181611407015281816114c10152818161150101526115940152614b786000f3fe6080604052600436106102725760003560e01c80638da5cb5b1161014f578063cc91e5e9116100c1578063f2fde38b1161007a578063f2fde38b146107d0578063f3823bad146107f0578063f399e22e14610810578063fa272a3214610830578063ff01167714610850578063ffa1ad741461087057600080fd5b8063cc91e5e914610715578063d791399e14610735578063d84650be14610755578063d894203d14610770578063e882e37b14610790578063e985e9c5146107b057600080fd5b8063b2114f4111610113578063b2114f4114610651578063b88d4fde14610682578063bba34a37146106a2578063bbec9a2e146106c2578063c6986067146106de578063c87b56dd146106f557600080fd5b80638da5cb5b146105c657806395d89b41146105e457806399b00a8d146105f9578063a22cb46514610610578063abf410e51461063057600080fd5b806342842e0e116101e85780636352211e116101ac5780636352211e14610511578063663b3e22146105315780636c0360eb146105675780636ca0b0d71461057c57806370a0823114610591578063715018a6146105b157600080fd5b806342842e0e146104345780634f1ef2861461045457806352d1902d1461046757806355f804b31461047c57806361e4678b1461049c57600080fd5b80630d4b53e71161023a5780630d4b53e714610359578063163c131914610387578063171e5ba2146103a757806323b872dd146103d457806327de49ee146103f45780633659cfe61461041457600080fd5b80630178fe3f1461027757806301ffc9a7146102ad57806306fdde03146102dd578063081812fc146102ff578063095ea7b314610337575b600080fd5b34801561028357600080fd5b5061029761029236600461384c565b6108a1565b6040516102a491906138f8565b60405180910390f35b3480156102b957600080fd5b506102cd6102c8366004613a20565b610c9f565b60405190151581526020016102a4565b3480156102e957600080fd5b506102f2610cf1565b6040516102a49190613a3d565b34801561030b57600080fd5b5061031f61031a36600461384c565b610d83565b6040516001600160a01b0390911681526020016102a4565b34801561034357600080fd5b50610357610352366004613a70565b610e1d565b005b34801561036557600080fd5b5061037961037436600461384c565b610f32565b6040519081526020016102a4565b34801561039357600080fd5b506103796103a2366004613b28565b611006565b3480156103b357600080fd5b506103c76103c2366004613c12565b61118f565b6040516102a49190613c2f565b3480156103e057600080fd5b506103576103ef366004613c73565b6111fc565b34801561040057600080fd5b5061037961040f366004613cc2565b61122d565b34801561042057600080fd5b5061035761042f366004613c12565b6113bd565b34801561044057600080fd5b5061035761044f366004613c73565b61149c565b610357610462366004613e1b565b6114b7565b34801561047357600080fd5b50610379611587565b34801561048857600080fd5b50610357610497366004613e6a565b61163a565b3480156104a857600080fd5b506104e96104b736600461384c565b61012e60205260009081526040902080546001820154600283015460039093015491926001600160a01b039091169184565b604080519485526001600160a01b0390931660208501529183015260608201526080016102a4565b34801561051d57600080fd5b5061031f61052c36600461384c565b6116b3565b34801561053d57600080fd5b5061055161054c36600461384c565b61172a565b6040516102a49a99989796959493929190613e9e565b34801561057357600080fd5b506102f2611a31565b34801561058857600080fd5b50610379600181565b34801561059d57600080fd5b506103796105ac366004613c12565b611ac0565b3480156105bd57600080fd5b50610357611b47565b3480156105d257600080fd5b506097546001600160a01b031661031f565b3480156105f057600080fd5b506102f2611b7d565b34801561060557600080fd5b5061037961012d5481565b34801561061c57600080fd5b5061035761062b366004613f3d565b611b8c565b34801561063c57600080fd5b506101325461031f906001600160a01b031681565b34801561065d57600080fd5b506102cd61066c36600461384c565b61012f6020526000908152604090205460ff1681565b34801561068e57600080fd5b5061035761069d366004613f76565b611b97565b3480156106ae57600080fd5b506103576106bd366004613fe1565b611bcf565b3480156106ce57600080fd5b50610379670de0b6b3a764000081565b3480156106ea57600080fd5b506103796101355481565b34801561070157600080fd5b506102f261071036600461384c565b611e2a565b34801561072157600080fd5b50610379610730366004614098565b611ede565b34801561074157600080fd5b5061037961075036600461384c565b611f5c565b34801561076157600080fd5b5061037966038d7ea4c6800081565b34801561077c57600080fd5b5061035761078b366004614119565b612018565b34801561079c57600080fd5b506103576107ab366004613c12565b612078565b3480156107bc57600080fd5b506102cd6107cb366004614164565b6120f1565b3480156107dc57600080fd5b506103576107eb366004613c12565b61211f565b3480156107fc57600080fd5b506102cd61080b3660046141b5565b6121b7565b34801561081c57600080fd5b5061035761082b366004613e1b565b612375565b34801561083c57600080fd5b5061037961084b36600461384c565b612479565b34801561085c57600080fd5b5061035761086b36600461384c565b612546565b34801561087c57600080fd5b506102f2604051806040016040528060058152602001640312e312e360dc1b81525081565b610910604051806101600160405280606081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081526020016060815260200160608152602001606081526020016060815260200160008152602001600081525090565b6000828152610134602090815260409182902082518154610180938102820184019094526101608101848152909391928492849184018282801561097357602002820191906000526020600020905b81548152602001906001019080831161095f575b50505091835250506001820154602082015260028201546001600160a01b03908116604083015260038301541660608201526004820180546080909201916109ba90614271565b80601f01602080910402602001604051908101604052809291908181526020018280546109e690614271565b8015610a335780601f10610a0857610100808354040283529160200191610a33565b820191906000526020600020905b815481529060010190602001808311610a1657829003601f168201915b50505050508152602001600582018054610a4c90614271565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7890614271565b8015610ac55780601f10610a9a57610100808354040283529160200191610ac5565b820191906000526020600020905b815481529060010190602001808311610aa857829003601f168201915b50505050508152602001600682018054610ade90614271565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0a90614271565b8015610b575780601f10610b2c57610100808354040283529160200191610b57565b820191906000526020600020905b815481529060010190602001808311610b3a57829003601f168201915b50505050508152602001600782018054610b7090614271565b80601f0160208091040260200160405190810160405280929190818152602001828054610b9c90614271565b8015610be95780601f10610bbe57610100808354040283529160200191610be9565b820191906000526020600020905b815481529060010190602001808311610bcc57829003601f168201915b50505050508152602001600882018054610c0290614271565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2e90614271565b8015610c7b5780601f10610c5057610100808354040283529160200191610c7b565b820191906000526020600020905b815481529060010190602001808311610c5e57829003601f168201915b5050505050815260200160098201548152602001600a820154815250509050919050565b60006001600160e01b031982166380ac58cd60e01b1480610cd057506001600160e01b03198216635b5e139f60e01b145b80610ceb57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060658054610d0090614271565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2c90614271565b8015610d795780601f10610d4e57610100808354040283529160200191610d79565b820191906000526020600020905b815481529060010190602001808311610d5c57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b0316610e015760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152606960205260409020546001600160a01b031690565b6000610e28826116b3565b9050806001600160a01b0316836001600160a01b031603610e955760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610df8565b336001600160a01b0382161480610eb15750610eb181336120f1565b610f235760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610df8565b610f2d8383612603565b505050565b600081815261013460209081526040808320805482518185028101850190935280835284938493929190830182828015610f8b57602002820191906000526020600020905b815481526020019060010190808311610f77575b5050505050905060005b8151811015610fec5761012e6000838381518110610fb557610fb56142ab565b602002602001015181526020019081526020016000206002015483610fda91906142d7565b9250610fe5816142ef565b9050610f95565b50610ffe66038d7ea4c680008361431e565b949350505050565b60006002610136540361105b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610df8565b600261013655604080516000610140820181815261016083018452825260208083018290528351601f8e0182900482028101820185528d81529193830191908e908e90819084018382808284376000920191909152505050908252506001600160a01b038b1660208083019190915260408051601f8c0183900483028101830182528b8152920191908b908b9081908401838280828437600092019190915250505090825250604080516020601f8a0181900481028201810190925288815291810191908990899081908401838280828437600092018290525093855250506040805160208181018352848252808601919091528151908101825283815290840152506060820181905260809091015290506111798c828686612671565b6001610136559c9b505050505050505050505050565b6001600160a01b038116600090815261013060209081526040918290208054835181840281018401909452808452606093928301828280156111f057602002820191906000526020600020905b8154815260200190600101908083116111dc575b50505050509050919050565b61120633826128e9565b6112225760405162461bcd60e51b8152600401610df890614332565b610f2d8383836129bf565b61013254604051633a37b16d60e11b81523360048201526000916001600160a01b03169063746f62da90602401602060405180830381865afa158015611277573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129b919061438e565b6112db5760405162461bcd60e51b815260206004820152601160248201527021b0b63632b9103737ba1030902a21a79960791b6044820152606401610df8565b82158015906112ed5750610135548310155b61132a5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606401610df8565b61012d80546001908101918290556001600160a01b03871660009081526101306020908152604082208054938401815582529020018190558261137a57600081815261012e602052604090204290555b600081815261012e602052604090206001810180546001600160a01b0319166001600160a01b038916179055600281018590556003018590559050949350505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114055760405162461bcd60e51b8152600401610df8906143ab565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661144e600080516020614afc833981519152546001600160a01b031690565b6001600160a01b0316146114745760405162461bcd60e51b8152600401610df8906143f7565b61147d81612b5b565b6040805160008082526020820190925261149991839190612b85565b50565b610f2d83838360405180602001604052806000815250611b97565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036114ff5760405162461bcd60e51b8152600401610df8906143ab565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611548600080516020614afc833981519152546001600160a01b031690565b6001600160a01b03161461156e5760405162461bcd60e51b8152600401610df8906143f7565b61157782612b5b565b61158382826001612b85565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146116275760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610df8565b50600080516020614afc83398151915290565b6097546001600160a01b031633146116645760405162461bcd60e51b8152600401610df890614443565b80516116789061013190602084019061373f565b507ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f6816040516116a89190613a3d565b60405180910390a150565b6000818152606760205260408120546001600160a01b031680610ceb5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610df8565b61013460205260009081526040902060018101546002820154600383015460048401805493946001600160a01b0393841694939092169261176a90614271565b80601f016020809104026020016040519081016040528092919081815260200182805461179690614271565b80156117e35780601f106117b8576101008083540402835291602001916117e3565b820191906000526020600020905b8154815290600101906020018083116117c657829003601f168201915b5050505050908060050180546117f890614271565b80601f016020809104026020016040519081016040528092919081815260200182805461182490614271565b80156118715780601f1061184657610100808354040283529160200191611871565b820191906000526020600020905b81548152906001019060200180831161185457829003601f168201915b50505050509080600601805461188690614271565b80601f01602080910402602001604051908101604052809291908181526020018280546118b290614271565b80156118ff5780601f106118d4576101008083540402835291602001916118ff565b820191906000526020600020905b8154815290600101906020018083116118e257829003601f168201915b50505050509080600701805461191490614271565b80601f016020809104026020016040519081016040528092919081815260200182805461194090614271565b801561198d5780601f106119625761010080835404028352916020019161198d565b820191906000526020600020905b81548152906001019060200180831161197057829003601f168201915b5050505050908060080180546119a290614271565b80601f01602080910402602001604051908101604052809291908181526020018280546119ce90614271565b8015611a1b5780601f106119f057610100808354040283529160200191611a1b565b820191906000526020600020905b8154815290600101906020018083116119fe57829003601f168201915b50505050509080600901549080600a015490508a565b6101318054611a3f90614271565b80601f0160208091040260200160405190810160405280929190818152602001828054611a6b90614271565b8015611ab85780601f10611a8d57610100808354040283529160200191611ab8565b820191906000526020600020905b815481529060010190602001808311611a9b57829003601f168201915b505050505081565b60006001600160a01b038216611b2b5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610df8565b506001600160a01b031660009081526068602052604090205490565b6097546001600160a01b03163314611b715760405162461bcd60e51b8152600401610df890614443565b611b7b6000612cf0565b565b606060668054610d0090614271565b611583338383612d42565b611ba133836128e9565b611bbd5760405162461bcd60e51b8152600401610df890614332565b611bc984848484612e10565b50505050565b604080516001808252818301909252600091816020015b6060815260200190600190039081611be657905050905060405180604001604052806005815260200164766572726160d81b81525081600081518110611c2e57611c2e6142ab565b6020026020010181905250611c4389826121b7565b611c825760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420726567697374727960801b6044820152606401610df8565b611c8b896116b3565b6001600160a01b0316336001600160a01b031614611ce15760405162461bcd60e51b815260206004820152601360248201527229b2b73232b91034b9903737ba1037bbb732b960691b6044820152606401610df8565b60008981526101346020526040902060010154611d0190620151806142d7565b4210611d425760405162461bcd60e51b815260206004820152601060248201526f0c8d081a1bdd5c9cc8195b185c1cd95960821b6044820152606401610df8565b8615611d6757600089815261013460205260409020611d659060040189896137c3565b505b6001600160a01b03861615611da25760008981526101346020526040902060030180546001600160a01b0319166001600160a01b0388161790555b8315611dc757600089815261013460205260409020611dc59060050186866137c3565b505b8115611dec57600089815261013460205260409020611dea9060060184846137c3565b505b6040518981527f9a100d2018161ede6ca34c8007992b09bbffc636a636014a922e4c87504126289060200160405180910390a1505050505050505050565b6000818152606760205260409020546060906001600160a01b0316611eab5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610df8565b610131611eb783612e43565b604051602001611ec8929190614494565b6040516020818303038152906040529050919050565b600060026101365403611f335760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610df8565b600261013655611f4d85611f4686614597565b8585612671565b60016101365595945050505050565b60008181526101346020908152604080832080548251818502810185019093528083528493830182828015611fb057602002820191906000526020600020905b815481526020019060010190808311611f9c575b5050505050905060005b81518110156120115761012e6000838381518110611fda57611fda6142ab565b602002602001015181526020019081526020016000206002015483611fff91906142d7565b925061200a816142ef565b9050611fba565b5050919050565b6000612023846116b3565b90506001600160a01b038116331461206c5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606401610df8565b611bc984828585612f43565b6097546001600160a01b031633146120a25760405162461bcd60e51b8152600401610df890614443565b61013280546001600160a01b0319166001600160a01b0383169081179091556040519081527f86907b53cf2024579968511876daf0b4620d65803b550e33101baf70aeb6f5eb906020016116a8565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6097546001600160a01b031633146121495760405162461bcd60e51b8152600401610df890614443565b6001600160a01b0381166121ae5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610df8565b61149981612cf0565b600082815261013460205260408120805482919082906121d9576121d96142ab565b600091825260208083209091015480835261012e8252604080842060030154610132548251630505792b60e51b815292519396509094936001600160a01b039091169263a0af25609260048082019392918290030181865afa158015612243573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226791906146ca565b6001600160a01b03166315bbf074836040518263ffffffff1660e01b815260040161229491815260200190565b600060405180830381865afa1580156122b1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122d99190810190614743565b61016081015180519192509060000361230a5750604080518082019091526005815264766572726160d81b60208201525b60005b86518110156123675761234287828151811061232b5761232b6142ab565b60200260200101518361310590919063ffffffff16565b1561235557600195505050505050610ceb565b8061235f816142ef565b91505061230d565b506000979650505050505050565b6000612381600161312c565b90508015612399576000805461ff0019166101001790555b6123a16131b9565b6123e6604051806080016040528060458152602001614ab7604591396040518060400160405280600b81526020016a1513d550d0538b50d1549560aa1b8152506131e0565b6123ee61322e565b6123f661325e565b6123fe6131b9565b61013280546001600160a01b0319166001600160a01b038516179055815161242e9061013190602085019061373f565b508015610f2d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6000818152610134602090815260408083208054825181850281018501909352808352849384939291908301828280156124d257602002820191906000526020600020905b8154815260200190600101908083116124be575b5050505050905060005b81518110156125335761012e60008383815181106124fc576124fc6142ab565b60200260200101518152602001908152602001600020600201548361252191906142d7565b925061252c816142ef565b90506124dc565b50610ffe670de0b6b3a76400008361431e565b6097546001600160a01b031633146125705760405162461bcd60e51b8152600401610df890614443565b610135548181036125b15760405162461bcd60e51b815260206004820152600b60248201526a105b1c9958591e481cd95d60aa1b6044820152606401610df8565b61013582905560408051828152602081018490527f551d481ccb1906e06e26b2f8bedf0b21755e092f001c4465f99aab9c67d8a039910160405180910390a15050565b6001600160a01b03163b151590565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612638826116b3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006001600160a01b0385163314806126f8575061013254604051633a37b16d60e11b81523360048201526001600160a01b039091169063746f62da90602401602060405180830381865afa1580156126ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f2919061438e565b15156001145b6127355760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21031b0b63632b960911b6044820152606401610df8565b61013380546001019081905561274d81878686612f43565b60008181526101346020908152604090912042600182015560608701516003820180546001600160a01b0319166001600160a01b03909216919091179055608087015180516127a693600590930192919091019061373f565b50600081815261013460209081526040918290206002810180546001600160a01b0319166001600160a01b038b161790559187015180516127ef9360040192919091019061373f565b5060a0850151600082815261013460209081526040909120825161281c936006909201929091019061373f565b5060c08501516000828152610134602090815260409091208251612849936007909201929091019061373f565b5060e08501516000828152610134602090815260409091208251612876936008909201929091019061373f565b50610100850151600082815261013460209081526040918290206009810193909355610120880151600a90930192909255518281527f54b249c3cd4a5f80e81d2ad036b251d58d8f5482a926f25d12eabec192cf1ecd910160405180910390a16128e0868261328d565b95945050505050565b6000818152606760205260408120546001600160a01b03166129625760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610df8565b600061296d836116b3565b9050806001600160a01b0316846001600160a01b03161480612994575061299481856120f1565b80610ffe5750836001600160a01b03166129ad84610d83565b6001600160a01b031614949350505050565b826001600160a01b03166129d2826116b3565b6001600160a01b031614612a365760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610df8565b6001600160a01b038216612a985760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610df8565b612aa3600082612603565b6001600160a01b0383166000908152606860205260408120805460019290612acc9084906148cd565b90915550506001600160a01b0382166000908152606860205260408120805460019290612afa9084906142d7565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6097546001600160a01b031633146114995760405162461bcd60e51b8152600401610df890614443565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612bb857610f2d836132a7565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612c12575060408051601f3d908101601f19168201909252612c0f918101906148e4565b60015b612c755760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610df8565b600080516020614afc8339815191528114612ce45760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610df8565b50610f2d838383613343565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603612da35760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610df8565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612e1b8484846129bf565b612e2784848484613368565b611bc95760405162461bcd60e51b8152600401610df8906148fd565b606081600003612e6a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612e945780612e7e816142ef565b9150612e8d9050600a8361431e565b9150612e6e565b6000816001600160401b03811115612eae57612eae613d0c565b6040519080825280601f01601f191660200182016040528015612ed8576020820181803683370190505b5090505b8415610ffe57612eed6001836148cd565b9150612efa600a8661494f565b612f059060306142d7565b60f81b818381518110612f1a57612f1a6142ab565b60200101906001600160f81b031916908160001a905350612f3c600a8661431e565b9450612edc565b6000819003612f885760405162461bcd60e51b8152602060048201526011602482015270456d707479206576656e7420617272617960781b6044820152606401610df8565b60005b818110156130c3576000838383818110612fa757612fa76142ab565b60209081029290920135600081815261012e909352604090922060010154919250506001600160a01b038681169116146130235760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206576656e7420746f20626520636c61696d656400000000006044820152606401610df8565b600081815261012f602052604090205460ff161561307b5760405162461bcd60e51b8152602060048201526015602482015274105b1c9958591e4818db185a5b595908195d995b9d605a1b6044820152606401610df8565b600081815261012f60209081526040808320805460ff191660019081179091558984526101348352908320805491820181558352912001556130bc816142ef565b9050612f8b565b507fc5872b1b6098a26efa71189456aa230cff448e7d6fbfa3b42d7eb105d541d4318483836040516130f793929190614963565b60405180910390a150505050565b600081518351148015613125575081805190602001208380519060200120145b9392505050565b60008054610100900460ff1615613173578160ff16600114801561314f5750303b155b61316b5760405162461bcd60e51b8152600401610df8906149a7565b506000919050565b60005460ff80841691161061319a5760405162461bcd60e51b8152600401610df8906149a7565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611b7b5760405162461bcd60e51b8152600401610df8906149f5565b600054610100900460ff166132075760405162461bcd60e51b8152600401610df8906149f5565b815161321a90606590602085019061373f565b508051610f2d90606690602084019061373f565b600054610100900460ff166132555760405162461bcd60e51b8152600401610df8906149f5565b611b7b33612cf0565b600054610100900460ff166132855760405162461bcd60e51b8152600401610df8906149f5565b600161013655565b611583828260405180602001604052806000815250613466565b6001600160a01b0381163b6133145760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610df8565b600080516020614afc83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61334c83613499565b6000825111806133595750805b15610f2d57611bc983836134d9565b60006001600160a01b0384163b1561345e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906133ac903390899088908890600401614a40565b6020604051808303816000875af19250505080156133e7575060408051601f3d908101601f191682019092526133e491810190614a7d565b60015b613444573d808015613415576040519150601f19603f3d011682016040523d82523d6000602084013e61341a565b606091505b50805160000361343c5760405162461bcd60e51b8152600401610df8906148fd565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ffe565b506001610ffe565b61347083836135c4565b61347d6000848484613368565b610f2d5760405162461bcd60e51b8152600401610df8906148fd565b6134a2816132a7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6135415760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610df8565b600080846001600160a01b03168460405161355c9190614a9a565b600060405180830381855af49150503d8060008114613597576040519150601f19603f3d011682016040523d82523d6000602084013e61359c565b606091505b50915091506128e08282604051806060016040528060278152602001614b1c60279139613706565b6001600160a01b03821661361a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610df8565b6000818152606760205260409020546001600160a01b03161561367f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610df8565b6001600160a01b03821660009081526068602052604081208054600192906136a89084906142d7565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60608315613715575081613125565b8251156137255782518084602001fd5b8160405162461bcd60e51b8152600401610df89190613a3d565b82805461374b90614271565b90600052602060002090601f01602090048101928261376d57600085556137b3565b82601f1061378657805160ff19168380011785556137b3565b828001600101855582156137b3579182015b828111156137b3578251825591602001919060010190613798565b506137bf929150613837565b5090565b8280546137cf90614271565b90600052602060002090601f0160209004810192826137f157600085556137b3565b82601f1061380a5782800160ff198235161785556137b3565b828001600101855582156137b3579182015b828111156137b357823582559160200191906001019061381c565b5b808211156137bf5760008155600101613838565b60006020828403121561385e57600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561389557815187529582019590820190600101613879565b509495945050505050565b60005b838110156138bb5781810151838201526020016138a3565b83811115611bc95750506000910152565b600081518084526138e48160208601602086016138a0565b601f01601f19169290920160200192915050565b6020815260008251610160806020850152613917610180850183613865565b915060208501516040850152604085015161393d60608601826001600160a01b03169052565b5060608501516001600160a01b0381166080860152506080850151601f19808685030160a087015261396f84836138cc565b935060a08701519150808685030160c087015261398c84836138cc565b935060c08701519150808685030160e08701526139a984836138cc565b935060e087015191506101008187860301818801526139c885846138cc565b9450808801519250506101208187860301818801526139e785846138cc565b908801516101408881019190915290970151929095019190915250929392505050565b6001600160e01b03198116811461149957600080fd5b600060208284031215613a3257600080fd5b813561312581613a0a565b60208152600061312560208301846138cc565b6001600160a01b038116811461149957600080fd5b80356131b481613a50565b60008060408385031215613a8357600080fd5b8235613a8e81613a50565b946020939093013593505050565b60008083601f840112613aae57600080fd5b5081356001600160401b03811115613ac557600080fd5b602083019150836020828501011115613add57600080fd5b9250929050565b60008083601f840112613af657600080fd5b5081356001600160401b03811115613b0d57600080fd5b6020830191508360208260051b8501011115613add57600080fd5b60008060008060008060008060008060c08b8d031215613b4757600080fd5b613b508b613a65565b995060208b01356001600160401b0380821115613b6c57600080fd5b613b788e838f01613a9c565b909b509950899150613b8c60408e01613a65565b985060608d0135915080821115613ba257600080fd5b613bae8e838f01613a9c565b909850965060808d0135915080821115613bc757600080fd5b613bd38e838f01613a9c565b909650945060a08d0135915080821115613bec57600080fd5b50613bf98d828e01613ae4565b915080935050809150509295989b9194979a5092959850565b600060208284031215613c2457600080fd5b813561312581613a50565b6020808252825182820181905260009190848201906040850190845b81811015613c6757835183529284019291840191600101613c4b565b50909695505050505050565b600080600060608486031215613c8857600080fd5b8335613c9381613a50565b92506020840135613ca381613a50565b929592945050506040919091013590565b801515811461149957600080fd5b60008060008060808587031215613cd857600080fd5b8435613ce381613a50565b935060208501359250604085013591506060850135613d0181613cb4565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b0381118282101715613d4557613d45613d0c565b60405290565b60405161018081016001600160401b0381118282101715613d4557613d45613d0c565b604051601f8201601f191681016001600160401b0381118282101715613d9657613d96613d0c565b604052919050565b60006001600160401b03821115613db757613db7613d0c565b50601f01601f191660200190565b600082601f830112613dd657600080fd5b8135613de9613de482613d9e565b613d6e565b818152846020838601011115613dfe57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215613e2e57600080fd5b8235613e3981613a50565b915060208301356001600160401b03811115613e5457600080fd5b613e6085828601613dc5565b9150509250929050565b600060208284031215613e7c57600080fd5b81356001600160401b03811115613e9257600080fd5b610ffe84828501613dc5565b8a81526001600160a01b038a811660208301528916604082015261014060608201819052600090613ed18382018b6138cc565b90508281036080840152613ee5818a6138cc565b905082810360a0840152613ef981896138cc565b905082810360c0840152613f0d81886138cc565b905082810360e0840152613f2181876138cc565b6101008401959095525050610120015298975050505050505050565b60008060408385031215613f5057600080fd5b8235613f5b81613a50565b91506020830135613f6b81613cb4565b809150509250929050565b60008060008060808587031215613f8c57600080fd5b8435613f9781613a50565b93506020850135613fa781613a50565b92506040850135915060608501356001600160401b03811115613fc957600080fd5b613fd587828801613dc5565b91505092959194509250565b60008060008060008060008060a0898b031215613ffd57600080fd5b8835975060208901356001600160401b038082111561401b57600080fd5b6140278c838d01613a9c565b909950975060408b0135915061403c82613a50565b90955060608a0135908082111561405257600080fd5b61405e8c838d01613a9c565b909650945060808b013591508082111561407757600080fd5b506140848b828c01613a9c565b999c989b5096995094979396929594505050565b600080600080606085870312156140ae57600080fd5b84356140b981613a50565b935060208501356001600160401b03808211156140d557600080fd5b9086019061014082890312156140ea57600080fd5b9093506040860135908082111561410057600080fd5b5061410d87828801613ae4565b95989497509550505050565b60008060006040848603121561412e57600080fd5b8335925060208401356001600160401b0381111561414b57600080fd5b61415786828701613ae4565b9497909650939450505050565b6000806040838503121561417757600080fd5b823561418281613a50565b91506020830135613f6b81613a50565b60006001600160401b038211156141ab576141ab613d0c565b5060051b60200190565b600080604083850312156141c857600080fd5b823591506020808401356001600160401b03808211156141e757600080fd5b818601915086601f8301126141fb57600080fd5b8135614209613de482614192565b81815260059190911b8301840190848101908983111561422857600080fd5b8585015b83811015614260578035858111156142445760008081fd5b6142528c89838a0101613dc5565b84525091860191860161422c565b508096505050505050509250929050565b600181811c9082168061428557607f821691505b6020821081036142a557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156142ea576142ea6142c1565b500190565b600060018201614301576143016142c1565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261432d5761432d614308565b500490565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b80516131b481613cb4565b6000602082840312156143a057600080fd5b815161312581613cb4565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000815161448a8185602086016138a0565b9290920192915050565b600080845481600182811c9150808316806144b057607f831692505b602080841082036144cf57634e487b7160e01b86526022600452602486fd5b8180156144e357600181146144f457614521565b60ff19861689528489019650614521565b60008b81526020902060005b868110156145195781548b820152908501908301614500565b505084890196505b5050505050506128e08185614478565b600082601f83011261454257600080fd5b81356020614552613de483614192565b82815260059290921b8401810191818101908684111561457157600080fd5b8286015b8481101561458c5780358352918301918301614575565b509695505050505050565b600061014082360312156145aa57600080fd5b6145b2613d22565b82356001600160401b03808211156145c957600080fd5b6145d536838701614531565b83526020850135602084015260408501359150808211156145f557600080fd5b61460136838701613dc5565b604084015261461260608601613a65565b6060840152608085013591508082111561462b57600080fd5b61463736838701613dc5565b608084015260a085013591508082111561465057600080fd5b61465c36838701613dc5565b60a084015260c085013591508082111561467557600080fd5b61468136838701613dc5565b60c084015260e085013591508082111561469a57600080fd5b506146a736828601613dc5565b60e083015250610100838101359082015261012092830135928101929092525090565b6000602082840312156146dc57600080fd5b815161312581613a50565b600082601f8301126146f857600080fd5b8151614706613de482613d9e565b81815284602083860101111561471b57600080fd5b610ffe8260208301602087016138a0565b80516001600160401b03811681146131b457600080fd5b60006020828403121561475557600080fd5b81516001600160401b038082111561476c57600080fd5b90830190610180828603121561478157600080fd5b614789613d4b565b82518281111561479857600080fd5b6147a4878286016146e7565b8252506147b36020840161472c565b60208201526147c46040840161472c565b6040820152606083015160608201526147df6080840161472c565b60808201526147f060a08401614383565b60a082015261480160c08401614383565b60c082015260e08301518281111561481857600080fd5b614824878286016146e7565b60e083015250610100808401518381111561483e57600080fd5b61484a888287016146e7565b828401525050610120808401518381111561486457600080fd5b614870888287016146e7565b828401525050610140808401518381111561488a57600080fd5b614896888287016146e7565b82840152505061016080840151838111156148b057600080fd5b6148bc888287016146e7565b918301919091525095945050505050565b6000828210156148df576148df6142c1565b500390565b6000602082840312156148f657600080fd5b5051919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008261495e5761495e614308565b500690565b838152604060208201819052810182905260006001600160fb1b0383111561498a57600080fd5b8260051b8085606085013760009201606001918252509392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614a73908301846138cc565b9695505050505050565b600060208284031215614a8f57600080fd5b815161312581613a0a565b60008251614aac8184602087016138a0565b919091019291505056fe546f7563616e2050726f746f636f6c3a205265746972656d656e742043657274696669636174657320666f7220546f6b656e697a656420436172626f6e204f666673657473360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122082507c27e796fd0ac60a6d57d3922237ad2b8c8ffcbae4320c148ff0f683030964736f6c634300080e0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "",
  "devdoc": {
    "details": "The amount of RetirementEvents is denominated in the 18-decimal formGetters in this contract return the corresponding amount in tonnes or kilos",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "attachRetirementEvents(uint256,uint256[])": {
        "params": {
          "retirementEventIds": "An array of event ids to associate with the NFT.",
          "tokenId": "The id of the NFT to attach events to."
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getData(uint256)": {
        "params": {
          "tokenId": "The id of the NFT to get data for."
        }
      },
      "getRetiredAmount(uint256)": {
        "details": "The return amount is denominated in 18 decimals, similar to amounts as they are read in TCO2 contracts. For example, 1000000000000000000 means 1 tonne.",
        "params": {
          "tokenId": "The id of the NFT to update."
        },
        "returns": {
          "amount": "Total retired amount for an NFT."
        }
      },
      "getRetiredAmountInKilos(uint256)": {
        "params": {
          "tokenId": "The id of the NFT to update."
        },
        "returns": {
          "_0": "amount Total retired amount for an NFT in kilos."
        }
      },
      "getRetiredAmountInTonnes(uint256)": {
        "params": {
          "tokenId": "The id of the NFT to update."
        },
        "returns": {
          "_0": "amount Total retired amount for an NFT in tonnes."
        }
      },
      "getUserEvents(address)": {
        "params": {
          "user": "The user for whom to fetch all events."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mintCertificate(address,string,address,string,string,uint256[])": {
        "details": "The function can either be called by a valid TCO2 contract or by someone who         owns retirement events.",
        "params": {
          "beneficiary": "The beneficiary address for whom the TCO2 amount was retired.",
          "beneficiaryString": "An identifiable string for the beneficiary, eg. their name.",
          "retirementEventIds": "An array of event ids to associate with the NFT.",
          "retirementMessage": "A message to accompany the retirement.",
          "retiringEntity": "The entity that has retired TCO2 and is eligible to mint an NFT.",
          "retiringEntityString": "An identifiable string for the retiring entity, eg. their name."
        },
        "returns": {
          "_0": "The token id of the newly minted NFT."
        }
      },
      "mintCertificateWithExtraData(address,(uint256[],uint256,string,address,string,string,string,string,uint256,uint256),uint256[])": {
        "details": "The function can either be called by a valid TCO2 contract or by someone who         owns retirement events.",
        "params": {
          "params": "Retirement params",
          "retirementEventIds": "An array of event ids to associate with the NFT.",
          "retiringEntity": "The entity that has retired TCO2 and is eligible to mint an NFT."
        },
        "returns": {
          "_0": "The token id of the newly minted NFT."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "registerEvent(address,uint256,uint256,bool)": {
        "details": "The function can either be only called by a valid TCO2 contract.",
        "params": {
          "amount": "The amount of the TCO2 that is retired.",
          "isLegacy": "Whether this event registration was executed by using the legacy retired amount in the TCO2 contract or utilizes the new retirement event design.",
          "projectVintageTokenId": "The vintage id of the TCO2 that is retired.",
          "retiringEntity": "The entity that has retired TCO2 and is eligible to mint an NFT."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token. based on the ERC721URIStorage implementation",
        "params": {
          "tokenId": "The id of the NFT to get the URI."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCertificate(uint256,string,address,string,string)": {
        "params": {
          "beneficiary": "The new beneficiary to set in the NFT.",
          "beneficiaryString": "An identifiable string for the beneficiary, eg. their name.",
          "retirementMessage": "The new retirementMessage to set in the NFT.",
          "retiringEntityString": "An identifiable string for the retiring entity, eg. their name.",
          "tokenId": "The id of the NFT to update."
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "VERSION": {
        "details": "Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment."
      },
      "tonneDenomination": {
        "details": "dividers to round carbon in human-readable denominations"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "attachRetirementEvents(uint256,uint256[])": {
        "notice": "Attach retirement events to an NFT."
      },
      "getData(uint256)": {
        "notice": "Get certificate data for an NFT."
      },
      "getRetiredAmount(uint256)": {
        "notice": "Get total retired amount for an NFT."
      },
      "getRetiredAmountInKilos(uint256)": {
        "notice": "Get total retired amount for an NFT in kilos."
      },
      "getRetiredAmountInTonnes(uint256)": {
        "notice": "Get total retired amount for an NFT in tonnes."
      },
      "getUserEvents(address)": {
        "notice": "Get all events for a user."
      },
      "mintCertificate(address,string,address,string,string,uint256[])": {
        "notice": "Mint new Retirement Certificate NFT that shows how many TCO2s have been retired."
      },
      "mintCertificateWithExtraData(address,(uint256[],uint256,string,address,string,string,string,string,uint256,uint256),uint256[])": {
        "notice": "Mint new Retirement Certificate NFT that shows how many TCO2s have been retired."
      },
      "registerEvent(address,uint256,uint256,bool)": {
        "notice": "Register retirement events. This function can only be called by a TC02 contract to register retirement events so they can be directly linked to an NFT mint."
      },
      "updateCertificate(uint256,string,address,string,string)": {
        "notice": "Update retirementMessage, beneficiary, and beneficiaryString of a NFT within 24h of creation. Empty values are ignored, ie., will not overwrite the existing stored values in the NFT."
      }
    },
    "notice": "The `RetirementCertificates` contract lets users mint NFTs that act as proof-of-retirement. These Retirement Certificate NFTs display how many TCO2s a user has burnt",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1489,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1492,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4593,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4900,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2897,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 2899,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 2903,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2907,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2911,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2917,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3758,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 980,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 1092,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1471,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1759,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11129,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "retireEventCounter",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 11135,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "retirements",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_uint256,t_struct(RetirementEvent)11126_storage)"
      },
      {
        "astId": 11140,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "claimedEvents",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 11146,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "eventsOfUser",
        "offset": 0,
        "slot": "304",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 11148,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "baseURI",
        "offset": 0,
        "slot": "305",
        "type": "t_string_storage"
      },
      {
        "astId": 11150,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "contractRegistry",
        "offset": 0,
        "slot": "306",
        "type": "t_address"
      },
      {
        "astId": 11152,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 11157,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "certificates",
        "offset": 0,
        "slot": "308",
        "type": "t_mapping(t_uint256,t_struct(Data)11116_storage)"
      },
      {
        "astId": 11159,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "minValidRetirementAmount",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 1885,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "_status",
        "offset": 0,
        "slot": "310",
        "type": "t_uint256"
      },
      {
        "astId": 1929,
        "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
        "label": "__gap",
        "offset": 0,
        "slot": "311",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Data)11116_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RetirementCertificatesStorageV1.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)11116_storage"
      },
      "t_mapping(t_uint256,t_struct(RetirementEvent)11126_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RetirementCertificatesStorageV1.RetirementEvent)",
        "numberOfBytes": "32",
        "value": "t_struct(RetirementEvent)11126_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Data)11116_storage": {
        "encoding": "inplace",
        "label": "struct RetirementCertificatesStorageV1.Data",
        "members": [
          {
            "astId": 11095,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "retirementEventIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 11097,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "createdAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11099,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "retiringEntity",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 11101,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "beneficiary",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11103,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "retiringEntityString",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 11105,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "beneficiaryString",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 11107,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "retirementMessage",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 11109,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "beneficiaryLocation",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 11111,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "consumptionCountryCode",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 11113,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "consumptionPeriodStart",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 11115,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "consumptionPeriodEnd",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(RetirementEvent)11126_storage": {
        "encoding": "inplace",
        "label": "struct RetirementCertificatesStorageV1.RetirementEvent",
        "members": [
          {
            "astId": 11118,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "createdAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11120,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "retiringEntity",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11123,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11125,
            "contract": "contracts/RetirementCertificates.sol:RetirementCertificates",
            "label": "projectVintageTokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}