{
  "address": "0xCA734327315cB3BCAB16212C2b6eD7AFc58Db579",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DetokenizationFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "batchIds",
          "type": "uint256[]"
        }
      ],
      "name": "DetokenizationRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "DetokenizationReverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "FeeBurnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bridger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "name": "FeePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "Retired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RetirementFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "retiringEntityString",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "beneficiaryString",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "retirementMessage",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "beneficiaryLocation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumptionCountryCode",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodEnd",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct CreateRetirementRequestParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "RetirementRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RetirementReverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DETOKENIZER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RETIREMENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKENIZER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_RELEASE_CANDIDATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "bridgeBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "bridgeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "defractionalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "finalizeDetokenization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "finalizeRetirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAttributes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "projectId",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "standard",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "methodology",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "region",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "storageMethod",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "method",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "emissionType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct ProjectData",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "projectTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "totalVintageQuantity",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "isCorsiaCompliant",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCCPcompliant",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "coBenefits",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "correspAdjustment",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "additionalCertification",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "registry",
              "type": "string"
            }
          ],
          "internalType": "struct VintageData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalProjectVintageIdentifiers",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVintageData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "startTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTime",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "projectTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "totalVintageQuantity",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "isCorsiaCompliant",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCCPcompliant",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "coBenefits",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "correspAdjustment",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "additionalCertification",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "registry",
              "type": "string"
            }
          ],
          "internalType": "struct VintageData",
          "name": "vintageData",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "projectVintageTokenId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contractRegistry_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minterToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectVintageTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "requestDetokenization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "retiringEntityString",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "beneficiaryString",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "retirementMessage",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "beneficiaryLocation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumptionCountryCode",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodEnd",
              "type": "uint256"
            }
          ],
          "internalType": "struct CreateRetirementRequestParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "requestRetirement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "retiringEntity",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "retiringEntityString",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "beneficiaryString",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "retirementMessage",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "beneficiaryLocation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "consumptionCountryCode",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "consumptionPeriodEnd",
              "type": "uint256"
            }
          ],
          "internalType": "struct CreateRetirementRequestParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "retireAndMintCertificateForEntity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "revertDetokenization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "revertRetirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "standardRegistry",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "standardRegistryDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "db59f6786687067a0d1a67c2b75792f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DetokenizationFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"batchIds\",\"type\":\"uint256[]\"}],\"name\":\"DetokenizationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"DetokenizationReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"FeeBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bridger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"FeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"Retired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RetirementFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"retiringEntityString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"retirementMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumptionCountryCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodEnd\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CreateRetirementRequestParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"RetirementRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RetirementReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DETOKENIZER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETIREMENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKENIZER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_RELEASE_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bridgeBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bridgeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"defractionalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"finalizeDetokenization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"finalizeRetirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAttributes\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"projectId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"standard\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"methodology\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"region\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"storageMethod\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"emissionType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"internalType\":\"struct ProjectData\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"projectTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"totalVintageQuantity\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isCorsiaCompliant\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCCPcompliant\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"coBenefits\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"correspAdjustment\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"additionalCertification\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"registry\",\"type\":\"string\"}],\"internalType\":\"struct VintageData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalProjectVintageIdentifiers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVintageData\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"projectTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"totalVintageQuantity\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isCorsiaCompliant\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCCPcompliant\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"coBenefits\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"correspAdjustment\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"additionalCertification\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"registry\",\"type\":\"string\"}],\"internalType\":\"struct VintageData\",\"name\":\"vintageData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"projectVintageTokenId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractRegistry_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minterToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectVintageTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestDetokenization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"retiringEntityString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"retirementMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumptionCountryCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateRetirementRequestParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"requestRetirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"retiringEntity\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"retiringEntityString\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"beneficiaryString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"retirementMessage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"beneficiaryLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consumptionCountryCode\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"consumptionPeriodEnd\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateRetirementRequestParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"retireAndMintCertificateForEntity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"revertDetokenization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"revertRetirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardRegistry\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"standardRegistryDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"bridgeBurn(address,uint256)\":{\"params\":{\"account\":\"The user for whom to burn TCO2\",\"amount\":\"The amount to burn.\"}},\"bridgeMint(address,uint256)\":{\"params\":{\"account\":\"The user for whom to mint TCO2\",\"amount\":\"The amount to mint.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"account\":\"The user for whom to burn TCO2\",\"amount\":\"The amount to burn\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"defractionalize(uint256)\":{\"params\":{\"tokenId\":\"The batch NFT to defractionalize from the TCO2\"}},\"finalizeDetokenization(uint256)\":{\"details\":\"Callable only by a detokenizer.\",\"params\":{\"requestId\":\"The id of the request to finalize.\"}},\"finalizeRetirement(uint256)\":{\"details\":\"Callable only by a retirement approver.\",\"params\":{\"requestId\":\"The ID of the request to finalize.\"}},\"getAttributes()\":{\"details\":\"Function to get corresponding attributes from the CarbonProjects\"},\"getDepositCap()\":{\"details\":\"Returns the cap for TCO2s based on `totalVintageQuantity` Returns `~unlimited` if the value for the vintage is not set\"},\"getGlobalProjectVintageIdentifiers()\":{\"details\":\"Helper function to retrieve data fragments for `name()` and `symbol()`\"},\"getRemaining()\":{\"details\":\"Returns the remaining space in TCO2 contract before hitting the cap\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Function is called with `operator` as `msg.sender` in a reference implementation by OZ `from` is the previous owner, not necessarily the same as operator. The hook checks if NFT collection is whitelisted and next if attributes are matching this ERC20 contract\"},\"requestDetokenization(uint256[],uint256)\":{\"details\":\"This function is permissionless and can be called by anyone\",\"params\":{\"amount\":\"The amount of TCO2 to detokenize, must be greater than zero and equal to or smaller than the total amount of the batches (and also greater then the total amount of all the batches except the last one)\",\"tokenIds\":\"Token IDs of one or more batches to detokenize\"},\"returns\":{\"requestId\":\"The ID of the request in the escrow contract\"}},\"requestRetirement((uint256[],uint256,string,address,string,string,string,string,uint256,uint256))\":{\"details\":\"This function is permissionless and can be called by anyone\",\"params\":{\"params\":\"The parameters of the retirement request:     uint256[] tokenIds One or more batches to retire     uint256 amount The amount of TCO2 to retire, must be greater than zero and equal to or smaller than the total amount of the batches (and also greater then the total amount of all the batches except the last one)     string retiringEntityString The name of the retiring entity     address beneficiary The address of the beneficiary of the retirement     string beneficiaryString The name of the beneficiary of the retirement     string retirementMessage A message to be included in the retirement certificate     string beneficiaryLocation The location of the beneficiary of the retirement     string consumptionCountryCode The country code of the consumption location     uint256 consumptionPeriodStart The start of the consumption period, in seconds since the epoch     uint256 consumptionPeriodEnd The end of the consumption period, in seconds since the epoch\"},\"returns\":{\"requestId\":\"The ID of the request in the escrow contract\"}},\"revertDetokenization(uint256)\":{\"params\":{\"requestId\":\"The request id in the escrow contract that tracks the detokenization request\"}},\"revertRetirement(uint256)\":{\"params\":{\"requestId\":\"The request id in the escrow contract that tracks the retirement request\"}},\"standardRegistry()\":{\"details\":\"this must be overridden in the child contract\"},\"standardRegistryDecimals()\":{\"details\":\"this must be overridden in the child contract\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"}},\"stateVariables\":{\"VERSION\":{\"details\":\"Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bridgeBurn(address,uint256)\":{\"notice\":\"Burn TCO2 on behalf of a user. msg.sender does not require approval by the account for the burn to be successfull. This function is exposed so it can be utilized in cross-chain transfers of TCO2 where we want to burn the TCO2 in the source chain but not retire it.\"},\"bridgeMint(address,uint256)\":{\"notice\":\"Mint TCO2 on behalf of a user. This function is exposed to be called by authorized message bridge systems and utilized for cross-chain transfers of TCO2 where we want to mint the TCO2 in the source chain.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn TCO2 on behalf of a user. msg.sender needs to be approved by the account for the burn to be successfull. This function is exposed so it can be utilized to burn credits without retiring them (eg. dispose HFC-23).\"},\"defractionalize(uint256)\":{\"notice\":\"Defractionalize batch NFT by burning the amount of TCO2 from the sender and transfer the batch NFT that was selected to the sender. The only valid sender currently is the TCO2 factory owner.\"},\"finalizeDetokenization(uint256)\":{\"notice\":\"Finalize a detokenization request by burning its amount of TCO2. In case the amount requested is smaller than the total amount of TCO2 in the batches, the last batch is split into two new batches, one that balances the total to be the amount requested and the other with the remaining amount.\"},\"finalizeRetirement(uint256)\":{\"notice\":\"Finalize a retirement request by burning its amount of TCO2 and minting a certificate for the beneficiary. In case the amount requested is smaller than the total amount of TCO2 in the batches, the last batch is split into two new batches, one that balances the total to be the amount requested and the other with the remaining amount.\"},\"name()\":{\"notice\":\"Token name getter overriden to return the a name based on the carbon project data\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Receive hook to fractionalize Batch-NFTs into ERC20's\"},\"requestDetokenization(uint256[],uint256)\":{\"notice\":\"Request a detokenization of batch-NFTs. The amount of TCO2 to detokenize will be transferred from the user to an escrow contract.\"},\"requestRetirement((uint256[],uint256,string,address,string,string,string,string,uint256,uint256))\":{\"notice\":\"Request a retirement of TCO2s from batch-NFTs. The amount of TCO2s to retire will be transferred from the user to an escrow contract.\"},\"revertDetokenization(uint256)\":{\"notice\":\"Revert a detokenization request\"},\"revertRetirement(uint256)\":{\"notice\":\"Revert a retirement request\"},\"standardRegistry()\":{\"notice\":\"Return the name of the registry that this factory is enabling to tokenize, eg., verra\"},\"standardRegistryDecimals()\":{\"notice\":\"Return the minimum precision supported by the registry\"},\"symbol()\":{\"notice\":\"Token symbol getter overriden to return the a symbol based on the carbon project data\"}},\"notice\":\"The PuroToucanCarbonOffsets contract is a specific implementation for Puro's logic.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PuroToucanCarbonOffsets.sol\":\"PuroToucanCarbonOffsets\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CarbonOffsetBatchesTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nenum BatchStatus {\\n    Pending, // 0\\n    Rejected, // 1\\n    Confirmed, // 2\\n    DetokenizationRequested, // 3\\n    DetokenizationFinalized, // 4\\n    RetirementRequested, // 5\\n    RetirementFinalized // 6\\n}\\n\",\"keccak256\":\"0x7f4b7befeec038eb14e3bf1c13bb80be32c5a653a363b0244ba2d420ff72a94d\",\"license\":\"UNLICENSED\"},\"contracts/CarbonProjectTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\n/// @dev CarbonProject related data and attributes\\nstruct ProjectData {\\n    string projectId;\\n    string standard;\\n    string methodology;\\n    string region;\\n    string storageMethod;\\n    string method;\\n    string emissionType;\\n    string category;\\n    string uri;\\n    address beneficiary;\\n}\\n\",\"keccak256\":\"0x01ef59ad96e26a2ab791ba600413c5a4bde90c66535b30f322a1a01407be6879\",\"license\":\"UNLICENSED\"},\"contracts/CarbonProjectVintageTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct VintageData {\\n    /// @dev A human-readable string which differentiates this from other vintages in\\n    /// the same project, and helps build the corresponding TCO2 name and symbol.\\n    string name;\\n    uint64 startTime; // UNIX timestamp\\n    uint64 endTime; // UNIX timestamp\\n    uint256 projectTokenId;\\n    uint64 totalVintageQuantity;\\n    bool isCorsiaCompliant;\\n    bool isCCPcompliant;\\n    string coBenefits;\\n    string correspAdjustment;\\n    string additionalCertification;\\n    string uri;\\n    string registry;\\n}\\n\",\"keccak256\":\"0x5be4a7578aa12ae4d9e06e53672c46198c5c0c524065cec87fbc8cb1826619f6\",\"license\":\"UNLICENSED\"},\"contracts/PuroToucanCarbonOffsets.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport './bases/ToucanCarbonOffsetsEscrowableWithBatchBase.sol';\\n\\n/// @notice The PuroToucanCarbonOffsets contract is a specific implementation for Puro's logic.\\ncontract PuroToucanCarbonOffsets is ToucanCarbonOffsetsEscrowableWithBatchBase {\\n    // ----------------------------------------\\n    //      Constants\\n    // ----------------------------------------\\n\\n    /// @dev Version-related parameters. VERSION keeps track of production\\n    /// releases. VERSION_RELEASE_CANDIDATE keeps track of iterations\\n    /// of a VERSION in our staging environment.\\n    string public constant VERSION = '1.3.0';\\n    uint256 public constant VERSION_RELEASE_CANDIDATE = 1;\\n\\n    // ----------------------------------------\\n    //       Upgradable related functions\\n    // ----------------------------------------\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint256 projectVintageTokenId_,\\n        address contractRegistry_\\n    ) external virtual initializer {\\n        __ERC20_init_unchained(name_, symbol_);\\n        _projectVintageTokenId = projectVintageTokenId_;\\n        contractRegistry = contractRegistry_;\\n    }\\n\\n    function standardRegistry() public pure override returns (string memory) {\\n        return 'puro';\\n    }\\n\\n    function standardRegistryDecimals() public pure override returns (uint8) {\\n        return 18;\\n    }\\n}\\n\",\"keccak256\":\"0x6cf39c9f3ff7dffe69dae50f03cf34ee50cc57b6e9701d2c8c94a30189d8fcdb\",\"license\":\"UNLICENSED\"},\"contracts/ToucanCarbonOffsetsEscrowTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nstruct DetokenizationRequest {\\n    address user;\\n    uint256 amount;\\n    RequestStatus status;\\n    // The request may optionally be associated with one or more batches.\\n    uint256[] batchTokenIds;\\n    uint256 projectVintageTokenId;\\n}\\n\\nstruct RetirementRequest {\\n    address user;\\n    uint256 amount;\\n    RequestStatus status;\\n    // The request may optionally be associated with one or more batches.\\n    // This may need to be limited to one batch for registries which don't\\n    // support atomic retirement of multiple batches in one go, since\\n    // retiring one batch at a time might create a situation where our\\n    // RetirementRequest is only partially fulfilled, and then we would be\\n    // stuck with no way forwards and no way to roll back.\\n    uint256[] batchTokenIds;\\n    // Optional\\n    string retiringEntityString;\\n    // Optional\\n    address beneficiary;\\n    // Optional\\n    string beneficiaryString;\\n    // Optional\\n    string retirementMessage;\\n    // Optional\\n    string beneficiaryLocation;\\n    // Optional\\n    string consumptionCountryCode;\\n    // Optional\\n    uint256 consumptionPeriodStart;\\n    // Optional\\n    uint256 consumptionPeriodEnd;\\n    uint256 projectVintageTokenId;\\n}\\n\\nenum RequestStatus {\\n    Pending,\\n    Finalized,\\n    Reverted\\n}\\n\",\"keccak256\":\"0x1f770f81cc66acad45c48c56036e8055d3b0c4579a16be46546c15e39c9e8c81\",\"license\":\"UNLICENSED\"},\"contracts/ToucanCarbonOffsetsStorage.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\n/// @dev Separate storage contract to improve upgrade safety\\nabstract contract ToucanCarbonOffsetsStorage {\\n    uint256 internal _projectVintageTokenId;\\n    address public contractRegistry;\\n\\n    mapping(address => uint256) public minterToId;\\n    /// @dev deprecated field; retirements are now tracked\\n    /// as events in the RetirementCertificatesStorage contract\\n    mapping(address => uint256) internal retiredAmount;\\n}\\n\",\"keccak256\":\"0xdc6b9ec5a29f8caa82d40c9c2821a05aa9bb85999c01e5352d5bce2378fa3808\",\"license\":\"UNLICENSED\"},\"contracts/bases/ToucanCarbonOffsetsBase.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\n\\nimport '../interfaces/ICarbonOffsetBatches.sol';\\nimport '../interfaces/ICarbonProjects.sol';\\nimport '../interfaces/ICarbonProjectVintages.sol';\\nimport '../interfaces/IPausable.sol';\\nimport '../interfaces/IRetirementCertificates.sol';\\nimport '../interfaces/IToucanCarbonOffsetsEscrow.sol';\\nimport '../interfaces/IToucanCarbonOffsetsFactory.sol';\\nimport '../interfaces/IToucanContractRegistry.sol';\\nimport '../ToucanCarbonOffsetsStorage.sol';\\nimport {BatchStatus} from '../CarbonOffsetBatchesTypes.sol';\\n\\n/// @notice Base contract for any specific contract implementation of the TCO2 tokens (ERC20)\\nabstract contract ToucanCarbonOffsetsBase is\\n    ERC20Upgradeable,\\n    ToucanCarbonOffsetsStorage\\n{\\n    // ----------------------------------------\\n    //              Constants\\n    // ----------------------------------------\\n\\n    /// @dev All roles related to accessing this contract\\n    bytes32 public constant DETOKENIZER_ROLE = keccak256('DETOKENIZER_ROLE');\\n    bytes32 public constant TOKENIZER_ROLE = keccak256('TOKENIZER_ROLE');\\n    bytes32 public constant RETIREMENT_ROLE = keccak256('RETIREMENT_ROLE');\\n\\n    // ----------------------------------------\\n    //      Events\\n    // ----------------------------------------\\n\\n    event FeePaid(address bridger, uint256 fees);\\n    event FeeBurnt(address bridger, uint256 fees);\\n    event Retired(address sender, uint256 amount, uint256 eventId);\\n\\n    // ----------------------------------------\\n    //              Modifiers\\n    // ----------------------------------------\\n\\n    /// @dev modifier checks whether the `ToucanCarbonOffsetsFactory` is paused\\n    /// Since TCO2 contracts are permissionless, pausing does not function individually\\n    modifier whenNotPaused() {\\n        address tco2Factory = IToucanContractRegistry(contractRegistry)\\n            .toucanCarbonOffsetsFactoryAddress(standardRegistry());\\n        bool _paused = IPausable(tco2Factory).paused();\\n        require(!_paused, 'Paused TCO2');\\n        _;\\n    }\\n\\n    modifier onlyBridges() {\\n        address tco2Factory = IToucanContractRegistry(contractRegistry)\\n            .toucanCarbonOffsetsFactoryAddress(standardRegistry());\\n        bool isAllowed = IToucanCarbonOffsetsFactory(tco2Factory)\\n            .allowedBridges(msg.sender);\\n        require(isAllowed, 'Not allowed');\\n        _;\\n    }\\n\\n    modifier onlyFactoryOwner() {\\n        address tco2Factory = IToucanContractRegistry(contractRegistry)\\n            .toucanCarbonOffsetsFactoryAddress(standardRegistry());\\n        address owner = IToucanCarbonOffsetsFactory(tco2Factory).owner();\\n        require(owner == msg.sender, 'Not factory owner');\\n        _;\\n    }\\n\\n    // Modifer that checks if the msg.sender has the required role\\n    modifier onlyWithRole(bytes32 role) {\\n        require(\\n            IToucanCarbonOffsetsFactory(\\n                IToucanContractRegistry(contractRegistry)\\n                    .toucanCarbonOffsetsFactoryAddress(standardRegistry())\\n            ).hasRole(role, msg.sender),\\n            'Invalid access'\\n        );\\n        _;\\n    }\\n\\n    // Modifier that checks if msg.sender is the escrow contract\\n    modifier onlyEscrow() {\\n        require(\\n            IToucanContractRegistry(contractRegistry)\\n                .toucanCarbonOffsetsEscrowAddress() == msg.sender,\\n            'Not escrow contract'\\n        );\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // ----------------------------------------\\n    //      Bridge-related functions\\n    // ----------------------------------------\\n\\n    /// @notice Burn TCO2 on behalf of a user. msg.sender does not require approval\\n    /// by the account for the burn to be successfull. This function is exposed so it\\n    /// can be utilized in cross-chain transfers of TCO2 where we want to burn the\\n    /// TCO2 in the source chain but not retire it.\\n    /// @param account The user for whom to burn TCO2\\n    /// @param amount The amount to burn.\\n    function bridgeBurn(address account, uint256 amount)\\n        external\\n        virtual\\n        whenNotPaused\\n        onlyBridges\\n    {\\n        _burn(account, amount);\\n    }\\n\\n    /// @notice Mint TCO2 on behalf of a user. This function is exposed to\\n    /// be called by authorized message bridge systems and utilized for\\n    /// cross-chain transfers of TCO2 where we want to mint the TCO2 in the\\n    /// source chain.\\n    /// @param account The user for whom to mint TCO2\\n    /// @param amount The amount to mint.\\n    function bridgeMint(address account, uint256 amount)\\n        external\\n        virtual\\n        whenNotPaused\\n        onlyBridges\\n    {\\n        _mint(account, amount);\\n    }\\n\\n    // ----------------------------------------\\n    //       Permissionless functions\\n    // ----------------------------------------\\n\\n    function projectVintageTokenId() external view returns (uint256) {\\n        return _projectVintageTokenId;\\n    }\\n\\n    /// @notice Token name getter overriden to return the a name based on the carbon project data\\n    //slither-disable-next-line external-function\\n    function name() public view virtual override returns (string memory) {\\n        string memory globalProjectId;\\n        string memory vintageName;\\n        (globalProjectId, vintageName) = getGlobalProjectVintageIdentifiers();\\n        return\\n            string.concat(\\n                'Toucan Protocol: TCO2-',\\n                globalProjectId,\\n                '-',\\n                vintageName\\n            );\\n    }\\n\\n    /// @notice Token symbol getter overriden to return the a symbol based on the carbon project data\\n    //slither-disable-next-line external-function\\n    function symbol() public view virtual override returns (string memory) {\\n        string memory globalProjectId;\\n        string memory vintageName;\\n        (globalProjectId, vintageName) = getGlobalProjectVintageIdentifiers();\\n        return string.concat('TCO2-', globalProjectId, '-', vintageName);\\n    }\\n\\n    /// @dev Helper function to retrieve data fragments for `name()` and `symbol()`\\n    function getGlobalProjectVintageIdentifiers()\\n        public\\n        view\\n        virtual\\n        returns (string memory, string memory)\\n    {\\n        ProjectData memory projectData;\\n        VintageData memory vintageData;\\n        (projectData, vintageData) = getAttributes();\\n        return (projectData.projectId, vintageData.name);\\n    }\\n\\n    /// @dev Function to get corresponding attributes from the CarbonProjects\\n    function getAttributes()\\n        public\\n        view\\n        virtual\\n        returns (ProjectData memory, VintageData memory)\\n    {\\n        address pc = IToucanContractRegistry(contractRegistry)\\n            .carbonProjectsAddress();\\n        address vc = IToucanContractRegistry(contractRegistry)\\n            .carbonProjectVintagesAddress();\\n\\n        VintageData memory vintageData = ICarbonProjectVintages(vc)\\n            .getProjectVintageDataByTokenId(_projectVintageTokenId);\\n        ProjectData memory projectData = ICarbonProjects(pc)\\n            .getProjectDataByTokenId(vintageData.projectTokenId);\\n\\n        return (projectData, vintageData);\\n    }\\n\\n    function getVintageData()\\n        external\\n        view\\n        virtual\\n        returns (VintageData memory vintageData)\\n    {\\n        address vc = IToucanContractRegistry(contractRegistry)\\n            .carbonProjectVintagesAddress();\\n\\n        vintageData = ICarbonProjectVintages(vc).getProjectVintageDataByTokenId(\\n                _projectVintageTokenId\\n            );\\n    }\\n\\n    /// @dev Returns the remaining space in TCO2 contract before hitting the cap\\n    function getRemaining() public view returns (uint256 remaining) {\\n        uint256 cap = getDepositCap();\\n        remaining = cap - totalSupply();\\n    }\\n\\n    /// @dev Returns the cap for TCO2s based on `totalVintageQuantity`\\n    /// Returns `~unlimited` if the value for the vintage is not set\\n    function getDepositCap() public view returns (uint256) {\\n        VintageData memory vintageData;\\n        (, vintageData) = getAttributes();\\n        uint64 totalVintageQuantity = vintageData.totalVintageQuantity;\\n\\n        ///@dev multipliying tonnes with decimals\\n        uint256 cap = totalVintageQuantity * 10**decimals();\\n\\n        /// @dev if totalVintageQuantity is not set (=0), remove cap\\n        if (cap == 0) return type(uint256).max;\\n\\n        return cap;\\n    }\\n\\n    /// @notice Burn TCO2 on behalf of a user. msg.sender needs to be approved by\\n    /// the account for the burn to be successfull. This function is exposed so it\\n    /// can be utilized to burn credits without retiring them (eg. dispose HFC-23).\\n    /// @param account The user for whom to burn TCO2\\n    /// @param amount The amount to burn\\n    function burnFrom(address account, uint256 amount)\\n        external\\n        virtual\\n        whenNotPaused\\n    {\\n        _spendAllowance(account, msg.sender, amount);\\n        _burn(account, amount);\\n    }\\n\\n    // @dev Internal function for the burning of TCO2 tokens\\n    // @dev retiringEntityAddress is a parameter to handle scenarios, when\\n    // retirements are performed from the escrow contract and the retiring entity\\n    // is different than the account.\\n    function _retire(\\n        address account,\\n        uint256 amount,\\n        address retiringEntityAddress\\n    ) internal virtual returns (uint256 retirementEventId) {\\n        _burn(account, amount);\\n\\n        // Register retirement event in the certificates contract\\n        address certAddr = IToucanContractRegistry(contractRegistry)\\n            .retirementCertificatesAddress();\\n        retirementEventId = IRetirementCertificates(certAddr).registerEvent(\\n            retiringEntityAddress,\\n            _projectVintageTokenId,\\n            amount,\\n            false\\n        );\\n\\n        emit Retired(retiringEntityAddress, amount, retirementEventId);\\n    }\\n\\n    // @dev Internal function retire and mint certificates\\n    function _retireAndMintCertificate(\\n        address retiringEntity,\\n        CreateRetirementRequestParams memory params\\n    ) internal virtual whenNotPaused {\\n        // Retire provided amount\\n        uint256 retirementEventId = _retire(\\n            msg.sender,\\n            params.amount,\\n            retiringEntity\\n        );\\n        uint256[] memory retirementEventIds = new uint256[](1);\\n        retirementEventIds[0] = retirementEventId;\\n\\n        //slither-disable-next-line unused-return\\n        IRetirementCertificates(\\n            IToucanContractRegistry(contractRegistry)\\n                .retirementCertificatesAddress()\\n        ).mintCertificateWithExtraData(\\n                retiringEntity,\\n                params,\\n                retirementEventIds\\n            );\\n    }\\n\\n    // -----------------------------\\n    //      Locked ERC20 safety\\n    // -----------------------------\\n\\n    /// @dev Modifier to disallowing sending tokens to either the 0-address\\n    /// or this contract itself\\n    modifier validDestination(address to) {\\n        require(to != address(0x0));\\n        require(to != address(this));\\n        _;\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        virtual\\n        override\\n        validDestination(recipient)\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        super.transfer(recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        public\\n        virtual\\n        override\\n        validDestination(recipient)\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        super.transferFrom(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /// @notice Return the name of the registry that this\\n    /// factory is enabling to tokenize, eg., verra\\n    /// @dev this must be overridden in the child contract\\n    function standardRegistry() public virtual returns (string memory) {}\\n\\n    /// @notice Return the minimum precision supported by the registry\\n    /// @dev this must be overridden in the child contract\\n    function standardRegistryDecimals() public virtual returns (uint8) {}\\n}\\n\",\"keccak256\":\"0xda3bc36cb7c530bf1fdf73a5b1398da21a63a87904b83d86b96a65b99d43de87\",\"license\":\"UNLICENSED\"},\"contracts/bases/ToucanCarbonOffsetsEscrowableWithBatchBase.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport './ToucanCarbonOffsetsWithBatchBase.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\n\\n/// @notice Base contract that can be reused between different TCO2\\n/// implementations that need to work with batch NFTs\\nabstract contract ToucanCarbonOffsetsEscrowableWithBatchBase is\\n    IERC721Receiver,\\n    ToucanCarbonOffsetsWithBatchBase\\n{\\n    // ----------------------------------------\\n    //       Events\\n    // ----------------------------------------\\n\\n    event DetokenizationRequested(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 indexed requestId,\\n        uint256[] batchIds\\n    );\\n    event DetokenizationReverted(uint256 indexed requestId);\\n    event DetokenizationFinalized(uint256 indexed requestId);\\n\\n    event RetirementRequested(\\n        address indexed user,\\n        uint256 indexed requestId,\\n        CreateRetirementRequestParams params\\n    );\\n    event RetirementReverted(uint256 indexed requestId);\\n    event RetirementFinalized(uint256 indexed requestId);\\n\\n    // ----------------------------------------\\n    //       Modifiers\\n    // ----------------------------------------\\n\\n    modifier nonFractional(uint256 amount) {\\n        uint256 maxPrecision = 10**standardRegistryDecimals();\\n        require(\\n            amount == (amount / maxPrecision) * maxPrecision,\\n            Errors.TCO2_INVALID_DECIMALS\\n        );\\n\\n        _;\\n    }\\n\\n    // ----------------------------------------\\n    //       Admin functions\\n    // ----------------------------------------\\n\\n    /// @notice Finalize a detokenization request by burning its amount of TCO2. In case the amount requested is\\n    /// smaller than the total amount of TCO2 in the batches, the last batch is split into two new batches, one that\\n    /// balances the total to be the amount requested and the other with the remaining amount.\\n    /// @dev Callable only by a detokenizer.\\n    /// @param requestId The id of the request to finalize.\\n    function finalizeDetokenization(uint256 requestId)\\n        external\\n        whenNotPaused\\n        onlyWithRole(DETOKENIZER_ROLE)\\n    {\\n        address escrow = IToucanContractRegistry(contractRegistry)\\n            .toucanCarbonOffsetsEscrowAddress();\\n\\n        // Finalize escrow request\\n        IToucanCarbonOffsetsEscrow(escrow).finalizeDetokenizationRequest(\\n            requestId\\n        );\\n\\n        emit DetokenizationFinalized(requestId);\\n    }\\n\\n    /// @notice Revert a detokenization request\\n    /// @param requestId The request id in the escrow contract that\\n    /// tracks the detokenization request\\n    function revertDetokenization(uint256 requestId)\\n        external\\n        whenNotPaused\\n        onlyWithRole(DETOKENIZER_ROLE)\\n    {\\n        address escrow = IToucanContractRegistry(contractRegistry)\\n            .toucanCarbonOffsetsEscrowAddress();\\n\\n        // Mark escrow request as reverted\\n        IToucanCarbonOffsetsEscrow(escrow).revertDetokenizationRequest(\\n            requestId\\n        );\\n\\n        emit DetokenizationReverted(requestId);\\n    }\\n\\n    /// @notice Finalize a retirement request by burning its amount of TCO2 and minting a certificate for the\\n    /// beneficiary. In case the amount requested is smaller than the total amount of TCO2 in the batches, the last\\n    /// batch is split into two new batches, one that balances the total to be the amount requested and the other with\\n    /// the remaining amount.\\n    /// @dev Callable only by a retirement approver.\\n    /// @param requestId The ID of the request to finalize.\\n    function finalizeRetirement(uint256 requestId)\\n        external\\n        whenNotPaused\\n        onlyWithRole(RETIREMENT_ROLE)\\n    {\\n        address escrow = IToucanContractRegistry(contractRegistry)\\n            .toucanCarbonOffsetsEscrowAddress();\\n\\n        // Finalize escrow request\\n        IToucanCarbonOffsetsEscrow(escrow).finalizeRetirementRequest(requestId);\\n\\n        emit RetirementFinalized(requestId);\\n    }\\n\\n    /// @notice Revert a retirement request\\n    /// @param requestId The request id in the escrow contract that\\n    /// tracks the retirement request\\n    function revertRetirement(uint256 requestId)\\n        external\\n        whenNotPaused\\n        onlyWithRole(RETIREMENT_ROLE)\\n    {\\n        address escrow = IToucanContractRegistry(contractRegistry)\\n            .toucanCarbonOffsetsEscrowAddress();\\n\\n        // Mark escrow request as reverted\\n        IToucanCarbonOffsetsEscrow(escrow).revertRetirementRequest(requestId);\\n\\n        emit RetirementReverted(requestId);\\n    }\\n\\n    // ----------------------------------------\\n    //       Permissionless functions\\n    // ----------------------------------------\\n\\n    /// @notice Request a detokenization of batch-NFTs. The amount of TCO2 to detokenize will be transferred from\\n    /// the user to an escrow contract.\\n    /// @dev This function is permissionless and can be called by anyone\\n    /// @param tokenIds Token IDs of one or more batches to detokenize\\n    /// @param amount The amount of TCO2 to detokenize, must be greater than zero and equal to or smaller than the\\n    /// total amount of the batches (and also greater then the total amount of all the batches except the last one)\\n    /// @return requestId The ID of the request in the escrow contract\\n    function requestDetokenization(uint256[] calldata tokenIds, uint256 amount)\\n        external\\n        nonFractional(amount)\\n        whenNotPaused\\n        returns (uint256 requestId)\\n    {\\n        address escrow = IToucanContractRegistry(contractRegistry)\\n            .toucanCarbonOffsetsEscrowAddress();\\n\\n        // Create escrow contract request, and transfer TCO2s from sender to escrow contract\\n        require(approve(escrow, amount), Errors.TCO2_APPROVAL_AMT_FAILED);\\n        requestId = IToucanCarbonOffsetsEscrow(escrow)\\n            .createDetokenizationRequest(_msgSender(), amount, tokenIds);\\n\\n        emit DetokenizationRequested(_msgSender(), amount, requestId, tokenIds);\\n    }\\n\\n    /// @notice Request a retirement of TCO2s from batch-NFTs. The amount of TCO2s to retire will be transferred\\n    /// from the user to an escrow contract.\\n    /// @dev This function is permissionless and can be called by anyone\\n    /// @param params The parameters of the retirement request:\\n    ///     uint256[] tokenIds One or more batches to retire\\n    ///     uint256 amount The amount of TCO2 to retire, must be greater than zero and equal to or smaller than the\\n    /// total amount of the batches (and also greater then the total amount of all the batches except the last one)\\n    ///     string retiringEntityString The name of the retiring entity\\n    ///     address beneficiary The address of the beneficiary of the retirement\\n    ///     string beneficiaryString The name of the beneficiary of the retirement\\n    ///     string retirementMessage A message to be included in the retirement certificate\\n    ///     string beneficiaryLocation The location of the beneficiary of the retirement\\n    ///     string consumptionCountryCode The country code of the consumption location\\n    ///     uint256 consumptionPeriodStart The start of the consumption period, in seconds since the epoch\\n    ///     uint256 consumptionPeriodEnd The end of the consumption period, in seconds since the epoch\\n    /// @return requestId The ID of the request in the escrow contract\\n    function requestRetirement(CreateRetirementRequestParams calldata params)\\n        external\\n        nonFractional(params.amount)\\n        whenNotPaused\\n        returns (uint256 requestId)\\n    {\\n        address escrow = IToucanContractRegistry(contractRegistry)\\n            .toucanCarbonOffsetsEscrowAddress();\\n\\n        // Create escrow contract request, and trasnfer TCO2s from sender to escrow contract\\n        require(\\n            approve(escrow, params.amount),\\n            Errors.TCO2_APPROVAL_AMT_FAILED\\n        );\\n        requestId = IToucanCarbonOffsetsEscrow(escrow).createRetirementRequest(\\n            _msgSender(),\\n            params\\n        );\\n\\n        emit RetirementRequested(_msgSender(), requestId, params);\\n    }\\n\\n    // ----------------------------------------\\n    //       Internal functions\\n    // ----------------------------------------\\n\\n    function retireAndMintCertificateForEntity(\\n        address retiringEntity,\\n        CreateRetirementRequestParams calldata params\\n    ) external virtual onlyEscrow {\\n        _retireAndMintCertificate(retiringEntity, params);\\n    }\\n}\\n\",\"keccak256\":\"0xaa0c680a029c614e7b5a0d52cb527555e6aa4a6f9ffd42b1c22e7b5821d1b61b\",\"license\":\"UNLICENSED\"},\"contracts/bases/ToucanCarbonOffsetsWithBatchBase.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport './ToucanCarbonOffsetsBase.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\n\\n/// @notice Base contract that can be reused between different TCO2\\n/// implementations that need to work with batch NFTs\\nabstract contract ToucanCarbonOffsetsWithBatchBase is\\n    IERC721Receiver,\\n    ToucanCarbonOffsetsBase\\n{\\n    // ----------------------------------------\\n    //       Admin functions\\n    // ----------------------------------------\\n\\n    /// @notice Defractionalize batch NFT by burning the amount\\n    /// of TCO2 from the sender and transfer the batch NFT that\\n    /// was selected to the sender.\\n    /// The only valid sender currently is the TCO2 factory owner.\\n    /// @param tokenId The batch NFT to defractionalize from the TCO2\\n    function defractionalize(uint256 tokenId)\\n        external\\n        whenNotPaused\\n        onlyFactoryOwner\\n    {\\n        address batchNFT = IToucanContractRegistry(contractRegistry)\\n            .carbonOffsetBatchesAddress();\\n\\n        // Fetch and burn amount of the NFT to be defractionalized\\n        (\\n            ,\\n            uint256 batchAmount,\\n            BatchStatus status\\n        ) = _getNormalizedDataFromBatch(batchNFT, tokenId);\\n        require(\\n            status == BatchStatus.Confirmed,\\n            Errors.TCO2_BATCH_NOT_CONFIRMED\\n        );\\n        _burn(msg.sender, batchAmount);\\n\\n        // Transfer batch NFT to sender\\n        IERC721(batchNFT).transferFrom(address(this), msg.sender, tokenId);\\n    }\\n\\n    /// @notice Receive hook to fractionalize Batch-NFTs into ERC20's\\n    /// @dev Function is called with `operator` as `msg.sender` in a reference implementation by OZ\\n    /// `from` is the previous owner, not necessarily the same as operator.\\n    /// The hook checks if NFT collection is whitelisted and next if attributes are matching this ERC20 contract\\n    function onERC721Received(\\n        address, /* operator */\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata /* data */\\n    ) external virtual override whenNotPaused returns (bytes4) {\\n        // msg.sender is the CarbonOffsetBatches contract\\n        require(\\n            checkWhiteListed(msg.sender),\\n            Errors.TCO2_BATCH_NOT_WHITELISTED\\n        );\\n\\n        (\\n            uint256 gotVintageTokenId,\\n            uint256 quantity,\\n            BatchStatus status\\n        ) = _getNormalizedDataFromBatch(msg.sender, tokenId);\\n        require(\\n            gotVintageTokenId == _projectVintageTokenId,\\n            Errors.TCO2_NON_MATCHING_NFT\\n        );\\n        // don't mint TCO2s for received batches that are in detokenization/retirement requested status\\n        if (\\n            status == BatchStatus.DetokenizationRequested ||\\n            status == BatchStatus.RetirementRequested\\n        ) return this.onERC721Received.selector;\\n        // mint TCO2s for received batches that are in confirmed status\\n        require(\\n            status == BatchStatus.Confirmed,\\n            Errors.TCO2_BATCH_NOT_CONFIRMED\\n        );\\n        require(getRemaining() >= quantity, Errors.TCO2_QTY_HIGHER);\\n\\n        minterToId[from] = tokenId;\\n        IToucanCarbonOffsetsFactory tco2Factory = IToucanCarbonOffsetsFactory(\\n            IToucanContractRegistry(contractRegistry)\\n                .toucanCarbonOffsetsFactoryAddress(standardRegistry())\\n        );\\n        address bridgeFeeReceiver = tco2Factory.bridgeFeeReceiverAddress();\\n\\n        if (bridgeFeeReceiver == address(0x0)) {\\n            // if no bridge fee receiver address is set, mint without fees\\n            _mint(from, quantity);\\n        } else {\\n            // calculate bridge fees\\n            (uint256 feeAmount, uint256 feeBurnAmount) = tco2Factory\\n                .getBridgeFeeAndBurnAmount(quantity);\\n            _mint(from, quantity - feeAmount);\\n            address bridgeFeeBurnAddress = tco2Factory.bridgeFeeBurnAddress();\\n            // we mint the burn fee to the bridge fee burn address so it can be retired later.\\n            // if there is no address configured we just mint the full amount to the bridge fee receiver.\\n            if (bridgeFeeBurnAddress != address(0x0) && feeBurnAmount > 0) {\\n                feeAmount -= feeBurnAmount;\\n                _mint(bridgeFeeReceiver, feeAmount);\\n                _mint(bridgeFeeBurnAddress, feeBurnAmount);\\n                emit FeePaid(from, feeAmount);\\n                emit FeeBurnt(from, feeBurnAmount);\\n            } else if (feeAmount > 0) {\\n                _mint(bridgeFeeReceiver, feeAmount);\\n                emit FeePaid(from, feeAmount);\\n            }\\n        }\\n\\n        return this.onERC721Received.selector;\\n    }\\n\\n    // ----------------------------------------\\n    //       Internal functions\\n    // ----------------------------------------\\n\\n    function _getNormalizedDataFromBatch(address cob, uint256 tokenId)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            BatchStatus\\n        )\\n    {\\n        (\\n            uint256 vintageTokenId,\\n            uint256 quantity,\\n            BatchStatus status\\n        ) = ICarbonOffsetBatches(cob).getBatchNFTData(tokenId);\\n        return (vintageTokenId, _batchAmountToTCO2Amount(quantity), status);\\n    }\\n\\n    function _batchAmountToTCO2Amount(uint256 batchAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return batchAmount * 10**decimals();\\n    }\\n\\n    /// @dev Internal helper to check if CarbonOffsetBatches is whitelisted (official)\\n    function checkWhiteListed(address collection)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        if (\\n            collection ==\\n            IToucanContractRegistry(contractRegistry)\\n                .carbonOffsetBatchesAddress()\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8c0e3ff119719c18dcb51fa637fdee7eb57cc043fb00f536c4825b94c715ac8e\",\"license\":\"UNLICENSED\"},\"contracts/bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\n\\npragma solidity 0.8.14;\\n\\nstruct CreateRetirementRequestParams {\\n    uint256[] tokenIds;\\n    uint256 amount;\\n    string retiringEntityString;\\n    address beneficiary;\\n    string beneficiaryString;\\n    string retirementMessage;\\n    string beneficiaryLocation;\\n    string consumptionCountryCode;\\n    uint256 consumptionPeriodStart;\\n    uint256 consumptionPeriodEnd;\\n}\\n\",\"keccak256\":\"0xc7702b775ffda42d217c4671b846d93f691f8271cae9537dbd2b15930dbe582e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ICarbonOffsetBatches.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {BatchStatus} from '../CarbonOffsetBatchesTypes.sol';\\n\\ninterface ICarbonOffsetBatches {\\n    function getConfirmationStatus(uint256 tokenId)\\n        external\\n        view\\n        returns (BatchStatus);\\n\\n    function getBatchNFTData(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            BatchStatus\\n        );\\n\\n    function getSerialNumber(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function setStatusForDetokenizationOrRetirement(\\n        uint256 tokenId,\\n        BatchStatus newStatus\\n    ) external;\\n\\n    function split(\\n        uint256 tokenId,\\n        string calldata tokenIdNewSerialNumber,\\n        string calldata newTokenIdSerialNumber,\\n        uint256 newTokenIdQuantity\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x194d2b91e3f0c730876cf247dbc126ecf0a414edf3ecb503150714bb5aeab4ff\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ICarbonProjectVintages.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\n\\nimport {VintageData} from '../CarbonProjectVintageTypes.sol';\\n\\ninterface ICarbonProjectVintages is IERC721Upgradeable {\\n    function addNewVintage(address to, VintageData memory _vintageData)\\n        external\\n        returns (uint256);\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function getProjectVintageDataByTokenId(uint256 tokenId)\\n        external\\n        view\\n        returns (VintageData memory);\\n}\\n\",\"keccak256\":\"0xcb387ad9f37bd7b4563ef8e9e13f17d3e5de06b11afcd8658707c242aab1bcc0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ICarbonProjects.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol';\\n\\nimport {ProjectData} from '../CarbonProjectTypes.sol';\\n\\ninterface ICarbonProjects is IERC721Upgradeable {\\n    function addNewProject(\\n        address to,\\n        string memory projectId,\\n        string memory standard,\\n        string memory methodology,\\n        string memory region,\\n        string memory storageMethod,\\n        string memory method,\\n        string memory emissionType,\\n        string memory category,\\n        string memory uri,\\n        address beneficiary\\n    ) external returns (uint256);\\n\\n    function isValidProjectTokenId(uint256 tokenId) external returns (bool);\\n\\n    function updateProjectId(uint256 tokenId, string calldata newProjectId)\\n        external;\\n\\n    function updateProjectIds(\\n        uint256[] calldata tokenIds,\\n        string[] calldata newProjectIds\\n    ) external;\\n\\n    function getProjectDataByTokenId(uint256 tokenId)\\n        external\\n        view\\n        returns (ProjectData memory);\\n}\\n\",\"keccak256\":\"0xe39c3506f281d4747af31f9957cda1337a9a75b4773feeee35afe56db5f6d5e6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPausable.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IPausable {\\n    function paused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x905979d2895b0fc4917054840429c6bbaff6082d9024d4d0889b46039db73748\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRetirementCertificates.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {CreateRetirementRequestParams} from '../bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol';\\n\\ninterface IRetirementCertificates {\\n    function mintCertificate(\\n        address retiringEntity,\\n        string calldata retiringEntityString,\\n        address beneficiary,\\n        string calldata beneficiaryString,\\n        string calldata retirementMessage,\\n        uint256[] calldata retirementEventIds\\n    ) external returns (uint256);\\n\\n    function mintCertificateWithExtraData(\\n        address retiringEntity,\\n        CreateRetirementRequestParams calldata params,\\n        uint256[] calldata retirementEventIds\\n    ) external returns (uint256);\\n\\n    function registerEvent(\\n        address retiringEntity,\\n        uint256 projectVintageTokenId,\\n        uint256 amount,\\n        bool isLegacy\\n    ) external returns (uint256 retireEventCounter);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeca6175dd3c3dd42b4a163e804b09ec10c55795ee109d25f07c6f07588066bd7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanCarbonOffsetsEscrow.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2023 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport {DetokenizationRequest, RetirementRequest, RequestStatus} from '../ToucanCarbonOffsetsEscrowTypes.sol';\\nimport {CreateRetirementRequestParams} from '../bases/ToucanCarbonOffsetsWithBatchBaseTypes.sol';\\n\\ninterface IToucanCarbonOffsetsEscrow {\\n    function createDetokenizationRequest(\\n        address user,\\n        uint256 amount,\\n        uint256[] calldata batchTokenIds\\n    ) external returns (uint256);\\n\\n    function createRetirementRequest(\\n        address user,\\n        CreateRetirementRequestParams calldata params\\n    ) external returns (uint256);\\n\\n    function finalizeDetokenizationRequest(uint256 requestId) external;\\n\\n    function finalizeRetirementRequest(uint256 requestId) external;\\n\\n    function revertDetokenizationRequest(uint256 requestId) external;\\n\\n    function revertRetirementRequest(uint256 requestId) external;\\n\\n    function detokenizationRequests(uint256 requestId)\\n        external\\n        view\\n        returns (DetokenizationRequest memory);\\n\\n    function retirementRequests(uint256 requestId)\\n        external\\n        view\\n        returns (RetirementRequest memory);\\n}\\n\",\"keccak256\":\"0x87eed188fdcf84aca841c3493eebaa61e41157ba0640fa00bbb87e7545c404fc\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanCarbonOffsetsFactory.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\n\\ninterface IToucanCarbonOffsetsFactory is IAccessControlUpgradeable {\\n    function bridgeFeeReceiverAddress()\\n        external\\n        view\\n        returns (address receiver);\\n\\n    function bridgeFeeBurnAddress() external view returns (address burner);\\n\\n    function getBridgeFeeAndBurnAmount(uint256 quantity)\\n        external\\n        view\\n        returns (uint256 feeAmount, uint256 burnAmount);\\n\\n    function allowedBridges(address user) external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function standardRegistry() external returns (string memory);\\n\\n    function pvIdtoERC20(uint256 pvId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x60b3e3d5487da43bfd95f07a4d152ed8333dcf5437d0f31778477179d7d38341\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IToucanContractRegistry.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\ninterface IToucanContractRegistry {\\n    function carbonOffsetBatchesAddress() external view returns (address);\\n\\n    function carbonProjectsAddress() external view returns (address);\\n\\n    function carbonProjectVintagesAddress() external view returns (address);\\n\\n    function toucanCarbonOffsetsFactoryAddress(string memory standardRegistry)\\n        external\\n        view\\n        returns (address);\\n\\n    function retirementCertificatesAddress() external view returns (address);\\n\\n    function toucanCarbonOffsetsEscrowAddress() external view returns (address);\\n\\n    function isValidERC20(address erc20) external view returns (bool);\\n\\n    function addERC20(address erc20, string memory standardRegistry) external;\\n}\\n\",\"keccak256\":\"0xccb58bbb200ab282120834e8eb9b7c41c776669dc4e6ac8440927ad2587d0d89\",\"license\":\"UNLICENSED\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2022 Toucan Labs\\n//\\n// SPDX-License-Identifier: UNLICENSED\\n\\n// If you encounter a vulnerability or an issue, please contact <security@toucan.earth> or visit security.toucan.earth\\npragma solidity 0.8.14;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts of the Toucan protocol\\n * @dev Inspired by the AAVE error library:\\n * https://github.com/aave/protocol-v2/blob/5df59ec74a0c635d877dc1c5ee4a165d41488352/contracts/protocol/libraries/helpers/Errors.sol\\n * Error messages prefix glossary:\\n *  - CP = CarbonPool\\n *  - COB = CarbonOffsetBatches\\n *  - TCO2 = TCO2\\n */\\nlibrary Errors {\\n    // User is not authorized\\n    string public constant CP_UNAUTHORIZED = '1';\\n    // Empty array provided as input\\n    string public constant CP_EMPTY_ARRAY = '2';\\n    // Pool is full of TCO2s\\n    string public constant CP_FULL_POOL = '3';\\n    // ERC20 is blocklisted in the pool. This error\\n    // is returned for TCO2s that have been blocklisted\\n    // like the HFC-23 project.\\n    string public constant CP_BLOCKLISTED = '4';\\n    // ERC20 is not allowlisted in the pool\\n    // This error is returned in case the ERC20 is\\n    // not a TCO2 in which case it has to be manually\\n    // allowlisted in order to be allowed in the pool.\\n    string public constant CP_NOT_ALLOWLISTED = '5';\\n    // Vintage start time of a TCO2 is too old\\n    string public constant CP_START_TIME_TOO_OLD = '6';\\n    string public constant CP_REGION_NOT_ACCEPTED = '7';\\n    string public constant CP_STANDARD_NOT_ACCEPTED = '8';\\n    string public constant CP_METHODOLOGY_NOT_ACCEPTED = '9';\\n    // Provided fee is invalid, not in a basis points format: [0,10000)\\n    string public constant CP_INVALID_FEE = '10';\\n    // Provided address needs to be non-zero\\n    string public constant CP_EMPTY_ADDRESS = '11';\\n    // Validation check to ensure array lengths match\\n    string public constant CP_LENGTH_MISMATCH = '12';\\n    // TCO2 not exempted from redeem fees\\n    string public constant CP_NOT_EXEMPTED = '13';\\n    // A contract has been paused\\n    string public constant CP_PAUSED_CONTRACT = '14';\\n    // Redemption has leftover unredeemed value\\n    string public constant CP_NON_ZERO_REMAINING = '15';\\n    // Redemption exceeds deposited TCO2 supply\\n    string public constant CP_EXCEEDS_TCO2_SUPPLY = '16';\\n    // User must be a router\\n    string public constant CP_ONLY_ROUTER = '17';\\n    // User must be the owner\\n    string public constant CP_ONLY_OWNER = '18';\\n    // Zero destination address is invalid for pool token transfers\\n    string public constant CP_INVALID_DESTINATION_ZERO = '19';\\n    // Self destination address is invalid for pool token transfers\\n    string public constant CP_INVALID_DESTINATION_SELF = '20';\\n    // Zero amount provided as an input (eg., in redemptions) in invalid\\n    string public constant CP_ZERO_AMOUNT = '21';\\n    // ERC20 is not eligible to be pooled\\n    string public constant CP_NOT_ELIGIBLE = '22';\\n    // Carbon registry is already supported in COB\\n    string public constant COB_ALREADY_SUPPORTED = '23';\\n    // The caller is not granted the VERIFIER_ROLE in COB\\n    string public constant COB_NOT_VERIFIER_OR_BATCH_OWNER = '24';\\n    // The caller does not own the provided batch\\n    string public constant COB_NOT_BATCH_OWNER = '25';\\n    // The owner of the batch is invalid (not a TCO2 contract)\\n    string public constant COB_INVALID_BATCH_OWNER = '26';\\n    // The batch is not in Confirmed status\\n    string public constant COB_NOT_CONFIRMED = '27';\\n    // The batch is not in a requested status (DetokenizationRequested or RetirementRequested)\\n    string public constant COB_NOT_REQUESTED_STATUS = '28';\\n    // The batch does not exist\\n    string public constant COB_NOT_EXISTS = '29';\\n    // The batch has an invalid status based on the action requested\\n    string public constant COB_INVALID_STATUS = '30';\\n    // The batch is missing an associated project vintage\\n    string public constant COB_MISSING_VINTAGE = '31';\\n    // The serial number in the batch is already approved\\n    string public constant COB_ALREADY_APPROVED = '32';\\n    // The batch is not in Pending status\\n    string public constant COB_NOT_PENDING = '33';\\n    // The batch is already fractionalized\\n    string public constant COB_ALREADY_FRACTIONALIZED = '34';\\n    // The batch is not in Rejected status\\n    string public constant COB_NOT_REJECTED = '35';\\n    // The project vintage is already set in the batch\\n    string public constant COB_VINTAGE_ALREADY_SET = '36';\\n    // The transfer is not approved\\n    string public constant COB_TRANSFER_NOT_APPROVED = '37';\\n    // The COB contract is paused\\n    string public constant COB_PAUSED_CONTRACT = '38';\\n    // The caller is invalid\\n    string public constant COB_INVALID_CALLER = '39';\\n    // The TCO2 for the batch is not found\\n    string public constant COB_TCO2_NOT_FOUND = '40';\\n    // The registry for the provided vintage is not supported\\n    string public constant COB_REGISTRY_NOT_SUPPORTED = '41';\\n    // No TCO2 was minted as part of tokenization\\n    string public constant COB_NO_TCO2_MINTED = '42';\\n    // Only mints are supported for the batch contract to receive an NFT\\n    string public constant COB_ONLY_MINTS = '43';\\n    // New batch status is invalid\\n    string public constant COB_INVALID_NEW_STATUS = '44';\\n    // The TCO2 batch amount is invalid\\n    string public constant TCO2_BATCH_AMT_INVALID = '45';\\n    // The TCO2 batch amount approval has failed\\n    string public constant TCO2_APPROVAL_AMT_FAILED = '46';\\n    // The TCO2 batch not confirmed\\n    string public constant TCO2_BATCH_NOT_CONFIRMED = '47';\\n    // The TCO2 batch not whitelisted\\n    string public constant TCO2_BATCH_NOT_WHITELISTED = '48';\\n    // The TCO2 is non matching NFT\\n    string public constant TCO2_NON_MATCHING_NFT = '49';\\n    // The TCO2 Quantity in batch is higher than total vintages\\n    string public constant TCO2_QTY_HIGHER = '50';\\n    // The fee to be charged is too high\\n    string public constant CP_FEE_TOO_HIGH = '51';\\n    // The max fee to be paid is invalid\\n    string public constant CP_INVALID_MAX_FEE = '52';\\n    // The pool feature is not supported\\n    string public constant CP_NOT_SUPPORTED = '53';\\n    // Used for instance to check for sub-tonnage retirement requests\\n    string public constant TCO2_INVALID_DECIMALS = '54';\\n    // The TCO2 Quantity in the batch is invalid\\n    string public constant COB_INVALID_QUANTITY = '55';\\n    // Splitting is required on detokenization/retirement finalization, but 2 new serial numbers\\n    // were not provided\\n    string public constant TCO2_MISSING_SERIALS = '56';\\n    // The score set for the ERC-1155 token in the pool is invalid\\n    string public constant INVALID_ERC1155_SCORE = '57';\\n    // The score of the ERC-1155 token in the pool is not set\\n    string public constant EMPTY_ERC155_SCORE = '58';\\n}\\n\",\"keccak256\":\"0x7a4f788f2fc3fe77b3d8820cb8c01af6a4e7ce5aacf9540857b27c15c2cfc680\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b62000152565b6200002e60ff62000031565b50565b60008054610100900460ff1615620000ca578160ff1660011480156200006a575062000068306200014360201b62002f851760201c565b155b620000c25760405162461bcd60e51b815260206004820152602e6024820152600080516020620052a883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001295760405162461bcd60e51b815260206004820152602e6024820152600080516020620052a883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000b9565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b61514680620001626000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c806374f4f5471161013b578063abf410e5116100b8578063e819426c1161007c578063e819426c14610521578063e9d5c8d514610529578063eca45d8214610549578063ed3468791461055c578063ffa1ad741461056f57600080fd5b8063abf410e5146104b5578063bd3a13f6146104e0578063c860c58c146104f3578063d6a022b814610506578063dd62ed3e1461050e57600080fd5b80638c2a993e116100ff5780638c2a993e1461046157806395d89b411461047457806396746d431461047c578063a457c2d71461048f578063a9059cbb146104a257600080fd5b806374f4f547146103ee5780637903c7d01461040157806379cc67901461041457806383f2fc3e1461042757806384d8b61a1461044e57600080fd5b80633633f35f116101c957806365ec18091161018d57806365ec1809146103195780636746e7be146103955780636ca0b0d7146103aa5780636d059f5a146103b257806370a08231146103c557600080fd5b80633633f35f14610328578063395093511461033d5780633c31175e146103505780635c6f3a901461035857806364c5a4031461037f57600080fd5b8063150b7a0211610210578063150b7a02146102bc578063152583de146102e857806318160ddd146102fe57806323b872dd14610306578063313ce5671461031957600080fd5b806301a598da146102425780630605a3341461025d57806306fdde0314610284578063095ea7b314610299575b600080fd5b61024a610593565b6040519081526020015b60405180910390f35b61024a7fe70d28ebd9d7d9a3dd77d46ae2481f301c80806f395b08de31d8e095b1c46cee81565b61028c6105ec565b6040516102549190613d09565b6102ac6102a7366004613d3f565b610627565b6040519015158152602001610254565b6102cf6102ca366004613d6b565b610641565b6040516001600160e01b03199091168152602001610254565b6102f0610c14565b604051610254929190613f35565b60355461024a565b6102ac61031436600461407d565b610e0d565b60405160128152602001610254565b610330610f50565b60405161025491906140be565b6102ac61034b366004613d3f565b611045565b61028c611067565b61024a7ffb7778e60e898528875e31f94e3a623d6302be2aa540c7a7f5ae26fe5ee2498d81565b610387611085565b6040516102549291906140d1565b6103a86103a336600461410f565b6110af565b005b61024a600181565b6103a86103c036600461415e565b61117e565b61024a6103d3366004614177565b6001600160a01b031660009081526033602052604090205490565b6103a86103fc366004613d3f565b61149f565b6103a861040f36600461415e565b6116d4565b6103a8610422366004613d3f565b611a4d565b61024a7ff70ccd5004a2a6f964f044c0095454c529799f8602238d52b5a197af351dd41981565b61024a61045c366004614194565b611b67565b6103a861046f366004613d3f565b611e44565b61028c612071565b6103a861048a36600461415e565b612096565b6102ac61049d366004613d3f565b6123b7565b6102ac6104b0366004613d3f565b61243d565b6066546104c8906001600160a01b031681565b6040516001600160a01b039091168152602001610254565b6103a86104ee3660046142df565b61257e565b6103a861050136600461415e565b612619565b61024a61293a565b61024a61051c36600461435e565b61295a565b60655461024a565b61024a610537366004614177565b60676020526000908152604090205481565b61024a610557366004614397565b612985565b6103a861056a36600461415e565b612c64565b61028c604051806040016040528060058152602001640312e332e360dc1b81525081565b600061059d613b3c565b6105a5610c14565b6080810151909250905060006105bd6012600a61450b565b6105d0906001600160401b03841661451a565b9050806000036105e557600019935050505090565b9392505050565b60608060606105f9611085565b60405191935091506106119083908390602001614539565b6040516020818303038152906040529250505090565b600033610635818585612f94565b60019150505b92915050565b60665460009081906001600160a01b03166391148b2761065f611067565b6040518263ffffffff1660e01b815260040161067b9190613d09565b602060405180830381865afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc91906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072291906145cf565b9050801561074b5760405162461bcd60e51b8152600401610742906145ea565b60405180910390fd5b610754336130b9565b60405180604001604052806002815260200161068760f31b8152509061078d5760405162461bcd60e51b81526004016107429190613d09565b50600080600061079d338a613154565b925092509250606554831460405180604001604052806002815260200161343960f01b815250906107e15760405162461bcd60e51b81526004016107429190613d09565b5060038160068111156107f6576107f661460f565b1480610813575060058160068111156108115761081161460f565b145b1561082b5750630a85bd0160e11b9450610c09915050565b600281600681111561083f5761083f61460f565b1460405180604001604052806002815260200161343760f01b815250906108795760405162461bcd60e51b81526004016107429190613d09565b508161088361293a565b101560405180604001604052806002815260200161035360f41b815250906108be5760405162461bcd60e51b81526004016107429190613d09565b506001600160a01b03808b1660009081526067602052604081208b90556066549091166391148b276108ee611067565b6040518263ffffffff1660e01b815260040161090a9190613d09565b602060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b91906145a2565b90506000816001600160a01b03166380e2d3f06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b191906145a2565b90506001600160a01b0381166109d0576109cb8c856131ec565b610bf9565b6040516379bcd2d160e11b81526004810185905260009081906001600160a01b0385169063f379a5a2906024016040805180830381865afa158015610a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d9190614625565b9092509050610a558e610a508489614649565b6131ec565b6000846001600160a01b031663581cd1106040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab991906145a2565b90506001600160a01b03811615801590610ad35750600082115b15610b9757610ae28284614649565b9250610aee84846131ec565b610af881836131ec565b7f075a2720282fdf622141dae0b048ef90a21a7e57c134c76912d19d006b3b3f6f8f84604051610b3d9291906001600160a01b03929092168252602082015260400190565b60405180910390a17fa2f0f5180dc62f2d34c8207f1d18178d31bd0de616f83636434ddf48de0ae6fa8f83604051610b8a9291906001600160a01b03929092168252602082015260400190565b60405180910390a1610bf5565b8215610bf557610ba784846131ec565b7f075a2720282fdf622141dae0b048ef90a21a7e57c134c76912d19d006b3b3f6f8f84604051610bec9291906001600160a01b03929092168252602082015260400190565b60405180910390a15b5050505b50630a85bd0160e11b9650505050505b505095945050505050565b610c1c613bbc565b610c24613b3c565b606654604080516301157a8360e01b815290516000926001600160a01b0316916301157a839160048083019260209291908290030181865afa158015610c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9291906145a2565b90506000606660009054906101000a90046001600160a01b03166001600160a01b031663a0af25606040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0d91906145a2565b90506000816001600160a01b03166315bbf0746065546040518263ffffffff1660e01b8152600401610d4191815260200190565b600060405180830381865afa158015610d5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8691908101906146bc565b90506000836001600160a01b03166347e3168683606001516040518263ffffffff1660e01b8152600401610dbc91815260200190565b600060405180830381865afa158015610dd9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e019190810190614846565b96919550909350505050565b6000826001600160a01b038116610e2357600080fd5b306001600160a01b03821603610e3857600080fd5b6066546000906001600160a01b03166391148b27610e54611067565b6040518263ffffffff1660e01b8152600401610e709190613d09565b602060405180830381865afa158015610e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb191906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1791906145cf565b90508015610f375760405162461bcd60e51b8152600401610742906145ea565b610f428787876132cb565b506001979650505050505050565b610f58613b3c565b60665460408051630505792b60e51b815290516000926001600160a01b03169163a0af25609160048083019260209291908290030181865afa158015610fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc691906145a2565b60655460405163056efc1d60e21b81529192506001600160a01b038316916315bbf07491610ffa9160040190815260200190565b600060405180830381865afa158015611017573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261103f91908101906146bc565b91505090565b600033610635818585611058838361295a565b61106291906149eb565b612f94565b6040805180820190915260048152637075726f60e01b602082015290565b606080611090613bbc565b611098613b3c565b6110a0610c14565b90519051909590945092505050565b60665460408051637394ca7160e11b8152905133926001600160a01b03169163e72994e29160048083019260209291908290030181865afa1580156110f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111c91906145a2565b6001600160a01b0316146111685760405162461bcd60e51b8152602060048201526013602482015272139bdd08195cd8dc9bddc818dbdb9d1c9858dd606a1b6044820152606401610742565b61117a8261117583614a82565b6132e4565b5050565b6066546000906001600160a01b03166391148b2761119a611067565b6040518263ffffffff1660e01b81526004016111b69190613d09565b602060405180830381865afa1580156111d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f791906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125d91906145cf565b9050801561127d5760405162461bcd60e51b8152600401610742906145ea565b6066547ffb7778e60e898528875e31f94e3a623d6302be2aa540c7a7f5ae26fe5ee2498d906001600160a01b03166391148b276112b8611067565b6040518263ffffffff1660e01b81526004016112d49190613d09565b602060405180830381865afa1580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131591906145a2565b604051632474521560e21b8152600481018390523360248201526001600160a01b0391909116906391d1485490604401602060405180830381865afa158015611362573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138691906145cf565b6113a25760405162461bcd60e51b815260040161074290614bb5565b60665460408051637394ca7160e11b815290516000926001600160a01b03169163e72994e29160048083019260209291908290030181865afa1580156113ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141091906145a2565b604051631d42b1bf60e31b8152600481018790529091506001600160a01b0382169063ea158df890602401600060405180830381600087803b15801561145557600080fd5b505af1158015611469573d6000803e3d6000fd5b50506040518792507f11824358702d89f2293e23da6c058c3c600cd7312e29fe855817f50b4ac2e95b9150600090a25050505050565b6066546000906001600160a01b03166391148b276114bb611067565b6040518263ffffffff1660e01b81526004016114d79190613d09565b602060405180830381865afa1580156114f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151891906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e91906145cf565b9050801561159e5760405162461bcd60e51b8152600401610742906145ea565b6066546000906001600160a01b03166391148b276115ba611067565b6040518263ffffffff1660e01b81526004016115d69190613d09565b602060405180830381865afa1580156115f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161791906145a2565b6040516311afe75f60e11b81523360048201529091506000906001600160a01b0383169063235fcebe90602401602060405180830381865afa158015611661573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168591906145cf565b9050806116c25760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b6044820152606401610742565b6116cc8686613520565b505050505050565b6066546000906001600160a01b03166391148b276116f0611067565b6040518263ffffffff1660e01b815260040161170c9190613d09565b602060405180830381865afa158015611729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174d91906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561178f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b391906145cf565b905080156117d35760405162461bcd60e51b8152600401610742906145ea565b6066546000906001600160a01b03166391148b276117ef611067565b6040518263ffffffff1660e01b815260040161180b9190613d09565b602060405180830381865afa158015611828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184c91906145a2565b90506000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561188e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b291906145a2565b90506001600160a01b03811633146119005760405162461bcd60e51b81526020600482015260116024820152702737ba103330b1ba37b93c9037bbb732b960791b6044820152606401610742565b60665460408051634be4e3dd60e01b815290516000926001600160a01b031691634be4e3dd9160048083019260209291908290030181865afa15801561194a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196e91906145a2565b905060008061197d8389613154565b9093509150600290508160068111156119985761199861460f565b1460405180604001604052806002815260200161343760f01b815250906119d25760405162461bcd60e51b81526004016107429190613d09565b506119dd3383613520565b6040516323b872dd60e01b8152306004820152336024820152604481018990526001600160a01b038416906323b872dd90606401600060405180830381600087803b158015611a2b57600080fd5b505af1158015611a3f573d6000803e3d6000fd5b505050505050505050505050565b6066546000906001600160a01b03166391148b27611a69611067565b6040518263ffffffff1660e01b8152600401611a859190613d09565b602060405180830381865afa158015611aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac691906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2c91906145cf565b90508015611b4c5760405162461bcd60e51b8152600401610742906145ea565b611b5784338561366b565b611b618484613520565b50505050565b6000602082013581611b7b6012600a61450b565b905080611b888184614bdd565b611b92919061451a565b8214604051806040016040528060028152602001610d4d60f21b81525090611bcd5760405162461bcd60e51b81526004016107429190613d09565b506066546000906001600160a01b03166391148b27611bea611067565b6040518263ffffffff1660e01b8152600401611c069190613d09565b602060405180830381865afa158015611c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4791906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cad91906145cf565b90508015611ccd5760405162461bcd60e51b8152600401610742906145ea565b60665460408051637394ca7160e11b815290516000926001600160a01b03169163e72994e29160048083019260209291908290030181865afa158015611d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3b91906145a2565b9050611d4b818860200135610627565b604051806040016040528060028152602001611a1b60f11b81525090611d845760405162461bcd60e51b81526004016107429190613d09565b50604051630aeb2d2360e41b81526001600160a01b0382169063aeb2d23090611db39033908b90600401614e0c565b6020604051808303816000875af1158015611dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df69190614e30565b955085336001600160a01b03167fab868181315a0726750cc674eb8fd78793b34ec9de4e55b2a811172dbe6450ce89604051611e329190614e49565b60405180910390a35050505050919050565b6066546000906001600160a01b03166391148b27611e60611067565b6040518263ffffffff1660e01b8152600401611e7c9190613d09565b602060405180830381865afa158015611e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebd91906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2391906145cf565b90508015611f435760405162461bcd60e51b8152600401610742906145ea565b6066546000906001600160a01b03166391148b27611f5f611067565b6040518263ffffffff1660e01b8152600401611f7b9190613d09565b602060405180830381865afa158015611f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbc91906145a2565b6040516311afe75f60e11b81523360048201529091506000906001600160a01b0383169063235fcebe90602401602060405180830381865afa158015612006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202a91906145cf565b9050806120675760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b6044820152606401610742565b6116cc86866131ec565b606080606061207e611085565b60405191935091506106119083908390602001614e5c565b6066546000906001600160a01b03166391148b276120b2611067565b6040518263ffffffff1660e01b81526004016120ce9190613d09565b602060405180830381865afa1580156120eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210f91906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612151573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217591906145cf565b905080156121955760405162461bcd60e51b8152600401610742906145ea565b6066547ffb7778e60e898528875e31f94e3a623d6302be2aa540c7a7f5ae26fe5ee2498d906001600160a01b03166391148b276121d0611067565b6040518263ffffffff1660e01b81526004016121ec9190613d09565b602060405180830381865afa158015612209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222d91906145a2565b604051632474521560e21b8152600481018390523360248201526001600160a01b0391909116906391d1485490604401602060405180830381865afa15801561227a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229e91906145cf565b6122ba5760405162461bcd60e51b815260040161074290614bb5565b60665460408051637394ca7160e11b815290516000926001600160a01b03169163e72994e29160048083019260209291908290030181865afa158015612304573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232891906145a2565b60405163075f2da360e51b8152600481018790529091506001600160a01b0382169063ebe5b46090602401600060405180830381600087803b15801561236d57600080fd5b505af1158015612381573d6000803e3d6000fd5b50506040518792507f57e4027df666ec477f55d7dd87fb5a098836de7eaf475ba43d684b5d438d238b9150600090a25050505050565b600033816123c5828661295a565b9050838110156124255760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610742565b6124328286868403612f94565b506001949350505050565b6000826001600160a01b03811661245357600080fd5b306001600160a01b0382160361246857600080fd5b6066546000906001600160a01b03166391148b27612484611067565b6040518263ffffffff1660e01b81526004016124a09190613d09565b602060405180830381865afa1580156124bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e191906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254791906145cf565b905080156125675760405162461bcd60e51b8152600401610742906145ea565b61257186866136df565b5060019695505050505050565b600061258a60016136ed565b905080156125a2576000805461ff0019166101001790555b6125ac858561376d565b6065839055606680546001600160a01b0319166001600160a01b0384161790558015612612576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6066546000906001600160a01b03166391148b27612635611067565b6040518263ffffffff1660e01b81526004016126519190613d09565b602060405180830381865afa15801561266e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269291906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f891906145cf565b905080156127185760405162461bcd60e51b8152600401610742906145ea565b6066547ff70ccd5004a2a6f964f044c0095454c529799f8602238d52b5a197af351dd419906001600160a01b03166391148b27612753611067565b6040518263ffffffff1660e01b815260040161276f9190613d09565b602060405180830381865afa15801561278c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b091906145a2565b604051632474521560e21b8152600481018390523360248201526001600160a01b0391909116906391d1485490604401602060405180830381865afa1580156127fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282191906145cf565b61283d5760405162461bcd60e51b815260040161074290614bb5565b60665460408051637394ca7160e11b815290516000926001600160a01b03169163e72994e29160048083019260209291908290030181865afa158015612887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ab91906145a2565b6040516392ad01fd60e01b8152600481018790529091506001600160a01b038216906392ad01fd90602401600060405180830381600087803b1580156128f057600080fd5b505af1158015612904573d6000803e3d6000fd5b50506040518792507f8f7beb6efa236b725c90af1831975edbd62f2792f52fdb645ded13759232085d9150600090a25050505050565b600080612945610593565b905061295060355490565b61103f9082614649565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b600081816129956012600a61450b565b9050806129a28184614bdd565b6129ac919061451a565b8214604051806040016040528060028152602001610d4d60f21b815250906129e75760405162461bcd60e51b81526004016107429190613d09565b506066546000906001600160a01b03166391148b27612a04611067565b6040518263ffffffff1660e01b8152600401612a209190613d09565b602060405180830381865afa158015612a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6191906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac791906145cf565b90508015612ae75760405162461bcd60e51b8152600401610742906145ea565b60665460408051637394ca7160e11b815290516000926001600160a01b03169163e72994e29160048083019260209291908290030181865afa158015612b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5591906145a2565b9050612b618188610627565b604051806040016040528060028152602001611a1b60f11b81525090612b9a5760405162461bcd60e51b81526004016107429190613d09565b5060405163c346a8bf60e01b81526001600160a01b0382169063c346a8bf90612bcd9033908b908e908e90600401614ea9565b6020604051808303816000875af1158015612bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c109190614e30565b955085336001600160a01b03167f64abd27c2f173f29d68e3c4d0922caa80fe66344f802fd6a064cd9ae298db307898c8c604051612c5093929190614ed1565b60405180910390a350505050509392505050565b6066546000906001600160a01b03166391148b27612c80611067565b6040518263ffffffff1660e01b8152600401612c9c9190613d09565b602060405180830381865afa158015612cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdd91906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4391906145cf565b90508015612d635760405162461bcd60e51b8152600401610742906145ea565b6066547ff70ccd5004a2a6f964f044c0095454c529799f8602238d52b5a197af351dd419906001600160a01b03166391148b27612d9e611067565b6040518263ffffffff1660e01b8152600401612dba9190613d09565b602060405180830381865afa158015612dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfb91906145a2565b604051632474521560e21b8152600481018390523360248201526001600160a01b0391909116906391d1485490604401602060405180830381865afa158015612e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6c91906145cf565b612e885760405162461bcd60e51b815260040161074290614bb5565b60665460408051637394ca7160e11b815290516000926001600160a01b03169163e72994e29160048083019260209291908290030181865afa158015612ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef691906145a2565b6040516304314a1d60e51b8152600481018790529091506001600160a01b0382169063862943a090602401600060405180830381600087803b158015612f3b57600080fd5b505af1158015612f4f573d6000803e3d6000fd5b50506040518792507f8baa1509b9f6c83973f788904506386c5b2b93480f289aeafd9f43f9df1c94a89150600090a25050505050565b6001600160a01b03163b151590565b6001600160a01b038316612ff65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610742565b6001600160a01b0382166130575760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610742565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60665460408051634be4e3dd60e01b815290516000926001600160a01b031691634be4e3dd9160048083019260209291908290030181865afa158015613103573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312791906145a2565b6001600160a01b0316826001600160a01b03160361314757506001919050565b506000919050565b919050565b600080600080600080876001600160a01b031663dff35e83886040518263ffffffff1660e01b815260040161318b91815260200190565b606060405180830381865afa1580156131a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cc9190614eeb565b925092509250826131dc836137ff565b9096509450925050509250925092565b6001600160a01b0382166132425760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610742565b806035600082825461325491906149eb565b90915550506001600160a01b038216600090815260336020526040812080548392906132819084906149eb565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000336132d985828561366b565b612432858585613817565b6066546000906001600160a01b03166391148b27613300611067565b6040518263ffffffff1660e01b815260040161331c9190613d09565b602060405180830381865afa158015613339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335d91906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561339f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c391906145cf565b905080156133e35760405162461bcd60e51b8152600401610742906145ea565b60006133f4338560200151876139e5565b6040805160018082528183019092529192506000919060208083019080368337019050509050818160008151811061342e5761342e614f28565b60209081029190910181019190915260665460408051631bb5aee760e11b815290516001600160a01b039092169263376b5dce926004808401938290030181865afa158015613481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a591906145a2565b6001600160a01b031663cc91e5e98787846040518463ffffffff1660e01b81526004016134d493929190614f79565b6020604051808303816000875af11580156134f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135179190614e30565b50505050505050565b6001600160a01b0382166135805760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610742565b6001600160a01b038216600090815260336020526040902054818110156135f45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610742565b6001600160a01b0383166000908152603360205260408120838303905560358054849290613623908490614649565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016130ac565b505050565b6000613677848461295a565b90506000198114611b6157818110156136d25760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610742565b611b618484848403612f94565b600033610635818585613817565b60008054610100900460ff161561372c578160ff1660011480156137105750303b155b6131475760405162461bcd60e51b81526004016107429061508e565b60005460ff8084169116106137535760405162461bcd60e51b81526004016107429061508e565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166137d85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610742565b81516137eb906036906020850190613c18565b508051613666906037906020840190613c18565b600061380d6012600a61450b565b61063b908361451a565b6001600160a01b03831661387b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610742565b6001600160a01b0382166138dd5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610742565b6001600160a01b038316600090815260336020526040902054818110156139555760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610742565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061398c9084906149eb565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516139d891815260200190565b60405180910390a3611b61565b60006139f18484613520565b60665460408051631bb5aee760e11b815290516000926001600160a01b03169163376b5dce9160048083019260209291908290030181865afa158015613a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5f91906145a2565b6065546040516313ef24f760e11b81526001600160a01b038681166004830152602482019290925260448101879052600060648201529192508216906327de49ee906084016020604051808303816000875af1158015613ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ae79190614e30565b604080516001600160a01b0386168152602081018790529081018290529092507fb3775f672e1adf43bf7834b692675bfee4db72f83e42da8cff694ca295a89eca9060600160405180910390a1509392505050565b6040518061018001604052806060815260200160006001600160401b0316815260200160006001600160401b031681526020016000815260200160006001600160401b0316815260200160001515815260200160001515815260200160608152602001606081526020016060815260200160608152602001606081525090565b60405180610140016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160006001600160a01b031681525090565b828054613c24906150dc565b90600052602060002090601f016020900481019282613c465760008555613c8c565b82601f10613c5f57805160ff1916838001178555613c8c565b82800160010185558215613c8c579182015b82811115613c8c578251825591602001919060010190613c71565b50613c98929150613c9c565b5090565b5b80821115613c985760008155600101613c9d565b60005b83811015613ccc578181015183820152602001613cb4565b83811115611b615750506000910152565b60008151808452613cf5816020860160208601613cb1565b601f01601f19169290920160200192915050565b6020815260006105e56020830184613cdd565b6001600160a01b0381168114613d3157600080fd5b50565b803561314f81613d1c565b60008060408385031215613d5257600080fd5b8235613d5d81613d1c565b946020939093013593505050565b600080600080600060808688031215613d8357600080fd5b8535613d8e81613d1c565b94506020860135613d9e81613d1c565b93506040860135925060608601356001600160401b0380821115613dc157600080fd5b818801915088601f830112613dd557600080fd5b813581811115613de457600080fd5b896020828501011115613df657600080fd5b9699959850939650602001949392505050565b60006101808251818552613e1f82860182613cdd565b9150506020830151613e3c60208601826001600160401b03169052565b506040830151613e5760408601826001600160401b03169052565b50606083015160608501526080830151613e7c60808601826001600160401b03169052565b5060a0830151613e9060a086018215159052565b5060c0830151613ea460c086018215159052565b5060e083015184820360e0860152613ebc8282613cdd565b9150506101008084015185830382870152613ed78382613cdd565b925050506101208084015185830382870152613ef38382613cdd565b925050506101408084015185830382870152613f0f8382613cdd565b925050506101608084015185830382870152613f2b8382613cdd565b9695505050505050565b6040815260008351610140806040850152613f54610180850183613cdd565b91506020860151603f1980868503016060870152613f728483613cdd565b93506040880151915080868503016080870152613f8f8483613cdd565b935060608801519150808685030160a0870152613fac8483613cdd565b935060808801519150808685030160c0870152613fc98483613cdd565b935060a08801519150808685030160e0870152613fe68483613cdd565b935060c088015191506101008187860301818801526140058584613cdd565b945060e089015192506101208288870301818901526140248685613cdd565b9550818a0151935082888703018589015261403f8685613cdd565b9550808a01519450505050506140616101608501826001600160a01b03169052565b5082810360208401526140748185613e09565b95945050505050565b60008060006060848603121561409257600080fd5b833561409d81613d1c565b925060208401356140ad81613d1c565b929592945050506040919091013590565b6020815260006105e56020830184613e09565b6040815260006140e46040830185613cdd565b82810360208401526140748185613cdd565b6000610140828403121561410957600080fd5b50919050565b6000806040838503121561412257600080fd5b823561412d81613d1c565b915060208301356001600160401b0381111561414857600080fd5b614154858286016140f6565b9150509250929050565b60006020828403121561417057600080fd5b5035919050565b60006020828403121561418957600080fd5b81356105e581613d1c565b6000602082840312156141a657600080fd5b81356001600160401b038111156141bc57600080fd5b6141c8848285016140f6565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b0381118282101715614209576142096141d0565b60405290565b60405161014081016001600160401b0381118282101715614209576142096141d0565b604051601f8201601f191681016001600160401b038111828210171561425a5761425a6141d0565b604052919050565b60006001600160401b0382111561427b5761427b6141d0565b50601f01601f191660200190565b600082601f83011261429a57600080fd5b81356142ad6142a882614262565b614232565b8181528460208386010111156142c257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156142f557600080fd5b84356001600160401b038082111561430c57600080fd5b61431888838901614289565b9550602087013591508082111561432e57600080fd5b5061433b87828801614289565b93505060408501359150606085013561435381613d1c565b939692955090935050565b6000806040838503121561437157600080fd5b823561437c81613d1c565b9150602083013561438c81613d1c565b809150509250929050565b6000806000604084860312156143ac57600080fd5b83356001600160401b03808211156143c357600080fd5b818601915086601f8301126143d757600080fd5b8135818111156143e657600080fd5b8760208260051b85010111156143fb57600080fd5b6020928301989097509590910135949350505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561446257816000190482111561444857614448614411565b8085161561445557918102915b93841c939080029061442c565b509250929050565b6000826144795750600161063b565b816144865750600061063b565b816001811461449c57600281146144a6576144c2565b600191505061063b565b60ff8411156144b7576144b7614411565b50506001821b61063b565b5060208310610133831016604e8410600b84101617156144e5575081810a61063b565b6144ef8383614427565b806000190482111561450357614503614411565b029392505050565b60006105e560ff84168361446a565b600081600019048311821515161561453457614534614411565b500290565b75546f7563616e2050726f746f636f6c3a2054434f322d60501b81526000835161456a816016850160208801613cb1565b602d60f81b601691840191820152835161458b816017840160208801613cb1565b01601701949350505050565b805161314f81613d1c565b6000602082840312156145b457600080fd5b81516105e581613d1c565b8051801515811461314f57600080fd5b6000602082840312156145e157600080fd5b6105e5826145bf565b6020808252600b908201526a2830bab9b2b2102a21a79960a91b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b6000806040838503121561463857600080fd5b505080516020909101519092909150565b60008282101561465b5761465b614411565b500390565b600082601f83011261467157600080fd5b815161467f6142a882614262565b81815284602083860101111561469457600080fd5b6141c8826020830160208701613cb1565b80516001600160401b038116811461314f57600080fd5b6000602082840312156146ce57600080fd5b81516001600160401b03808211156146e557600080fd5b9083019061018082860312156146fa57600080fd5b6147026141e6565b82518281111561471157600080fd5b61471d87828601614660565b82525061472c602084016146a5565b602082015261473d604084016146a5565b604082015260608301516060820152614758608084016146a5565b608082015261476960a084016145bf565b60a082015261477a60c084016145bf565b60c082015260e08301518281111561479157600080fd5b61479d87828601614660565b60e08301525061010080840151838111156147b757600080fd5b6147c388828701614660565b82840152505061012080840151838111156147dd57600080fd5b6147e988828701614660565b828401525050610140808401518381111561480357600080fd5b61480f88828701614660565b828401525050610160808401518381111561482957600080fd5b61483588828701614660565b918301919091525095945050505050565b60006020828403121561485857600080fd5b81516001600160401b038082111561486f57600080fd5b90830190610140828603121561488457600080fd5b61488c61420f565b82518281111561489b57600080fd5b6148a787828601614660565b8252506020830151828111156148bc57600080fd5b6148c887828601614660565b6020830152506040830151828111156148e057600080fd5b6148ec87828601614660565b60408301525060608301518281111561490457600080fd5b61491087828601614660565b60608301525060808301518281111561492857600080fd5b61493487828601614660565b60808301525060a08301518281111561494c57600080fd5b61495887828601614660565b60a08301525060c08301518281111561497057600080fd5b61497c87828601614660565b60c08301525060e08301518281111561499457600080fd5b6149a087828601614660565b60e08301525061010080840151838111156149ba57600080fd5b6149c688828701614660565b82840152505061012091506149dc828401614597565b91810191909152949350505050565b600082198211156149fe576149fe614411565b500190565b600082601f830112614a1457600080fd5b813560206001600160401b03821115614a2f57614a2f6141d0565b8160051b614a3e828201614232565b9283528481018201928281019087851115614a5857600080fd5b83870192505b84831015614a7757823582529183019190830190614a5e565b979650505050505050565b60006101408236031215614a9557600080fd5b614a9d61420f565b82356001600160401b0380821115614ab457600080fd5b614ac036838701614a03565b8352602085013560208401526040850135915080821115614ae057600080fd5b614aec36838701614289565b6040840152614afd60608601613d34565b60608401526080850135915080821115614b1657600080fd5b614b2236838701614289565b608084015260a0850135915080821115614b3b57600080fd5b614b4736838701614289565b60a084015260c0850135915080821115614b6057600080fd5b614b6c36838701614289565b60c084015260e0850135915080821115614b8557600080fd5b50614b9236828601614289565b60e083015250610100838101359082015261012092830135928101929092525090565b6020808252600e908201526d496e76616c69642061636365737360901b604082015260600190565b600082614bfa57634e487b7160e01b600052601260045260246000fd5b500490565b6000808335601e19843603018112614c1657600080fd5b83016020810192503590506001600160401b03811115614c3557600080fd5b8060051b3603821315614c4757600080fd5b9250929050565b81835260006001600160fb1b03831115614c6757600080fd5b8260051b8083602087013760009401602001938452509192915050565b6000808335601e19843603018112614c9b57600080fd5b83016020810192503590506001600160401b03811115614cba57600080fd5b803603821315614c4757600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000610140614d018384614bff565b828652614d118387018284614c4e565b9250505060208301356020850152614d2c6040840184614c84565b8583036040870152614d3f838284614cc9565b92505050614d4f60608401613d34565b6001600160a01b03166060850152614d6a6080840184614c84565b8583036080870152614d7d838284614cc9565b92505050614d8e60a0840184614c84565b85830360a0870152614da1838284614cc9565b92505050614db260c0840184614c84565b85830360c0870152614dc5838284614cc9565b92505050614dd660e0840184614c84565b85830360e0870152614de9838284614cc9565b610100868101359088015261012095860135959096019490945250929392505050565b6001600160a01b03831681526040602082018190526000906141c890830184614cf2565b600060208284031215614e4257600080fd5b5051919050565b6020815260006105e56020830184614cf2565b6454434f322d60d81b815260008351614e7c816005850160208801613cb1565b602d60f81b6005918401918201528351614e9d816006840160208801613cb1565b01600601949350505050565b60018060a01b0385168152836020820152606060408201526000613f2b606083018486614c4e565b838152604060208201526000614074604083018486614c4e565b600080600060608486031215614f0057600080fd5b8351925060208401519150604084015160078110614f1d57600080fd5b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015614f6e57815187529582019590820190600101614f52565b509495945050505050565b60018060a01b03841681526060602082015260008351610140806060850152614fa66101a0850183614f3e565b9150602086015160808501526040860151605f19808685030160a0870152614fce8483613cdd565b935060608801519150614fec60c08701836001600160a01b03169052565b60808801519150808685030160e08701526150078483613cdd565b935060a088015191506101008187860301818801526150268584613cdd565b945060c089015192506101208288870301818901526150458685613cdd565b955060e08a015193508288870301858901526150618685613cdd565b9550818a0151610160890152808a015161018089015250505050508281036040840152613f2b8185614f3e565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600181811c908216806150f057607f821691505b60208210810361410957634e487b7160e01b600052602260045260246000fdfea26469706673582212205ba803f36362176c2e0547567b004bfef84dc90903214b9565f196862f77bff964736f6c634300080e0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c806374f4f5471161013b578063abf410e5116100b8578063e819426c1161007c578063e819426c14610521578063e9d5c8d514610529578063eca45d8214610549578063ed3468791461055c578063ffa1ad741461056f57600080fd5b8063abf410e5146104b5578063bd3a13f6146104e0578063c860c58c146104f3578063d6a022b814610506578063dd62ed3e1461050e57600080fd5b80638c2a993e116100ff5780638c2a993e1461046157806395d89b411461047457806396746d431461047c578063a457c2d71461048f578063a9059cbb146104a257600080fd5b806374f4f547146103ee5780637903c7d01461040157806379cc67901461041457806383f2fc3e1461042757806384d8b61a1461044e57600080fd5b80633633f35f116101c957806365ec18091161018d57806365ec1809146103195780636746e7be146103955780636ca0b0d7146103aa5780636d059f5a146103b257806370a08231146103c557600080fd5b80633633f35f14610328578063395093511461033d5780633c31175e146103505780635c6f3a901461035857806364c5a4031461037f57600080fd5b8063150b7a0211610210578063150b7a02146102bc578063152583de146102e857806318160ddd146102fe57806323b872dd14610306578063313ce5671461031957600080fd5b806301a598da146102425780630605a3341461025d57806306fdde0314610284578063095ea7b314610299575b600080fd5b61024a610593565b6040519081526020015b60405180910390f35b61024a7fe70d28ebd9d7d9a3dd77d46ae2481f301c80806f395b08de31d8e095b1c46cee81565b61028c6105ec565b6040516102549190613d09565b6102ac6102a7366004613d3f565b610627565b6040519015158152602001610254565b6102cf6102ca366004613d6b565b610641565b6040516001600160e01b03199091168152602001610254565b6102f0610c14565b604051610254929190613f35565b60355461024a565b6102ac61031436600461407d565b610e0d565b60405160128152602001610254565b610330610f50565b60405161025491906140be565b6102ac61034b366004613d3f565b611045565b61028c611067565b61024a7ffb7778e60e898528875e31f94e3a623d6302be2aa540c7a7f5ae26fe5ee2498d81565b610387611085565b6040516102549291906140d1565b6103a86103a336600461410f565b6110af565b005b61024a600181565b6103a86103c036600461415e565b61117e565b61024a6103d3366004614177565b6001600160a01b031660009081526033602052604090205490565b6103a86103fc366004613d3f565b61149f565b6103a861040f36600461415e565b6116d4565b6103a8610422366004613d3f565b611a4d565b61024a7ff70ccd5004a2a6f964f044c0095454c529799f8602238d52b5a197af351dd41981565b61024a61045c366004614194565b611b67565b6103a861046f366004613d3f565b611e44565b61028c612071565b6103a861048a36600461415e565b612096565b6102ac61049d366004613d3f565b6123b7565b6102ac6104b0366004613d3f565b61243d565b6066546104c8906001600160a01b031681565b6040516001600160a01b039091168152602001610254565b6103a86104ee3660046142df565b61257e565b6103a861050136600461415e565b612619565b61024a61293a565b61024a61051c36600461435e565b61295a565b60655461024a565b61024a610537366004614177565b60676020526000908152604090205481565b61024a610557366004614397565b612985565b6103a861056a36600461415e565b612c64565b61028c604051806040016040528060058152602001640312e332e360dc1b81525081565b600061059d613b3c565b6105a5610c14565b6080810151909250905060006105bd6012600a61450b565b6105d0906001600160401b03841661451a565b9050806000036105e557600019935050505090565b9392505050565b60608060606105f9611085565b60405191935091506106119083908390602001614539565b6040516020818303038152906040529250505090565b600033610635818585612f94565b60019150505b92915050565b60665460009081906001600160a01b03166391148b2761065f611067565b6040518263ffffffff1660e01b815260040161067b9190613d09565b602060405180830381865afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc91906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072291906145cf565b9050801561074b5760405162461bcd60e51b8152600401610742906145ea565b60405180910390fd5b610754336130b9565b60405180604001604052806002815260200161068760f31b8152509061078d5760405162461bcd60e51b81526004016107429190613d09565b50600080600061079d338a613154565b925092509250606554831460405180604001604052806002815260200161343960f01b815250906107e15760405162461bcd60e51b81526004016107429190613d09565b5060038160068111156107f6576107f661460f565b1480610813575060058160068111156108115761081161460f565b145b1561082b5750630a85bd0160e11b9450610c09915050565b600281600681111561083f5761083f61460f565b1460405180604001604052806002815260200161343760f01b815250906108795760405162461bcd60e51b81526004016107429190613d09565b508161088361293a565b101560405180604001604052806002815260200161035360f41b815250906108be5760405162461bcd60e51b81526004016107429190613d09565b506001600160a01b03808b1660009081526067602052604081208b90556066549091166391148b276108ee611067565b6040518263ffffffff1660e01b815260040161090a9190613d09565b602060405180830381865afa158015610927573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094b91906145a2565b90506000816001600160a01b03166380e2d3f06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b191906145a2565b90506001600160a01b0381166109d0576109cb8c856131ec565b610bf9565b6040516379bcd2d160e11b81526004810185905260009081906001600160a01b0385169063f379a5a2906024016040805180830381865afa158015610a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3d9190614625565b9092509050610a558e610a508489614649565b6131ec565b6000846001600160a01b031663581cd1106040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab991906145a2565b90506001600160a01b03811615801590610ad35750600082115b15610b9757610ae28284614649565b9250610aee84846131ec565b610af881836131ec565b7f075a2720282fdf622141dae0b048ef90a21a7e57c134c76912d19d006b3b3f6f8f84604051610b3d9291906001600160a01b03929092168252602082015260400190565b60405180910390a17fa2f0f5180dc62f2d34c8207f1d18178d31bd0de616f83636434ddf48de0ae6fa8f83604051610b8a9291906001600160a01b03929092168252602082015260400190565b60405180910390a1610bf5565b8215610bf557610ba784846131ec565b7f075a2720282fdf622141dae0b048ef90a21a7e57c134c76912d19d006b3b3f6f8f84604051610bec9291906001600160a01b03929092168252602082015260400190565b60405180910390a15b5050505b50630a85bd0160e11b9650505050505b505095945050505050565b610c1c613bbc565b610c24613b3c565b606654604080516301157a8360e01b815290516000926001600160a01b0316916301157a839160048083019260209291908290030181865afa158015610c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9291906145a2565b90506000606660009054906101000a90046001600160a01b03166001600160a01b031663a0af25606040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0d91906145a2565b90506000816001600160a01b03166315bbf0746065546040518263ffffffff1660e01b8152600401610d4191815260200190565b600060405180830381865afa158015610d5e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8691908101906146bc565b90506000836001600160a01b03166347e3168683606001516040518263ffffffff1660e01b8152600401610dbc91815260200190565b600060405180830381865afa158015610dd9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e019190810190614846565b96919550909350505050565b6000826001600160a01b038116610e2357600080fd5b306001600160a01b03821603610e3857600080fd5b6066546000906001600160a01b03166391148b27610e54611067565b6040518263ffffffff1660e01b8152600401610e709190613d09565b602060405180830381865afa158015610e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb191906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1791906145cf565b90508015610f375760405162461bcd60e51b8152600401610742906145ea565b610f428787876132cb565b506001979650505050505050565b610f58613b3c565b60665460408051630505792b60e51b815290516000926001600160a01b03169163a0af25609160048083019260209291908290030181865afa158015610fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc691906145a2565b60655460405163056efc1d60e21b81529192506001600160a01b038316916315bbf07491610ffa9160040190815260200190565b600060405180830381865afa158015611017573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261103f91908101906146bc565b91505090565b600033610635818585611058838361295a565b61106291906149eb565b612f94565b6040805180820190915260048152637075726f60e01b602082015290565b606080611090613bbc565b611098613b3c565b6110a0610c14565b90519051909590945092505050565b60665460408051637394ca7160e11b8152905133926001600160a01b03169163e72994e29160048083019260209291908290030181865afa1580156110f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111c91906145a2565b6001600160a01b0316146111685760405162461bcd60e51b8152602060048201526013602482015272139bdd08195cd8dc9bddc818dbdb9d1c9858dd606a1b6044820152606401610742565b61117a8261117583614a82565b6132e4565b5050565b6066546000906001600160a01b03166391148b2761119a611067565b6040518263ffffffff1660e01b81526004016111b69190613d09565b602060405180830381865afa1580156111d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f791906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611239573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125d91906145cf565b9050801561127d5760405162461bcd60e51b8152600401610742906145ea565b6066547ffb7778e60e898528875e31f94e3a623d6302be2aa540c7a7f5ae26fe5ee2498d906001600160a01b03166391148b276112b8611067565b6040518263ffffffff1660e01b81526004016112d49190613d09565b602060405180830381865afa1580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131591906145a2565b604051632474521560e21b8152600481018390523360248201526001600160a01b0391909116906391d1485490604401602060405180830381865afa158015611362573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138691906145cf565b6113a25760405162461bcd60e51b815260040161074290614bb5565b60665460408051637394ca7160e11b815290516000926001600160a01b03169163e72994e29160048083019260209291908290030181865afa1580156113ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141091906145a2565b604051631d42b1bf60e31b8152600481018790529091506001600160a01b0382169063ea158df890602401600060405180830381600087803b15801561145557600080fd5b505af1158015611469573d6000803e3d6000fd5b50506040518792507f11824358702d89f2293e23da6c058c3c600cd7312e29fe855817f50b4ac2e95b9150600090a25050505050565b6066546000906001600160a01b03166391148b276114bb611067565b6040518263ffffffff1660e01b81526004016114d79190613d09565b602060405180830381865afa1580156114f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151891906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561155a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157e91906145cf565b9050801561159e5760405162461bcd60e51b8152600401610742906145ea565b6066546000906001600160a01b03166391148b276115ba611067565b6040518263ffffffff1660e01b81526004016115d69190613d09565b602060405180830381865afa1580156115f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161791906145a2565b6040516311afe75f60e11b81523360048201529091506000906001600160a01b0383169063235fcebe90602401602060405180830381865afa158015611661573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168591906145cf565b9050806116c25760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b6044820152606401610742565b6116cc8686613520565b505050505050565b6066546000906001600160a01b03166391148b276116f0611067565b6040518263ffffffff1660e01b815260040161170c9190613d09565b602060405180830381865afa158015611729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174d91906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561178f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b391906145cf565b905080156117d35760405162461bcd60e51b8152600401610742906145ea565b6066546000906001600160a01b03166391148b276117ef611067565b6040518263ffffffff1660e01b815260040161180b9190613d09565b602060405180830381865afa158015611828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184c91906145a2565b90506000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561188e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b291906145a2565b90506001600160a01b03811633146119005760405162461bcd60e51b81526020600482015260116024820152702737ba103330b1ba37b93c9037bbb732b960791b6044820152606401610742565b60665460408051634be4e3dd60e01b815290516000926001600160a01b031691634be4e3dd9160048083019260209291908290030181865afa15801561194a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196e91906145a2565b905060008061197d8389613154565b9093509150600290508160068111156119985761199861460f565b1460405180604001604052806002815260200161343760f01b815250906119d25760405162461bcd60e51b81526004016107429190613d09565b506119dd3383613520565b6040516323b872dd60e01b8152306004820152336024820152604481018990526001600160a01b038416906323b872dd90606401600060405180830381600087803b158015611a2b57600080fd5b505af1158015611a3f573d6000803e3d6000fd5b505050505050505050505050565b6066546000906001600160a01b03166391148b27611a69611067565b6040518263ffffffff1660e01b8152600401611a859190613d09565b602060405180830381865afa158015611aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac691906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2c91906145cf565b90508015611b4c5760405162461bcd60e51b8152600401610742906145ea565b611b5784338561366b565b611b618484613520565b50505050565b6000602082013581611b7b6012600a61450b565b905080611b888184614bdd565b611b92919061451a565b8214604051806040016040528060028152602001610d4d60f21b81525090611bcd5760405162461bcd60e51b81526004016107429190613d09565b506066546000906001600160a01b03166391148b27611bea611067565b6040518263ffffffff1660e01b8152600401611c069190613d09565b602060405180830381865afa158015611c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4791906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cad91906145cf565b90508015611ccd5760405162461bcd60e51b8152600401610742906145ea565b60665460408051637394ca7160e11b815290516000926001600160a01b03169163e72994e29160048083019260209291908290030181865afa158015611d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3b91906145a2565b9050611d4b818860200135610627565b604051806040016040528060028152602001611a1b60f11b81525090611d845760405162461bcd60e51b81526004016107429190613d09565b50604051630aeb2d2360e41b81526001600160a01b0382169063aeb2d23090611db39033908b90600401614e0c565b6020604051808303816000875af1158015611dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df69190614e30565b955085336001600160a01b03167fab868181315a0726750cc674eb8fd78793b34ec9de4e55b2a811172dbe6450ce89604051611e329190614e49565b60405180910390a35050505050919050565b6066546000906001600160a01b03166391148b27611e60611067565b6040518263ffffffff1660e01b8152600401611e7c9190613d09565b602060405180830381865afa158015611e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebd91906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2391906145cf565b90508015611f435760405162461bcd60e51b8152600401610742906145ea565b6066546000906001600160a01b03166391148b27611f5f611067565b6040518263ffffffff1660e01b8152600401611f7b9190613d09565b602060405180830381865afa158015611f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbc91906145a2565b6040516311afe75f60e11b81523360048201529091506000906001600160a01b0383169063235fcebe90602401602060405180830381865afa158015612006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202a91906145cf565b9050806120675760405162461bcd60e51b815260206004820152600b60248201526a139bdd08185b1b1bddd95960aa1b6044820152606401610742565b6116cc86866131ec565b606080606061207e611085565b60405191935091506106119083908390602001614e5c565b6066546000906001600160a01b03166391148b276120b2611067565b6040518263ffffffff1660e01b81526004016120ce9190613d09565b602060405180830381865afa1580156120eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210f91906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612151573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217591906145cf565b905080156121955760405162461bcd60e51b8152600401610742906145ea565b6066547ffb7778e60e898528875e31f94e3a623d6302be2aa540c7a7f5ae26fe5ee2498d906001600160a01b03166391148b276121d0611067565b6040518263ffffffff1660e01b81526004016121ec9190613d09565b602060405180830381865afa158015612209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222d91906145a2565b604051632474521560e21b8152600481018390523360248201526001600160a01b0391909116906391d1485490604401602060405180830381865afa15801561227a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229e91906145cf565b6122ba5760405162461bcd60e51b815260040161074290614bb5565b60665460408051637394ca7160e11b815290516000926001600160a01b03169163e72994e29160048083019260209291908290030181865afa158015612304573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232891906145a2565b60405163075f2da360e51b8152600481018790529091506001600160a01b0382169063ebe5b46090602401600060405180830381600087803b15801561236d57600080fd5b505af1158015612381573d6000803e3d6000fd5b50506040518792507f57e4027df666ec477f55d7dd87fb5a098836de7eaf475ba43d684b5d438d238b9150600090a25050505050565b600033816123c5828661295a565b9050838110156124255760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610742565b6124328286868403612f94565b506001949350505050565b6000826001600160a01b03811661245357600080fd5b306001600160a01b0382160361246857600080fd5b6066546000906001600160a01b03166391148b27612484611067565b6040518263ffffffff1660e01b81526004016124a09190613d09565b602060405180830381865afa1580156124bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e191906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612523573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254791906145cf565b905080156125675760405162461bcd60e51b8152600401610742906145ea565b61257186866136df565b5060019695505050505050565b600061258a60016136ed565b905080156125a2576000805461ff0019166101001790555b6125ac858561376d565b6065839055606680546001600160a01b0319166001600160a01b0384161790558015612612576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6066546000906001600160a01b03166391148b27612635611067565b6040518263ffffffff1660e01b81526004016126519190613d09565b602060405180830381865afa15801561266e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269291906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f891906145cf565b905080156127185760405162461bcd60e51b8152600401610742906145ea565b6066547ff70ccd5004a2a6f964f044c0095454c529799f8602238d52b5a197af351dd419906001600160a01b03166391148b27612753611067565b6040518263ffffffff1660e01b815260040161276f9190613d09565b602060405180830381865afa15801561278c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b091906145a2565b604051632474521560e21b8152600481018390523360248201526001600160a01b0391909116906391d1485490604401602060405180830381865afa1580156127fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282191906145cf565b61283d5760405162461bcd60e51b815260040161074290614bb5565b60665460408051637394ca7160e11b815290516000926001600160a01b03169163e72994e29160048083019260209291908290030181865afa158015612887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ab91906145a2565b6040516392ad01fd60e01b8152600481018790529091506001600160a01b038216906392ad01fd90602401600060405180830381600087803b1580156128f057600080fd5b505af1158015612904573d6000803e3d6000fd5b50506040518792507f8f7beb6efa236b725c90af1831975edbd62f2792f52fdb645ded13759232085d9150600090a25050505050565b600080612945610593565b905061295060355490565b61103f9082614649565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b600081816129956012600a61450b565b9050806129a28184614bdd565b6129ac919061451a565b8214604051806040016040528060028152602001610d4d60f21b815250906129e75760405162461bcd60e51b81526004016107429190613d09565b506066546000906001600160a01b03166391148b27612a04611067565b6040518263ffffffff1660e01b8152600401612a209190613d09565b602060405180830381865afa158015612a3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6191906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ac791906145cf565b90508015612ae75760405162461bcd60e51b8152600401610742906145ea565b60665460408051637394ca7160e11b815290516000926001600160a01b03169163e72994e29160048083019260209291908290030181865afa158015612b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5591906145a2565b9050612b618188610627565b604051806040016040528060028152602001611a1b60f11b81525090612b9a5760405162461bcd60e51b81526004016107429190613d09565b5060405163c346a8bf60e01b81526001600160a01b0382169063c346a8bf90612bcd9033908b908e908e90600401614ea9565b6020604051808303816000875af1158015612bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c109190614e30565b955085336001600160a01b03167f64abd27c2f173f29d68e3c4d0922caa80fe66344f802fd6a064cd9ae298db307898c8c604051612c5093929190614ed1565b60405180910390a350505050509392505050565b6066546000906001600160a01b03166391148b27612c80611067565b6040518263ffffffff1660e01b8152600401612c9c9190613d09565b602060405180830381865afa158015612cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdd91906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d4391906145cf565b90508015612d635760405162461bcd60e51b8152600401610742906145ea565b6066547ff70ccd5004a2a6f964f044c0095454c529799f8602238d52b5a197af351dd419906001600160a01b03166391148b27612d9e611067565b6040518263ffffffff1660e01b8152600401612dba9190613d09565b602060405180830381865afa158015612dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfb91906145a2565b604051632474521560e21b8152600481018390523360248201526001600160a01b0391909116906391d1485490604401602060405180830381865afa158015612e48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e6c91906145cf565b612e885760405162461bcd60e51b815260040161074290614bb5565b60665460408051637394ca7160e11b815290516000926001600160a01b03169163e72994e29160048083019260209291908290030181865afa158015612ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef691906145a2565b6040516304314a1d60e51b8152600481018790529091506001600160a01b0382169063862943a090602401600060405180830381600087803b158015612f3b57600080fd5b505af1158015612f4f573d6000803e3d6000fd5b50506040518792507f8baa1509b9f6c83973f788904506386c5b2b93480f289aeafd9f43f9df1c94a89150600090a25050505050565b6001600160a01b03163b151590565b6001600160a01b038316612ff65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610742565b6001600160a01b0382166130575760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610742565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60665460408051634be4e3dd60e01b815290516000926001600160a01b031691634be4e3dd9160048083019260209291908290030181865afa158015613103573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312791906145a2565b6001600160a01b0316826001600160a01b03160361314757506001919050565b506000919050565b919050565b600080600080600080876001600160a01b031663dff35e83886040518263ffffffff1660e01b815260040161318b91815260200190565b606060405180830381865afa1580156131a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131cc9190614eeb565b925092509250826131dc836137ff565b9096509450925050509250925092565b6001600160a01b0382166132425760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610742565b806035600082825461325491906149eb565b90915550506001600160a01b038216600090815260336020526040812080548392906132819084906149eb565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6000336132d985828561366b565b612432858585613817565b6066546000906001600160a01b03166391148b27613300611067565b6040518263ffffffff1660e01b815260040161331c9190613d09565b602060405180830381865afa158015613339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335d91906145a2565b90506000816001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561339f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c391906145cf565b905080156133e35760405162461bcd60e51b8152600401610742906145ea565b60006133f4338560200151876139e5565b6040805160018082528183019092529192506000919060208083019080368337019050509050818160008151811061342e5761342e614f28565b60209081029190910181019190915260665460408051631bb5aee760e11b815290516001600160a01b039092169263376b5dce926004808401938290030181865afa158015613481573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a591906145a2565b6001600160a01b031663cc91e5e98787846040518463ffffffff1660e01b81526004016134d493929190614f79565b6020604051808303816000875af11580156134f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135179190614e30565b50505050505050565b6001600160a01b0382166135805760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610742565b6001600160a01b038216600090815260336020526040902054818110156135f45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610742565b6001600160a01b0383166000908152603360205260408120838303905560358054849290613623908490614649565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016130ac565b505050565b6000613677848461295a565b90506000198114611b6157818110156136d25760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610742565b611b618484848403612f94565b600033610635818585613817565b60008054610100900460ff161561372c578160ff1660011480156137105750303b155b6131475760405162461bcd60e51b81526004016107429061508e565b60005460ff8084169116106137535760405162461bcd60e51b81526004016107429061508e565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166137d85760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610742565b81516137eb906036906020850190613c18565b508051613666906037906020840190613c18565b600061380d6012600a61450b565b61063b908361451a565b6001600160a01b03831661387b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610742565b6001600160a01b0382166138dd5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610742565b6001600160a01b038316600090815260336020526040902054818110156139555760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610742565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061398c9084906149eb565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516139d891815260200190565b60405180910390a3611b61565b60006139f18484613520565b60665460408051631bb5aee760e11b815290516000926001600160a01b03169163376b5dce9160048083019260209291908290030181865afa158015613a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5f91906145a2565b6065546040516313ef24f760e11b81526001600160a01b038681166004830152602482019290925260448101879052600060648201529192508216906327de49ee906084016020604051808303816000875af1158015613ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ae79190614e30565b604080516001600160a01b0386168152602081018790529081018290529092507fb3775f672e1adf43bf7834b692675bfee4db72f83e42da8cff694ca295a89eca9060600160405180910390a1509392505050565b6040518061018001604052806060815260200160006001600160401b0316815260200160006001600160401b031681526020016000815260200160006001600160401b0316815260200160001515815260200160001515815260200160608152602001606081526020016060815260200160608152602001606081525090565b60405180610140016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160006001600160a01b031681525090565b828054613c24906150dc565b90600052602060002090601f016020900481019282613c465760008555613c8c565b82601f10613c5f57805160ff1916838001178555613c8c565b82800160010185558215613c8c579182015b82811115613c8c578251825591602001919060010190613c71565b50613c98929150613c9c565b5090565b5b80821115613c985760008155600101613c9d565b60005b83811015613ccc578181015183820152602001613cb4565b83811115611b615750506000910152565b60008151808452613cf5816020860160208601613cb1565b601f01601f19169290920160200192915050565b6020815260006105e56020830184613cdd565b6001600160a01b0381168114613d3157600080fd5b50565b803561314f81613d1c565b60008060408385031215613d5257600080fd5b8235613d5d81613d1c565b946020939093013593505050565b600080600080600060808688031215613d8357600080fd5b8535613d8e81613d1c565b94506020860135613d9e81613d1c565b93506040860135925060608601356001600160401b0380821115613dc157600080fd5b818801915088601f830112613dd557600080fd5b813581811115613de457600080fd5b896020828501011115613df657600080fd5b9699959850939650602001949392505050565b60006101808251818552613e1f82860182613cdd565b9150506020830151613e3c60208601826001600160401b03169052565b506040830151613e5760408601826001600160401b03169052565b50606083015160608501526080830151613e7c60808601826001600160401b03169052565b5060a0830151613e9060a086018215159052565b5060c0830151613ea460c086018215159052565b5060e083015184820360e0860152613ebc8282613cdd565b9150506101008084015185830382870152613ed78382613cdd565b925050506101208084015185830382870152613ef38382613cdd565b925050506101408084015185830382870152613f0f8382613cdd565b925050506101608084015185830382870152613f2b8382613cdd565b9695505050505050565b6040815260008351610140806040850152613f54610180850183613cdd565b91506020860151603f1980868503016060870152613f728483613cdd565b93506040880151915080868503016080870152613f8f8483613cdd565b935060608801519150808685030160a0870152613fac8483613cdd565b935060808801519150808685030160c0870152613fc98483613cdd565b935060a08801519150808685030160e0870152613fe68483613cdd565b935060c088015191506101008187860301818801526140058584613cdd565b945060e089015192506101208288870301818901526140248685613cdd565b9550818a0151935082888703018589015261403f8685613cdd565b9550808a01519450505050506140616101608501826001600160a01b03169052565b5082810360208401526140748185613e09565b95945050505050565b60008060006060848603121561409257600080fd5b833561409d81613d1c565b925060208401356140ad81613d1c565b929592945050506040919091013590565b6020815260006105e56020830184613e09565b6040815260006140e46040830185613cdd565b82810360208401526140748185613cdd565b6000610140828403121561410957600080fd5b50919050565b6000806040838503121561412257600080fd5b823561412d81613d1c565b915060208301356001600160401b0381111561414857600080fd5b614154858286016140f6565b9150509250929050565b60006020828403121561417057600080fd5b5035919050565b60006020828403121561418957600080fd5b81356105e581613d1c565b6000602082840312156141a657600080fd5b81356001600160401b038111156141bc57600080fd5b6141c8848285016140f6565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60405161018081016001600160401b0381118282101715614209576142096141d0565b60405290565b60405161014081016001600160401b0381118282101715614209576142096141d0565b604051601f8201601f191681016001600160401b038111828210171561425a5761425a6141d0565b604052919050565b60006001600160401b0382111561427b5761427b6141d0565b50601f01601f191660200190565b600082601f83011261429a57600080fd5b81356142ad6142a882614262565b614232565b8181528460208386010111156142c257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156142f557600080fd5b84356001600160401b038082111561430c57600080fd5b61431888838901614289565b9550602087013591508082111561432e57600080fd5b5061433b87828801614289565b93505060408501359150606085013561435381613d1c565b939692955090935050565b6000806040838503121561437157600080fd5b823561437c81613d1c565b9150602083013561438c81613d1c565b809150509250929050565b6000806000604084860312156143ac57600080fd5b83356001600160401b03808211156143c357600080fd5b818601915086601f8301126143d757600080fd5b8135818111156143e657600080fd5b8760208260051b85010111156143fb57600080fd5b6020928301989097509590910135949350505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561446257816000190482111561444857614448614411565b8085161561445557918102915b93841c939080029061442c565b509250929050565b6000826144795750600161063b565b816144865750600061063b565b816001811461449c57600281146144a6576144c2565b600191505061063b565b60ff8411156144b7576144b7614411565b50506001821b61063b565b5060208310610133831016604e8410600b84101617156144e5575081810a61063b565b6144ef8383614427565b806000190482111561450357614503614411565b029392505050565b60006105e560ff84168361446a565b600081600019048311821515161561453457614534614411565b500290565b75546f7563616e2050726f746f636f6c3a2054434f322d60501b81526000835161456a816016850160208801613cb1565b602d60f81b601691840191820152835161458b816017840160208801613cb1565b01601701949350505050565b805161314f81613d1c565b6000602082840312156145b457600080fd5b81516105e581613d1c565b8051801515811461314f57600080fd5b6000602082840312156145e157600080fd5b6105e5826145bf565b6020808252600b908201526a2830bab9b2b2102a21a79960a91b604082015260600190565b634e487b7160e01b600052602160045260246000fd5b6000806040838503121561463857600080fd5b505080516020909101519092909150565b60008282101561465b5761465b614411565b500390565b600082601f83011261467157600080fd5b815161467f6142a882614262565b81815284602083860101111561469457600080fd5b6141c8826020830160208701613cb1565b80516001600160401b038116811461314f57600080fd5b6000602082840312156146ce57600080fd5b81516001600160401b03808211156146e557600080fd5b9083019061018082860312156146fa57600080fd5b6147026141e6565b82518281111561471157600080fd5b61471d87828601614660565b82525061472c602084016146a5565b602082015261473d604084016146a5565b604082015260608301516060820152614758608084016146a5565b608082015261476960a084016145bf565b60a082015261477a60c084016145bf565b60c082015260e08301518281111561479157600080fd5b61479d87828601614660565b60e08301525061010080840151838111156147b757600080fd5b6147c388828701614660565b82840152505061012080840151838111156147dd57600080fd5b6147e988828701614660565b828401525050610140808401518381111561480357600080fd5b61480f88828701614660565b828401525050610160808401518381111561482957600080fd5b61483588828701614660565b918301919091525095945050505050565b60006020828403121561485857600080fd5b81516001600160401b038082111561486f57600080fd5b90830190610140828603121561488457600080fd5b61488c61420f565b82518281111561489b57600080fd5b6148a787828601614660565b8252506020830151828111156148bc57600080fd5b6148c887828601614660565b6020830152506040830151828111156148e057600080fd5b6148ec87828601614660565b60408301525060608301518281111561490457600080fd5b61491087828601614660565b60608301525060808301518281111561492857600080fd5b61493487828601614660565b60808301525060a08301518281111561494c57600080fd5b61495887828601614660565b60a08301525060c08301518281111561497057600080fd5b61497c87828601614660565b60c08301525060e08301518281111561499457600080fd5b6149a087828601614660565b60e08301525061010080840151838111156149ba57600080fd5b6149c688828701614660565b82840152505061012091506149dc828401614597565b91810191909152949350505050565b600082198211156149fe576149fe614411565b500190565b600082601f830112614a1457600080fd5b813560206001600160401b03821115614a2f57614a2f6141d0565b8160051b614a3e828201614232565b9283528481018201928281019087851115614a5857600080fd5b83870192505b84831015614a7757823582529183019190830190614a5e565b979650505050505050565b60006101408236031215614a9557600080fd5b614a9d61420f565b82356001600160401b0380821115614ab457600080fd5b614ac036838701614a03565b8352602085013560208401526040850135915080821115614ae057600080fd5b614aec36838701614289565b6040840152614afd60608601613d34565b60608401526080850135915080821115614b1657600080fd5b614b2236838701614289565b608084015260a0850135915080821115614b3b57600080fd5b614b4736838701614289565b60a084015260c0850135915080821115614b6057600080fd5b614b6c36838701614289565b60c084015260e0850135915080821115614b8557600080fd5b50614b9236828601614289565b60e083015250610100838101359082015261012092830135928101929092525090565b6020808252600e908201526d496e76616c69642061636365737360901b604082015260600190565b600082614bfa57634e487b7160e01b600052601260045260246000fd5b500490565b6000808335601e19843603018112614c1657600080fd5b83016020810192503590506001600160401b03811115614c3557600080fd5b8060051b3603821315614c4757600080fd5b9250929050565b81835260006001600160fb1b03831115614c6757600080fd5b8260051b8083602087013760009401602001938452509192915050565b6000808335601e19843603018112614c9b57600080fd5b83016020810192503590506001600160401b03811115614cba57600080fd5b803603821315614c4757600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000610140614d018384614bff565b828652614d118387018284614c4e565b9250505060208301356020850152614d2c6040840184614c84565b8583036040870152614d3f838284614cc9565b92505050614d4f60608401613d34565b6001600160a01b03166060850152614d6a6080840184614c84565b8583036080870152614d7d838284614cc9565b92505050614d8e60a0840184614c84565b85830360a0870152614da1838284614cc9565b92505050614db260c0840184614c84565b85830360c0870152614dc5838284614cc9565b92505050614dd660e0840184614c84565b85830360e0870152614de9838284614cc9565b610100868101359088015261012095860135959096019490945250929392505050565b6001600160a01b03831681526040602082018190526000906141c890830184614cf2565b600060208284031215614e4257600080fd5b5051919050565b6020815260006105e56020830184614cf2565b6454434f322d60d81b815260008351614e7c816005850160208801613cb1565b602d60f81b6005918401918201528351614e9d816006840160208801613cb1565b01600601949350505050565b60018060a01b0385168152836020820152606060408201526000613f2b606083018486614c4e565b838152604060208201526000614074604083018486614c4e565b600080600060608486031215614f0057600080fd5b8351925060208401519150604084015160078110614f1d57600080fd5b809150509250925092565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015614f6e57815187529582019590820190600101614f52565b509495945050505050565b60018060a01b03841681526060602082015260008351610140806060850152614fa66101a0850183614f3e565b9150602086015160808501526040860151605f19808685030160a0870152614fce8483613cdd565b935060608801519150614fec60c08701836001600160a01b03169052565b60808801519150808685030160e08701526150078483613cdd565b935060a088015191506101008187860301818801526150268584613cdd565b945060c089015192506101208288870301818901526150458685613cdd565b955060e08a015193508288870301858901526150618685613cdd565b9550818a0151610160890152808a015161018089015250505050508281036040840152613f2b8185614f3e565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600181811c908216806150f057607f821691505b60208210810361410957634e487b7160e01b600052602260045260246000fdfea26469706673582212205ba803f36362176c2e0547567b004bfef84dc90903214b9565f196862f77bff964736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "bridgeBurn(address,uint256)": {
        "params": {
          "account": "The user for whom to burn TCO2",
          "amount": "The amount to burn."
        }
      },
      "bridgeMint(address,uint256)": {
        "params": {
          "account": "The user for whom to mint TCO2",
          "amount": "The amount to mint."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "account": "The user for whom to burn TCO2",
          "amount": "The amount to burn"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "defractionalize(uint256)": {
        "params": {
          "tokenId": "The batch NFT to defractionalize from the TCO2"
        }
      },
      "finalizeDetokenization(uint256)": {
        "details": "Callable only by a detokenizer.",
        "params": {
          "requestId": "The id of the request to finalize."
        }
      },
      "finalizeRetirement(uint256)": {
        "details": "Callable only by a retirement approver.",
        "params": {
          "requestId": "The ID of the request to finalize."
        }
      },
      "getAttributes()": {
        "details": "Function to get corresponding attributes from the CarbonProjects"
      },
      "getDepositCap()": {
        "details": "Returns the cap for TCO2s based on `totalVintageQuantity` Returns `~unlimited` if the value for the vintage is not set"
      },
      "getGlobalProjectVintageIdentifiers()": {
        "details": "Helper function to retrieve data fragments for `name()` and `symbol()`"
      },
      "getRemaining()": {
        "details": "Returns the remaining space in TCO2 contract before hitting the cap"
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Function is called with `operator` as `msg.sender` in a reference implementation by OZ `from` is the previous owner, not necessarily the same as operator. The hook checks if NFT collection is whitelisted and next if attributes are matching this ERC20 contract"
      },
      "requestDetokenization(uint256[],uint256)": {
        "details": "This function is permissionless and can be called by anyone",
        "params": {
          "amount": "The amount of TCO2 to detokenize, must be greater than zero and equal to or smaller than the total amount of the batches (and also greater then the total amount of all the batches except the last one)",
          "tokenIds": "Token IDs of one or more batches to detokenize"
        },
        "returns": {
          "requestId": "The ID of the request in the escrow contract"
        }
      },
      "requestRetirement((uint256[],uint256,string,address,string,string,string,string,uint256,uint256))": {
        "details": "This function is permissionless and can be called by anyone",
        "params": {
          "params": "The parameters of the retirement request:     uint256[] tokenIds One or more batches to retire     uint256 amount The amount of TCO2 to retire, must be greater than zero and equal to or smaller than the total amount of the batches (and also greater then the total amount of all the batches except the last one)     string retiringEntityString The name of the retiring entity     address beneficiary The address of the beneficiary of the retirement     string beneficiaryString The name of the beneficiary of the retirement     string retirementMessage A message to be included in the retirement certificate     string beneficiaryLocation The location of the beneficiary of the retirement     string consumptionCountryCode The country code of the consumption location     uint256 consumptionPeriodStart The start of the consumption period, in seconds since the epoch     uint256 consumptionPeriodEnd The end of the consumption period, in seconds since the epoch"
        },
        "returns": {
          "requestId": "The ID of the request in the escrow contract"
        }
      },
      "revertDetokenization(uint256)": {
        "params": {
          "requestId": "The request id in the escrow contract that tracks the detokenization request"
        }
      },
      "revertRetirement(uint256)": {
        "params": {
          "requestId": "The request id in the escrow contract that tracks the retirement request"
        }
      },
      "standardRegistry()": {
        "details": "this must be overridden in the child contract"
      },
      "standardRegistryDecimals()": {
        "details": "this must be overridden in the child contract"
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      }
    },
    "stateVariables": {
      "VERSION": {
        "details": "Version-related parameters. VERSION keeps track of production releases. VERSION_RELEASE_CANDIDATE keeps track of iterations of a VERSION in our staging environment."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bridgeBurn(address,uint256)": {
        "notice": "Burn TCO2 on behalf of a user. msg.sender does not require approval by the account for the burn to be successfull. This function is exposed so it can be utilized in cross-chain transfers of TCO2 where we want to burn the TCO2 in the source chain but not retire it."
      },
      "bridgeMint(address,uint256)": {
        "notice": "Mint TCO2 on behalf of a user. This function is exposed to be called by authorized message bridge systems and utilized for cross-chain transfers of TCO2 where we want to mint the TCO2 in the source chain."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn TCO2 on behalf of a user. msg.sender needs to be approved by the account for the burn to be successfull. This function is exposed so it can be utilized to burn credits without retiring them (eg. dispose HFC-23)."
      },
      "defractionalize(uint256)": {
        "notice": "Defractionalize batch NFT by burning the amount of TCO2 from the sender and transfer the batch NFT that was selected to the sender. The only valid sender currently is the TCO2 factory owner."
      },
      "finalizeDetokenization(uint256)": {
        "notice": "Finalize a detokenization request by burning its amount of TCO2. In case the amount requested is smaller than the total amount of TCO2 in the batches, the last batch is split into two new batches, one that balances the total to be the amount requested and the other with the remaining amount."
      },
      "finalizeRetirement(uint256)": {
        "notice": "Finalize a retirement request by burning its amount of TCO2 and minting a certificate for the beneficiary. In case the amount requested is smaller than the total amount of TCO2 in the batches, the last batch is split into two new batches, one that balances the total to be the amount requested and the other with the remaining amount."
      },
      "name()": {
        "notice": "Token name getter overriden to return the a name based on the carbon project data"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Receive hook to fractionalize Batch-NFTs into ERC20's"
      },
      "requestDetokenization(uint256[],uint256)": {
        "notice": "Request a detokenization of batch-NFTs. The amount of TCO2 to detokenize will be transferred from the user to an escrow contract."
      },
      "requestRetirement((uint256[],uint256,string,address,string,string,string,string,uint256,uint256))": {
        "notice": "Request a retirement of TCO2s from batch-NFTs. The amount of TCO2s to retire will be transferred from the user to an escrow contract."
      },
      "revertDetokenization(uint256)": {
        "notice": "Revert a detokenization request"
      },
      "revertRetirement(uint256)": {
        "notice": "Revert a retirement request"
      },
      "standardRegistry()": {
        "notice": "Return the name of the registry that this factory is enabling to tokenize, eg., verra"
      },
      "standardRegistryDecimals()": {
        "notice": "Return the minimum precision supported by the registry"
      },
      "symbol()": {
        "notice": "Token symbol getter overriden to return the a symbol based on the carbon project data"
      }
    },
    "notice": "The PuroToucanCarbonOffsets contract is a specific implementation for Puro's logic.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2390,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2393,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5494,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2850,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2856,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2858,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 2860,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 2862,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 3441,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 16619,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "_projectVintageTokenId",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 16621,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "contractRegistry",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 16625,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "minterToId",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16630,
        "contract": "contracts/PuroToucanCarbonOffsets.sol:PuroToucanCarbonOffsets",
        "label": "retiredAmount",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}